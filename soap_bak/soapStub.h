/* soapStub.h
   Generated by gSOAP 2.8.124 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_wsa5	"http://www.w3.org/2005/08/addressing"
#define SOAP_NAMESPACE_OF_tds	"http://www.onvif.org/ver10/device/wsdl"
#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 208124
# error "GSOAP VERSION 208124 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* wsa5.h:96 */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (19)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType {
	http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0
};
#endif

/* wsa5.h:104 */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (20)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType {
	wsa5__InvalidAddressingHeader = 0,
	wsa5__InvalidAddress = 1,
	wsa5__InvalidEPR = 2,
	wsa5__InvalidCardinality = 3,
	wsa5__MissingAddressInEPR = 4,
	wsa5__DuplicateMessageID = 5,
	wsa5__ActionMismatch = 6,
	wsa5__MessageAddressingHeaderRequired = 7,
	wsa5__DestinationUnreachable = 8,
	wsa5__ActionNotSupported = 9,
	wsa5__EndpointUnavailable = 10
};
#endif

/* wsa5.h:254 */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (40)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter {
	_wsa5__IsReferenceParameter__false = 0,
	_wsa5__IsReferenceParameter__true = 1
};
#endif

/* onvif.h:1009 */
#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (404)
/* tt:ScopeDefinition */
enum tt__ScopeDefinition {
	tt__ScopeDefinition__Fixed = 0,
	tt__ScopeDefinition__Configurable = 1
};
#endif

/* onvif.h:1018 */
#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (405)
/* tt:DiscoveryMode */
enum tt__DiscoveryMode {
	tt__DiscoveryMode__Discoverable = 0,
	tt__DiscoveryMode__NonDiscoverable = 1
};
#endif

/* onvif.h:1032 */
#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (407)
/* tt:Duplex */
enum tt__Duplex {
	tt__Duplex__Full = 0,
	tt__Duplex__Half = 1
};
#endif

/* onvif.h:1049 */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (409)
/* tt:IPv6DHCPConfiguration */
enum tt__IPv6DHCPConfiguration {
	tt__IPv6DHCPConfiguration__Auto = 0,
	tt__IPv6DHCPConfiguration__Stateful = 1,
	tt__IPv6DHCPConfiguration__Stateless = 2,
	tt__IPv6DHCPConfiguration__Off = 3
};
#endif

/* onvif.h:1060 */
#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (410)
/* tt:NetworkProtocolType */
enum tt__NetworkProtocolType {
	tt__NetworkProtocolType__HTTP = 0,
	tt__NetworkProtocolType__HTTPS = 1,
	tt__NetworkProtocolType__RTSP = 2
};
#endif

/* onvif.h:1070 */
#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (411)
/* tt:NetworkHostType */
enum tt__NetworkHostType {
	tt__NetworkHostType__IPv4 = 0,
	tt__NetworkHostType__IPv6 = 1,
	tt__NetworkHostType__DNS = 2
};
#endif

/* onvif.h:1092 */
#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (415)
/* tt:IPType */
enum tt__IPType {
	tt__IPType__IPv4 = 0,
	tt__IPType__IPv6 = 1
};
#endif

/* onvif.h:1107 */
#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (417)
/* tt:IPAddressFilterType */
enum tt__IPAddressFilterType {
	tt__IPAddressFilterType__Allow = 0,
	tt__IPAddressFilterType__Deny = 1
};
#endif

/* onvif.h:1116 */
#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (418)
/* tt:DynamicDNSType */
enum tt__DynamicDNSType {
	tt__DynamicDNSType__NoUpdate = 0,
	tt__DynamicDNSType__ClientUpdates = 1,
	tt__DynamicDNSType__ServerUpdates = 2
};
#endif

/* onvif.h:1131 */
#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (420)
/* tt:Dot11StationMode */
enum tt__Dot11StationMode {
	tt__Dot11StationMode__Ad_hoc = 0,
	tt__Dot11StationMode__Infrastructure = 1,
	tt__Dot11StationMode__Extended = 2
};
#endif

/* onvif.h:1141 */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (421)
/* tt:Dot11SecurityMode */
enum tt__Dot11SecurityMode {
	tt__Dot11SecurityMode__None = 0,
	tt__Dot11SecurityMode__WEP = 1,
	tt__Dot11SecurityMode__PSK = 2,
	tt__Dot11SecurityMode__Dot1X = 3,
	tt__Dot11SecurityMode__Extended = 4
};
#endif

/* onvif.h:1153 */
#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (422)
/* tt:Dot11Cipher */
enum tt__Dot11Cipher {
	tt__Dot11Cipher__CCMP = 0,
	tt__Dot11Cipher__TKIP = 1,
	tt__Dot11Cipher__Any = 2,
	tt__Dot11Cipher__Extended = 3
};
#endif

/* onvif.h:1174 */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (425)
/* tt:Dot11SignalStrength */
enum tt__Dot11SignalStrength {
	tt__Dot11SignalStrength__None = 0,
	tt__Dot11SignalStrength__Very_x0020Bad = 1,
	tt__Dot11SignalStrength__Bad = 2,
	tt__Dot11SignalStrength__Good = 3,
	tt__Dot11SignalStrength__Very_x0020Good = 4,
	tt__Dot11SignalStrength__Extended = 5
};
#endif

/* onvif.h:1187 */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (426)
/* tt:Dot11AuthAndMangementSuite */
enum tt__Dot11AuthAndMangementSuite {
	tt__Dot11AuthAndMangementSuite__None = 0,
	tt__Dot11AuthAndMangementSuite__Dot1X = 1,
	tt__Dot11AuthAndMangementSuite__PSK = 2,
	tt__Dot11AuthAndMangementSuite__Extended = 3
};
#endif

/* onvif.h:1198 */
#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (427)
/* tt:CapabilityCategory */
enum tt__CapabilityCategory {
	tt__CapabilityCategory__All = 0,
	tt__CapabilityCategory__Analytics = 1,
	tt__CapabilityCategory__Device = 2,
	tt__CapabilityCategory__Events = 3,
	tt__CapabilityCategory__Imaging = 4,
	tt__CapabilityCategory__Media = 5,
	tt__CapabilityCategory__PTZ = 6
};
#endif

/* onvif.h:1216 */
#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (428)
/* tt:SystemLogType */
enum tt__SystemLogType {
	tt__SystemLogType__System = 0,
	tt__SystemLogType__Access = 1
};
#endif

/* onvif.h:1237 */
#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (429)
/* tt:FactoryDefaultType */
enum tt__FactoryDefaultType {
	tt__FactoryDefaultType__Hard = 0,
	tt__FactoryDefaultType__Soft = 1
};
#endif

/* onvif.h:1254 */
#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (430)
/* tt:SetDateTimeType */
enum tt__SetDateTimeType {
	tt__SetDateTimeType__Manual = 0,
	tt__SetDateTimeType__NTP = 1
};
#endif

/* onvif.h:1271 */
#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (431)
/* tt:UserLevel */
enum tt__UserLevel {
	tt__UserLevel__Administrator = 0,
	tt__UserLevel__Operator = 1,
	tt__UserLevel__User = 2,
	tt__UserLevel__Anonymous = 3,
	tt__UserLevel__Extended = 4
};
#endif

/* onvif.h:1283 */
#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (432)
/* tt:RelayLogicalState */
enum tt__RelayLogicalState {
	tt__RelayLogicalState__active = 0,
	tt__RelayLogicalState__inactive = 1
};
#endif

/* onvif.h:1292 */
#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (433)
/* tt:RelayIdleState */
enum tt__RelayIdleState {
	tt__RelayIdleState__closed = 0,
	tt__RelayIdleState__open = 1
};
#endif

/* onvif.h:1301 */
#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (434)
/* tt:RelayMode */
enum tt__RelayMode {
	tt__RelayMode__Monostable = 0,
	tt__RelayMode__Bistable = 1
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* onvif.h:191 */
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (62)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

struct _xop__Include;	/* xop.h:59 */
struct wsa5__EndpointReferenceType;	/* wsa5.h:65 */
struct wsa5__ReferenceParametersType;	/* wsa5.h:68 */
struct wsa5__MetadataType;	/* wsa5.h:71 */
struct wsa5__ProblemActionType;	/* wsa5.h:86 */
struct wsa5__RelatesToType;	/* wsa5.h:74 */
struct chan__ChannelInstanceType;	/* wsa5.h:260 */
class xsd__anyType;	/* onvif.h:181 */
struct SOAP_ENV__Envelope;	/* onvif.h:188 */
class xsd__base64Binary;	/* onvif.h:194 */
class xsd__hexBinary;	/* onvif.h:202 */
class _tds__Service_Capabilities;	/* onvif.h:1507 */
class tds__Service;	/* onvif.h:244 */
class tds__DeviceServiceCapabilities;	/* onvif.h:246 */
class tds__NetworkCapabilities;	/* onvif.h:248 */
class tds__SecurityCapabilities;	/* onvif.h:250 */
class tds__SystemCapabilities;	/* onvif.h:252 */
class tds__MiscCapabilities;	/* onvif.h:254 */
class _tds__UserCredential_Extension;	/* onvif.h:2014 */
class tds__UserCredential;	/* onvif.h:256 */
class _tds__StorageConfigurationData_Extension;	/* onvif.h:2071 */
class tds__StorageConfigurationData;	/* onvif.h:258 */
class _tds__GetServices;	/* onvif.h:262 */
class _tds__GetServicesResponse;	/* onvif.h:264 */
class _tds__GetServiceCapabilities;	/* onvif.h:266 */
class _tds__GetServiceCapabilitiesResponse;	/* onvif.h:268 */
class _tds__GetDeviceInformation;	/* onvif.h:270 */
class _tds__GetDeviceInformationResponse;	/* onvif.h:272 */
class _tds__SetSystemDateAndTime;	/* onvif.h:274 */
class _tds__SetSystemDateAndTimeResponse;	/* onvif.h:276 */
class _tds__GetSystemDateAndTime;	/* onvif.h:278 */
class _tds__GetSystemDateAndTimeResponse;	/* onvif.h:280 */
class _tds__SetSystemFactoryDefault;	/* onvif.h:282 */
class _tds__SetSystemFactoryDefaultResponse;	/* onvif.h:284 */
class _tds__UpgradeSystemFirmware;	/* onvif.h:286 */
class _tds__UpgradeSystemFirmwareResponse;	/* onvif.h:288 */
class _tds__SystemReboot;	/* onvif.h:290 */
class _tds__SystemRebootResponse;	/* onvif.h:292 */
class _tds__RestoreSystem;	/* onvif.h:294 */
class _tds__RestoreSystemResponse;	/* onvif.h:296 */
class _tds__GetSystemBackup;	/* onvif.h:298 */
class _tds__GetSystemBackupResponse;	/* onvif.h:300 */
class _tds__GetSystemSupportInformation;	/* onvif.h:302 */
class _tds__GetSystemSupportInformationResponse;	/* onvif.h:304 */
class _tds__GetSystemLog;	/* onvif.h:306 */
class _tds__GetSystemLogResponse;	/* onvif.h:308 */
class _tds__GetScopes;	/* onvif.h:310 */
class _tds__GetScopesResponse;	/* onvif.h:312 */
class _tds__SetScopes;	/* onvif.h:314 */
class _tds__SetScopesResponse;	/* onvif.h:316 */
class _tds__AddScopes;	/* onvif.h:318 */
class _tds__AddScopesResponse;	/* onvif.h:320 */
class _tds__RemoveScopes;	/* onvif.h:322 */
class _tds__RemoveScopesResponse;	/* onvif.h:324 */
class _tds__GetDiscoveryMode;	/* onvif.h:326 */
class _tds__GetDiscoveryModeResponse;	/* onvif.h:328 */
class _tds__SetDiscoveryMode;	/* onvif.h:330 */
class _tds__SetDiscoveryModeResponse;	/* onvif.h:332 */
class _tds__GetRemoteDiscoveryMode;	/* onvif.h:334 */
class _tds__GetRemoteDiscoveryModeResponse;	/* onvif.h:336 */
class _tds__SetRemoteDiscoveryMode;	/* onvif.h:338 */
class _tds__SetRemoteDiscoveryModeResponse;	/* onvif.h:340 */
class _tds__GetDPAddresses;	/* onvif.h:342 */
class _tds__GetDPAddressesResponse;	/* onvif.h:344 */
class _tds__SetDPAddresses;	/* onvif.h:346 */
class _tds__SetDPAddressesResponse;	/* onvif.h:348 */
class _tds__GetEndpointReference;	/* onvif.h:350 */
class _tds__GetEndpointReferenceResponse;	/* onvif.h:352 */
class _tds__GetRemoteUser;	/* onvif.h:354 */
class _tds__GetRemoteUserResponse;	/* onvif.h:356 */
class _tds__SetRemoteUser;	/* onvif.h:358 */
class _tds__SetRemoteUserResponse;	/* onvif.h:360 */
class _tds__GetUsers;	/* onvif.h:362 */
class _tds__GetUsersResponse;	/* onvif.h:364 */
class _tds__CreateUsers;	/* onvif.h:366 */
class _tds__CreateUsersResponse;	/* onvif.h:368 */
class _tds__DeleteUsers;	/* onvif.h:370 */
class _tds__DeleteUsersResponse;	/* onvif.h:372 */
class _tds__SetUser;	/* onvif.h:374 */
class _tds__SetUserResponse;	/* onvif.h:376 */
class _tds__GetWsdlUrl;	/* onvif.h:378 */
class _tds__GetWsdlUrlResponse;	/* onvif.h:380 */
class _tds__GetPasswordComplexityOptions;	/* onvif.h:382 */
class _tds__GetPasswordComplexityOptionsResponse;	/* onvif.h:384 */
class _tds__GetPasswordComplexityConfiguration;	/* onvif.h:386 */
class _tds__GetPasswordComplexityConfigurationResponse;	/* onvif.h:388 */
class _tds__SetPasswordComplexityConfiguration;	/* onvif.h:390 */
class _tds__SetPasswordComplexityConfigurationResponse;	/* onvif.h:392 */
class _tds__GetPasswordHistoryConfiguration;	/* onvif.h:394 */
class _tds__GetPasswordHistoryConfigurationResponse;	/* onvif.h:396 */
class _tds__SetPasswordHistoryConfiguration;	/* onvif.h:398 */
class _tds__SetPasswordHistoryConfigurationResponse;	/* onvif.h:400 */
class _tds__GetAuthFailureWarningOptions;	/* onvif.h:402 */
class _tds__GetAuthFailureWarningOptionsResponse;	/* onvif.h:404 */
class _tds__GetAuthFailureWarningConfiguration;	/* onvif.h:406 */
class _tds__GetAuthFailureWarningConfigurationResponse;	/* onvif.h:408 */
class _tds__SetAuthFailureWarningConfiguration;	/* onvif.h:410 */
class _tds__SetAuthFailureWarningConfigurationResponse;	/* onvif.h:412 */
class _tds__GetCapabilities;	/* onvif.h:414 */
class _tds__GetCapabilitiesResponse;	/* onvif.h:416 */
class _tds__GetHostname;	/* onvif.h:418 */
class _tds__GetHostnameResponse;	/* onvif.h:420 */
class _tds__SetHostname;	/* onvif.h:422 */
class _tds__SetHostnameResponse;	/* onvif.h:424 */
class _tds__SetHostnameFromDHCP;	/* onvif.h:426 */
class _tds__SetHostnameFromDHCPResponse;	/* onvif.h:428 */
class _tds__GetDNS;	/* onvif.h:430 */
class _tds__GetDNSResponse;	/* onvif.h:432 */
class _tds__SetDNS;	/* onvif.h:434 */
class _tds__SetDNSResponse;	/* onvif.h:436 */
class _tds__GetNTP;	/* onvif.h:438 */
class _tds__GetNTPResponse;	/* onvif.h:440 */
class _tds__SetNTP;	/* onvif.h:442 */
class _tds__SetNTPResponse;	/* onvif.h:444 */
class _tds__GetDynamicDNS;	/* onvif.h:446 */
class _tds__GetDynamicDNSResponse;	/* onvif.h:448 */
class _tds__SetDynamicDNS;	/* onvif.h:450 */
class _tds__SetDynamicDNSResponse;	/* onvif.h:452 */
class _tds__GetNetworkInterfaces;	/* onvif.h:454 */
class _tds__GetNetworkInterfacesResponse;	/* onvif.h:456 */
class _tds__SetNetworkInterfaces;	/* onvif.h:458 */
class _tds__SetNetworkInterfacesResponse;	/* onvif.h:460 */
class _tds__GetNetworkProtocols;	/* onvif.h:462 */
class _tds__GetNetworkProtocolsResponse;	/* onvif.h:464 */
class _tds__SetNetworkProtocols;	/* onvif.h:466 */
class _tds__SetNetworkProtocolsResponse;	/* onvif.h:468 */
class _tds__GetNetworkDefaultGateway;	/* onvif.h:470 */
class _tds__GetNetworkDefaultGatewayResponse;	/* onvif.h:472 */
class _tds__SetNetworkDefaultGateway;	/* onvif.h:474 */
class _tds__SetNetworkDefaultGatewayResponse;	/* onvif.h:476 */
class _tds__GetZeroConfiguration;	/* onvif.h:478 */
class _tds__GetZeroConfigurationResponse;	/* onvif.h:480 */
class _tds__SetZeroConfiguration;	/* onvif.h:482 */
class _tds__SetZeroConfigurationResponse;	/* onvif.h:484 */
class _tds__GetIPAddressFilter;	/* onvif.h:486 */
class _tds__GetIPAddressFilterResponse;	/* onvif.h:488 */
class _tds__SetIPAddressFilter;	/* onvif.h:490 */
class _tds__SetIPAddressFilterResponse;	/* onvif.h:492 */
class _tds__AddIPAddressFilter;	/* onvif.h:494 */
class _tds__AddIPAddressFilterResponse;	/* onvif.h:496 */
class _tds__RemoveIPAddressFilter;	/* onvif.h:498 */
class _tds__RemoveIPAddressFilterResponse;	/* onvif.h:500 */
class _tds__GetAccessPolicy;	/* onvif.h:502 */
class _tds__GetAccessPolicyResponse;	/* onvif.h:504 */
class _tds__SetAccessPolicy;	/* onvif.h:506 */
class _tds__SetAccessPolicyResponse;	/* onvif.h:508 */
class _tds__CreateCertificate;	/* onvif.h:510 */
class _tds__CreateCertificateResponse;	/* onvif.h:512 */
class _tds__GetCertificates;	/* onvif.h:514 */
class _tds__GetCertificatesResponse;	/* onvif.h:516 */
class _tds__GetCertificatesStatus;	/* onvif.h:518 */
class _tds__GetCertificatesStatusResponse;	/* onvif.h:520 */
class _tds__SetCertificatesStatus;	/* onvif.h:522 */
class _tds__SetCertificatesStatusResponse;	/* onvif.h:524 */
class _tds__DeleteCertificates;	/* onvif.h:526 */
class _tds__DeleteCertificatesResponse;	/* onvif.h:528 */
class _tds__GetPkcs10Request;	/* onvif.h:530 */
class _tds__GetPkcs10RequestResponse;	/* onvif.h:532 */
class _tds__LoadCertificates;	/* onvif.h:534 */
class _tds__LoadCertificatesResponse;	/* onvif.h:536 */
class _tds__GetClientCertificateMode;	/* onvif.h:538 */
class _tds__GetClientCertificateModeResponse;	/* onvif.h:540 */
class _tds__SetClientCertificateMode;	/* onvif.h:542 */
class _tds__SetClientCertificateModeResponse;	/* onvif.h:544 */
class _tds__GetCACertificates;	/* onvif.h:546 */
class _tds__GetCACertificatesResponse;	/* onvif.h:548 */
class _tds__LoadCertificateWithPrivateKey;	/* onvif.h:550 */
class _tds__LoadCertificateWithPrivateKeyResponse;	/* onvif.h:552 */
class _tds__GetCertificateInformation;	/* onvif.h:554 */
class _tds__GetCertificateInformationResponse;	/* onvif.h:556 */
class _tds__LoadCACertificates;	/* onvif.h:558 */
class _tds__LoadCACertificatesResponse;	/* onvif.h:560 */
class _tds__CreateDot1XConfiguration;	/* onvif.h:562 */
class _tds__CreateDot1XConfigurationResponse;	/* onvif.h:564 */
class _tds__SetDot1XConfiguration;	/* onvif.h:566 */
class _tds__SetDot1XConfigurationResponse;	/* onvif.h:568 */
class _tds__GetDot1XConfiguration;	/* onvif.h:570 */
class _tds__GetDot1XConfigurationResponse;	/* onvif.h:572 */
class _tds__GetDot1XConfigurations;	/* onvif.h:574 */
class _tds__GetDot1XConfigurationsResponse;	/* onvif.h:576 */
class _tds__DeleteDot1XConfiguration;	/* onvif.h:578 */
class _tds__DeleteDot1XConfigurationResponse;	/* onvif.h:580 */
class _tds__GetRelayOutputs;	/* onvif.h:582 */
class _tds__GetRelayOutputsResponse;	/* onvif.h:584 */
class _tds__SetRelayOutputSettings;	/* onvif.h:586 */
class _tds__SetRelayOutputSettingsResponse;	/* onvif.h:588 */
class _tds__SetRelayOutputState;	/* onvif.h:590 */
class _tds__SetRelayOutputStateResponse;	/* onvif.h:592 */
class _tds__SendAuxiliaryCommand;	/* onvif.h:594 */
class _tds__SendAuxiliaryCommandResponse;	/* onvif.h:596 */
class _tds__GetDot11Capabilities;	/* onvif.h:598 */
class _tds__GetDot11CapabilitiesResponse;	/* onvif.h:600 */
class _tds__GetDot11Status;	/* onvif.h:602 */
class _tds__GetDot11StatusResponse;	/* onvif.h:604 */
class _tds__ScanAvailableDot11Networks;	/* onvif.h:606 */
class _tds__ScanAvailableDot11NetworksResponse;	/* onvif.h:608 */
class _tds__GetSystemUris;	/* onvif.h:610 */
class _tds__GetSystemUrisResponse_Extension;	/* onvif.h:6242 */
class _tds__GetSystemUrisResponse;	/* onvif.h:612 */
class _tds__StartFirmwareUpgrade;	/* onvif.h:614 */
class _tds__StartFirmwareUpgradeResponse;	/* onvif.h:616 */
class _tds__StartSystemRestore;	/* onvif.h:618 */
class _tds__StartSystemRestoreResponse;	/* onvif.h:620 */
class _tds__SetHashingAlgorithm;	/* onvif.h:622 */
class _tds__SetHashingAlgorithmResponse;	/* onvif.h:624 */
class _tds__GetStorageConfigurations;	/* onvif.h:626 */
class _tds__GetStorageConfigurationsResponse;	/* onvif.h:628 */
class _tds__CreateStorageConfiguration;	/* onvif.h:630 */
class _tds__CreateStorageConfigurationResponse;	/* onvif.h:632 */
class _tds__GetStorageConfiguration;	/* onvif.h:634 */
class _tds__GetStorageConfigurationResponse;	/* onvif.h:636 */
class _tds__SetStorageConfiguration;	/* onvif.h:638 */
class _tds__SetStorageConfigurationResponse;	/* onvif.h:640 */
class _tds__DeleteStorageConfiguration;	/* onvif.h:642 */
class _tds__DeleteStorageConfigurationResponse;	/* onvif.h:644 */
class _tds__GetGeoLocation;	/* onvif.h:646 */
class _tds__GetGeoLocationResponse;	/* onvif.h:648 */
class _tds__SetGeoLocation;	/* onvif.h:650 */
class _tds__SetGeoLocationResponse;	/* onvif.h:652 */
class _tds__DeleteGeoLocation;	/* onvif.h:654 */
class _tds__DeleteGeoLocationResponse;	/* onvif.h:656 */
class tt__DeviceEntity;	/* onvif.h:658 */
class tt__Scope;	/* onvif.h:660 */
class tt__NetworkInterfaceExtension;	/* onvif.h:664 */
class tt__Dot3Configuration;	/* onvif.h:666 */
class tt__NetworkInterfaceExtension2;	/* onvif.h:668 */
class tt__NetworkInterfaceLink;	/* onvif.h:670 */
class tt__NetworkInterfaceConnectionSetting;	/* onvif.h:672 */
class tt__NetworkInterfaceInfo;	/* onvif.h:674 */
class tt__IPv6NetworkInterface;	/* onvif.h:676 */
class tt__IPv4NetworkInterface;	/* onvif.h:678 */
class tt__IPv4Configuration;	/* onvif.h:680 */
class tt__IPv6Configuration;	/* onvif.h:682 */
class tt__IPv6ConfigurationExtension;	/* onvif.h:684 */
class tt__NetworkProtocol;	/* onvif.h:686 */
class tt__NetworkProtocolExtension;	/* onvif.h:688 */
class tt__NetworkHost;	/* onvif.h:690 */
class tt__NetworkHostExtension;	/* onvif.h:692 */
class tt__IPAddress;	/* onvif.h:694 */
class tt__PrefixedIPv4Address;	/* onvif.h:696 */
class tt__PrefixedIPv6Address;	/* onvif.h:698 */
class tt__HostnameInformation;	/* onvif.h:700 */
class tt__HostnameInformationExtension;	/* onvif.h:702 */
class tt__DNSInformation;	/* onvif.h:704 */
class tt__DNSInformationExtension;	/* onvif.h:706 */
class tt__NTPInformation;	/* onvif.h:708 */
class tt__NTPInformationExtension;	/* onvif.h:710 */
class tt__DynamicDNSInformation;	/* onvif.h:712 */
class tt__DynamicDNSInformationExtension;	/* onvif.h:714 */
class tt__NetworkInterfaceSetConfiguration;	/* onvif.h:716 */
class tt__NetworkInterfaceSetConfigurationExtension;	/* onvif.h:718 */
class tt__IPv6NetworkInterfaceSetConfiguration;	/* onvif.h:720 */
class tt__IPv4NetworkInterfaceSetConfiguration;	/* onvif.h:722 */
class tt__NetworkGateway;	/* onvif.h:724 */
class tt__NetworkZeroConfiguration;	/* onvif.h:726 */
class tt__NetworkZeroConfigurationExtension;	/* onvif.h:728 */
class tt__NetworkZeroConfigurationExtension2;	/* onvif.h:730 */
class tt__IPAddressFilter;	/* onvif.h:732 */
class tt__IPAddressFilterExtension;	/* onvif.h:734 */
class tt__Dot11Configuration;	/* onvif.h:736 */
class tt__Dot11SecurityConfiguration;	/* onvif.h:738 */
class tt__Dot11SecurityConfigurationExtension;	/* onvif.h:740 */
class tt__Dot11PSKSet;	/* onvif.h:742 */
class tt__Dot11PSKSetExtension;	/* onvif.h:744 */
class tt__NetworkInterfaceSetConfigurationExtension2;	/* onvif.h:746 */
class tt__Dot11Capabilities;	/* onvif.h:748 */
class tt__Dot11Status;	/* onvif.h:750 */
class tt__Dot11AvailableNetworks;	/* onvif.h:752 */
class tt__Dot11AvailableNetworksExtension;	/* onvif.h:754 */
class tt__Capabilities;	/* onvif.h:756 */
class tt__CapabilitiesExtension;	/* onvif.h:758 */
class tt__CapabilitiesExtension2;	/* onvif.h:760 */
class tt__AnalyticsCapabilities;	/* onvif.h:762 */
class tt__DeviceCapabilities;	/* onvif.h:764 */
class tt__DeviceCapabilitiesExtension;	/* onvif.h:766 */
class tt__EventCapabilities;	/* onvif.h:768 */
class tt__IOCapabilities;	/* onvif.h:770 */
class tt__IOCapabilitiesExtension;	/* onvif.h:772 */
class tt__IOCapabilitiesExtension2;	/* onvif.h:774 */
class tt__MediaCapabilities;	/* onvif.h:776 */
class tt__MediaCapabilitiesExtension;	/* onvif.h:778 */
class tt__RealTimeStreamingCapabilities;	/* onvif.h:780 */
class tt__RealTimeStreamingCapabilitiesExtension;	/* onvif.h:782 */
class tt__ProfileCapabilities;	/* onvif.h:784 */
class tt__NetworkCapabilities;	/* onvif.h:786 */
class tt__NetworkCapabilitiesExtension;	/* onvif.h:788 */
class tt__NetworkCapabilitiesExtension2;	/* onvif.h:790 */
class tt__SecurityCapabilities;	/* onvif.h:792 */
class tt__SecurityCapabilitiesExtension;	/* onvif.h:794 */
class tt__SecurityCapabilitiesExtension2;	/* onvif.h:796 */
class tt__SystemCapabilities;	/* onvif.h:798 */
class tt__SystemCapabilitiesExtension;	/* onvif.h:800 */
class tt__SystemCapabilitiesExtension2;	/* onvif.h:802 */
class tt__OnvifVersion;	/* onvif.h:804 */
class tt__ImagingCapabilities;	/* onvif.h:806 */
class tt__PTZCapabilities;	/* onvif.h:808 */
class tt__DeviceIOCapabilities;	/* onvif.h:810 */
class tt__DisplayCapabilities;	/* onvif.h:812 */
class tt__RecordingCapabilities;	/* onvif.h:814 */
class tt__SearchCapabilities;	/* onvif.h:816 */
class tt__ReplayCapabilities;	/* onvif.h:818 */
class tt__ReceiverCapabilities;	/* onvif.h:820 */
class tt__AnalyticsDeviceCapabilities;	/* onvif.h:822 */
class tt__AnalyticsDeviceExtension;	/* onvif.h:824 */
class tt__SystemLog;	/* onvif.h:826 */
class tt__SupportInformation;	/* onvif.h:828 */
class tt__BinaryData;	/* onvif.h:830 */
class tt__AttachmentData;	/* onvif.h:832 */
class tt__BackupFile;	/* onvif.h:834 */
class tt__SystemLogUriList;	/* onvif.h:836 */
class tt__SystemLogUri;	/* onvif.h:838 */
class tt__SystemDateTime;	/* onvif.h:840 */
class tt__SystemDateTimeExtension;	/* onvif.h:842 */
class tt__DateTime;	/* onvif.h:844 */
class tt__Date;	/* onvif.h:846 */
class tt__Time;	/* onvif.h:848 */
class tt__TimeZone;	/* onvif.h:850 */
class tt__RemoteUser;	/* onvif.h:852 */
class tt__User;	/* onvif.h:854 */
class tt__UserExtension;	/* onvif.h:856 */
class tt__Certificate;	/* onvif.h:858 */
class tt__CertificateStatus;	/* onvif.h:860 */
class tt__CertificateWithPrivateKey;	/* onvif.h:862 */
class tt__CertificateInformation;	/* onvif.h:864 */
class tt__CertificateInformationExtension;	/* onvif.h:868 */
class tt__Dot1XConfiguration;	/* onvif.h:870 */
class tt__Dot1XConfigurationExtension;	/* onvif.h:872 */
class tt__EAPMethodConfiguration;	/* onvif.h:874 */
class tt__EapMethodExtension;	/* onvif.h:876 */
class tt__TLSConfiguration;	/* onvif.h:878 */
class tt__RelayOutputSettings;	/* onvif.h:880 */
class tt__DateTimeRange;	/* onvif.h:884 */
class tt__IntRange;	/* onvif.h:886 */
class tt__GeoLocation;	/* onvif.h:888 */
class tt__GeoOrientation;	/* onvif.h:890 */
class tt__LocalLocation;	/* onvif.h:892 */
class tt__LocalOrientation;	/* onvif.h:894 */
class tt__LocationEntity;	/* onvif.h:896 */
class tds__StorageConfiguration;	/* onvif.h:260 */
class tt__NetworkInterface;	/* onvif.h:662 */
class tt__CertificateUsage;	/* onvif.h:866 */
class tt__RelayOutput;	/* onvif.h:882 */
struct __tds__GetServices;	/* onvif.h:12617 */
struct __tds__GetServiceCapabilities;	/* onvif.h:12686 */
struct __tds__GetDeviceInformation;	/* onvif.h:12754 */
struct __tds__SetSystemDateAndTime;	/* onvif.h:12836 */
struct __tds__GetSystemDateAndTime;	/* onvif.h:12910 */
struct __tds__SetSystemFactoryDefault;	/* onvif.h:12978 */
struct __tds__UpgradeSystemFirmware;	/* onvif.h:13052 */
struct __tds__SystemReboot;	/* onvif.h:13120 */
struct __tds__RestoreSystem;	/* onvif.h:13196 */
struct __tds__GetSystemBackup;	/* onvif.h:13271 */
struct __tds__GetSystemLog;	/* onvif.h:13340 */
struct __tds__GetSystemSupportInformation;	/* onvif.h:13408 */
struct __tds__GetScopes;	/* onvif.h:13491 */
struct __tds__SetScopes;	/* onvif.h:13567 */
struct __tds__AddScopes;	/* onvif.h:13639 */
struct __tds__RemoveScopes;	/* onvif.h:13713 */
struct __tds__GetDiscoveryMode;	/* onvif.h:13785 */
struct __tds__SetDiscoveryMode;	/* onvif.h:13858 */
struct __tds__GetRemoteDiscoveryMode;	/* onvif.h:13932 */
struct __tds__SetRemoteDiscoveryMode;	/* onvif.h:14006 */
struct __tds__GetDPAddresses;	/* onvif.h:14078 */
struct __tds__GetEndpointReference;	/* onvif.h:14152 */
struct __tds__GetRemoteUser;	/* onvif.h:14226 */
struct __tds__SetRemoteUser;	/* onvif.h:14305 */
struct __tds__GetUsers;	/* onvif.h:14377 */
struct __tds__CreateUsers;	/* onvif.h:14457 */
struct __tds__DeleteUsers;	/* onvif.h:14532 */
struct __tds__SetUser;	/* onvif.h:14605 */
struct __tds__GetWsdlUrl;	/* onvif.h:14674 */
struct __tds__GetPasswordComplexityOptions;	/* onvif.h:14743 */
struct __tds__GetPasswordComplexityConfiguration;	/* onvif.h:14811 */
struct __tds__SetPasswordComplexityConfiguration;	/* onvif.h:14879 */
struct __tds__GetPasswordHistoryConfiguration;	/* onvif.h:14947 */
struct __tds__SetPasswordHistoryConfiguration;	/* onvif.h:15015 */
struct __tds__GetAuthFailureWarningOptions;	/* onvif.h:15084 */
struct __tds__GetAuthFailureWarningConfiguration;	/* onvif.h:15153 */
struct __tds__SetAuthFailureWarningConfiguration;	/* onvif.h:15221 */
struct __tds__GetCapabilities;	/* onvif.h:15291 */
struct __tds__SetDPAddresses;	/* onvif.h:15364 */
struct __tds__GetHostname;	/* onvif.h:15435 */
struct __tds__SetHostname;	/* onvif.h:15510 */
struct __tds__SetHostnameFromDHCP;	/* onvif.h:15578 */
struct __tds__GetDNS;	/* onvif.h:15648 */
struct __tds__SetDNS;	/* onvif.h:15718 */
struct __tds__GetNTP;	/* onvif.h:15789 */
struct __tds__SetNTP;	/* onvif.h:15867 */
struct __tds__GetDynamicDNS;	/* onvif.h:15939 */
struct __tds__SetDynamicDNS;	/* onvif.h:16011 */
struct __tds__GetNetworkInterfaces;	/* onvif.h:16083 */
struct __tds__SetNetworkInterfaces;	/* onvif.h:16160 */
struct __tds__GetNetworkProtocols;	/* onvif.h:16231 */
struct __tds__SetNetworkProtocols;	/* onvif.h:16302 */
struct __tds__GetNetworkDefaultGateway;	/* onvif.h:16373 */
struct __tds__SetNetworkDefaultGateway;	/* onvif.h:16443 */
struct __tds__GetZeroConfiguration;	/* onvif.h:16518 */
struct __tds__SetZeroConfiguration;	/* onvif.h:16587 */
struct __tds__GetIPAddressFilter;	/* onvif.h:16659 */
struct __tds__SetIPAddressFilter;	/* onvif.h:16733 */
struct __tds__AddIPAddressFilter;	/* onvif.h:16806 */
struct __tds__RemoveIPAddressFilter;	/* onvif.h:16879 */
struct __tds__GetAccessPolicy;	/* onvif.h:16961 */
struct __tds__SetAccessPolicy;	/* onvif.h:17034 */
struct __tds__CreateCertificate;	/* onvif.h:17101 */
struct __tds__GetCertificates;	/* onvif.h:17168 */
struct __tds__GetCertificatesStatus;	/* onvif.h:17235 */
struct __tds__SetCertificatesStatus;	/* onvif.h:17302 */
struct __tds__DeleteCertificates;	/* onvif.h:17369 */
struct __tds__GetPkcs10Request;	/* onvif.h:17436 */
struct __tds__LoadCertificates;	/* onvif.h:17503 */
struct __tds__GetClientCertificateMode;	/* onvif.h:17570 */
struct __tds__SetClientCertificateMode;	/* onvif.h:17637 */
struct __tds__GetRelayOutputs;	/* onvif.h:17707 */
struct __tds__SetRelayOutputSettings;	/* onvif.h:17777 */
struct __tds__SetRelayOutputState;	/* onvif.h:17847 */
struct __tds__SendAuxiliaryCommand;	/* onvif.h:17946 */
struct __tds__GetCACertificates;	/* onvif.h:18013 */
struct __tds__LoadCertificateWithPrivateKey;	/* onvif.h:18080 */
struct __tds__GetCertificateInformation;	/* onvif.h:18147 */
struct __tds__LoadCACertificates;	/* onvif.h:18214 */
struct __tds__CreateDot1XConfiguration;	/* onvif.h:18281 */
struct __tds__SetDot1XConfiguration;	/* onvif.h:18348 */
struct __tds__GetDot1XConfiguration;	/* onvif.h:18415 */
struct __tds__GetDot1XConfigurations;	/* onvif.h:18482 */
struct __tds__DeleteDot1XConfiguration;	/* onvif.h:18549 */
struct __tds__GetDot11Capabilities;	/* onvif.h:18618 */
struct __tds__GetDot11Status;	/* onvif.h:18688 */
struct __tds__ScanAvailableDot11Networks;	/* onvif.h:18758 */
struct __tds__GetSystemUris;	/* onvif.h:18845 */
struct __tds__StartFirmwareUpgrade;	/* onvif.h:18941 */
struct __tds__StartSystemRestore;	/* onvif.h:19036 */
struct __tds__GetStorageConfigurations;	/* onvif.h:19106 */
struct __tds__CreateStorageConfiguration;	/* onvif.h:19177 */
struct __tds__GetStorageConfiguration;	/* onvif.h:19247 */
struct __tds__SetStorageConfiguration;	/* onvif.h:19316 */
struct __tds__DeleteStorageConfiguration;	/* onvif.h:19386 */
struct __tds__GetGeoLocation;	/* onvif.h:19456 */
struct __tds__SetGeoLocation;	/* onvif.h:19526 */
struct __tds__DeleteGeoLocation;	/* onvif.h:19595 */
struct __tds__SetHashingAlgorithm;	/* onvif.h:19665 */

/* xop.h:59 */
#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (8)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
struct SOAP_CMAC _xop__Include {
      public:
        unsigned char *__ptr;
        int __size;
        /** Optional element 'id' of XML schema type 'xsd:string' */
        char *id;
        /** Optional element 'type' of XML schema type 'xsd:string' */
        char *type;
        /** Optional element 'options' of XML schema type 'xsd:string' */
        char *options;
      public:
        /** Return unique type id SOAP_TYPE__xop__Include */
        long soap_type() const { return SOAP_TYPE__xop__Include; }
        /** Constructor with member initializations */
        _xop__Include() : __ptr(), __size(), id(), type(), options() { }
        /** Friend allocator */
        friend SOAP_FMAC1 _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:65 */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (12)
/* complex XML schema type 'wsa5:EndpointReferenceType': */
struct SOAP_CMAC wsa5__EndpointReferenceType {
      public:
        /** Required element 'wsa5:Address' of XML schema type 'xsd:string' */
        char *Address;
        /** Optional element 'wsa5:ReferenceParameters' of XML schema type 'wsa5:ReferenceParametersType' */
        struct wsa5__ReferenceParametersType *ReferenceParameters;
        /** Optional element 'wsa5:Metadata' of XML schema type 'wsa5:MetadataType' */
        struct wsa5__MetadataType *Metadata;
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__EndpointReferenceType */
        long soap_type() const { return SOAP_TYPE_wsa5__EndpointReferenceType; }
        /** Constructor with member initializations */
        wsa5__EndpointReferenceType() : Address(), ReferenceParameters(), Metadata(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:68 */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (13)
/* complex XML schema type 'wsa5:ReferenceParametersType': */
struct SOAP_CMAC wsa5__ReferenceParametersType {
      public:
        /** Optional element 'chan:ChannelInstance' of XML schema type 'xsd:int' */
        int *chan__ChannelInstance;
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ReferenceParametersType */
        long soap_type() const { return SOAP_TYPE_wsa5__ReferenceParametersType; }
        /** Constructor with member initializations */
        wsa5__ReferenceParametersType() : chan__ChannelInstance(), __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:71 */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (14)
/* complex XML schema type 'wsa5:MetadataType': */
struct SOAP_CMAC wsa5__MetadataType {
      public:
        /** Sequence of elements '-any' of XML schema type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__MetadataType */
        long soap_type() const { return SOAP_TYPE_wsa5__MetadataType; }
        /** Constructor with member initializations */
        wsa5__MetadataType() : __size(), __any(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:86 */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (16)
/* complex XML schema type 'wsa5:ProblemActionType': */
struct SOAP_CMAC wsa5__ProblemActionType {
      public:
        /** Optional element 'wsa5:Action' of XML schema type 'xsd:string' */
        char *Action;
        /** Optional element 'wsa5:SoapAction' of XML schema type 'xsd:string' */
        char *SoapAction;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__ProblemActionType */
        long soap_type() const { return SOAP_TYPE_wsa5__ProblemActionType; }
        /** Constructor with member initializations */
        wsa5__ProblemActionType() : Action(), SoapAction(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:74 */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (15)
/* simple XML schema type 'wsa5:RelatesToType': */
struct SOAP_CMAC wsa5__RelatesToType {
      public:
        /** Simple content of XML schema type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'RelationshipType' of XML schema type 'wsa5:RelationshipTypeOpenEnum' */
        char *RelationshipType;
        /** Optional attribute '-anyAttribute' of XML schema type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa5__RelatesToType */
        long soap_type() const { return SOAP_TYPE_wsa5__RelatesToType; }
        /** Constructor with member initializations */
        wsa5__RelatesToType() : __item(), RelationshipType(), __anyAttribute() { }
        /** Friend allocator */
        friend SOAP_FMAC1 wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:260 */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (41)
/* simple XML schema type 'chan:ChannelInstanceType': */
struct SOAP_CMAC chan__ChannelInstanceType {
      public:
        /** Simple content of XML schema type 'xsd:int' wrapped by this struct */
        int __item;
        /** Optional attribute 'wsa5:IsReferenceParameter' of XML schema type 'wsa5:IsReferenceParameter' */
        enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter;	/**< initialized with default value = (enum _wsa5__IsReferenceParameter)0 */
      public:
        /** Return unique type id SOAP_TYPE_chan__ChannelInstanceType */
        long soap_type() const { return SOAP_TYPE_chan__ChannelInstanceType; }
        /** Constructor with member initializations */
        chan__ChannelInstanceType() : __item(), wsa5__IsReferenceParameter((enum _wsa5__IsReferenceParameter)0) { }
        /** Friend allocator */
        friend SOAP_FMAC1 chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa5.h:266 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Optional element 'wsa5:MessageID' of XML schema type 'wsa5:MessageID' */
        char *wsa5__MessageID;
        /** Optional element 'wsa5:RelatesTo' of XML schema type 'wsa5:RelatesTo' */
        struct wsa5__RelatesToType *wsa5__RelatesTo;
        /** Optional element 'wsa5:From' of XML schema type 'wsa5:From' */
        struct wsa5__EndpointReferenceType *wsa5__From;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__ReplyTo;
        /** MustUnderstand */
        struct wsa5__EndpointReferenceType *wsa5__FaultTo;
        /** MustUnderstand */
        char *wsa5__To;
        /** MustUnderstand */
        char *wsa5__Action;
        /** Optional element 'chan:ChannelInstance' of XML schema type 'chan:ChannelInstanceType' */
        struct chan__ChannelInstanceType *chan__ChannelInstance;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() : wsa5__MessageID(), wsa5__RelatesTo(), wsa5__From(), wsa5__ReplyTo(), wsa5__FaultTo(), wsa5__To(), wsa5__Action(), chan__ChannelInstance() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:283 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:284 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:285 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa5.h:290 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* onvif.h:181 */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (57)
/* simple XML schema type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:anyType' wrapped by this struct
        char *__item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_xsd__anyType
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__anyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
        virtual xsd__anyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyType); }
      public:
        /// Constructor with default initializations
        xsd__anyType() : __item(), soap() { }
        /// Destructor
        virtual ~xsd__anyType() { }
        /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:188 */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (59)
/* complex XML schema type 'SOAP-ENV:Envelope': */
struct SOAP_CMAC SOAP_ENV__Envelope {
      public:
        /** Optional element 'SOAP-ENV:Header' of XML schema type 'SOAP-ENV:Header' */
        struct SOAP_ENV__Header *SOAP_ENV__Header;
        /** Optional element 'SOAP-ENV:Body' of XML schema type 'xsd:anyType' */
        char *SOAP_ENV__Body;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Envelope */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Envelope; }
        /** Constructor with member initializations */
        SOAP_ENV__Envelope() : SOAP_ENV__Header(), SOAP_ENV__Body() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:194 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (63)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XML schema type 'xsd:string'
        char *id;
        /// Optional element 'type' of XML schema type 'xsd:string'
        char *type;
        /// Optional element 'options' of XML schema type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with default initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        /// Destructor
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:202 */
#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (64)
/* hexBinary XML schema type: */
class SOAP_CMAC xsd__hexBinary {
      public:
        unsigned char *__ptr;
        int __size;
      public:
        /// Return unique type id SOAP_TYPE_xsd__hexBinary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__hexBinary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__hexBinary, default initialized and not managed by a soap context
        virtual xsd__hexBinary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__hexBinary); }
      public:
        /// Constructor with default initializations
        xsd__hexBinary() : __ptr(), __size() { }
        /// Destructor
        virtual ~xsd__hexBinary() { }
        /// Friend allocator used by soap_new_xsd__hexBinary(struct soap*, int)
        friend SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:1507 */
#ifndef SOAP_TYPE__tds__Service_Capabilities
#define SOAP_TYPE__tds__Service_Capabilities (437)
/* complex XML schema type 'tds:Service-Capabilities': */
class SOAP_CMAC _tds__Service_Capabilities {
      public:
        /// Return unique type id SOAP_TYPE__tds__Service_Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__Service_Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__Service_Capabilities, default initialized and not managed by a soap context
        virtual _tds__Service_Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__Service_Capabilities); }
      public:
        /// Constructor with default initializations
        _tds__Service_Capabilities() { }
        /// Destructor
        virtual ~_tds__Service_Capabilities() { }
        /// Friend allocator used by soap_new__tds__Service_Capabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__Service_Capabilities * SOAP_FMAC2 soap_instantiate__tds__Service_Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:244 */
#ifndef SOAP_TYPE_tds__Service
#define SOAP_TYPE_tds__Service (73)
/* complex XML schema type 'tds:Service': */
class SOAP_CMAC tds__Service {
      public:
        /// Required element 'tds:Namespace' of XML schema type 'xsd:anyURI'
        std::string Namespace;
        /// Required element 'tds:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Optional element 'tds:Capabilities' of XML schema type 'tds:Service-Capabilities'
        _tds__Service_Capabilities *Capabilities;
        /// Required element 'tds:Version' of XML schema type 'tt:OnvifVersion'
        tt__OnvifVersion *Version;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__Service
        virtual long soap_type(void) const { return SOAP_TYPE_tds__Service; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__Service, default initialized and not managed by a soap context
        virtual tds__Service *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__Service); }
      public:
        /// Constructor with default initializations
        tds__Service() : Namespace(), XAddr(), Capabilities(), Version(), soap() { }
        /// Destructor
        virtual ~tds__Service() { }
        /// Friend allocator used by soap_new_tds__Service(struct soap*, int)
        friend SOAP_FMAC1 tds__Service * SOAP_FMAC2 soap_instantiate_tds__Service(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:246 */
#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities
#define SOAP_TYPE_tds__DeviceServiceCapabilities (74)
/* complex XML schema type 'tds:DeviceServiceCapabilities': */
class SOAP_CMAC tds__DeviceServiceCapabilities {
      public:
        /// Required element 'tds:Network' of XML schema type 'tds:NetworkCapabilities'
        tds__NetworkCapabilities *Network;
        /// Required element 'tds:Security' of XML schema type 'tds:SecurityCapabilities'
        tds__SecurityCapabilities *Security;
        /// Required element 'tds:System' of XML schema type 'tds:SystemCapabilities'
        tds__SystemCapabilities *System;
        /// Optional element 'tds:Misc' of XML schema type 'tds:MiscCapabilities'
        tds__MiscCapabilities *Misc;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__DeviceServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__DeviceServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__DeviceServiceCapabilities, default initialized and not managed by a soap context
        virtual tds__DeviceServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__DeviceServiceCapabilities); }
      public:
        /// Constructor with default initializations
        tds__DeviceServiceCapabilities() : Network(), Security(), System(), Misc(), soap() { }
        /// Destructor
        virtual ~tds__DeviceServiceCapabilities() { }
        /// Friend allocator used by soap_new_tds__DeviceServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__DeviceServiceCapabilities * SOAP_FMAC2 soap_instantiate_tds__DeviceServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:248 */
#ifndef SOAP_TYPE_tds__NetworkCapabilities
#define SOAP_TYPE_tds__NetworkCapabilities (75)
/* complex XML schema type 'tds:NetworkCapabilities': */
class SOAP_CMAC tds__NetworkCapabilities {
      public:
        /// Optional attribute 'IPFilter' of XML schema type 'xsd:boolean'
        bool *IPFilter;
        /// Optional attribute 'ZeroConfiguration' of XML schema type 'xsd:boolean'
        bool *ZeroConfiguration;
        /// Optional attribute 'IPVersion6' of XML schema type 'xsd:boolean'
        bool *IPVersion6;
        /// Optional attribute 'DynDNS' of XML schema type 'xsd:boolean'
        bool *DynDNS;
        /// Optional attribute 'Dot11Configuration' of XML schema type 'xsd:boolean'
        bool *Dot11Configuration;
        /// Optional attribute 'Dot1XConfigurations' of XML schema type 'xsd:int'
        int *Dot1XConfigurations;
        /// Optional attribute 'HostnameFromDHCP' of XML schema type 'xsd:boolean'
        bool *HostnameFromDHCP;
        /// Optional attribute 'NTP' of XML schema type 'xsd:int'
        int *NTP;
        /// Optional attribute 'DHCPv6' of XML schema type 'xsd:boolean'
        bool *DHCPv6;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__NetworkCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__NetworkCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__NetworkCapabilities, default initialized and not managed by a soap context
        virtual tds__NetworkCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__NetworkCapabilities); }
      public:
        /// Constructor with default initializations
        tds__NetworkCapabilities() : IPFilter(), ZeroConfiguration(), IPVersion6(), DynDNS(), Dot11Configuration(), Dot1XConfigurations(), HostnameFromDHCP(), NTP(), DHCPv6(), soap() { }
        /// Destructor
        virtual ~tds__NetworkCapabilities() { }
        /// Friend allocator used by soap_new_tds__NetworkCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tds__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:250 */
#ifndef SOAP_TYPE_tds__SecurityCapabilities
#define SOAP_TYPE_tds__SecurityCapabilities (76)
/* complex XML schema type 'tds:SecurityCapabilities': */
class SOAP_CMAC tds__SecurityCapabilities {
      public:
        /// Optional attribute 'TLS1.0' of XML schema type 'xsd:boolean'
        bool *TLS1_x002e0;
        /// Optional attribute 'TLS1.1' of XML schema type 'xsd:boolean'
        bool *TLS1_x002e1;
        /// Optional attribute 'TLS1.2' of XML schema type 'xsd:boolean'
        bool *TLS1_x002e2;
        /// Optional attribute 'OnboardKeyGeneration' of XML schema type 'xsd:boolean'
        bool *OnboardKeyGeneration;
        /// Optional attribute 'AccessPolicyConfig' of XML schema type 'xsd:boolean'
        bool *AccessPolicyConfig;
        /// Optional attribute 'DefaultAccessPolicy' of XML schema type 'xsd:boolean'
        bool *DefaultAccessPolicy;
        /// Optional attribute 'Dot1X' of XML schema type 'xsd:boolean'
        bool *Dot1X;
        /// Optional attribute 'RemoteUserHandling' of XML schema type 'xsd:boolean'
        bool *RemoteUserHandling;
        /// Optional attribute 'X.509Token' of XML schema type 'xsd:boolean'
        bool *X_x002e509Token;
        /// Optional attribute 'SAMLToken' of XML schema type 'xsd:boolean'
        bool *SAMLToken;
        /// Optional attribute 'KerberosToken' of XML schema type 'xsd:boolean'
        bool *KerberosToken;
        /// Optional attribute 'UsernameToken' of XML schema type 'xsd:boolean'
        bool *UsernameToken;
        /// Optional attribute 'HttpDigest' of XML schema type 'xsd:boolean'
        bool *HttpDigest;
        /// Optional attribute 'RELToken' of XML schema type 'xsd:boolean'
        bool *RELToken;
        /// Optional attribute 'SupportedEAPMethods' of XML schema type 'tt:IntList'
        std::string *SupportedEAPMethods;
        /// Optional attribute 'MaxUsers' of XML schema type 'xsd:int'
        int *MaxUsers;
        /// Optional attribute 'MaxUserNameLength' of XML schema type 'xsd:int'
        int *MaxUserNameLength;
        /// Optional attribute 'MaxPasswordLength' of XML schema type 'xsd:int'
        int *MaxPasswordLength;
        /// Optional attribute 'SecurityPolicies' of XML schema type 'tt:StringList'
        std::string *SecurityPolicies;
        /// Optional attribute 'MaxPasswordHistory' of XML schema type 'xsd:int'
        int *MaxPasswordHistory;
        /// Optional attribute 'HashingAlgorithms' of XML schema type 'tt:StringList'
        std::string *HashingAlgorithms;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__SecurityCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__SecurityCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__SecurityCapabilities, default initialized and not managed by a soap context
        virtual tds__SecurityCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__SecurityCapabilities); }
      public:
        /// Constructor with default initializations
        tds__SecurityCapabilities() : TLS1_x002e0(), TLS1_x002e1(), TLS1_x002e2(), OnboardKeyGeneration(), AccessPolicyConfig(), DefaultAccessPolicy(), Dot1X(), RemoteUserHandling(), X_x002e509Token(), SAMLToken(), KerberosToken(), UsernameToken(), HttpDigest(), RELToken(), SupportedEAPMethods(), MaxUsers(), MaxUserNameLength(), MaxPasswordLength(), SecurityPolicies(), MaxPasswordHistory(), HashingAlgorithms(), soap() { }
        /// Destructor
        virtual ~tds__SecurityCapabilities() { }
        /// Friend allocator used by soap_new_tds__SecurityCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tds__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:252 */
#ifndef SOAP_TYPE_tds__SystemCapabilities
#define SOAP_TYPE_tds__SystemCapabilities (77)
/* complex XML schema type 'tds:SystemCapabilities': */
class SOAP_CMAC tds__SystemCapabilities {
      public:
        /// Optional attribute 'DiscoveryResolve' of XML schema type 'xsd:boolean'
        bool *DiscoveryResolve;
        /// Optional attribute 'DiscoveryBye' of XML schema type 'xsd:boolean'
        bool *DiscoveryBye;
        /// Optional attribute 'RemoteDiscovery' of XML schema type 'xsd:boolean'
        bool *RemoteDiscovery;
        /// Optional attribute 'SystemBackup' of XML schema type 'xsd:boolean'
        bool *SystemBackup;
        /// Optional attribute 'SystemLogging' of XML schema type 'xsd:boolean'
        bool *SystemLogging;
        /// Optional attribute 'FirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool *FirmwareUpgrade;
        /// Optional attribute 'HttpFirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool *HttpFirmwareUpgrade;
        /// Optional attribute 'HttpSystemBackup' of XML schema type 'xsd:boolean'
        bool *HttpSystemBackup;
        /// Optional attribute 'HttpSystemLogging' of XML schema type 'xsd:boolean'
        bool *HttpSystemLogging;
        /// Optional attribute 'HttpSupportInformation' of XML schema type 'xsd:boolean'
        bool *HttpSupportInformation;
        /// Optional attribute 'StorageConfiguration' of XML schema type 'xsd:boolean'
        bool *StorageConfiguration;
        /// Optional attribute 'MaxStorageConfigurations' of XML schema type 'xsd:int'
        int *MaxStorageConfigurations;
        /// Optional attribute 'GeoLocationEntries' of XML schema type 'xsd:int'
        int *GeoLocationEntries;
        /// Optional attribute 'AutoGeo' of XML schema type 'tt:StringAttrList'
        std::string *AutoGeo;
        /// Optional attribute 'StorageTypesSupported' of XML schema type 'tt:StringAttrList'
        std::string *StorageTypesSupported;
        /// Optional attribute 'DiscoveryNotSupported' of XML schema type 'xsd:boolean'
        bool *DiscoveryNotSupported;
        /// Optional attribute 'NetworkConfigNotSupported' of XML schema type 'xsd:boolean'
        bool *NetworkConfigNotSupported;
        /// Optional attribute 'UserConfigNotSupported' of XML schema type 'xsd:boolean'
        bool *UserConfigNotSupported;
        /// Optional attribute 'Addons' of XML schema type 'tt:StringAttrList'
        std::string *Addons;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__SystemCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__SystemCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__SystemCapabilities, default initialized and not managed by a soap context
        virtual tds__SystemCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__SystemCapabilities); }
      public:
        /// Constructor with default initializations
        tds__SystemCapabilities() : DiscoveryResolve(), DiscoveryBye(), RemoteDiscovery(), SystemBackup(), SystemLogging(), FirmwareUpgrade(), HttpFirmwareUpgrade(), HttpSystemBackup(), HttpSystemLogging(), HttpSupportInformation(), StorageConfiguration(), MaxStorageConfigurations(), GeoLocationEntries(), AutoGeo(), StorageTypesSupported(), DiscoveryNotSupported(), NetworkConfigNotSupported(), UserConfigNotSupported(), Addons(), soap() { }
        /// Destructor
        virtual ~tds__SystemCapabilities() { }
        /// Friend allocator used by soap_new_tds__SystemCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tds__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:254 */
#ifndef SOAP_TYPE_tds__MiscCapabilities
#define SOAP_TYPE_tds__MiscCapabilities (78)
/* complex XML schema type 'tds:MiscCapabilities': */
class SOAP_CMAC tds__MiscCapabilities {
      public:
        /// Optional attribute 'AuxiliaryCommands' of XML schema type 'tt:StringAttrList'
        std::string *AuxiliaryCommands;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__MiscCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tds__MiscCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__MiscCapabilities, default initialized and not managed by a soap context
        virtual tds__MiscCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__MiscCapabilities); }
      public:
        /// Constructor with default initializations
        tds__MiscCapabilities() : AuxiliaryCommands(), soap() { }
        /// Destructor
        virtual ~tds__MiscCapabilities() { }
        /// Friend allocator used by soap_new_tds__MiscCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tds__MiscCapabilities * SOAP_FMAC2 soap_instantiate_tds__MiscCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2014 */
#ifndef SOAP_TYPE__tds__UserCredential_Extension
#define SOAP_TYPE__tds__UserCredential_Extension (450)
/* complex XML schema type 'tds:UserCredential-Extension': */
class SOAP_CMAC _tds__UserCredential_Extension {
      public:
        /// Return unique type id SOAP_TYPE__tds__UserCredential_Extension
        virtual long soap_type(void) const { return SOAP_TYPE__tds__UserCredential_Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__UserCredential_Extension, default initialized and not managed by a soap context
        virtual _tds__UserCredential_Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__UserCredential_Extension); }
      public:
        /// Constructor with default initializations
        _tds__UserCredential_Extension() { }
        /// Destructor
        virtual ~_tds__UserCredential_Extension() { }
        /// Friend allocator used by soap_new__tds__UserCredential_Extension(struct soap*, int)
        friend SOAP_FMAC1 _tds__UserCredential_Extension * SOAP_FMAC2 soap_instantiate__tds__UserCredential_Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:256 */
#ifndef SOAP_TYPE_tds__UserCredential
#define SOAP_TYPE_tds__UserCredential (79)
/* complex XML schema type 'tds:UserCredential': */
class SOAP_CMAC tds__UserCredential {
      public:
        /// Required element 'tds:UserName' of XML schema type 'xsd:string'
        std::string UserName;
        /// Optional element 'tds:Password' of XML schema type 'xsd:string'
        std::string *Password;
        /// Optional element 'tds:Extension' of XML schema type 'tds:UserCredential-Extension'
        _tds__UserCredential_Extension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__UserCredential
        virtual long soap_type(void) const { return SOAP_TYPE_tds__UserCredential; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__UserCredential, default initialized and not managed by a soap context
        virtual tds__UserCredential *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__UserCredential); }
      public:
        /// Constructor with default initializations
        tds__UserCredential() : UserName(), Password(), Extension(), soap() { }
        /// Destructor
        virtual ~tds__UserCredential() { }
        /// Friend allocator used by soap_new_tds__UserCredential(struct soap*, int)
        friend SOAP_FMAC1 tds__UserCredential * SOAP_FMAC2 soap_instantiate_tds__UserCredential(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:2071 */
#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension
#define SOAP_TYPE__tds__StorageConfigurationData_Extension (454)
/* complex XML schema type 'tds:StorageConfigurationData-Extension': */
class SOAP_CMAC _tds__StorageConfigurationData_Extension {
      public:
        /// Return unique type id SOAP_TYPE__tds__StorageConfigurationData_Extension
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StorageConfigurationData_Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StorageConfigurationData_Extension, default initialized and not managed by a soap context
        virtual _tds__StorageConfigurationData_Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StorageConfigurationData_Extension); }
      public:
        /// Constructor with default initializations
        _tds__StorageConfigurationData_Extension() { }
        /// Destructor
        virtual ~_tds__StorageConfigurationData_Extension() { }
        /// Friend allocator used by soap_new__tds__StorageConfigurationData_Extension(struct soap*, int)
        friend SOAP_FMAC1 _tds__StorageConfigurationData_Extension * SOAP_FMAC2 soap_instantiate__tds__StorageConfigurationData_Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:258 */
#ifndef SOAP_TYPE_tds__StorageConfigurationData
#define SOAP_TYPE_tds__StorageConfigurationData (80)
/* complex XML schema type 'tds:StorageConfigurationData': */
class SOAP_CMAC tds__StorageConfigurationData {
      public:
        /// Optional element 'tds:LocalPath' of XML schema type 'xsd:anyURI'
        std::string *LocalPath;
        /// Optional element 'tds:StorageUri' of XML schema type 'xsd:anyURI'
        std::string *StorageUri;
        /// Optional element 'tds:User' of XML schema type 'tds:UserCredential'
        tds__UserCredential *User;
        /// Optional element 'tds:Extension' of XML schema type 'tds:StorageConfigurationData-Extension'
        _tds__StorageConfigurationData_Extension *Extension;
        /// Required attribute 'type' of XML schema type 'xsd:string'
        std::string type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tds__StorageConfigurationData
        virtual long soap_type(void) const { return SOAP_TYPE_tds__StorageConfigurationData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__StorageConfigurationData, default initialized and not managed by a soap context
        virtual tds__StorageConfigurationData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__StorageConfigurationData); }
      public:
        /// Constructor with default initializations
        tds__StorageConfigurationData() : LocalPath(), StorageUri(), User(), Extension(), type(), soap() { }
        /// Destructor
        virtual ~tds__StorageConfigurationData() { }
        /// Friend allocator used by soap_new_tds__StorageConfigurationData(struct soap*, int)
        friend SOAP_FMAC1 tds__StorageConfigurationData * SOAP_FMAC2 soap_instantiate_tds__StorageConfigurationData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:262 */
#ifndef SOAP_TYPE__tds__GetServices
#define SOAP_TYPE__tds__GetServices (82)
/* complex XML schema type 'tds:GetServices': */
class SOAP_CMAC _tds__GetServices {
      public:
        /// Required element 'tds:IncludeCapability' of XML schema type 'xsd:boolean'
        bool IncludeCapability;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServices
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServices, default initialized and not managed by a soap context
        virtual _tds__GetServices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServices); }
      public:
        /// Constructor with default initializations
        _tds__GetServices() : IncludeCapability(), soap() { }
        /// Destructor
        virtual ~_tds__GetServices() { }
        /// Friend allocator used by soap_new__tds__GetServices(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServices * SOAP_FMAC2 soap_instantiate__tds__GetServices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:264 */
#ifndef SOAP_TYPE__tds__GetServicesResponse
#define SOAP_TYPE__tds__GetServicesResponse (83)
/* complex XML schema type 'tds:GetServicesResponse': */
class SOAP_CMAC _tds__GetServicesResponse {
      public:
        /// Required element 'tds:Service' of XML schema type 'tds:Service'
        std::vector<tds__Service *> Service;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServicesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServicesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServicesResponse, default initialized and not managed by a soap context
        virtual _tds__GetServicesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServicesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetServicesResponse() : Service(), soap() { }
        /// Destructor
        virtual ~_tds__GetServicesResponse() { }
        /// Friend allocator used by soap_new__tds__GetServicesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServicesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServicesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:266 */
#ifndef SOAP_TYPE__tds__GetServiceCapabilities
#define SOAP_TYPE__tds__GetServiceCapabilities (84)
/* complex XML schema type 'tds:GetServiceCapabilities': */
class SOAP_CMAC _tds__GetServiceCapabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServiceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServiceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServiceCapabilities, default initialized and not managed by a soap context
        virtual _tds__GetServiceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServiceCapabilities); }
      public:
        /// Constructor with default initializations
        _tds__GetServiceCapabilities() : soap() { }
        /// Destructor
        virtual ~_tds__GetServiceCapabilities() { }
        /// Friend allocator used by soap_new__tds__GetServiceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:268 */
#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse (85)
/* complex XML schema type 'tds:GetServiceCapabilitiesResponse': */
class SOAP_CMAC _tds__GetServiceCapabilitiesResponse {
      public:
        /// Required element 'tds:Capabilities' of XML schema type 'tds:DeviceServiceCapabilities'
        tds__DeviceServiceCapabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetServiceCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetServiceCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetServiceCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tds__GetServiceCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetServiceCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetServiceCapabilitiesResponse() : Capabilities(), soap() { }
        /// Destructor
        virtual ~_tds__GetServiceCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tds__GetServiceCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:270 */
#ifndef SOAP_TYPE__tds__GetDeviceInformation
#define SOAP_TYPE__tds__GetDeviceInformation (86)
/* complex XML schema type 'tds:GetDeviceInformation': */
class SOAP_CMAC _tds__GetDeviceInformation {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDeviceInformation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDeviceInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDeviceInformation, default initialized and not managed by a soap context
        virtual _tds__GetDeviceInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDeviceInformation); }
      public:
        /// Constructor with default initializations
        _tds__GetDeviceInformation() : soap() { }
        /// Destructor
        virtual ~_tds__GetDeviceInformation() { }
        /// Friend allocator used by soap_new__tds__GetDeviceInformation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:272 */
#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse
#define SOAP_TYPE__tds__GetDeviceInformationResponse (87)
/* complex XML schema type 'tds:GetDeviceInformationResponse': */
class SOAP_CMAC _tds__GetDeviceInformationResponse {
      public:
        /// Required element 'tds:Manufacturer' of XML schema type 'xsd:string'
        std::string Manufacturer;
        /// Required element 'tds:Model' of XML schema type 'xsd:string'
        std::string Model;
        /// Required element 'tds:FirmwareVersion' of XML schema type 'xsd:string'
        std::string FirmwareVersion;
        /// Required element 'tds:SerialNumber' of XML schema type 'xsd:string'
        std::string SerialNumber;
        /// Required element 'tds:HardwareId' of XML schema type 'xsd:string'
        std::string HardwareId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDeviceInformationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDeviceInformationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDeviceInformationResponse, default initialized and not managed by a soap context
        virtual _tds__GetDeviceInformationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDeviceInformationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDeviceInformationResponse() : Manufacturer(), Model(), FirmwareVersion(), SerialNumber(), HardwareId(), soap() { }
        /// Destructor
        virtual ~_tds__GetDeviceInformationResponse() { }
        /// Friend allocator used by soap_new__tds__GetDeviceInformationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDeviceInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:274 */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTime
#define SOAP_TYPE__tds__SetSystemDateAndTime (88)
/* complex XML schema type 'tds:SetSystemDateAndTime': */
class SOAP_CMAC _tds__SetSystemDateAndTime {
      public:
        /// Required element 'tds:DateTimeType' of XML schema type 'tt:SetDateTimeType'
        enum tt__SetDateTimeType DateTimeType;
        /// Required element 'tds:DaylightSavings' of XML schema type 'xsd:boolean'
        bool DaylightSavings;
        /// Optional element 'tds:TimeZone' of XML schema type 'tt:TimeZone'
        tt__TimeZone *TimeZone;
        /// Optional element 'tds:UTCDateTime' of XML schema type 'tt:DateTime'
        tt__DateTime *UTCDateTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemDateAndTime
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemDateAndTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemDateAndTime, default initialized and not managed by a soap context
        virtual _tds__SetSystemDateAndTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemDateAndTime); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemDateAndTime() : DateTimeType(), DaylightSavings(), TimeZone(), UTCDateTime(), soap() { }
        /// Destructor
        virtual ~_tds__SetSystemDateAndTime() { }
        /// Friend allocator used by soap_new__tds__SetSystemDateAndTime(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:276 */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse (89)
/* complex XML schema type 'tds:SetSystemDateAndTimeResponse': */
class SOAP_CMAC _tds__SetSystemDateAndTimeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemDateAndTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemDateAndTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemDateAndTimeResponse, default initialized and not managed by a soap context
        virtual _tds__SetSystemDateAndTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemDateAndTimeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemDateAndTimeResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetSystemDateAndTimeResponse() { }
        /// Friend allocator used by soap_new__tds__SetSystemDateAndTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:278 */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTime
#define SOAP_TYPE__tds__GetSystemDateAndTime (90)
/* complex XML schema type 'tds:GetSystemDateAndTime': */
class SOAP_CMAC _tds__GetSystemDateAndTime {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemDateAndTime
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemDateAndTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemDateAndTime, default initialized and not managed by a soap context
        virtual _tds__GetSystemDateAndTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemDateAndTime); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemDateAndTime() : soap() { }
        /// Destructor
        virtual ~_tds__GetSystemDateAndTime() { }
        /// Friend allocator used by soap_new__tds__GetSystemDateAndTime(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:280 */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse (91)
/* complex XML schema type 'tds:GetSystemDateAndTimeResponse': */
class SOAP_CMAC _tds__GetSystemDateAndTimeResponse {
      public:
        /// Required element 'tds:SystemDateAndTime' of XML schema type 'tt:SystemDateTime'
        tt__SystemDateTime *SystemDateAndTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemDateAndTimeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemDateAndTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemDateAndTimeResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemDateAndTimeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemDateAndTimeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemDateAndTimeResponse() : SystemDateAndTime(), soap() { }
        /// Destructor
        virtual ~_tds__GetSystemDateAndTimeResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemDateAndTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:282 */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault
#define SOAP_TYPE__tds__SetSystemFactoryDefault (92)
/* complex XML schema type 'tds:SetSystemFactoryDefault': */
class SOAP_CMAC _tds__SetSystemFactoryDefault {
      public:
        /// Required element 'tds:FactoryDefault' of XML schema type 'tt:FactoryDefaultType'
        enum tt__FactoryDefaultType FactoryDefault;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemFactoryDefault
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemFactoryDefault; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemFactoryDefault, default initialized and not managed by a soap context
        virtual _tds__SetSystemFactoryDefault *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemFactoryDefault); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemFactoryDefault() : FactoryDefault(), soap() { }
        /// Destructor
        virtual ~_tds__SetSystemFactoryDefault() { }
        /// Friend allocator used by soap_new__tds__SetSystemFactoryDefault(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:284 */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse (93)
/* complex XML schema type 'tds:SetSystemFactoryDefaultResponse': */
class SOAP_CMAC _tds__SetSystemFactoryDefaultResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetSystemFactoryDefaultResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetSystemFactoryDefaultResponse, default initialized and not managed by a soap context
        virtual _tds__SetSystemFactoryDefaultResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetSystemFactoryDefaultResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetSystemFactoryDefaultResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetSystemFactoryDefaultResponse() { }
        /// Friend allocator used by soap_new__tds__SetSystemFactoryDefaultResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefaultResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:286 */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware
#define SOAP_TYPE__tds__UpgradeSystemFirmware (94)
/* complex XML schema type 'tds:UpgradeSystemFirmware': */
class SOAP_CMAC _tds__UpgradeSystemFirmware {
      public:
        /// Required element 'tds:Firmware' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Firmware;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__UpgradeSystemFirmware
        virtual long soap_type(void) const { return SOAP_TYPE__tds__UpgradeSystemFirmware; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__UpgradeSystemFirmware, default initialized and not managed by a soap context
        virtual _tds__UpgradeSystemFirmware *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__UpgradeSystemFirmware); }
      public:
        /// Constructor with default initializations
        _tds__UpgradeSystemFirmware() : Firmware(), soap() { }
        /// Destructor
        virtual ~_tds__UpgradeSystemFirmware() { }
        /// Friend allocator used by soap_new__tds__UpgradeSystemFirmware(struct soap*, int)
        friend SOAP_FMAC1 _tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:288 */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse (95)
/* complex XML schema type 'tds:UpgradeSystemFirmwareResponse': */
class SOAP_CMAC _tds__UpgradeSystemFirmwareResponse {
      public:
        /// Optional element 'tds:Message' of XML schema type 'xsd:string'
        std::string *Message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__UpgradeSystemFirmwareResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__UpgradeSystemFirmwareResponse, default initialized and not managed by a soap context
        virtual _tds__UpgradeSystemFirmwareResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__UpgradeSystemFirmwareResponse); }
      public:
        /// Constructor with default initializations
        _tds__UpgradeSystemFirmwareResponse() : Message(), soap() { }
        /// Destructor
        virtual ~_tds__UpgradeSystemFirmwareResponse() { }
        /// Friend allocator used by soap_new__tds__UpgradeSystemFirmwareResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmwareResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:290 */
#ifndef SOAP_TYPE__tds__SystemReboot
#define SOAP_TYPE__tds__SystemReboot (96)
/* complex XML schema type 'tds:SystemReboot': */
class SOAP_CMAC _tds__SystemReboot {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SystemReboot
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SystemReboot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SystemReboot, default initialized and not managed by a soap context
        virtual _tds__SystemReboot *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SystemReboot); }
      public:
        /// Constructor with default initializations
        _tds__SystemReboot() : soap() { }
        /// Destructor
        virtual ~_tds__SystemReboot() { }
        /// Friend allocator used by soap_new__tds__SystemReboot(struct soap*, int)
        friend SOAP_FMAC1 _tds__SystemReboot * SOAP_FMAC2 soap_instantiate__tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:292 */
#ifndef SOAP_TYPE__tds__SystemRebootResponse
#define SOAP_TYPE__tds__SystemRebootResponse (97)
/* complex XML schema type 'tds:SystemRebootResponse': */
class SOAP_CMAC _tds__SystemRebootResponse {
      public:
        /// Required element 'tds:Message' of XML schema type 'xsd:string'
        std::string Message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SystemRebootResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SystemRebootResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SystemRebootResponse, default initialized and not managed by a soap context
        virtual _tds__SystemRebootResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SystemRebootResponse); }
      public:
        /// Constructor with default initializations
        _tds__SystemRebootResponse() : Message(), soap() { }
        /// Destructor
        virtual ~_tds__SystemRebootResponse() { }
        /// Friend allocator used by soap_new__tds__SystemRebootResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SystemRebootResponse * SOAP_FMAC2 soap_instantiate__tds__SystemRebootResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:294 */
#ifndef SOAP_TYPE__tds__RestoreSystem
#define SOAP_TYPE__tds__RestoreSystem (98)
/* complex XML schema type 'tds:RestoreSystem': */
class SOAP_CMAC _tds__RestoreSystem {
      public:
        /// Required element 'tds:BackupFiles' of XML schema type 'tt:BackupFile'
        std::vector<tt__BackupFile *> BackupFiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RestoreSystem
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RestoreSystem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RestoreSystem, default initialized and not managed by a soap context
        virtual _tds__RestoreSystem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RestoreSystem); }
      public:
        /// Constructor with default initializations
        _tds__RestoreSystem() : BackupFiles(), soap() { }
        /// Destructor
        virtual ~_tds__RestoreSystem() { }
        /// Friend allocator used by soap_new__tds__RestoreSystem(struct soap*, int)
        friend SOAP_FMAC1 _tds__RestoreSystem * SOAP_FMAC2 soap_instantiate__tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:296 */
#ifndef SOAP_TYPE__tds__RestoreSystemResponse
#define SOAP_TYPE__tds__RestoreSystemResponse (99)
/* complex XML schema type 'tds:RestoreSystemResponse': */
class SOAP_CMAC _tds__RestoreSystemResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RestoreSystemResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RestoreSystemResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RestoreSystemResponse, default initialized and not managed by a soap context
        virtual _tds__RestoreSystemResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RestoreSystemResponse); }
      public:
        /// Constructor with default initializations
        _tds__RestoreSystemResponse() : soap() { }
        /// Destructor
        virtual ~_tds__RestoreSystemResponse() { }
        /// Friend allocator used by soap_new__tds__RestoreSystemResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__RestoreSystemResponse * SOAP_FMAC2 soap_instantiate__tds__RestoreSystemResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:298 */
#ifndef SOAP_TYPE__tds__GetSystemBackup
#define SOAP_TYPE__tds__GetSystemBackup (100)
/* complex XML schema type 'tds:GetSystemBackup': */
class SOAP_CMAC _tds__GetSystemBackup {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemBackup
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemBackup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemBackup, default initialized and not managed by a soap context
        virtual _tds__GetSystemBackup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemBackup); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemBackup() : soap() { }
        /// Destructor
        virtual ~_tds__GetSystemBackup() { }
        /// Friend allocator used by soap_new__tds__GetSystemBackup(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:300 */
#ifndef SOAP_TYPE__tds__GetSystemBackupResponse
#define SOAP_TYPE__tds__GetSystemBackupResponse (101)
/* complex XML schema type 'tds:GetSystemBackupResponse': */
class SOAP_CMAC _tds__GetSystemBackupResponse {
      public:
        /// Required element 'tds:BackupFiles' of XML schema type 'tt:BackupFile'
        std::vector<tt__BackupFile *> BackupFiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemBackupResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemBackupResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemBackupResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemBackupResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemBackupResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemBackupResponse() : BackupFiles(), soap() { }
        /// Destructor
        virtual ~_tds__GetSystemBackupResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemBackupResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemBackupResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackupResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:302 */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformation
#define SOAP_TYPE__tds__GetSystemSupportInformation (102)
/* complex XML schema type 'tds:GetSystemSupportInformation': */
class SOAP_CMAC _tds__GetSystemSupportInformation {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemSupportInformation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemSupportInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemSupportInformation, default initialized and not managed by a soap context
        virtual _tds__GetSystemSupportInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemSupportInformation); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemSupportInformation() : soap() { }
        /// Destructor
        virtual ~_tds__GetSystemSupportInformation() { }
        /// Friend allocator used by soap_new__tds__GetSystemSupportInformation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:304 */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse (103)
/* complex XML schema type 'tds:GetSystemSupportInformationResponse': */
class SOAP_CMAC _tds__GetSystemSupportInformationResponse {
      public:
        /// Required element 'tds:SupportInformation' of XML schema type 'tt:SupportInformation'
        tt__SupportInformation *SupportInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemSupportInformationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemSupportInformationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemSupportInformationResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemSupportInformationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemSupportInformationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemSupportInformationResponse() : SupportInformation(), soap() { }
        /// Destructor
        virtual ~_tds__GetSystemSupportInformationResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemSupportInformationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemSupportInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:306 */
#ifndef SOAP_TYPE__tds__GetSystemLog
#define SOAP_TYPE__tds__GetSystemLog (104)
/* complex XML schema type 'tds:GetSystemLog': */
class SOAP_CMAC _tds__GetSystemLog {
      public:
        /// Required element 'tds:LogType' of XML schema type 'tt:SystemLogType'
        enum tt__SystemLogType LogType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemLog
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemLog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemLog, default initialized and not managed by a soap context
        virtual _tds__GetSystemLog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemLog); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemLog() : LogType(), soap() { }
        /// Destructor
        virtual ~_tds__GetSystemLog() { }
        /// Friend allocator used by soap_new__tds__GetSystemLog(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemLog * SOAP_FMAC2 soap_instantiate__tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:308 */
#ifndef SOAP_TYPE__tds__GetSystemLogResponse
#define SOAP_TYPE__tds__GetSystemLogResponse (105)
/* complex XML schema type 'tds:GetSystemLogResponse': */
class SOAP_CMAC _tds__GetSystemLogResponse {
      public:
        /// Required element 'tds:SystemLog' of XML schema type 'tt:SystemLog'
        tt__SystemLog *SystemLog;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemLogResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemLogResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemLogResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemLogResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemLogResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemLogResponse() : SystemLog(), soap() { }
        /// Destructor
        virtual ~_tds__GetSystemLogResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemLogResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemLogResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemLogResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:310 */
#ifndef SOAP_TYPE__tds__GetScopes
#define SOAP_TYPE__tds__GetScopes (106)
/* complex XML schema type 'tds:GetScopes': */
class SOAP_CMAC _tds__GetScopes {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetScopes, default initialized and not managed by a soap context
        virtual _tds__GetScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetScopes); }
      public:
        /// Constructor with default initializations
        _tds__GetScopes() : soap() { }
        /// Destructor
        virtual ~_tds__GetScopes() { }
        /// Friend allocator used by soap_new__tds__GetScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetScopes * SOAP_FMAC2 soap_instantiate__tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:312 */
#ifndef SOAP_TYPE__tds__GetScopesResponse
#define SOAP_TYPE__tds__GetScopesResponse (107)
/* complex XML schema type 'tds:GetScopesResponse': */
class SOAP_CMAC _tds__GetScopesResponse {
      public:
        /// Required element 'tds:Scopes' of XML schema type 'tt:Scope'
        std::vector<tt__Scope *> Scopes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetScopesResponse, default initialized and not managed by a soap context
        virtual _tds__GetScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetScopesResponse() : Scopes(), soap() { }
        /// Destructor
        virtual ~_tds__GetScopesResponse() { }
        /// Friend allocator used by soap_new__tds__GetScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__GetScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:314 */
#ifndef SOAP_TYPE__tds__SetScopes
#define SOAP_TYPE__tds__SetScopes (108)
/* complex XML schema type 'tds:SetScopes': */
class SOAP_CMAC _tds__SetScopes {
      public:
        /// Required element 'tds:Scopes' of XML schema type 'xsd:anyURI'
        std::vector<std::string> Scopes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetScopes, default initialized and not managed by a soap context
        virtual _tds__SetScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetScopes); }
      public:
        /// Constructor with default initializations
        _tds__SetScopes() : Scopes(), soap() { }
        /// Destructor
        virtual ~_tds__SetScopes() { }
        /// Friend allocator used by soap_new__tds__SetScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetScopes * SOAP_FMAC2 soap_instantiate__tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:316 */
#ifndef SOAP_TYPE__tds__SetScopesResponse
#define SOAP_TYPE__tds__SetScopesResponse (109)
/* complex XML schema type 'tds:SetScopesResponse': */
class SOAP_CMAC _tds__SetScopesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetScopesResponse, default initialized and not managed by a soap context
        virtual _tds__SetScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetScopesResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetScopesResponse() { }
        /// Friend allocator used by soap_new__tds__SetScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__SetScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:318 */
#ifndef SOAP_TYPE__tds__AddScopes
#define SOAP_TYPE__tds__AddScopes (110)
/* complex XML schema type 'tds:AddScopes': */
class SOAP_CMAC _tds__AddScopes {
      public:
        /// Required element 'tds:ScopeItem' of XML schema type 'xsd:anyURI'
        std::vector<std::string> ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddScopes, default initialized and not managed by a soap context
        virtual _tds__AddScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddScopes); }
      public:
        /// Constructor with default initializations
        _tds__AddScopes() : ScopeItem(), soap() { }
        /// Destructor
        virtual ~_tds__AddScopes() { }
        /// Friend allocator used by soap_new__tds__AddScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddScopes * SOAP_FMAC2 soap_instantiate__tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:320 */
#ifndef SOAP_TYPE__tds__AddScopesResponse
#define SOAP_TYPE__tds__AddScopesResponse (111)
/* complex XML schema type 'tds:AddScopesResponse': */
class SOAP_CMAC _tds__AddScopesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddScopesResponse, default initialized and not managed by a soap context
        virtual _tds__AddScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__AddScopesResponse() : soap() { }
        /// Destructor
        virtual ~_tds__AddScopesResponse() { }
        /// Friend allocator used by soap_new__tds__AddScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddScopesResponse * SOAP_FMAC2 soap_instantiate__tds__AddScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:322 */
#ifndef SOAP_TYPE__tds__RemoveScopes
#define SOAP_TYPE__tds__RemoveScopes (112)
/* complex XML schema type 'tds:RemoveScopes': */
class SOAP_CMAC _tds__RemoveScopes {
      public:
        /// Required element 'tds:ScopeItem' of XML schema type 'xsd:anyURI'
        std::vector<std::string> ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveScopes
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveScopes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveScopes, default initialized and not managed by a soap context
        virtual _tds__RemoveScopes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveScopes); }
      public:
        /// Constructor with default initializations
        _tds__RemoveScopes() : ScopeItem(), soap() { }
        /// Destructor
        virtual ~_tds__RemoveScopes() { }
        /// Friend allocator used by soap_new__tds__RemoveScopes(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveScopes * SOAP_FMAC2 soap_instantiate__tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:324 */
#ifndef SOAP_TYPE__tds__RemoveScopesResponse
#define SOAP_TYPE__tds__RemoveScopesResponse (113)
/* complex XML schema type 'tds:RemoveScopesResponse': */
class SOAP_CMAC _tds__RemoveScopesResponse {
      public:
        /// Optional element 'tds:ScopeItem' of XML schema type 'xsd:anyURI'
        std::vector<std::string> ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveScopesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveScopesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveScopesResponse, default initialized and not managed by a soap context
        virtual _tds__RemoveScopesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveScopesResponse); }
      public:
        /// Constructor with default initializations
        _tds__RemoveScopesResponse() : ScopeItem(), soap() { }
        /// Destructor
        virtual ~_tds__RemoveScopesResponse() { }
        /// Friend allocator used by soap_new__tds__RemoveScopesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveScopesResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveScopesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:326 */
#ifndef SOAP_TYPE__tds__GetDiscoveryMode
#define SOAP_TYPE__tds__GetDiscoveryMode (114)
/* complex XML schema type 'tds:GetDiscoveryMode': */
class SOAP_CMAC _tds__GetDiscoveryMode {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__GetDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__GetDiscoveryMode() : soap() { }
        /// Destructor
        virtual ~_tds__GetDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__GetDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:328 */
#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse
#define SOAP_TYPE__tds__GetDiscoveryModeResponse (115)
/* complex XML schema type 'tds:GetDiscoveryModeResponse': */
class SOAP_CMAC _tds__GetDiscoveryModeResponse {
      public:
        /// Required element 'tds:DiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode DiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__GetDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDiscoveryModeResponse() : DiscoveryMode(), soap() { }
        /// Destructor
        virtual ~_tds__GetDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__GetDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:330 */
#ifndef SOAP_TYPE__tds__SetDiscoveryMode
#define SOAP_TYPE__tds__SetDiscoveryMode (116)
/* complex XML schema type 'tds:SetDiscoveryMode': */
class SOAP_CMAC _tds__SetDiscoveryMode {
      public:
        /// Required element 'tds:DiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode DiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__SetDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__SetDiscoveryMode() : DiscoveryMode(), soap() { }
        /// Destructor
        virtual ~_tds__SetDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__SetDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:332 */
#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse
#define SOAP_TYPE__tds__SetDiscoveryModeResponse (117)
/* complex XML schema type 'tds:SetDiscoveryModeResponse': */
class SOAP_CMAC _tds__SetDiscoveryModeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__SetDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDiscoveryModeResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__SetDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:334 */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode (118)
/* complex XML schema type 'tds:GetRemoteDiscoveryMode': */
class SOAP_CMAC _tds__GetRemoteDiscoveryMode {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__GetRemoteDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteDiscoveryMode() : soap() { }
        /// Destructor
        virtual ~_tds__GetRemoteDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__GetRemoteDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:336 */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse (119)
/* complex XML schema type 'tds:GetRemoteDiscoveryModeResponse': */
class SOAP_CMAC _tds__GetRemoteDiscoveryModeResponse {
      public:
        /// Required element 'tds:RemoteDiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode RemoteDiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__GetRemoteDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteDiscoveryModeResponse() : RemoteDiscoveryMode(), soap() { }
        /// Destructor
        virtual ~_tds__GetRemoteDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__GetRemoteDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:338 */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode (120)
/* complex XML schema type 'tds:SetRemoteDiscoveryMode': */
class SOAP_CMAC _tds__SetRemoteDiscoveryMode {
      public:
        /// Required element 'tds:RemoteDiscoveryMode' of XML schema type 'tt:DiscoveryMode'
        enum tt__DiscoveryMode RemoteDiscoveryMode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteDiscoveryMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteDiscoveryMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteDiscoveryMode, default initialized and not managed by a soap context
        virtual _tds__SetRemoteDiscoveryMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteDiscoveryMode); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteDiscoveryMode() : RemoteDiscoveryMode(), soap() { }
        /// Destructor
        virtual ~_tds__SetRemoteDiscoveryMode() { }
        /// Friend allocator used by soap_new__tds__SetRemoteDiscoveryMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:340 */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse (121)
/* complex XML schema type 'tds:SetRemoteDiscoveryModeResponse': */
class SOAP_CMAC _tds__SetRemoteDiscoveryModeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteDiscoveryModeResponse, default initialized and not managed by a soap context
        virtual _tds__SetRemoteDiscoveryModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteDiscoveryModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteDiscoveryModeResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetRemoteDiscoveryModeResponse() { }
        /// Friend allocator used by soap_new__tds__SetRemoteDiscoveryModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:342 */
#ifndef SOAP_TYPE__tds__GetDPAddresses
#define SOAP_TYPE__tds__GetDPAddresses (122)
/* complex XML schema type 'tds:GetDPAddresses': */
class SOAP_CMAC _tds__GetDPAddresses {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDPAddresses
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDPAddresses; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDPAddresses, default initialized and not managed by a soap context
        virtual _tds__GetDPAddresses *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDPAddresses); }
      public:
        /// Constructor with default initializations
        _tds__GetDPAddresses() : soap() { }
        /// Destructor
        virtual ~_tds__GetDPAddresses() { }
        /// Friend allocator used by soap_new__tds__GetDPAddresses(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:344 */
#ifndef SOAP_TYPE__tds__GetDPAddressesResponse
#define SOAP_TYPE__tds__GetDPAddressesResponse (123)
/* complex XML schema type 'tds:GetDPAddressesResponse': */
class SOAP_CMAC _tds__GetDPAddressesResponse {
      public:
        /// Optional element 'tds:DPAddress' of XML schema type 'tt:NetworkHost'
        std::vector<tt__NetworkHost *> DPAddress;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDPAddressesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDPAddressesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDPAddressesResponse, default initialized and not managed by a soap context
        virtual _tds__GetDPAddressesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDPAddressesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDPAddressesResponse() : DPAddress(), soap() { }
        /// Destructor
        virtual ~_tds__GetDPAddressesResponse() { }
        /// Friend allocator used by soap_new__tds__GetDPAddressesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:346 */
#ifndef SOAP_TYPE__tds__SetDPAddresses
#define SOAP_TYPE__tds__SetDPAddresses (124)
/* complex XML schema type 'tds:SetDPAddresses': */
class SOAP_CMAC _tds__SetDPAddresses {
      public:
        /// Optional element 'tds:DPAddress' of XML schema type 'tt:NetworkHost'
        std::vector<tt__NetworkHost *> DPAddress;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDPAddresses
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDPAddresses; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDPAddresses, default initialized and not managed by a soap context
        virtual _tds__SetDPAddresses *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDPAddresses); }
      public:
        /// Constructor with default initializations
        _tds__SetDPAddresses() : DPAddress(), soap() { }
        /// Destructor
        virtual ~_tds__SetDPAddresses() { }
        /// Friend allocator used by soap_new__tds__SetDPAddresses(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:348 */
#ifndef SOAP_TYPE__tds__SetDPAddressesResponse
#define SOAP_TYPE__tds__SetDPAddressesResponse (125)
/* complex XML schema type 'tds:SetDPAddressesResponse': */
class SOAP_CMAC _tds__SetDPAddressesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDPAddressesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDPAddressesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDPAddressesResponse, default initialized and not managed by a soap context
        virtual _tds__SetDPAddressesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDPAddressesResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDPAddressesResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetDPAddressesResponse() { }
        /// Friend allocator used by soap_new__tds__SetDPAddressesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__SetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:350 */
#ifndef SOAP_TYPE__tds__GetEndpointReference
#define SOAP_TYPE__tds__GetEndpointReference (126)
/* complex XML schema type 'tds:GetEndpointReference': */
class SOAP_CMAC _tds__GetEndpointReference {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetEndpointReference
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetEndpointReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetEndpointReference, default initialized and not managed by a soap context
        virtual _tds__GetEndpointReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetEndpointReference); }
      public:
        /// Constructor with default initializations
        _tds__GetEndpointReference() : soap() { }
        /// Destructor
        virtual ~_tds__GetEndpointReference() { }
        /// Friend allocator used by soap_new__tds__GetEndpointReference(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:352 */
#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse
#define SOAP_TYPE__tds__GetEndpointReferenceResponse (127)
/* complex XML schema type 'tds:GetEndpointReferenceResponse': */
class SOAP_CMAC _tds__GetEndpointReferenceResponse {
      public:
        /// Required element 'tds:GUID' of XML schema type 'xsd:string'
        std::string GUID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetEndpointReferenceResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetEndpointReferenceResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetEndpointReferenceResponse, default initialized and not managed by a soap context
        virtual _tds__GetEndpointReferenceResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetEndpointReferenceResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetEndpointReferenceResponse() : GUID(), soap() { }
        /// Destructor
        virtual ~_tds__GetEndpointReferenceResponse() { }
        /// Friend allocator used by soap_new__tds__GetEndpointReferenceResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetEndpointReferenceResponse * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReferenceResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:354 */
#ifndef SOAP_TYPE__tds__GetRemoteUser
#define SOAP_TYPE__tds__GetRemoteUser (128)
/* complex XML schema type 'tds:GetRemoteUser': */
class SOAP_CMAC _tds__GetRemoteUser {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteUser
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteUser, default initialized and not managed by a soap context
        virtual _tds__GetRemoteUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteUser); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteUser() : soap() { }
        /// Destructor
        virtual ~_tds__GetRemoteUser() { }
        /// Friend allocator used by soap_new__tds__GetRemoteUser(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:356 */
#ifndef SOAP_TYPE__tds__GetRemoteUserResponse
#define SOAP_TYPE__tds__GetRemoteUserResponse (129)
/* complex XML schema type 'tds:GetRemoteUserResponse': */
class SOAP_CMAC _tds__GetRemoteUserResponse {
      public:
        /// Optional element 'tds:RemoteUser' of XML schema type 'tt:RemoteUser'
        tt__RemoteUser *RemoteUser;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRemoteUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRemoteUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRemoteUserResponse, default initialized and not managed by a soap context
        virtual _tds__GetRemoteUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRemoteUserResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetRemoteUserResponse() : RemoteUser(), soap() { }
        /// Destructor
        virtual ~_tds__GetRemoteUserResponse() { }
        /// Friend allocator used by soap_new__tds__GetRemoteUserResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:358 */
#ifndef SOAP_TYPE__tds__SetRemoteUser
#define SOAP_TYPE__tds__SetRemoteUser (130)
/* complex XML schema type 'tds:SetRemoteUser': */
class SOAP_CMAC _tds__SetRemoteUser {
      public:
        /// Optional element 'tds:RemoteUser' of XML schema type 'tt:RemoteUser'
        tt__RemoteUser *RemoteUser;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteUser
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteUser, default initialized and not managed by a soap context
        virtual _tds__SetRemoteUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteUser); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteUser() : RemoteUser(), soap() { }
        /// Destructor
        virtual ~_tds__SetRemoteUser() { }
        /// Friend allocator used by soap_new__tds__SetRemoteUser(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:360 */
#ifndef SOAP_TYPE__tds__SetRemoteUserResponse
#define SOAP_TYPE__tds__SetRemoteUserResponse (131)
/* complex XML schema type 'tds:SetRemoteUserResponse': */
class SOAP_CMAC _tds__SetRemoteUserResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRemoteUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRemoteUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRemoteUserResponse, default initialized and not managed by a soap context
        virtual _tds__SetRemoteUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRemoteUserResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRemoteUserResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetRemoteUserResponse() { }
        /// Friend allocator used by soap_new__tds__SetRemoteUserResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:362 */
#ifndef SOAP_TYPE__tds__GetUsers
#define SOAP_TYPE__tds__GetUsers (132)
/* complex XML schema type 'tds:GetUsers': */
class SOAP_CMAC _tds__GetUsers {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetUsers
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetUsers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetUsers, default initialized and not managed by a soap context
        virtual _tds__GetUsers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetUsers); }
      public:
        /// Constructor with default initializations
        _tds__GetUsers() : soap() { }
        /// Destructor
        virtual ~_tds__GetUsers() { }
        /// Friend allocator used by soap_new__tds__GetUsers(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetUsers * SOAP_FMAC2 soap_instantiate__tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:364 */
#ifndef SOAP_TYPE__tds__GetUsersResponse
#define SOAP_TYPE__tds__GetUsersResponse (133)
/* complex XML schema type 'tds:GetUsersResponse': */
class SOAP_CMAC _tds__GetUsersResponse {
      public:
        /// Optional element 'tds:User' of XML schema type 'tt:User'
        std::vector<tt__User *> User;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetUsersResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetUsersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetUsersResponse, default initialized and not managed by a soap context
        virtual _tds__GetUsersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetUsersResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetUsersResponse() : User(), soap() { }
        /// Destructor
        virtual ~_tds__GetUsersResponse() { }
        /// Friend allocator used by soap_new__tds__GetUsersResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetUsersResponse * SOAP_FMAC2 soap_instantiate__tds__GetUsersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:366 */
#ifndef SOAP_TYPE__tds__CreateUsers
#define SOAP_TYPE__tds__CreateUsers (134)
/* complex XML schema type 'tds:CreateUsers': */
class SOAP_CMAC _tds__CreateUsers {
      public:
        /// Required element 'tds:User' of XML schema type 'tt:User'
        std::vector<tt__User *> User;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateUsers
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateUsers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateUsers, default initialized and not managed by a soap context
        virtual _tds__CreateUsers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateUsers); }
      public:
        /// Constructor with default initializations
        _tds__CreateUsers() : User(), soap() { }
        /// Destructor
        virtual ~_tds__CreateUsers() { }
        /// Friend allocator used by soap_new__tds__CreateUsers(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateUsers * SOAP_FMAC2 soap_instantiate__tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:368 */
#ifndef SOAP_TYPE__tds__CreateUsersResponse
#define SOAP_TYPE__tds__CreateUsersResponse (135)
/* complex XML schema type 'tds:CreateUsersResponse': */
class SOAP_CMAC _tds__CreateUsersResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateUsersResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateUsersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateUsersResponse, default initialized and not managed by a soap context
        virtual _tds__CreateUsersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateUsersResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateUsersResponse() : soap() { }
        /// Destructor
        virtual ~_tds__CreateUsersResponse() { }
        /// Friend allocator used by soap_new__tds__CreateUsersResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateUsersResponse * SOAP_FMAC2 soap_instantiate__tds__CreateUsersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:370 */
#ifndef SOAP_TYPE__tds__DeleteUsers
#define SOAP_TYPE__tds__DeleteUsers (136)
/* complex XML schema type 'tds:DeleteUsers': */
class SOAP_CMAC _tds__DeleteUsers {
      public:
        /// Required element 'tds:Username' of XML schema type 'xsd:string'
        std::vector<std::string> Username;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteUsers
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteUsers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteUsers, default initialized and not managed by a soap context
        virtual _tds__DeleteUsers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteUsers); }
      public:
        /// Constructor with default initializations
        _tds__DeleteUsers() : Username(), soap() { }
        /// Destructor
        virtual ~_tds__DeleteUsers() { }
        /// Friend allocator used by soap_new__tds__DeleteUsers(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteUsers * SOAP_FMAC2 soap_instantiate__tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:372 */
#ifndef SOAP_TYPE__tds__DeleteUsersResponse
#define SOAP_TYPE__tds__DeleteUsersResponse (137)
/* complex XML schema type 'tds:DeleteUsersResponse': */
class SOAP_CMAC _tds__DeleteUsersResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteUsersResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteUsersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteUsersResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteUsersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteUsersResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteUsersResponse() : soap() { }
        /// Destructor
        virtual ~_tds__DeleteUsersResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteUsersResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteUsersResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteUsersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:374 */
#ifndef SOAP_TYPE__tds__SetUser
#define SOAP_TYPE__tds__SetUser (138)
/* complex XML schema type 'tds:SetUser': */
class SOAP_CMAC _tds__SetUser {
      public:
        /// Required element 'tds:User' of XML schema type 'tt:User'
        std::vector<tt__User *> User;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetUser
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetUser, default initialized and not managed by a soap context
        virtual _tds__SetUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetUser); }
      public:
        /// Constructor with default initializations
        _tds__SetUser() : User(), soap() { }
        /// Destructor
        virtual ~_tds__SetUser() { }
        /// Friend allocator used by soap_new__tds__SetUser(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetUser * SOAP_FMAC2 soap_instantiate__tds__SetUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:376 */
#ifndef SOAP_TYPE__tds__SetUserResponse
#define SOAP_TYPE__tds__SetUserResponse (139)
/* complex XML schema type 'tds:SetUserResponse': */
class SOAP_CMAC _tds__SetUserResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetUserResponse, default initialized and not managed by a soap context
        virtual _tds__SetUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetUserResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetUserResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetUserResponse() { }
        /// Friend allocator used by soap_new__tds__SetUserResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:378 */
#ifndef SOAP_TYPE__tds__GetWsdlUrl
#define SOAP_TYPE__tds__GetWsdlUrl (140)
/* complex XML schema type 'tds:GetWsdlUrl': */
class SOAP_CMAC _tds__GetWsdlUrl {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetWsdlUrl
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetWsdlUrl; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetWsdlUrl, default initialized and not managed by a soap context
        virtual _tds__GetWsdlUrl *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetWsdlUrl); }
      public:
        /// Constructor with default initializations
        _tds__GetWsdlUrl() : soap() { }
        /// Destructor
        virtual ~_tds__GetWsdlUrl() { }
        /// Friend allocator used by soap_new__tds__GetWsdlUrl(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:380 */
#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse
#define SOAP_TYPE__tds__GetWsdlUrlResponse (141)
/* complex XML schema type 'tds:GetWsdlUrlResponse': */
class SOAP_CMAC _tds__GetWsdlUrlResponse {
      public:
        /// Required element 'tds:WsdlUrl' of XML schema type 'xsd:anyURI'
        std::string WsdlUrl;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetWsdlUrlResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetWsdlUrlResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetWsdlUrlResponse, default initialized and not managed by a soap context
        virtual _tds__GetWsdlUrlResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetWsdlUrlResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetWsdlUrlResponse() : WsdlUrl(), soap() { }
        /// Destructor
        virtual ~_tds__GetWsdlUrlResponse() { }
        /// Friend allocator used by soap_new__tds__GetWsdlUrlResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetWsdlUrlResponse * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrlResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:382 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptions
#define SOAP_TYPE__tds__GetPasswordComplexityOptions (142)
/* complex XML schema type 'tds:GetPasswordComplexityOptions': */
class SOAP_CMAC _tds__GetPasswordComplexityOptions {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityOptions, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityOptions); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityOptions() : soap() { }
        /// Destructor
        virtual ~_tds__GetPasswordComplexityOptions() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityOptions(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityOptions * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:384 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse
#define SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse (143)
/* complex XML schema type 'tds:GetPasswordComplexityOptionsResponse': */
class SOAP_CMAC _tds__GetPasswordComplexityOptionsResponse {
      public:
        /// Optional element 'tds:MinLenRange' of XML schema type 'tt:IntRange'
        tt__IntRange *MinLenRange;
        /// Optional element 'tds:UppercaseRange' of XML schema type 'tt:IntRange'
        tt__IntRange *UppercaseRange;
        /// Optional element 'tds:NumberRange' of XML schema type 'tt:IntRange'
        tt__IntRange *NumberRange;
        /// Optional element 'tds:SpecialCharsRange' of XML schema type 'tt:IntRange'
        tt__IntRange *SpecialCharsRange;
        /// Optional element 'tds:BlockUsernameOccurrenceSupported' of XML schema type 'xsd:boolean'
        bool *BlockUsernameOccurrenceSupported;
        /// Optional element 'tds:PolicyConfigurationLockSupported' of XML schema type 'xsd:boolean'
        bool *PolicyConfigurationLockSupported;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityOptionsResponse, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityOptionsResponse() : MinLenRange(), UppercaseRange(), NumberRange(), SpecialCharsRange(), BlockUsernameOccurrenceSupported(), PolicyConfigurationLockSupported(), soap() { }
        /// Destructor
        virtual ~_tds__GetPasswordComplexityOptionsResponse() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityOptionsResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:386 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__GetPasswordComplexityConfiguration (144)
/* complex XML schema type 'tds:GetPasswordComplexityConfiguration': */
class SOAP_CMAC _tds__GetPasswordComplexityConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityConfiguration() : soap() { }
        /// Destructor
        virtual ~_tds__GetPasswordComplexityConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:388 */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse (145)
/* complex XML schema type 'tds:GetPasswordComplexityConfigurationResponse': */
class SOAP_CMAC _tds__GetPasswordComplexityConfigurationResponse {
      public:
        /// Optional element 'tds:MinLen' of XML schema type 'xsd:int'
        int *MinLen;
        /// Optional element 'tds:Uppercase' of XML schema type 'xsd:int'
        int *Uppercase;
        /// Optional element 'tds:Number' of XML schema type 'xsd:int'
        int *Number;
        /// Optional element 'tds:SpecialChars' of XML schema type 'xsd:int'
        int *SpecialChars;
        /// Optional element 'tds:BlockUsernameOccurrence' of XML schema type 'xsd:boolean'
        bool *BlockUsernameOccurrence;
        /// Optional element 'tds:PolicyConfigurationLocked' of XML schema type 'xsd:boolean'
        bool *PolicyConfigurationLocked;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordComplexityConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetPasswordComplexityConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordComplexityConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordComplexityConfigurationResponse() : MinLen(), Uppercase(), Number(), SpecialChars(), BlockUsernameOccurrence(), PolicyConfigurationLocked(), soap() { }
        /// Destructor
        virtual ~_tds__GetPasswordComplexityConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetPasswordComplexityConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordComplexityConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:390 */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__SetPasswordComplexityConfiguration (146)
/* complex XML schema type 'tds:SetPasswordComplexityConfiguration': */
class SOAP_CMAC _tds__SetPasswordComplexityConfiguration {
      public:
        /// Optional element 'tds:MinLen' of XML schema type 'xsd:int'
        int *MinLen;
        /// Optional element 'tds:Uppercase' of XML schema type 'xsd:int'
        int *Uppercase;
        /// Optional element 'tds:Number' of XML schema type 'xsd:int'
        int *Number;
        /// Optional element 'tds:SpecialChars' of XML schema type 'xsd:int'
        int *SpecialChars;
        /// Optional element 'tds:BlockUsernameOccurrence' of XML schema type 'xsd:boolean'
        bool *BlockUsernameOccurrence;
        /// Optional element 'tds:PolicyConfigurationLocked' of XML schema type 'xsd:boolean'
        bool *PolicyConfigurationLocked;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordComplexityConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordComplexityConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordComplexityConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetPasswordComplexityConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordComplexityConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordComplexityConfiguration() : MinLen(), Uppercase(), Number(), SpecialChars(), BlockUsernameOccurrence(), PolicyConfigurationLocked(), soap() { }
        /// Destructor
        virtual ~_tds__SetPasswordComplexityConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetPasswordComplexityConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:392 */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse (147)
/* complex XML schema type 'tds:SetPasswordComplexityConfigurationResponse': */
class SOAP_CMAC _tds__SetPasswordComplexityConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordComplexityConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetPasswordComplexityConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordComplexityConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordComplexityConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetPasswordComplexityConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetPasswordComplexityConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordComplexityConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetPasswordComplexityConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:394 */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__GetPasswordHistoryConfiguration (148)
/* complex XML schema type 'tds:GetPasswordHistoryConfiguration': */
class SOAP_CMAC _tds__GetPasswordHistoryConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordHistoryConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordHistoryConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordHistoryConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetPasswordHistoryConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordHistoryConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordHistoryConfiguration() : soap() { }
        /// Destructor
        virtual ~_tds__GetPasswordHistoryConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetPasswordHistoryConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:396 */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse (149)
/* complex XML schema type 'tds:GetPasswordHistoryConfigurationResponse': */
class SOAP_CMAC _tds__GetPasswordHistoryConfigurationResponse {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:Length' of XML schema type 'xsd:int'
        int Length;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPasswordHistoryConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetPasswordHistoryConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPasswordHistoryConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPasswordHistoryConfigurationResponse() : Enabled(), Length(), soap() { }
        /// Destructor
        virtual ~_tds__GetPasswordHistoryConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetPasswordHistoryConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPasswordHistoryConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordHistoryConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:398 */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__SetPasswordHistoryConfiguration (150)
/* complex XML schema type 'tds:SetPasswordHistoryConfiguration': */
class SOAP_CMAC _tds__SetPasswordHistoryConfiguration {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:Length' of XML schema type 'xsd:int'
        int Length;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordHistoryConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordHistoryConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordHistoryConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetPasswordHistoryConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordHistoryConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordHistoryConfiguration() : Enabled(), Length(), soap() { }
        /// Destructor
        virtual ~_tds__SetPasswordHistoryConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetPasswordHistoryConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:400 */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse (151)
/* complex XML schema type 'tds:SetPasswordHistoryConfigurationResponse': */
class SOAP_CMAC _tds__SetPasswordHistoryConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetPasswordHistoryConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetPasswordHistoryConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetPasswordHistoryConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetPasswordHistoryConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetPasswordHistoryConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetPasswordHistoryConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetPasswordHistoryConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetPasswordHistoryConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:402 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptions
#define SOAP_TYPE__tds__GetAuthFailureWarningOptions (152)
/* complex XML schema type 'tds:GetAuthFailureWarningOptions': */
class SOAP_CMAC _tds__GetAuthFailureWarningOptions {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningOptions
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningOptions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningOptions, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningOptions *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningOptions); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningOptions() : soap() { }
        /// Destructor
        virtual ~_tds__GetAuthFailureWarningOptions() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningOptions(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningOptions * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:404 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse (153)
/* complex XML schema type 'tds:GetAuthFailureWarningOptionsResponse': */
class SOAP_CMAC _tds__GetAuthFailureWarningOptionsResponse {
      public:
        /// Required element 'tds:MonitorPeriodRange' of XML schema type 'tt:IntRange'
        tt__IntRange *MonitorPeriodRange;
        /// Required element 'tds:AuthFailureRange' of XML schema type 'tt:IntRange'
        tt__IntRange *AuthFailureRange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningOptionsResponse, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningOptionsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningOptionsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningOptionsResponse() : MonitorPeriodRange(), AuthFailureRange(), soap() { }
        /// Destructor
        virtual ~_tds__GetAuthFailureWarningOptionsResponse() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningOptionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningOptionsResponse * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningOptionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:406 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__GetAuthFailureWarningConfiguration (154)
/* complex XML schema type 'tds:GetAuthFailureWarningConfiguration': */
class SOAP_CMAC _tds__GetAuthFailureWarningConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningConfiguration() : soap() { }
        /// Destructor
        virtual ~_tds__GetAuthFailureWarningConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:408 */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse (155)
/* complex XML schema type 'tds:GetAuthFailureWarningConfigurationResponse': */
class SOAP_CMAC _tds__GetAuthFailureWarningConfigurationResponse {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:MonitorPeriod' of XML schema type 'xsd:int'
        int MonitorPeriod;
        /// Required element 'tds:MaxAuthFailures' of XML schema type 'xsd:int'
        int MaxAuthFailures;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAuthFailureWarningConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetAuthFailureWarningConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAuthFailureWarningConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetAuthFailureWarningConfigurationResponse() : Enabled(), MonitorPeriod(), MaxAuthFailures(), soap() { }
        /// Destructor
        virtual ~_tds__GetAuthFailureWarningConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAuthFailureWarningConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:410 */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__SetAuthFailureWarningConfiguration (156)
/* complex XML schema type 'tds:SetAuthFailureWarningConfiguration': */
class SOAP_CMAC _tds__SetAuthFailureWarningConfiguration {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tds:MonitorPeriod' of XML schema type 'xsd:int'
        int MonitorPeriod;
        /// Required element 'tds:MaxAuthFailures' of XML schema type 'xsd:int'
        int MaxAuthFailures;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAuthFailureWarningConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAuthFailureWarningConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAuthFailureWarningConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetAuthFailureWarningConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAuthFailureWarningConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetAuthFailureWarningConfiguration() : Enabled(), MonitorPeriod(), MaxAuthFailures(), soap() { }
        /// Destructor
        virtual ~_tds__SetAuthFailureWarningConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetAuthFailureWarningConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:412 */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse (157)
/* complex XML schema type 'tds:SetAuthFailureWarningConfigurationResponse': */
class SOAP_CMAC _tds__SetAuthFailureWarningConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAuthFailureWarningConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetAuthFailureWarningConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAuthFailureWarningConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetAuthFailureWarningConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetAuthFailureWarningConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAuthFailureWarningConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:414 */
#ifndef SOAP_TYPE__tds__GetCapabilities
#define SOAP_TYPE__tds__GetCapabilities (158)
/* complex XML schema type 'tds:GetCapabilities': */
class SOAP_CMAC _tds__GetCapabilities {
      public:
        /// Optional element 'tds:Category' of XML schema type 'tt:CapabilityCategory'
        std::vector<enum tt__CapabilityCategory> Category;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCapabilities, default initialized and not managed by a soap context
        virtual _tds__GetCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCapabilities); }
      public:
        /// Constructor with default initializations
        _tds__GetCapabilities() : Category(), soap() { }
        /// Destructor
        virtual ~_tds__GetCapabilities() { }
        /// Friend allocator used by soap_new__tds__GetCapabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:416 */
#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse
#define SOAP_TYPE__tds__GetCapabilitiesResponse (159)
/* complex XML schema type 'tds:GetCapabilitiesResponse': */
class SOAP_CMAC _tds__GetCapabilitiesResponse {
      public:
        /// Required element 'tds:Capabilities' of XML schema type 'tt:Capabilities'
        tt__Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tds__GetCapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCapabilitiesResponse() : Capabilities(), soap() { }
        /// Destructor
        virtual ~_tds__GetCapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tds__GetCapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:418 */
#ifndef SOAP_TYPE__tds__GetHostname
#define SOAP_TYPE__tds__GetHostname (160)
/* complex XML schema type 'tds:GetHostname': */
class SOAP_CMAC _tds__GetHostname {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetHostname
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetHostname; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetHostname, default initialized and not managed by a soap context
        virtual _tds__GetHostname *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetHostname); }
      public:
        /// Constructor with default initializations
        _tds__GetHostname() : soap() { }
        /// Destructor
        virtual ~_tds__GetHostname() { }
        /// Friend allocator used by soap_new__tds__GetHostname(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetHostname * SOAP_FMAC2 soap_instantiate__tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:420 */
#ifndef SOAP_TYPE__tds__GetHostnameResponse
#define SOAP_TYPE__tds__GetHostnameResponse (161)
/* complex XML schema type 'tds:GetHostnameResponse': */
class SOAP_CMAC _tds__GetHostnameResponse {
      public:
        /// Required element 'tds:HostnameInformation' of XML schema type 'tt:HostnameInformation'
        tt__HostnameInformation *HostnameInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetHostnameResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetHostnameResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetHostnameResponse, default initialized and not managed by a soap context
        virtual _tds__GetHostnameResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetHostnameResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetHostnameResponse() : HostnameInformation(), soap() { }
        /// Destructor
        virtual ~_tds__GetHostnameResponse() { }
        /// Friend allocator used by soap_new__tds__GetHostnameResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__GetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:422 */
#ifndef SOAP_TYPE__tds__SetHostname
#define SOAP_TYPE__tds__SetHostname (162)
/* complex XML schema type 'tds:SetHostname': */
class SOAP_CMAC _tds__SetHostname {
      public:
        /// Required element 'tds:Name' of XML schema type 'xsd:token'
        std::string Name;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostname
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostname; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostname, default initialized and not managed by a soap context
        virtual _tds__SetHostname *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostname); }
      public:
        /// Constructor with default initializations
        _tds__SetHostname() : Name(), soap() { }
        /// Destructor
        virtual ~_tds__SetHostname() { }
        /// Friend allocator used by soap_new__tds__SetHostname(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostname * SOAP_FMAC2 soap_instantiate__tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:424 */
#ifndef SOAP_TYPE__tds__SetHostnameResponse
#define SOAP_TYPE__tds__SetHostnameResponse (163)
/* complex XML schema type 'tds:SetHostnameResponse': */
class SOAP_CMAC _tds__SetHostnameResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostnameResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostnameResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostnameResponse, default initialized and not managed by a soap context
        virtual _tds__SetHostnameResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostnameResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetHostnameResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetHostnameResponse() { }
        /// Friend allocator used by soap_new__tds__SetHostnameResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:426 */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP
#define SOAP_TYPE__tds__SetHostnameFromDHCP (164)
/* complex XML schema type 'tds:SetHostnameFromDHCP': */
class SOAP_CMAC _tds__SetHostnameFromDHCP {
      public:
        /// Required element 'tds:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostnameFromDHCP
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostnameFromDHCP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostnameFromDHCP, default initialized and not managed by a soap context
        virtual _tds__SetHostnameFromDHCP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostnameFromDHCP); }
      public:
        /// Constructor with default initializations
        _tds__SetHostnameFromDHCP() : FromDHCP(), soap() { }
        /// Destructor
        virtual ~_tds__SetHostnameFromDHCP() { }
        /// Friend allocator used by soap_new__tds__SetHostnameFromDHCP(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:428 */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse (165)
/* complex XML schema type 'tds:SetHostnameFromDHCPResponse': */
class SOAP_CMAC _tds__SetHostnameFromDHCPResponse {
      public:
        /// Required element 'tds:RebootNeeded' of XML schema type 'xsd:boolean'
        bool RebootNeeded;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHostnameFromDHCPResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHostnameFromDHCPResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHostnameFromDHCPResponse, default initialized and not managed by a soap context
        virtual _tds__SetHostnameFromDHCPResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHostnameFromDHCPResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetHostnameFromDHCPResponse() : RebootNeeded(), soap() { }
        /// Destructor
        virtual ~_tds__SetHostnameFromDHCPResponse() { }
        /// Friend allocator used by soap_new__tds__SetHostnameFromDHCPResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:430 */
#ifndef SOAP_TYPE__tds__GetDNS
#define SOAP_TYPE__tds__GetDNS (166)
/* complex XML schema type 'tds:GetDNS': */
class SOAP_CMAC _tds__GetDNS {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDNS, default initialized and not managed by a soap context
        virtual _tds__GetDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDNS); }
      public:
        /// Constructor with default initializations
        _tds__GetDNS() : soap() { }
        /// Destructor
        virtual ~_tds__GetDNS() { }
        /// Friend allocator used by soap_new__tds__GetDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDNS * SOAP_FMAC2 soap_instantiate__tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:432 */
#ifndef SOAP_TYPE__tds__GetDNSResponse
#define SOAP_TYPE__tds__GetDNSResponse (167)
/* complex XML schema type 'tds:GetDNSResponse': */
class SOAP_CMAC _tds__GetDNSResponse {
      public:
        /// Required element 'tds:DNSInformation' of XML schema type 'tt:DNSInformation'
        tt__DNSInformation *DNSInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDNSResponse, default initialized and not managed by a soap context
        virtual _tds__GetDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDNSResponse() : DNSInformation(), soap() { }
        /// Destructor
        virtual ~_tds__GetDNSResponse() { }
        /// Friend allocator used by soap_new__tds__GetDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:434 */
#ifndef SOAP_TYPE__tds__SetDNS
#define SOAP_TYPE__tds__SetDNS (168)
/* complex XML schema type 'tds:SetDNS': */
class SOAP_CMAC _tds__SetDNS {
      public:
        /// Required element 'tds:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tds:SearchDomain' of XML schema type 'xsd:token'
        std::vector<std::string> SearchDomain;
        /// Optional element 'tds:DNSManual' of XML schema type 'tt:IPAddress'
        std::vector<tt__IPAddress *> DNSManual;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDNS, default initialized and not managed by a soap context
        virtual _tds__SetDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDNS); }
      public:
        /// Constructor with default initializations
        _tds__SetDNS() : FromDHCP(), SearchDomain(), DNSManual(), soap() { }
        /// Destructor
        virtual ~_tds__SetDNS() { }
        /// Friend allocator used by soap_new__tds__SetDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDNS * SOAP_FMAC2 soap_instantiate__tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:436 */
#ifndef SOAP_TYPE__tds__SetDNSResponse
#define SOAP_TYPE__tds__SetDNSResponse (169)
/* complex XML schema type 'tds:SetDNSResponse': */
class SOAP_CMAC _tds__SetDNSResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDNSResponse, default initialized and not managed by a soap context
        virtual _tds__SetDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDNSResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetDNSResponse() { }
        /// Friend allocator used by soap_new__tds__SetDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:438 */
#ifndef SOAP_TYPE__tds__GetNTP
#define SOAP_TYPE__tds__GetNTP (170)
/* complex XML schema type 'tds:GetNTP': */
class SOAP_CMAC _tds__GetNTP {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNTP
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNTP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNTP, default initialized and not managed by a soap context
        virtual _tds__GetNTP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNTP); }
      public:
        /// Constructor with default initializations
        _tds__GetNTP() : soap() { }
        /// Destructor
        virtual ~_tds__GetNTP() { }
        /// Friend allocator used by soap_new__tds__GetNTP(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNTP * SOAP_FMAC2 soap_instantiate__tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:440 */
#ifndef SOAP_TYPE__tds__GetNTPResponse
#define SOAP_TYPE__tds__GetNTPResponse (171)
/* complex XML schema type 'tds:GetNTPResponse': */
class SOAP_CMAC _tds__GetNTPResponse {
      public:
        /// Required element 'tds:NTPInformation' of XML schema type 'tt:NTPInformation'
        tt__NTPInformation *NTPInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNTPResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNTPResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNTPResponse, default initialized and not managed by a soap context
        virtual _tds__GetNTPResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNTPResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNTPResponse() : NTPInformation(), soap() { }
        /// Destructor
        virtual ~_tds__GetNTPResponse() { }
        /// Friend allocator used by soap_new__tds__GetNTPResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__GetNTPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:442 */
#ifndef SOAP_TYPE__tds__SetNTP
#define SOAP_TYPE__tds__SetNTP (172)
/* complex XML schema type 'tds:SetNTP': */
class SOAP_CMAC _tds__SetNTP {
      public:
        /// Required element 'tds:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tds:NTPManual' of XML schema type 'tt:NetworkHost'
        std::vector<tt__NetworkHost *> NTPManual;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNTP
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNTP; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNTP, default initialized and not managed by a soap context
        virtual _tds__SetNTP *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNTP); }
      public:
        /// Constructor with default initializations
        _tds__SetNTP() : FromDHCP(), NTPManual(), soap() { }
        /// Destructor
        virtual ~_tds__SetNTP() { }
        /// Friend allocator used by soap_new__tds__SetNTP(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNTP * SOAP_FMAC2 soap_instantiate__tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:444 */
#ifndef SOAP_TYPE__tds__SetNTPResponse
#define SOAP_TYPE__tds__SetNTPResponse (173)
/* complex XML schema type 'tds:SetNTPResponse': */
class SOAP_CMAC _tds__SetNTPResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNTPResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNTPResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNTPResponse, default initialized and not managed by a soap context
        virtual _tds__SetNTPResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNTPResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNTPResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetNTPResponse() { }
        /// Friend allocator used by soap_new__tds__SetNTPResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__SetNTPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:446 */
#ifndef SOAP_TYPE__tds__GetDynamicDNS
#define SOAP_TYPE__tds__GetDynamicDNS (174)
/* complex XML schema type 'tds:GetDynamicDNS': */
class SOAP_CMAC _tds__GetDynamicDNS {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDynamicDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDynamicDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDynamicDNS, default initialized and not managed by a soap context
        virtual _tds__GetDynamicDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDynamicDNS); }
      public:
        /// Constructor with default initializations
        _tds__GetDynamicDNS() : soap() { }
        /// Destructor
        virtual ~_tds__GetDynamicDNS() { }
        /// Friend allocator used by soap_new__tds__GetDynamicDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:448 */
#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse
#define SOAP_TYPE__tds__GetDynamicDNSResponse (175)
/* complex XML schema type 'tds:GetDynamicDNSResponse': */
class SOAP_CMAC _tds__GetDynamicDNSResponse {
      public:
        /// Required element 'tds:DynamicDNSInformation' of XML schema type 'tt:DynamicDNSInformation'
        tt__DynamicDNSInformation *DynamicDNSInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDynamicDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDynamicDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDynamicDNSResponse, default initialized and not managed by a soap context
        virtual _tds__GetDynamicDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDynamicDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDynamicDNSResponse() : DynamicDNSInformation(), soap() { }
        /// Destructor
        virtual ~_tds__GetDynamicDNSResponse() { }
        /// Friend allocator used by soap_new__tds__GetDynamicDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:450 */
#ifndef SOAP_TYPE__tds__SetDynamicDNS
#define SOAP_TYPE__tds__SetDynamicDNS (176)
/* complex XML schema type 'tds:SetDynamicDNS': */
class SOAP_CMAC _tds__SetDynamicDNS {
      public:
        /// Required element 'tds:Type' of XML schema type 'tt:DynamicDNSType'
        enum tt__DynamicDNSType Type;
        /// Optional element 'tds:Name' of XML schema type 'tt:DNSName'
        std::string *Name;
        /// Optional element 'tds:TTL' of XML schema type 'xsd:duration'
        std::string *TTL;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDynamicDNS
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDynamicDNS; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDynamicDNS, default initialized and not managed by a soap context
        virtual _tds__SetDynamicDNS *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDynamicDNS); }
      public:
        /// Constructor with default initializations
        _tds__SetDynamicDNS() : Type(), Name(), TTL(), soap() { }
        /// Destructor
        virtual ~_tds__SetDynamicDNS() { }
        /// Friend allocator used by soap_new__tds__SetDynamicDNS(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:452 */
#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse
#define SOAP_TYPE__tds__SetDynamicDNSResponse (177)
/* complex XML schema type 'tds:SetDynamicDNSResponse': */
class SOAP_CMAC _tds__SetDynamicDNSResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDynamicDNSResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDynamicDNSResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDynamicDNSResponse, default initialized and not managed by a soap context
        virtual _tds__SetDynamicDNSResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDynamicDNSResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDynamicDNSResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetDynamicDNSResponse() { }
        /// Friend allocator used by soap_new__tds__SetDynamicDNSResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:454 */
#ifndef SOAP_TYPE__tds__GetNetworkInterfaces
#define SOAP_TYPE__tds__GetNetworkInterfaces (178)
/* complex XML schema type 'tds:GetNetworkInterfaces': */
class SOAP_CMAC _tds__GetNetworkInterfaces {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkInterfaces
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkInterfaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkInterfaces, default initialized and not managed by a soap context
        virtual _tds__GetNetworkInterfaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkInterfaces); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkInterfaces() : soap() { }
        /// Destructor
        virtual ~_tds__GetNetworkInterfaces() { }
        /// Friend allocator used by soap_new__tds__GetNetworkInterfaces(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:456 */
#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse (179)
/* complex XML schema type 'tds:GetNetworkInterfacesResponse': */
class SOAP_CMAC _tds__GetNetworkInterfacesResponse {
      public:
        /// Required element 'tds:NetworkInterfaces' of XML schema type 'tt:NetworkInterface'
        std::vector<tt__NetworkInterface *> NetworkInterfaces;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkInterfacesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkInterfacesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkInterfacesResponse, default initialized and not managed by a soap context
        virtual _tds__GetNetworkInterfacesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkInterfacesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkInterfacesResponse() : NetworkInterfaces(), soap() { }
        /// Destructor
        virtual ~_tds__GetNetworkInterfacesResponse() { }
        /// Friend allocator used by soap_new__tds__GetNetworkInterfacesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:458 */
#ifndef SOAP_TYPE__tds__SetNetworkInterfaces
#define SOAP_TYPE__tds__SetNetworkInterfaces (180)
/* complex XML schema type 'tds:SetNetworkInterfaces': */
class SOAP_CMAC _tds__SetNetworkInterfaces {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        std::string InterfaceToken;
        /// Required element 'tds:NetworkInterface' of XML schema type 'tt:NetworkInterfaceSetConfiguration'
        tt__NetworkInterfaceSetConfiguration *NetworkInterface;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkInterfaces
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkInterfaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkInterfaces, default initialized and not managed by a soap context
        virtual _tds__SetNetworkInterfaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkInterfaces); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkInterfaces() : InterfaceToken(), NetworkInterface(), soap() { }
        /// Destructor
        virtual ~_tds__SetNetworkInterfaces() { }
        /// Friend allocator used by soap_new__tds__SetNetworkInterfaces(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:460 */
#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse (181)
/* complex XML schema type 'tds:SetNetworkInterfacesResponse': */
class SOAP_CMAC _tds__SetNetworkInterfacesResponse {
      public:
        /// Required element 'tds:RebootNeeded' of XML schema type 'xsd:boolean'
        bool RebootNeeded;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkInterfacesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkInterfacesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkInterfacesResponse, default initialized and not managed by a soap context
        virtual _tds__SetNetworkInterfacesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkInterfacesResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkInterfacesResponse() : RebootNeeded(), soap() { }
        /// Destructor
        virtual ~_tds__SetNetworkInterfacesResponse() { }
        /// Friend allocator used by soap_new__tds__SetNetworkInterfacesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:462 */
#ifndef SOAP_TYPE__tds__GetNetworkProtocols
#define SOAP_TYPE__tds__GetNetworkProtocols (182)
/* complex XML schema type 'tds:GetNetworkProtocols': */
class SOAP_CMAC _tds__GetNetworkProtocols {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkProtocols
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkProtocols; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkProtocols, default initialized and not managed by a soap context
        virtual _tds__GetNetworkProtocols *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkProtocols); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkProtocols() : soap() { }
        /// Destructor
        virtual ~_tds__GetNetworkProtocols() { }
        /// Friend allocator used by soap_new__tds__GetNetworkProtocols(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:464 */
#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse (183)
/* complex XML schema type 'tds:GetNetworkProtocolsResponse': */
class SOAP_CMAC _tds__GetNetworkProtocolsResponse {
      public:
        /// Optional element 'tds:NetworkProtocols' of XML schema type 'tt:NetworkProtocol'
        std::vector<tt__NetworkProtocol *> NetworkProtocols;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkProtocolsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkProtocolsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkProtocolsResponse, default initialized and not managed by a soap context
        virtual _tds__GetNetworkProtocolsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkProtocolsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkProtocolsResponse() : NetworkProtocols(), soap() { }
        /// Destructor
        virtual ~_tds__GetNetworkProtocolsResponse() { }
        /// Friend allocator used by soap_new__tds__GetNetworkProtocolsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:466 */
#ifndef SOAP_TYPE__tds__SetNetworkProtocols
#define SOAP_TYPE__tds__SetNetworkProtocols (184)
/* complex XML schema type 'tds:SetNetworkProtocols': */
class SOAP_CMAC _tds__SetNetworkProtocols {
      public:
        /// Required element 'tds:NetworkProtocols' of XML schema type 'tt:NetworkProtocol'
        std::vector<tt__NetworkProtocol *> NetworkProtocols;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkProtocols
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkProtocols; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkProtocols, default initialized and not managed by a soap context
        virtual _tds__SetNetworkProtocols *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkProtocols); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkProtocols() : NetworkProtocols(), soap() { }
        /// Destructor
        virtual ~_tds__SetNetworkProtocols() { }
        /// Friend allocator used by soap_new__tds__SetNetworkProtocols(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:468 */
#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse (185)
/* complex XML schema type 'tds:SetNetworkProtocolsResponse': */
class SOAP_CMAC _tds__SetNetworkProtocolsResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkProtocolsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkProtocolsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkProtocolsResponse, default initialized and not managed by a soap context
        virtual _tds__SetNetworkProtocolsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkProtocolsResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkProtocolsResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetNetworkProtocolsResponse() { }
        /// Friend allocator used by soap_new__tds__SetNetworkProtocolsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:470 */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway
#define SOAP_TYPE__tds__GetNetworkDefaultGateway (186)
/* complex XML schema type 'tds:GetNetworkDefaultGateway': */
class SOAP_CMAC _tds__GetNetworkDefaultGateway {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkDefaultGateway
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkDefaultGateway; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkDefaultGateway, default initialized and not managed by a soap context
        virtual _tds__GetNetworkDefaultGateway *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkDefaultGateway); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkDefaultGateway() : soap() { }
        /// Destructor
        virtual ~_tds__GetNetworkDefaultGateway() { }
        /// Friend allocator used by soap_new__tds__GetNetworkDefaultGateway(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:472 */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse (187)
/* complex XML schema type 'tds:GetNetworkDefaultGatewayResponse': */
class SOAP_CMAC _tds__GetNetworkDefaultGatewayResponse {
      public:
        /// Required element 'tds:NetworkGateway' of XML schema type 'tt:NetworkGateway'
        tt__NetworkGateway *NetworkGateway;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetNetworkDefaultGatewayResponse, default initialized and not managed by a soap context
        virtual _tds__GetNetworkDefaultGatewayResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetNetworkDefaultGatewayResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetNetworkDefaultGatewayResponse() : NetworkGateway(), soap() { }
        /// Destructor
        virtual ~_tds__GetNetworkDefaultGatewayResponse() { }
        /// Friend allocator used by soap_new__tds__GetNetworkDefaultGatewayResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:474 */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway
#define SOAP_TYPE__tds__SetNetworkDefaultGateway (188)
/* complex XML schema type 'tds:SetNetworkDefaultGateway': */
class SOAP_CMAC _tds__SetNetworkDefaultGateway {
      public:
        /// Optional element 'tds:IPv4Address' of XML schema type 'tt:IPv4Address'
        std::vector<std::string> IPv4Address;
        /// Optional element 'tds:IPv6Address' of XML schema type 'tt:IPv6Address'
        std::vector<std::string> IPv6Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkDefaultGateway
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkDefaultGateway; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkDefaultGateway, default initialized and not managed by a soap context
        virtual _tds__SetNetworkDefaultGateway *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkDefaultGateway); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkDefaultGateway() : IPv4Address(), IPv6Address(), soap() { }
        /// Destructor
        virtual ~_tds__SetNetworkDefaultGateway() { }
        /// Friend allocator used by soap_new__tds__SetNetworkDefaultGateway(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:476 */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse (189)
/* complex XML schema type 'tds:SetNetworkDefaultGatewayResponse': */
class SOAP_CMAC _tds__SetNetworkDefaultGatewayResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetNetworkDefaultGatewayResponse, default initialized and not managed by a soap context
        virtual _tds__SetNetworkDefaultGatewayResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetNetworkDefaultGatewayResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetNetworkDefaultGatewayResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetNetworkDefaultGatewayResponse() { }
        /// Friend allocator used by soap_new__tds__SetNetworkDefaultGatewayResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:478 */
#ifndef SOAP_TYPE__tds__GetZeroConfiguration
#define SOAP_TYPE__tds__GetZeroConfiguration (190)
/* complex XML schema type 'tds:GetZeroConfiguration': */
class SOAP_CMAC _tds__GetZeroConfiguration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetZeroConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetZeroConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetZeroConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetZeroConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetZeroConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetZeroConfiguration() : soap() { }
        /// Destructor
        virtual ~_tds__GetZeroConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetZeroConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:480 */
#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse
#define SOAP_TYPE__tds__GetZeroConfigurationResponse (191)
/* complex XML schema type 'tds:GetZeroConfigurationResponse': */
class SOAP_CMAC _tds__GetZeroConfigurationResponse {
      public:
        /// Required element 'tds:ZeroConfiguration' of XML schema type 'tt:NetworkZeroConfiguration'
        tt__NetworkZeroConfiguration *ZeroConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetZeroConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetZeroConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetZeroConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetZeroConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetZeroConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetZeroConfigurationResponse() : ZeroConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__GetZeroConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetZeroConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:482 */
#ifndef SOAP_TYPE__tds__SetZeroConfiguration
#define SOAP_TYPE__tds__SetZeroConfiguration (192)
/* complex XML schema type 'tds:SetZeroConfiguration': */
class SOAP_CMAC _tds__SetZeroConfiguration {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        std::string InterfaceToken;
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetZeroConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetZeroConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetZeroConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetZeroConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetZeroConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetZeroConfiguration() : InterfaceToken(), Enabled(), soap() { }
        /// Destructor
        virtual ~_tds__SetZeroConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetZeroConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:484 */
#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse
#define SOAP_TYPE__tds__SetZeroConfigurationResponse (193)
/* complex XML schema type 'tds:SetZeroConfigurationResponse': */
class SOAP_CMAC _tds__SetZeroConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetZeroConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetZeroConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetZeroConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetZeroConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetZeroConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetZeroConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetZeroConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetZeroConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:486 */
#ifndef SOAP_TYPE__tds__GetIPAddressFilter
#define SOAP_TYPE__tds__GetIPAddressFilter (194)
/* complex XML schema type 'tds:GetIPAddressFilter': */
class SOAP_CMAC _tds__GetIPAddressFilter {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__GetIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__GetIPAddressFilter() : soap() { }
        /// Destructor
        virtual ~_tds__GetIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__GetIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:488 */
#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse
#define SOAP_TYPE__tds__GetIPAddressFilterResponse (195)
/* complex XML schema type 'tds:GetIPAddressFilterResponse': */
class SOAP_CMAC _tds__GetIPAddressFilterResponse {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__GetIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetIPAddressFilterResponse() : IPAddressFilter(), soap() { }
        /// Destructor
        virtual ~_tds__GetIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__GetIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:490 */
#ifndef SOAP_TYPE__tds__SetIPAddressFilter
#define SOAP_TYPE__tds__SetIPAddressFilter (196)
/* complex XML schema type 'tds:SetIPAddressFilter': */
class SOAP_CMAC _tds__SetIPAddressFilter {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__SetIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__SetIPAddressFilter() : IPAddressFilter(), soap() { }
        /// Destructor
        virtual ~_tds__SetIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__SetIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:492 */
#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse
#define SOAP_TYPE__tds__SetIPAddressFilterResponse (197)
/* complex XML schema type 'tds:SetIPAddressFilterResponse': */
class SOAP_CMAC _tds__SetIPAddressFilterResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__SetIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetIPAddressFilterResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__SetIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:494 */
#ifndef SOAP_TYPE__tds__AddIPAddressFilter
#define SOAP_TYPE__tds__AddIPAddressFilter (198)
/* complex XML schema type 'tds:AddIPAddressFilter': */
class SOAP_CMAC _tds__AddIPAddressFilter {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__AddIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__AddIPAddressFilter() : IPAddressFilter(), soap() { }
        /// Destructor
        virtual ~_tds__AddIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__AddIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:496 */
#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse
#define SOAP_TYPE__tds__AddIPAddressFilterResponse (199)
/* complex XML schema type 'tds:AddIPAddressFilterResponse': */
class SOAP_CMAC _tds__AddIPAddressFilterResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__AddIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__AddIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__AddIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__AddIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__AddIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__AddIPAddressFilterResponse() : soap() { }
        /// Destructor
        virtual ~_tds__AddIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__AddIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__AddIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:498 */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter
#define SOAP_TYPE__tds__RemoveIPAddressFilter (200)
/* complex XML schema type 'tds:RemoveIPAddressFilter': */
class SOAP_CMAC _tds__RemoveIPAddressFilter {
      public:
        /// Required element 'tds:IPAddressFilter' of XML schema type 'tt:IPAddressFilter'
        tt__IPAddressFilter *IPAddressFilter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveIPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveIPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveIPAddressFilter, default initialized and not managed by a soap context
        virtual _tds__RemoveIPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveIPAddressFilter); }
      public:
        /// Constructor with default initializations
        _tds__RemoveIPAddressFilter() : IPAddressFilter(), soap() { }
        /// Destructor
        virtual ~_tds__RemoveIPAddressFilter() { }
        /// Friend allocator used by soap_new__tds__RemoveIPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:500 */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse (201)
/* complex XML schema type 'tds:RemoveIPAddressFilterResponse': */
class SOAP_CMAC _tds__RemoveIPAddressFilterResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__RemoveIPAddressFilterResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__RemoveIPAddressFilterResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__RemoveIPAddressFilterResponse, default initialized and not managed by a soap context
        virtual _tds__RemoveIPAddressFilterResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__RemoveIPAddressFilterResponse); }
      public:
        /// Constructor with default initializations
        _tds__RemoveIPAddressFilterResponse() : soap() { }
        /// Destructor
        virtual ~_tds__RemoveIPAddressFilterResponse() { }
        /// Friend allocator used by soap_new__tds__RemoveIPAddressFilterResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:502 */
#ifndef SOAP_TYPE__tds__GetAccessPolicy
#define SOAP_TYPE__tds__GetAccessPolicy (202)
/* complex XML schema type 'tds:GetAccessPolicy': */
class SOAP_CMAC _tds__GetAccessPolicy {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAccessPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAccessPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAccessPolicy, default initialized and not managed by a soap context
        virtual _tds__GetAccessPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAccessPolicy); }
      public:
        /// Constructor with default initializations
        _tds__GetAccessPolicy() : soap() { }
        /// Destructor
        virtual ~_tds__GetAccessPolicy() { }
        /// Friend allocator used by soap_new__tds__GetAccessPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:504 */
#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse
#define SOAP_TYPE__tds__GetAccessPolicyResponse (203)
/* complex XML schema type 'tds:GetAccessPolicyResponse': */
class SOAP_CMAC _tds__GetAccessPolicyResponse {
      public:
        /// Required element 'tds:PolicyFile' of XML schema type 'tt:BinaryData'
        tt__BinaryData *PolicyFile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetAccessPolicyResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetAccessPolicyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetAccessPolicyResponse, default initialized and not managed by a soap context
        virtual _tds__GetAccessPolicyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetAccessPolicyResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetAccessPolicyResponse() : PolicyFile(), soap() { }
        /// Destructor
        virtual ~_tds__GetAccessPolicyResponse() { }
        /// Friend allocator used by soap_new__tds__GetAccessPolicyResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:506 */
#ifndef SOAP_TYPE__tds__SetAccessPolicy
#define SOAP_TYPE__tds__SetAccessPolicy (204)
/* complex XML schema type 'tds:SetAccessPolicy': */
class SOAP_CMAC _tds__SetAccessPolicy {
      public:
        /// Required element 'tds:PolicyFile' of XML schema type 'tt:BinaryData'
        tt__BinaryData *PolicyFile;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAccessPolicy
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAccessPolicy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAccessPolicy, default initialized and not managed by a soap context
        virtual _tds__SetAccessPolicy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAccessPolicy); }
      public:
        /// Constructor with default initializations
        _tds__SetAccessPolicy() : PolicyFile(), soap() { }
        /// Destructor
        virtual ~_tds__SetAccessPolicy() { }
        /// Friend allocator used by soap_new__tds__SetAccessPolicy(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:508 */
#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse
#define SOAP_TYPE__tds__SetAccessPolicyResponse (205)
/* complex XML schema type 'tds:SetAccessPolicyResponse': */
class SOAP_CMAC _tds__SetAccessPolicyResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetAccessPolicyResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetAccessPolicyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetAccessPolicyResponse, default initialized and not managed by a soap context
        virtual _tds__SetAccessPolicyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetAccessPolicyResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetAccessPolicyResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetAccessPolicyResponse() { }
        /// Friend allocator used by soap_new__tds__SetAccessPolicyResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:510 */
#ifndef SOAP_TYPE__tds__CreateCertificate
#define SOAP_TYPE__tds__CreateCertificate (206)
/* complex XML schema type 'tds:CreateCertificate': */
class SOAP_CMAC _tds__CreateCertificate {
      public:
        /// Optional element 'tds:CertificateID' of XML schema type 'xsd:token'
        std::string *CertificateID;
        /// Optional element 'tds:Subject' of XML schema type 'xsd:string'
        std::string *Subject;
        /// Optional element 'tds:ValidNotBefore' of XML schema type 'xsd:dateTime'
        time_t *ValidNotBefore;
        /// Optional element 'tds:ValidNotAfter' of XML schema type 'xsd:dateTime'
        time_t *ValidNotAfter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateCertificate
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateCertificate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateCertificate, default initialized and not managed by a soap context
        virtual _tds__CreateCertificate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateCertificate); }
      public:
        /// Constructor with default initializations
        _tds__CreateCertificate() : CertificateID(), Subject(), ValidNotBefore(), ValidNotAfter(), soap() { }
        /// Destructor
        virtual ~_tds__CreateCertificate() { }
        /// Friend allocator used by soap_new__tds__CreateCertificate(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateCertificate * SOAP_FMAC2 soap_instantiate__tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:512 */
#ifndef SOAP_TYPE__tds__CreateCertificateResponse
#define SOAP_TYPE__tds__CreateCertificateResponse (207)
/* complex XML schema type 'tds:CreateCertificateResponse': */
class SOAP_CMAC _tds__CreateCertificateResponse {
      public:
        /// Required element 'tds:NvtCertificate' of XML schema type 'tt:Certificate'
        tt__Certificate *NvtCertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateCertificateResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateCertificateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateCertificateResponse, default initialized and not managed by a soap context
        virtual _tds__CreateCertificateResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateCertificateResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateCertificateResponse() : NvtCertificate(), soap() { }
        /// Destructor
        virtual ~_tds__CreateCertificateResponse() { }
        /// Friend allocator used by soap_new__tds__CreateCertificateResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateCertificateResponse * SOAP_FMAC2 soap_instantiate__tds__CreateCertificateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:514 */
#ifndef SOAP_TYPE__tds__GetCertificates
#define SOAP_TYPE__tds__GetCertificates (208)
/* complex XML schema type 'tds:GetCertificates': */
class SOAP_CMAC _tds__GetCertificates {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificates, default initialized and not managed by a soap context
        virtual _tds__GetCertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificates); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificates() : soap() { }
        /// Destructor
        virtual ~_tds__GetCertificates() { }
        /// Friend allocator used by soap_new__tds__GetCertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificates * SOAP_FMAC2 soap_instantiate__tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:516 */
#ifndef SOAP_TYPE__tds__GetCertificatesResponse
#define SOAP_TYPE__tds__GetCertificatesResponse (209)
/* complex XML schema type 'tds:GetCertificatesResponse': */
class SOAP_CMAC _tds__GetCertificatesResponse {
      public:
        /// Optional element 'tds:NvtCertificate' of XML schema type 'tt:Certificate'
        std::vector<tt__Certificate *> NvtCertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__GetCertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificatesResponse() : NvtCertificate(), soap() { }
        /// Destructor
        virtual ~_tds__GetCertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__GetCertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:518 */
#ifndef SOAP_TYPE__tds__GetCertificatesStatus
#define SOAP_TYPE__tds__GetCertificatesStatus (210)
/* complex XML schema type 'tds:GetCertificatesStatus': */
class SOAP_CMAC _tds__GetCertificatesStatus {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificatesStatus
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificatesStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificatesStatus, default initialized and not managed by a soap context
        virtual _tds__GetCertificatesStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificatesStatus); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificatesStatus() : soap() { }
        /// Destructor
        virtual ~_tds__GetCertificatesStatus() { }
        /// Friend allocator used by soap_new__tds__GetCertificatesStatus(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:520 */
#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse
#define SOAP_TYPE__tds__GetCertificatesStatusResponse (211)
/* complex XML schema type 'tds:GetCertificatesStatusResponse': */
class SOAP_CMAC _tds__GetCertificatesStatusResponse {
      public:
        /// Optional element 'tds:CertificateStatus' of XML schema type 'tt:CertificateStatus'
        std::vector<tt__CertificateStatus *> CertificateStatus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificatesStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificatesStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificatesStatusResponse, default initialized and not managed by a soap context
        virtual _tds__GetCertificatesStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificatesStatusResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificatesStatusResponse() : CertificateStatus(), soap() { }
        /// Destructor
        virtual ~_tds__GetCertificatesStatusResponse() { }
        /// Friend allocator used by soap_new__tds__GetCertificatesStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:522 */
#ifndef SOAP_TYPE__tds__SetCertificatesStatus
#define SOAP_TYPE__tds__SetCertificatesStatus (212)
/* complex XML schema type 'tds:SetCertificatesStatus': */
class SOAP_CMAC _tds__SetCertificatesStatus {
      public:
        /// Optional element 'tds:CertificateStatus' of XML schema type 'tt:CertificateStatus'
        std::vector<tt__CertificateStatus *> CertificateStatus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetCertificatesStatus
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetCertificatesStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetCertificatesStatus, default initialized and not managed by a soap context
        virtual _tds__SetCertificatesStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetCertificatesStatus); }
      public:
        /// Constructor with default initializations
        _tds__SetCertificatesStatus() : CertificateStatus(), soap() { }
        /// Destructor
        virtual ~_tds__SetCertificatesStatus() { }
        /// Friend allocator used by soap_new__tds__SetCertificatesStatus(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:524 */
#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse
#define SOAP_TYPE__tds__SetCertificatesStatusResponse (213)
/* complex XML schema type 'tds:SetCertificatesStatusResponse': */
class SOAP_CMAC _tds__SetCertificatesStatusResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetCertificatesStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetCertificatesStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetCertificatesStatusResponse, default initialized and not managed by a soap context
        virtual _tds__SetCertificatesStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetCertificatesStatusResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetCertificatesStatusResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetCertificatesStatusResponse() { }
        /// Friend allocator used by soap_new__tds__SetCertificatesStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:526 */
#ifndef SOAP_TYPE__tds__DeleteCertificates
#define SOAP_TYPE__tds__DeleteCertificates (214)
/* complex XML schema type 'tds:DeleteCertificates': */
class SOAP_CMAC _tds__DeleteCertificates {
      public:
        /// Required element 'tds:CertificateID' of XML schema type 'xsd:token'
        std::vector<std::string> CertificateID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteCertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteCertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteCertificates, default initialized and not managed by a soap context
        virtual _tds__DeleteCertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteCertificates); }
      public:
        /// Constructor with default initializations
        _tds__DeleteCertificates() : CertificateID(), soap() { }
        /// Destructor
        virtual ~_tds__DeleteCertificates() { }
        /// Friend allocator used by soap_new__tds__DeleteCertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:528 */
#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse
#define SOAP_TYPE__tds__DeleteCertificatesResponse (215)
/* complex XML schema type 'tds:DeleteCertificatesResponse': */
class SOAP_CMAC _tds__DeleteCertificatesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteCertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteCertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteCertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteCertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteCertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteCertificatesResponse() : soap() { }
        /// Destructor
        virtual ~_tds__DeleteCertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteCertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:530 */
#ifndef SOAP_TYPE__tds__GetPkcs10Request
#define SOAP_TYPE__tds__GetPkcs10Request (216)
/* complex XML schema type 'tds:GetPkcs10Request': */
class SOAP_CMAC _tds__GetPkcs10Request {
      public:
        /// Required element 'tds:CertificateID' of XML schema type 'xsd:token'
        std::string CertificateID;
        /// Optional element 'tds:Subject' of XML schema type 'xsd:string'
        std::string *Subject;
        /// Optional element 'tds:Attributes' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Attributes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPkcs10Request
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPkcs10Request; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPkcs10Request, default initialized and not managed by a soap context
        virtual _tds__GetPkcs10Request *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPkcs10Request); }
      public:
        /// Constructor with default initializations
        _tds__GetPkcs10Request() : CertificateID(), Subject(), Attributes(), soap() { }
        /// Destructor
        virtual ~_tds__GetPkcs10Request() { }
        /// Friend allocator used by soap_new__tds__GetPkcs10Request(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:532 */
#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse
#define SOAP_TYPE__tds__GetPkcs10RequestResponse (217)
/* complex XML schema type 'tds:GetPkcs10RequestResponse': */
class SOAP_CMAC _tds__GetPkcs10RequestResponse {
      public:
        /// Required element 'tds:Pkcs10Request' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Pkcs10Request;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetPkcs10RequestResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetPkcs10RequestResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetPkcs10RequestResponse, default initialized and not managed by a soap context
        virtual _tds__GetPkcs10RequestResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetPkcs10RequestResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetPkcs10RequestResponse() : Pkcs10Request(), soap() { }
        /// Destructor
        virtual ~_tds__GetPkcs10RequestResponse() { }
        /// Friend allocator used by soap_new__tds__GetPkcs10RequestResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetPkcs10RequestResponse * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10RequestResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:534 */
#ifndef SOAP_TYPE__tds__LoadCertificates
#define SOAP_TYPE__tds__LoadCertificates (218)
/* complex XML schema type 'tds:LoadCertificates': */
class SOAP_CMAC _tds__LoadCertificates {
      public:
        /// Required element 'tds:NVTCertificate' of XML schema type 'tt:Certificate'
        std::vector<tt__Certificate *> NVTCertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificates, default initialized and not managed by a soap context
        virtual _tds__LoadCertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificates); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificates() : NVTCertificate(), soap() { }
        /// Destructor
        virtual ~_tds__LoadCertificates() { }
        /// Friend allocator used by soap_new__tds__LoadCertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:536 */
#ifndef SOAP_TYPE__tds__LoadCertificatesResponse
#define SOAP_TYPE__tds__LoadCertificatesResponse (219)
/* complex XML schema type 'tds:LoadCertificatesResponse': */
class SOAP_CMAC _tds__LoadCertificatesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__LoadCertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificatesResponse() : soap() { }
        /// Destructor
        virtual ~_tds__LoadCertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__LoadCertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:538 */
#ifndef SOAP_TYPE__tds__GetClientCertificateMode
#define SOAP_TYPE__tds__GetClientCertificateMode (220)
/* complex XML schema type 'tds:GetClientCertificateMode': */
class SOAP_CMAC _tds__GetClientCertificateMode {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetClientCertificateMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetClientCertificateMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetClientCertificateMode, default initialized and not managed by a soap context
        virtual _tds__GetClientCertificateMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetClientCertificateMode); }
      public:
        /// Constructor with default initializations
        _tds__GetClientCertificateMode() : soap() { }
        /// Destructor
        virtual ~_tds__GetClientCertificateMode() { }
        /// Friend allocator used by soap_new__tds__GetClientCertificateMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:540 */
#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse
#define SOAP_TYPE__tds__GetClientCertificateModeResponse (221)
/* complex XML schema type 'tds:GetClientCertificateModeResponse': */
class SOAP_CMAC _tds__GetClientCertificateModeResponse {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetClientCertificateModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetClientCertificateModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetClientCertificateModeResponse, default initialized and not managed by a soap context
        virtual _tds__GetClientCertificateModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetClientCertificateModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetClientCertificateModeResponse() : Enabled(), soap() { }
        /// Destructor
        virtual ~_tds__GetClientCertificateModeResponse() { }
        /// Friend allocator used by soap_new__tds__GetClientCertificateModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:542 */
#ifndef SOAP_TYPE__tds__SetClientCertificateMode
#define SOAP_TYPE__tds__SetClientCertificateMode (222)
/* complex XML schema type 'tds:SetClientCertificateMode': */
class SOAP_CMAC _tds__SetClientCertificateMode {
      public:
        /// Required element 'tds:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetClientCertificateMode
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetClientCertificateMode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetClientCertificateMode, default initialized and not managed by a soap context
        virtual _tds__SetClientCertificateMode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetClientCertificateMode); }
      public:
        /// Constructor with default initializations
        _tds__SetClientCertificateMode() : Enabled(), soap() { }
        /// Destructor
        virtual ~_tds__SetClientCertificateMode() { }
        /// Friend allocator used by soap_new__tds__SetClientCertificateMode(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:544 */
#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse
#define SOAP_TYPE__tds__SetClientCertificateModeResponse (223)
/* complex XML schema type 'tds:SetClientCertificateModeResponse': */
class SOAP_CMAC _tds__SetClientCertificateModeResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetClientCertificateModeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetClientCertificateModeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetClientCertificateModeResponse, default initialized and not managed by a soap context
        virtual _tds__SetClientCertificateModeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetClientCertificateModeResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetClientCertificateModeResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetClientCertificateModeResponse() { }
        /// Friend allocator used by soap_new__tds__SetClientCertificateModeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:546 */
#ifndef SOAP_TYPE__tds__GetCACertificates
#define SOAP_TYPE__tds__GetCACertificates (224)
/* complex XML schema type 'tds:GetCACertificates': */
class SOAP_CMAC _tds__GetCACertificates {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCACertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCACertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCACertificates, default initialized and not managed by a soap context
        virtual _tds__GetCACertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCACertificates); }
      public:
        /// Constructor with default initializations
        _tds__GetCACertificates() : soap() { }
        /// Destructor
        virtual ~_tds__GetCACertificates() { }
        /// Friend allocator used by soap_new__tds__GetCACertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCACertificates * SOAP_FMAC2 soap_instantiate__tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:548 */
#ifndef SOAP_TYPE__tds__GetCACertificatesResponse
#define SOAP_TYPE__tds__GetCACertificatesResponse (225)
/* complex XML schema type 'tds:GetCACertificatesResponse': */
class SOAP_CMAC _tds__GetCACertificatesResponse {
      public:
        /// Optional element 'tds:CACertificate' of XML schema type 'tt:Certificate'
        std::vector<tt__Certificate *> CACertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCACertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCACertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCACertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__GetCACertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCACertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCACertificatesResponse() : CACertificate(), soap() { }
        /// Destructor
        virtual ~_tds__GetCACertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__GetCACertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:550 */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey (226)
/* complex XML schema type 'tds:LoadCertificateWithPrivateKey': */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKey {
      public:
        /// Required element 'tds:CertificateWithPrivateKey' of XML schema type 'tt:CertificateWithPrivateKey'
        std::vector<tt__CertificateWithPrivateKey *> CertificateWithPrivateKey;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKey
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificateWithPrivateKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificateWithPrivateKey, default initialized and not managed by a soap context
        virtual _tds__LoadCertificateWithPrivateKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificateWithPrivateKey); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificateWithPrivateKey() : CertificateWithPrivateKey(), soap() { }
        /// Destructor
        virtual ~_tds__LoadCertificateWithPrivateKey() { }
        /// Friend allocator used by soap_new__tds__LoadCertificateWithPrivateKey(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:552 */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse (227)
/* complex XML schema type 'tds:LoadCertificateWithPrivateKeyResponse': */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKeyResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCertificateWithPrivateKeyResponse, default initialized and not managed by a soap context
        virtual _tds__LoadCertificateWithPrivateKeyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCertificateWithPrivateKeyResponse); }
      public:
        /// Constructor with default initializations
        _tds__LoadCertificateWithPrivateKeyResponse() : soap() { }
        /// Destructor
        virtual ~_tds__LoadCertificateWithPrivateKeyResponse() { }
        /// Friend allocator used by soap_new__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:554 */
#ifndef SOAP_TYPE__tds__GetCertificateInformation
#define SOAP_TYPE__tds__GetCertificateInformation (228)
/* complex XML schema type 'tds:GetCertificateInformation': */
class SOAP_CMAC _tds__GetCertificateInformation {
      public:
        /// Required element 'tds:CertificateID' of XML schema type 'xsd:token'
        std::string CertificateID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificateInformation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificateInformation, default initialized and not managed by a soap context
        virtual _tds__GetCertificateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificateInformation); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificateInformation() : CertificateID(), soap() { }
        /// Destructor
        virtual ~_tds__GetCertificateInformation() { }
        /// Friend allocator used by soap_new__tds__GetCertificateInformation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:556 */
#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse
#define SOAP_TYPE__tds__GetCertificateInformationResponse (229)
/* complex XML schema type 'tds:GetCertificateInformationResponse': */
class SOAP_CMAC _tds__GetCertificateInformationResponse {
      public:
        /// Required element 'tds:CertificateInformation' of XML schema type 'tt:CertificateInformation'
        tt__CertificateInformation *CertificateInformation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetCertificateInformationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetCertificateInformationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetCertificateInformationResponse, default initialized and not managed by a soap context
        virtual _tds__GetCertificateInformationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetCertificateInformationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetCertificateInformationResponse() : CertificateInformation(), soap() { }
        /// Destructor
        virtual ~_tds__GetCertificateInformationResponse() { }
        /// Friend allocator used by soap_new__tds__GetCertificateInformationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetCertificateInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:558 */
#ifndef SOAP_TYPE__tds__LoadCACertificates
#define SOAP_TYPE__tds__LoadCACertificates (230)
/* complex XML schema type 'tds:LoadCACertificates': */
class SOAP_CMAC _tds__LoadCACertificates {
      public:
        /// Required element 'tds:CACertificate' of XML schema type 'tt:Certificate'
        std::vector<tt__Certificate *> CACertificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCACertificates
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCACertificates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCACertificates, default initialized and not managed by a soap context
        virtual _tds__LoadCACertificates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCACertificates); }
      public:
        /// Constructor with default initializations
        _tds__LoadCACertificates() : CACertificate(), soap() { }
        /// Destructor
        virtual ~_tds__LoadCACertificates() { }
        /// Friend allocator used by soap_new__tds__LoadCACertificates(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:560 */
#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse
#define SOAP_TYPE__tds__LoadCACertificatesResponse (231)
/* complex XML schema type 'tds:LoadCACertificatesResponse': */
class SOAP_CMAC _tds__LoadCACertificatesResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__LoadCACertificatesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__LoadCACertificatesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__LoadCACertificatesResponse, default initialized and not managed by a soap context
        virtual _tds__LoadCACertificatesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__LoadCACertificatesResponse); }
      public:
        /// Constructor with default initializations
        _tds__LoadCACertificatesResponse() : soap() { }
        /// Destructor
        virtual ~_tds__LoadCACertificatesResponse() { }
        /// Friend allocator used by soap_new__tds__LoadCACertificatesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__LoadCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:562 */
#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration
#define SOAP_TYPE__tds__CreateDot1XConfiguration (232)
/* complex XML schema type 'tds:CreateDot1XConfiguration': */
class SOAP_CMAC _tds__CreateDot1XConfiguration {
      public:
        /// Required element 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration'
        tt__Dot1XConfiguration *Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__CreateDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__CreateDot1XConfiguration() : Dot1XConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__CreateDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__CreateDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:564 */
#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse (233)
/* complex XML schema type 'tds:CreateDot1XConfigurationResponse': */
class SOAP_CMAC _tds__CreateDot1XConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__CreateDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateDot1XConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__CreateDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__CreateDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:566 */
#ifndef SOAP_TYPE__tds__SetDot1XConfiguration
#define SOAP_TYPE__tds__SetDot1XConfiguration (234)
/* complex XML schema type 'tds:SetDot1XConfiguration': */
class SOAP_CMAC _tds__SetDot1XConfiguration {
      public:
        /// Required element 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration'
        tt__Dot1XConfiguration *Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetDot1XConfiguration() : Dot1XConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__SetDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:568 */
#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse (235)
/* complex XML schema type 'tds:SetDot1XConfigurationResponse': */
class SOAP_CMAC _tds__SetDot1XConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetDot1XConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:570 */
#ifndef SOAP_TYPE__tds__GetDot1XConfiguration
#define SOAP_TYPE__tds__GetDot1XConfiguration (236)
/* complex XML schema type 'tds:GetDot1XConfiguration': */
class SOAP_CMAC _tds__GetDot1XConfiguration {
      public:
        /// Required element 'tds:Dot1XConfigurationToken' of XML schema type 'tt:ReferenceToken'
        std::string Dot1XConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfiguration() : Dot1XConfigurationToken(), soap() { }
        /// Destructor
        virtual ~_tds__GetDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:572 */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse (237)
/* complex XML schema type 'tds:GetDot1XConfigurationResponse': */
class SOAP_CMAC _tds__GetDot1XConfigurationResponse {
      public:
        /// Required element 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration'
        tt__Dot1XConfiguration *Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfigurationResponse() : Dot1XConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__GetDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:574 */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurations
#define SOAP_TYPE__tds__GetDot1XConfigurations (238)
/* complex XML schema type 'tds:GetDot1XConfigurations': */
class SOAP_CMAC _tds__GetDot1XConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfigurations, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfigurations); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfigurations() : soap() { }
        /// Destructor
        virtual ~_tds__GetDot1XConfigurations() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:576 */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse (239)
/* complex XML schema type 'tds:GetDot1XConfigurationsResponse': */
class SOAP_CMAC _tds__GetDot1XConfigurationsResponse {
      public:
        /// Optional element 'tds:Dot1XConfiguration' of XML schema type 'tt:Dot1XConfiguration'
        std::vector<tt__Dot1XConfiguration *> Dot1XConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot1XConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot1XConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot1XConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot1XConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot1XConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot1XConfigurationsResponse() : Dot1XConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__GetDot1XConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot1XConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:578 */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration
#define SOAP_TYPE__tds__DeleteDot1XConfiguration (240)
/* complex XML schema type 'tds:DeleteDot1XConfiguration': */
class SOAP_CMAC _tds__DeleteDot1XConfiguration {
      public:
        /// Optional element 'tds:Dot1XConfigurationToken' of XML schema type 'tt:ReferenceToken'
        std::vector<std::string> Dot1XConfigurationToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteDot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteDot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteDot1XConfiguration, default initialized and not managed by a soap context
        virtual _tds__DeleteDot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteDot1XConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__DeleteDot1XConfiguration() : Dot1XConfigurationToken(), soap() { }
        /// Destructor
        virtual ~_tds__DeleteDot1XConfiguration() { }
        /// Friend allocator used by soap_new__tds__DeleteDot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:580 */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse (241)
/* complex XML schema type 'tds:DeleteDot1XConfigurationResponse': */
class SOAP_CMAC _tds__DeleteDot1XConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteDot1XConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteDot1XConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteDot1XConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteDot1XConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteDot1XConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__DeleteDot1XConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteDot1XConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:582 */
#ifndef SOAP_TYPE__tds__GetRelayOutputs
#define SOAP_TYPE__tds__GetRelayOutputs (242)
/* complex XML schema type 'tds:GetRelayOutputs': */
class SOAP_CMAC _tds__GetRelayOutputs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRelayOutputs
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRelayOutputs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRelayOutputs, default initialized and not managed by a soap context
        virtual _tds__GetRelayOutputs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRelayOutputs); }
      public:
        /// Constructor with default initializations
        _tds__GetRelayOutputs() : soap() { }
        /// Destructor
        virtual ~_tds__GetRelayOutputs() { }
        /// Friend allocator used by soap_new__tds__GetRelayOutputs(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:584 */
#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse
#define SOAP_TYPE__tds__GetRelayOutputsResponse (243)
/* complex XML schema type 'tds:GetRelayOutputsResponse': */
class SOAP_CMAC _tds__GetRelayOutputsResponse {
      public:
        /// Optional element 'tds:RelayOutputs' of XML schema type 'tt:RelayOutput'
        std::vector<tt__RelayOutput *> RelayOutputs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetRelayOutputsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetRelayOutputsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetRelayOutputsResponse, default initialized and not managed by a soap context
        virtual _tds__GetRelayOutputsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetRelayOutputsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetRelayOutputsResponse() : RelayOutputs(), soap() { }
        /// Destructor
        virtual ~_tds__GetRelayOutputsResponse() { }
        /// Friend allocator used by soap_new__tds__GetRelayOutputsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetRelayOutputsResponse * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:586 */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettings
#define SOAP_TYPE__tds__SetRelayOutputSettings (244)
/* complex XML schema type 'tds:SetRelayOutputSettings': */
class SOAP_CMAC _tds__SetRelayOutputSettings {
      public:
        /// Required element 'tds:RelayOutputToken' of XML schema type 'tt:ReferenceToken'
        std::string RelayOutputToken;
        /// Required element 'tds:Properties' of XML schema type 'tt:RelayOutputSettings'
        tt__RelayOutputSettings *Properties;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputSettings
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputSettings, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputSettings); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputSettings() : RelayOutputToken(), Properties(), soap() { }
        /// Destructor
        virtual ~_tds__SetRelayOutputSettings() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputSettings(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:588 */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse (245)
/* complex XML schema type 'tds:SetRelayOutputSettingsResponse': */
class SOAP_CMAC _tds__SetRelayOutputSettingsResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputSettingsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputSettingsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputSettingsResponse, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputSettingsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputSettingsResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputSettingsResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetRelayOutputSettingsResponse() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputSettingsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettingsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:590 */
#ifndef SOAP_TYPE__tds__SetRelayOutputState
#define SOAP_TYPE__tds__SetRelayOutputState (246)
/* complex XML schema type 'tds:SetRelayOutputState': */
class SOAP_CMAC _tds__SetRelayOutputState {
      public:
        /// Required element 'tds:RelayOutputToken' of XML schema type 'tt:ReferenceToken'
        std::string RelayOutputToken;
        /// Required element 'tds:LogicalState' of XML schema type 'tt:RelayLogicalState'
        enum tt__RelayLogicalState LogicalState;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputState
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputState; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputState, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputState *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputState); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputState() : RelayOutputToken(), LogicalState(), soap() { }
        /// Destructor
        virtual ~_tds__SetRelayOutputState() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputState(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:592 */
#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse
#define SOAP_TYPE__tds__SetRelayOutputStateResponse (247)
/* complex XML schema type 'tds:SetRelayOutputStateResponse': */
class SOAP_CMAC _tds__SetRelayOutputStateResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetRelayOutputStateResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetRelayOutputStateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetRelayOutputStateResponse, default initialized and not managed by a soap context
        virtual _tds__SetRelayOutputStateResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetRelayOutputStateResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetRelayOutputStateResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetRelayOutputStateResponse() { }
        /// Friend allocator used by soap_new__tds__SetRelayOutputStateResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetRelayOutputStateResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputStateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:594 */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand
#define SOAP_TYPE__tds__SendAuxiliaryCommand (248)
/* complex XML schema type 'tds:SendAuxiliaryCommand': */
class SOAP_CMAC _tds__SendAuxiliaryCommand {
      public:
        /// Required element 'tds:AuxiliaryCommand' of XML schema type 'tt:AuxiliaryData'
        std::string AuxiliaryCommand;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SendAuxiliaryCommand
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SendAuxiliaryCommand; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SendAuxiliaryCommand, default initialized and not managed by a soap context
        virtual _tds__SendAuxiliaryCommand *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SendAuxiliaryCommand); }
      public:
        /// Constructor with default initializations
        _tds__SendAuxiliaryCommand() : AuxiliaryCommand(), soap() { }
        /// Destructor
        virtual ~_tds__SendAuxiliaryCommand() { }
        /// Friend allocator used by soap_new__tds__SendAuxiliaryCommand(struct soap*, int)
        friend SOAP_FMAC1 _tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:596 */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse (249)
/* complex XML schema type 'tds:SendAuxiliaryCommandResponse': */
class SOAP_CMAC _tds__SendAuxiliaryCommandResponse {
      public:
        /// Optional element 'tds:AuxiliaryCommandResponse' of XML schema type 'tt:AuxiliaryData'
        std::string *AuxiliaryCommandResponse;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SendAuxiliaryCommandResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SendAuxiliaryCommandResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SendAuxiliaryCommandResponse, default initialized and not managed by a soap context
        virtual _tds__SendAuxiliaryCommandResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SendAuxiliaryCommandResponse); }
      public:
        /// Constructor with default initializations
        _tds__SendAuxiliaryCommandResponse() : AuxiliaryCommandResponse(), soap() { }
        /// Destructor
        virtual ~_tds__SendAuxiliaryCommandResponse() { }
        /// Friend allocator used by soap_new__tds__SendAuxiliaryCommandResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:598 */
#ifndef SOAP_TYPE__tds__GetDot11Capabilities
#define SOAP_TYPE__tds__GetDot11Capabilities (250)
/* complex XML schema type 'tds:GetDot11Capabilities': */
class SOAP_CMAC _tds__GetDot11Capabilities {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11Capabilities, default initialized and not managed by a soap context
        virtual _tds__GetDot11Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11Capabilities); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11Capabilities() : soap() { }
        /// Destructor
        virtual ~_tds__GetDot11Capabilities() { }
        /// Friend allocator used by soap_new__tds__GetDot11Capabilities(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate__tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:600 */
#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse (251)
/* complex XML schema type 'tds:GetDot11CapabilitiesResponse': */
class SOAP_CMAC _tds__GetDot11CapabilitiesResponse {
      public:
        /// Required element 'tds:Capabilities' of XML schema type 'tt:Dot11Capabilities'
        tt__Dot11Capabilities *Capabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11CapabilitiesResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11CapabilitiesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11CapabilitiesResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot11CapabilitiesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11CapabilitiesResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11CapabilitiesResponse() : Capabilities(), soap() { }
        /// Destructor
        virtual ~_tds__GetDot11CapabilitiesResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot11CapabilitiesResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11CapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:602 */
#ifndef SOAP_TYPE__tds__GetDot11Status
#define SOAP_TYPE__tds__GetDot11Status (252)
/* complex XML schema type 'tds:GetDot11Status': */
class SOAP_CMAC _tds__GetDot11Status {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        std::string InterfaceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11Status
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11Status; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11Status, default initialized and not managed by a soap context
        virtual _tds__GetDot11Status *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11Status); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11Status() : InterfaceToken(), soap() { }
        /// Destructor
        virtual ~_tds__GetDot11Status() { }
        /// Friend allocator used by soap_new__tds__GetDot11Status(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11Status * SOAP_FMAC2 soap_instantiate__tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:604 */
#ifndef SOAP_TYPE__tds__GetDot11StatusResponse
#define SOAP_TYPE__tds__GetDot11StatusResponse (253)
/* complex XML schema type 'tds:GetDot11StatusResponse': */
class SOAP_CMAC _tds__GetDot11StatusResponse {
      public:
        /// Required element 'tds:Status' of XML schema type 'tt:Dot11Status'
        tt__Dot11Status *Status;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetDot11StatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetDot11StatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetDot11StatusResponse, default initialized and not managed by a soap context
        virtual _tds__GetDot11StatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetDot11StatusResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetDot11StatusResponse() : Status(), soap() { }
        /// Destructor
        virtual ~_tds__GetDot11StatusResponse() { }
        /// Friend allocator used by soap_new__tds__GetDot11StatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetDot11StatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11StatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:606 */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks
#define SOAP_TYPE__tds__ScanAvailableDot11Networks (254)
/* complex XML schema type 'tds:ScanAvailableDot11Networks': */
class SOAP_CMAC _tds__ScanAvailableDot11Networks {
      public:
        /// Required element 'tds:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        std::string InterfaceToken;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__ScanAvailableDot11Networks
        virtual long soap_type(void) const { return SOAP_TYPE__tds__ScanAvailableDot11Networks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__ScanAvailableDot11Networks, default initialized and not managed by a soap context
        virtual _tds__ScanAvailableDot11Networks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__ScanAvailableDot11Networks); }
      public:
        /// Constructor with default initializations
        _tds__ScanAvailableDot11Networks() : InterfaceToken(), soap() { }
        /// Destructor
        virtual ~_tds__ScanAvailableDot11Networks() { }
        /// Friend allocator used by soap_new__tds__ScanAvailableDot11Networks(struct soap*, int)
        friend SOAP_FMAC1 _tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:608 */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse (255)
/* complex XML schema type 'tds:ScanAvailableDot11NetworksResponse': */
class SOAP_CMAC _tds__ScanAvailableDot11NetworksResponse {
      public:
        /// Optional element 'tds:Networks' of XML schema type 'tt:Dot11AvailableNetworks'
        std::vector<tt__Dot11AvailableNetworks *> Networks;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__ScanAvailableDot11NetworksResponse, default initialized and not managed by a soap context
        virtual _tds__ScanAvailableDot11NetworksResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__ScanAvailableDot11NetworksResponse); }
      public:
        /// Constructor with default initializations
        _tds__ScanAvailableDot11NetworksResponse() : Networks(), soap() { }
        /// Destructor
        virtual ~_tds__ScanAvailableDot11NetworksResponse() { }
        /// Friend allocator used by soap_new__tds__ScanAvailableDot11NetworksResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11NetworksResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:610 */
#ifndef SOAP_TYPE__tds__GetSystemUris
#define SOAP_TYPE__tds__GetSystemUris (256)
/* complex XML schema type 'tds:GetSystemUris': */
class SOAP_CMAC _tds__GetSystemUris {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemUris
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemUris; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemUris, default initialized and not managed by a soap context
        virtual _tds__GetSystemUris *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemUris); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemUris() : soap() { }
        /// Destructor
        virtual ~_tds__GetSystemUris() { }
        /// Friend allocator used by soap_new__tds__GetSystemUris(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemUris * SOAP_FMAC2 soap_instantiate__tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:6242 */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension (521)
/* complex XML schema type 'tds:GetSystemUrisResponse-Extension': */
class SOAP_CMAC _tds__GetSystemUrisResponse_Extension {
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemUrisResponse_Extension
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemUrisResponse_Extension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemUrisResponse_Extension, default initialized and not managed by a soap context
        virtual _tds__GetSystemUrisResponse_Extension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemUrisResponse_Extension); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemUrisResponse_Extension() { }
        /// Destructor
        virtual ~_tds__GetSystemUrisResponse_Extension() { }
        /// Friend allocator used by soap_new__tds__GetSystemUrisResponse_Extension(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse_Extension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:612 */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse
#define SOAP_TYPE__tds__GetSystemUrisResponse (257)
/* complex XML schema type 'tds:GetSystemUrisResponse': */
class SOAP_CMAC _tds__GetSystemUrisResponse {
      public:
        /// Optional element 'tds:SystemLogUris' of XML schema type 'tt:SystemLogUriList'
        tt__SystemLogUriList *SystemLogUris;
        /// Optional element 'tds:SupportInfoUri' of XML schema type 'xsd:anyURI'
        std::string *SupportInfoUri;
        /// Optional element 'tds:SystemBackupUri' of XML schema type 'xsd:anyURI'
        std::string *SystemBackupUri;
        /// Optional element 'tds:Extension' of XML schema type 'tds:GetSystemUrisResponse-Extension'
        _tds__GetSystemUrisResponse_Extension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetSystemUrisResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetSystemUrisResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetSystemUrisResponse, default initialized and not managed by a soap context
        virtual _tds__GetSystemUrisResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetSystemUrisResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetSystemUrisResponse() : SystemLogUris(), SupportInfoUri(), SystemBackupUri(), Extension(), soap() { }
        /// Destructor
        virtual ~_tds__GetSystemUrisResponse() { }
        /// Friend allocator used by soap_new__tds__GetSystemUrisResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetSystemUrisResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:614 */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade
#define SOAP_TYPE__tds__StartFirmwareUpgrade (258)
/* complex XML schema type 'tds:StartFirmwareUpgrade': */
class SOAP_CMAC _tds__StartFirmwareUpgrade {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartFirmwareUpgrade
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartFirmwareUpgrade; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartFirmwareUpgrade, default initialized and not managed by a soap context
        virtual _tds__StartFirmwareUpgrade *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartFirmwareUpgrade); }
      public:
        /// Constructor with default initializations
        _tds__StartFirmwareUpgrade() : soap() { }
        /// Destructor
        virtual ~_tds__StartFirmwareUpgrade() { }
        /// Friend allocator used by soap_new__tds__StartFirmwareUpgrade(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:616 */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse (259)
/* complex XML schema type 'tds:StartFirmwareUpgradeResponse': */
class SOAP_CMAC _tds__StartFirmwareUpgradeResponse {
      public:
        /// Required element 'tds:UploadUri' of XML schema type 'xsd:anyURI'
        std::string UploadUri;
        /// Required element 'tds:UploadDelay' of XML schema type 'xsd:duration'
        std::string UploadDelay;
        /// Required element 'tds:ExpectedDownTime' of XML schema type 'xsd:duration'
        std::string ExpectedDownTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartFirmwareUpgradeResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartFirmwareUpgradeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartFirmwareUpgradeResponse, default initialized and not managed by a soap context
        virtual _tds__StartFirmwareUpgradeResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartFirmwareUpgradeResponse); }
      public:
        /// Constructor with default initializations
        _tds__StartFirmwareUpgradeResponse() : UploadUri(), UploadDelay(), ExpectedDownTime(), soap() { }
        /// Destructor
        virtual ~_tds__StartFirmwareUpgradeResponse() { }
        /// Friend allocator used by soap_new__tds__StartFirmwareUpgradeResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgradeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:618 */
#ifndef SOAP_TYPE__tds__StartSystemRestore
#define SOAP_TYPE__tds__StartSystemRestore (260)
/* complex XML schema type 'tds:StartSystemRestore': */
class SOAP_CMAC _tds__StartSystemRestore {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartSystemRestore
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartSystemRestore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartSystemRestore, default initialized and not managed by a soap context
        virtual _tds__StartSystemRestore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartSystemRestore); }
      public:
        /// Constructor with default initializations
        _tds__StartSystemRestore() : soap() { }
        /// Destructor
        virtual ~_tds__StartSystemRestore() { }
        /// Friend allocator used by soap_new__tds__StartSystemRestore(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:620 */
#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse
#define SOAP_TYPE__tds__StartSystemRestoreResponse (261)
/* complex XML schema type 'tds:StartSystemRestoreResponse': */
class SOAP_CMAC _tds__StartSystemRestoreResponse {
      public:
        /// Required element 'tds:UploadUri' of XML schema type 'xsd:anyURI'
        std::string UploadUri;
        /// Required element 'tds:ExpectedDownTime' of XML schema type 'xsd:duration'
        std::string ExpectedDownTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__StartSystemRestoreResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__StartSystemRestoreResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__StartSystemRestoreResponse, default initialized and not managed by a soap context
        virtual _tds__StartSystemRestoreResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__StartSystemRestoreResponse); }
      public:
        /// Constructor with default initializations
        _tds__StartSystemRestoreResponse() : UploadUri(), ExpectedDownTime(), soap() { }
        /// Destructor
        virtual ~_tds__StartSystemRestoreResponse() { }
        /// Friend allocator used by soap_new__tds__StartSystemRestoreResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__StartSystemRestoreResponse * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestoreResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:622 */
#ifndef SOAP_TYPE__tds__SetHashingAlgorithm
#define SOAP_TYPE__tds__SetHashingAlgorithm (262)
/* complex XML schema type 'tds:SetHashingAlgorithm': */
class SOAP_CMAC _tds__SetHashingAlgorithm {
      public:
        /// Required element 'tds:Algorithm' of XML schema type 'tt:StringList'
        std::string Algorithm;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHashingAlgorithm
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHashingAlgorithm; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHashingAlgorithm, default initialized and not managed by a soap context
        virtual _tds__SetHashingAlgorithm *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHashingAlgorithm); }
      public:
        /// Constructor with default initializations
        _tds__SetHashingAlgorithm() : Algorithm(), soap() { }
        /// Destructor
        virtual ~_tds__SetHashingAlgorithm() { }
        /// Friend allocator used by soap_new__tds__SetHashingAlgorithm(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHashingAlgorithm * SOAP_FMAC2 soap_instantiate__tds__SetHashingAlgorithm(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:624 */
#ifndef SOAP_TYPE__tds__SetHashingAlgorithmResponse
#define SOAP_TYPE__tds__SetHashingAlgorithmResponse (263)
/* complex XML schema type 'tds:SetHashingAlgorithmResponse': */
class SOAP_CMAC _tds__SetHashingAlgorithmResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetHashingAlgorithmResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetHashingAlgorithmResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetHashingAlgorithmResponse, default initialized and not managed by a soap context
        virtual _tds__SetHashingAlgorithmResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetHashingAlgorithmResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetHashingAlgorithmResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetHashingAlgorithmResponse() { }
        /// Friend allocator used by soap_new__tds__SetHashingAlgorithmResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetHashingAlgorithmResponse * SOAP_FMAC2 soap_instantiate__tds__SetHashingAlgorithmResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:626 */
#ifndef SOAP_TYPE__tds__GetStorageConfigurations
#define SOAP_TYPE__tds__GetStorageConfigurations (264)
/* complex XML schema type 'tds:GetStorageConfigurations': */
class SOAP_CMAC _tds__GetStorageConfigurations {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfigurations
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfigurations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfigurations, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfigurations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfigurations); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfigurations() : soap() { }
        /// Destructor
        virtual ~_tds__GetStorageConfigurations() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfigurations(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:628 */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse (265)
/* complex XML schema type 'tds:GetStorageConfigurationsResponse': */
class SOAP_CMAC _tds__GetStorageConfigurationsResponse {
      public:
        /// Optional element 'tds:StorageConfigurations' of XML schema type 'tds:StorageConfiguration'
        std::vector<tds__StorageConfiguration *> StorageConfigurations;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfigurationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfigurationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfigurationsResponse, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfigurationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfigurationsResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfigurationsResponse() : StorageConfigurations(), soap() { }
        /// Destructor
        virtual ~_tds__GetStorageConfigurationsResponse() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfigurationsResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:630 */
#ifndef SOAP_TYPE__tds__CreateStorageConfiguration
#define SOAP_TYPE__tds__CreateStorageConfiguration (266)
/* complex XML schema type 'tds:CreateStorageConfiguration': */
class SOAP_CMAC _tds__CreateStorageConfiguration {
      public:
        /// Required element 'tds:StorageConfiguration' of XML schema type 'tds:StorageConfigurationData'
        tds__StorageConfigurationData *StorageConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__CreateStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__CreateStorageConfiguration() : StorageConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__CreateStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__CreateStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:632 */
#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse (267)
/* complex XML schema type 'tds:CreateStorageConfigurationResponse': */
class SOAP_CMAC _tds__CreateStorageConfigurationResponse {
      public:
        /// Required element 'tds:Token' of XML schema type 'tt:ReferenceToken'
        std::string Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__CreateStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__CreateStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__CreateStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__CreateStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__CreateStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__CreateStorageConfigurationResponse() : Token(), soap() { }
        /// Destructor
        virtual ~_tds__CreateStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__CreateStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__CreateStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:634 */
#ifndef SOAP_TYPE__tds__GetStorageConfiguration
#define SOAP_TYPE__tds__GetStorageConfiguration (268)
/* complex XML schema type 'tds:GetStorageConfiguration': */
class SOAP_CMAC _tds__GetStorageConfiguration {
      public:
        /// Required element 'tds:Token' of XML schema type 'tt:ReferenceToken'
        std::string Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfiguration() : Token(), soap() { }
        /// Destructor
        virtual ~_tds__GetStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:636 */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse
#define SOAP_TYPE__tds__GetStorageConfigurationResponse (269)
/* complex XML schema type 'tds:GetStorageConfigurationResponse': */
class SOAP_CMAC _tds__GetStorageConfigurationResponse {
      public:
        /// Required element 'tds:StorageConfiguration' of XML schema type 'tds:StorageConfiguration'
        tds__StorageConfiguration *StorageConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__GetStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetStorageConfigurationResponse() : StorageConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__GetStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__GetStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:638 */
#ifndef SOAP_TYPE__tds__SetStorageConfiguration
#define SOAP_TYPE__tds__SetStorageConfiguration (270)
/* complex XML schema type 'tds:SetStorageConfiguration': */
class SOAP_CMAC _tds__SetStorageConfiguration {
      public:
        /// Required element 'tds:StorageConfiguration' of XML schema type 'tds:StorageConfiguration'
        tds__StorageConfiguration *StorageConfiguration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__SetStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__SetStorageConfiguration() : StorageConfiguration(), soap() { }
        /// Destructor
        virtual ~_tds__SetStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__SetStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:640 */
#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse
#define SOAP_TYPE__tds__SetStorageConfigurationResponse (271)
/* complex XML schema type 'tds:SetStorageConfigurationResponse': */
class SOAP_CMAC _tds__SetStorageConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__SetStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetStorageConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__SetStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:642 */
#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration
#define SOAP_TYPE__tds__DeleteStorageConfiguration (272)
/* complex XML schema type 'tds:DeleteStorageConfiguration': */
class SOAP_CMAC _tds__DeleteStorageConfiguration {
      public:
        /// Required element 'tds:Token' of XML schema type 'tt:ReferenceToken'
        std::string Token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteStorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteStorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteStorageConfiguration, default initialized and not managed by a soap context
        virtual _tds__DeleteStorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteStorageConfiguration); }
      public:
        /// Constructor with default initializations
        _tds__DeleteStorageConfiguration() : Token(), soap() { }
        /// Destructor
        virtual ~_tds__DeleteStorageConfiguration() { }
        /// Friend allocator used by soap_new__tds__DeleteStorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:644 */
#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse (273)
/* complex XML schema type 'tds:DeleteStorageConfigurationResponse': */
class SOAP_CMAC _tds__DeleteStorageConfigurationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteStorageConfigurationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteStorageConfigurationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteStorageConfigurationResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteStorageConfigurationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteStorageConfigurationResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteStorageConfigurationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__DeleteStorageConfigurationResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteStorageConfigurationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:646 */
#ifndef SOAP_TYPE__tds__GetGeoLocation
#define SOAP_TYPE__tds__GetGeoLocation (274)
/* complex XML schema type 'tds:GetGeoLocation': */
class SOAP_CMAC _tds__GetGeoLocation {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetGeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetGeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetGeoLocation, default initialized and not managed by a soap context
        virtual _tds__GetGeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetGeoLocation); }
      public:
        /// Constructor with default initializations
        _tds__GetGeoLocation() : soap() { }
        /// Destructor
        virtual ~_tds__GetGeoLocation() { }
        /// Friend allocator used by soap_new__tds__GetGeoLocation(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetGeoLocation * SOAP_FMAC2 soap_instantiate__tds__GetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:648 */
#ifndef SOAP_TYPE__tds__GetGeoLocationResponse
#define SOAP_TYPE__tds__GetGeoLocationResponse (275)
/* complex XML schema type 'tds:GetGeoLocationResponse': */
class SOAP_CMAC _tds__GetGeoLocationResponse {
      public:
        /// Optional element 'tds:Location' of XML schema type 'tt:LocationEntity'
        std::vector<tt__LocationEntity *> Location;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__GetGeoLocationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__GetGeoLocationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__GetGeoLocationResponse, default initialized and not managed by a soap context
        virtual _tds__GetGeoLocationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__GetGeoLocationResponse); }
      public:
        /// Constructor with default initializations
        _tds__GetGeoLocationResponse() : Location(), soap() { }
        /// Destructor
        virtual ~_tds__GetGeoLocationResponse() { }
        /// Friend allocator used by soap_new__tds__GetGeoLocationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__GetGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__GetGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:650 */
#ifndef SOAP_TYPE__tds__SetGeoLocation
#define SOAP_TYPE__tds__SetGeoLocation (276)
/* complex XML schema type 'tds:SetGeoLocation': */
class SOAP_CMAC _tds__SetGeoLocation {
      public:
        /// Required element 'tds:Location' of XML schema type 'tt:LocationEntity'
        std::vector<tt__LocationEntity *> Location;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetGeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetGeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetGeoLocation, default initialized and not managed by a soap context
        virtual _tds__SetGeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetGeoLocation); }
      public:
        /// Constructor with default initializations
        _tds__SetGeoLocation() : Location(), soap() { }
        /// Destructor
        virtual ~_tds__SetGeoLocation() { }
        /// Friend allocator used by soap_new__tds__SetGeoLocation(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetGeoLocation * SOAP_FMAC2 soap_instantiate__tds__SetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:652 */
#ifndef SOAP_TYPE__tds__SetGeoLocationResponse
#define SOAP_TYPE__tds__SetGeoLocationResponse (277)
/* complex XML schema type 'tds:SetGeoLocationResponse': */
class SOAP_CMAC _tds__SetGeoLocationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__SetGeoLocationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__SetGeoLocationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__SetGeoLocationResponse, default initialized and not managed by a soap context
        virtual _tds__SetGeoLocationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__SetGeoLocationResponse); }
      public:
        /// Constructor with default initializations
        _tds__SetGeoLocationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__SetGeoLocationResponse() { }
        /// Friend allocator used by soap_new__tds__SetGeoLocationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__SetGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__SetGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:654 */
#ifndef SOAP_TYPE__tds__DeleteGeoLocation
#define SOAP_TYPE__tds__DeleteGeoLocation (278)
/* complex XML schema type 'tds:DeleteGeoLocation': */
class SOAP_CMAC _tds__DeleteGeoLocation {
      public:
        /// Required element 'tds:Location' of XML schema type 'tt:LocationEntity'
        std::vector<tt__LocationEntity *> Location;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteGeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteGeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteGeoLocation, default initialized and not managed by a soap context
        virtual _tds__DeleteGeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteGeoLocation); }
      public:
        /// Constructor with default initializations
        _tds__DeleteGeoLocation() : Location(), soap() { }
        /// Destructor
        virtual ~_tds__DeleteGeoLocation() { }
        /// Friend allocator used by soap_new__tds__DeleteGeoLocation(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteGeoLocation * SOAP_FMAC2 soap_instantiate__tds__DeleteGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:656 */
#ifndef SOAP_TYPE__tds__DeleteGeoLocationResponse
#define SOAP_TYPE__tds__DeleteGeoLocationResponse (279)
/* complex XML schema type 'tds:DeleteGeoLocationResponse': */
class SOAP_CMAC _tds__DeleteGeoLocationResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tds__DeleteGeoLocationResponse
        virtual long soap_type(void) const { return SOAP_TYPE__tds__DeleteGeoLocationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tds__DeleteGeoLocationResponse, default initialized and not managed by a soap context
        virtual _tds__DeleteGeoLocationResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_tds__DeleteGeoLocationResponse); }
      public:
        /// Constructor with default initializations
        _tds__DeleteGeoLocationResponse() : soap() { }
        /// Destructor
        virtual ~_tds__DeleteGeoLocationResponse() { }
        /// Friend allocator used by soap_new__tds__DeleteGeoLocationResponse(struct soap*, int)
        friend SOAP_FMAC1 _tds__DeleteGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:658 */
#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (280)
/* complex XML schema type 'tt:DeviceEntity': */
class SOAP_CMAC tt__DeviceEntity {
      public:
        /// Required attribute 'token' of XML schema type 'tt:ReferenceToken'
        std::string token;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceEntity, default initialized and not managed by a soap context
        virtual tt__DeviceEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceEntity); }
      public:
        /// Constructor with default initializations
        tt__DeviceEntity() : token(), soap() { }
        /// Destructor
        virtual ~tt__DeviceEntity() { }
        /// Friend allocator used by soap_new_tt__DeviceEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:660 */
#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (281)
/* complex XML schema type 'tt:Scope': */
class SOAP_CMAC tt__Scope {
      public:
        /// Required element 'tt:ScopeDef' of XML schema type 'tt:ScopeDefinition'
        enum tt__ScopeDefinition ScopeDef;
        /// Required element 'tt:ScopeItem' of XML schema type 'xsd:anyURI'
        std::string ScopeItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Scope
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Scope; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Scope, default initialized and not managed by a soap context
        virtual tt__Scope *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Scope); }
      public:
        /// Constructor with default initializations
        tt__Scope() : ScopeDef(), ScopeItem(), soap() { }
        /// Destructor
        virtual ~tt__Scope() { }
        /// Friend allocator used by soap_new_tt__Scope(struct soap*, int)
        friend SOAP_FMAC1 tt__Scope * SOAP_FMAC2 soap_instantiate_tt__Scope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:664 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (283)
/* complex XML schema type 'tt:NetworkInterfaceExtension': */
class SOAP_CMAC tt__NetworkInterfaceExtension {
      public:
        /// Required element 'tt:InterfaceType' of XML schema type 'tt:IANA-IfTypes'
        int InterfaceType;
        /// Optional element 'tt:Dot3' of XML schema type 'tt:Dot3Configuration'
        std::vector<tt__Dot3Configuration *> Dot3;
        /// Optional element 'tt:Dot11' of XML schema type 'tt:Dot11Configuration'
        std::vector<tt__Dot11Configuration *> Dot11;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceExtension2'
        tt__NetworkInterfaceExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceExtension, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceExtension() : InterfaceType(), Dot3(), Dot11(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:666 */
#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (284)
/* complex XML schema type 'tt:Dot3Configuration': */
class SOAP_CMAC tt__Dot3Configuration {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot3Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot3Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot3Configuration, default initialized and not managed by a soap context
        virtual tt__Dot3Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot3Configuration); }
      public:
        /// Constructor with default initializations
        tt__Dot3Configuration() : soap() { }
        /// Destructor
        virtual ~tt__Dot3Configuration() { }
        /// Friend allocator used by soap_new_tt__Dot3Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot3Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:668 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (285)
/* complex XML schema type 'tt:NetworkInterfaceExtension2': */
class SOAP_CMAC tt__NetworkInterfaceExtension2 {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceExtension2() : soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:670 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (286)
/* complex XML schema type 'tt:NetworkInterfaceLink': */
class SOAP_CMAC tt__NetworkInterfaceLink {
      public:
        /// Required element 'tt:AdminSettings' of XML schema type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *AdminSettings;
        /// Required element 'tt:OperSettings' of XML schema type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *OperSettings;
        /// Required element 'tt:InterfaceType' of XML schema type 'tt:IANA-IfTypes'
        int InterfaceType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceLink
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceLink; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceLink, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceLink *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceLink); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceLink() : AdminSettings(), OperSettings(), InterfaceType(), soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceLink() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceLink(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceLink * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceLink(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:672 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (287)
/* complex XML schema type 'tt:NetworkInterfaceConnectionSetting': */
class SOAP_CMAC tt__NetworkInterfaceConnectionSetting {
      public:
        /// Required element 'tt:AutoNegotiation' of XML schema type 'xsd:boolean'
        bool AutoNegotiation;
        /// Required element 'tt:Speed' of XML schema type 'xsd:int'
        int Speed;
        /// Required element 'tt:Duplex' of XML schema type 'tt:Duplex'
        enum tt__Duplex Duplex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceConnectionSetting; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceConnectionSetting, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceConnectionSetting *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceConnectionSetting); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceConnectionSetting() : AutoNegotiation(), Speed(), Duplex(), soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceConnectionSetting() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceConnectionSetting(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConnectionSetting(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:674 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (288)
/* complex XML schema type 'tt:NetworkInterfaceInfo': */
class SOAP_CMAC tt__NetworkInterfaceInfo {
      public:
        /// Optional element 'tt:Name' of XML schema type 'xsd:string'
        std::string *Name;
        /// Required element 'tt:HwAddress' of XML schema type 'tt:HwAddress'
        std::string HwAddress;
        /// Optional element 'tt:MTU' of XML schema type 'xsd:int'
        int *MTU;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceInfo
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceInfo, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceInfo); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceInfo() : Name(), HwAddress(), MTU(), soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceInfo() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceInfo(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceInfo * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:676 */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (289)
/* complex XML schema type 'tt:IPv6NetworkInterface': */
class SOAP_CMAC tt__IPv6NetworkInterface {
      public:
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Config' of XML schema type 'tt:IPv6Configuration'
        tt__IPv6Configuration *Config;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6NetworkInterface, default initialized and not managed by a soap context
        virtual tt__IPv6NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6NetworkInterface); }
      public:
        /// Constructor with default initializations
        tt__IPv6NetworkInterface() : Enabled(), Config(), soap() { }
        /// Destructor
        virtual ~tt__IPv6NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__IPv6NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:678 */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (290)
/* complex XML schema type 'tt:IPv4NetworkInterface': */
class SOAP_CMAC tt__IPv4NetworkInterface {
      public:
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tt:Config' of XML schema type 'tt:IPv4Configuration'
        tt__IPv4Configuration *Config;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4NetworkInterface, default initialized and not managed by a soap context
        virtual tt__IPv4NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4NetworkInterface); }
      public:
        /// Constructor with default initializations
        tt__IPv4NetworkInterface() : Enabled(), Config(), soap() { }
        /// Destructor
        virtual ~tt__IPv4NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__IPv4NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:680 */
#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (291)
/* complex XML schema type 'tt:IPv4Configuration': */
class SOAP_CMAC tt__IPv4Configuration {
      public:
        /// Optional element 'tt:Manual' of XML schema type 'tt:PrefixedIPv4Address'
        std::vector<tt__PrefixedIPv4Address *> Manual;
        /// Optional element 'tt:LinkLocal' of XML schema type 'tt:PrefixedIPv4Address'
        tt__PrefixedIPv4Address *LinkLocal;
        /// Optional element 'tt:FromDHCP' of XML schema type 'tt:PrefixedIPv4Address'
        tt__PrefixedIPv4Address *FromDHCP;
        /// Required element 'tt:DHCP' of XML schema type 'xsd:boolean'
        bool DHCP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4Configuration, default initialized and not managed by a soap context
        virtual tt__IPv4Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4Configuration); }
      public:
        /// Constructor with default initializations
        tt__IPv4Configuration() : Manual(), LinkLocal(), FromDHCP(), DHCP(), soap() { }
        /// Destructor
        virtual ~tt__IPv4Configuration() { }
        /// Friend allocator used by soap_new_tt__IPv4Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv4Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:682 */
#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (292)
/* complex XML schema type 'tt:IPv6Configuration': */
class SOAP_CMAC tt__IPv6Configuration {
      public:
        /// Optional element 'tt:AcceptRouterAdvert' of XML schema type 'xsd:boolean'
        bool *AcceptRouterAdvert;
        /// Required element 'tt:DHCP' of XML schema type 'tt:IPv6DHCPConfiguration'
        enum tt__IPv6DHCPConfiguration DHCP;
        /// Optional element 'tt:Manual' of XML schema type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> Manual;
        /// Optional element 'tt:LinkLocal' of XML schema type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> LinkLocal;
        /// Optional element 'tt:FromDHCP' of XML schema type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> FromDHCP;
        /// Optional element 'tt:FromRA' of XML schema type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> FromRA;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IPv6ConfigurationExtension'
        tt__IPv6ConfigurationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6Configuration, default initialized and not managed by a soap context
        virtual tt__IPv6Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6Configuration); }
      public:
        /// Constructor with default initializations
        tt__IPv6Configuration() : AcceptRouterAdvert(), DHCP(), Manual(), LinkLocal(), FromDHCP(), FromRA(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__IPv6Configuration() { }
        /// Friend allocator used by soap_new_tt__IPv6Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv6Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:684 */
#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (293)
/* complex XML schema type 'tt:IPv6ConfigurationExtension': */
class SOAP_CMAC tt__IPv6ConfigurationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6ConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6ConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6ConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__IPv6ConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6ConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__IPv6ConfigurationExtension() : soap() { }
        /// Destructor
        virtual ~tt__IPv6ConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__IPv6ConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6ConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__IPv6ConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:686 */
#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (294)
/* complex XML schema type 'tt:NetworkProtocol': */
class SOAP_CMAC tt__NetworkProtocol {
      public:
        /// Required element 'tt:Name' of XML schema type 'tt:NetworkProtocolType'
        enum tt__NetworkProtocolType Name;
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Required element 'tt:Port' of XML schema type 'xsd:int'
        std::vector<int> Port;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkProtocolExtension'
        tt__NetworkProtocolExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkProtocol
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkProtocol; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkProtocol, default initialized and not managed by a soap context
        virtual tt__NetworkProtocol *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkProtocol); }
      public:
        /// Constructor with default initializations
        tt__NetworkProtocol() : Name(), Enabled(), Port(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkProtocol() { }
        /// Friend allocator used by soap_new_tt__NetworkProtocol(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkProtocol * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:688 */
#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (295)
/* complex XML schema type 'tt:NetworkProtocolExtension': */
class SOAP_CMAC tt__NetworkProtocolExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkProtocolExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkProtocolExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkProtocolExtension, default initialized and not managed by a soap context
        virtual tt__NetworkProtocolExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkProtocolExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkProtocolExtension() : soap() { }
        /// Destructor
        virtual ~tt__NetworkProtocolExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkProtocolExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkProtocolExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:690 */
#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (296)
/* complex XML schema type 'tt:NetworkHost': */
class SOAP_CMAC tt__NetworkHost {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:NetworkHostType'
        enum tt__NetworkHostType Type;
        /// Optional element 'tt:IPv4Address' of XML schema type 'tt:IPv4Address'
        std::string *IPv4Address;
        /// Optional element 'tt:IPv6Address' of XML schema type 'tt:IPv6Address'
        std::string *IPv6Address;
        /// Optional element 'tt:DNSname' of XML schema type 'tt:DNSName'
        std::string *DNSname;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkHostExtension'
        tt__NetworkHostExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkHost
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkHost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkHost, default initialized and not managed by a soap context
        virtual tt__NetworkHost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkHost); }
      public:
        /// Constructor with default initializations
        tt__NetworkHost() : Type(), IPv4Address(), IPv6Address(), DNSname(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkHost() { }
        /// Friend allocator used by soap_new_tt__NetworkHost(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkHost * SOAP_FMAC2 soap_instantiate_tt__NetworkHost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:692 */
#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (297)
/* complex XML schema type 'tt:NetworkHostExtension': */
class SOAP_CMAC tt__NetworkHostExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkHostExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkHostExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkHostExtension, default initialized and not managed by a soap context
        virtual tt__NetworkHostExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkHostExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkHostExtension() : soap() { }
        /// Destructor
        virtual ~tt__NetworkHostExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkHostExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkHostExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkHostExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:694 */
#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (298)
/* complex XML schema type 'tt:IPAddress': */
class SOAP_CMAC tt__IPAddress {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:IPType'
        enum tt__IPType Type;
        /// Optional element 'tt:IPv4Address' of XML schema type 'tt:IPv4Address'
        std::string *IPv4Address;
        /// Optional element 'tt:IPv6Address' of XML schema type 'tt:IPv6Address'
        std::string *IPv6Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddress
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddress; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddress, default initialized and not managed by a soap context
        virtual tt__IPAddress *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddress); }
      public:
        /// Constructor with default initializations
        tt__IPAddress() : Type(), IPv4Address(), IPv6Address(), soap() { }
        /// Destructor
        virtual ~tt__IPAddress() { }
        /// Friend allocator used by soap_new_tt__IPAddress(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddress * SOAP_FMAC2 soap_instantiate_tt__IPAddress(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:696 */
#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (299)
/* complex XML schema type 'tt:PrefixedIPv4Address': */
class SOAP_CMAC tt__PrefixedIPv4Address {
      public:
        /// Required element 'tt:Address' of XML schema type 'tt:IPv4Address'
        std::string Address;
        /// Required element 'tt:PrefixLength' of XML schema type 'xsd:int'
        int PrefixLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PrefixedIPv4Address
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PrefixedIPv4Address; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PrefixedIPv4Address, default initialized and not managed by a soap context
        virtual tt__PrefixedIPv4Address *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PrefixedIPv4Address); }
      public:
        /// Constructor with default initializations
        tt__PrefixedIPv4Address() : Address(), PrefixLength(), soap() { }
        /// Destructor
        virtual ~tt__PrefixedIPv4Address() { }
        /// Friend allocator used by soap_new_tt__PrefixedIPv4Address(struct soap*, int)
        friend SOAP_FMAC1 tt__PrefixedIPv4Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:698 */
#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (300)
/* complex XML schema type 'tt:PrefixedIPv6Address': */
class SOAP_CMAC tt__PrefixedIPv6Address {
      public:
        /// Required element 'tt:Address' of XML schema type 'tt:IPv6Address'
        std::string Address;
        /// Required element 'tt:PrefixLength' of XML schema type 'xsd:int'
        int PrefixLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PrefixedIPv6Address
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PrefixedIPv6Address; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PrefixedIPv6Address, default initialized and not managed by a soap context
        virtual tt__PrefixedIPv6Address *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PrefixedIPv6Address); }
      public:
        /// Constructor with default initializations
        tt__PrefixedIPv6Address() : Address(), PrefixLength(), soap() { }
        /// Destructor
        virtual ~tt__PrefixedIPv6Address() { }
        /// Friend allocator used by soap_new_tt__PrefixedIPv6Address(struct soap*, int)
        friend SOAP_FMAC1 tt__PrefixedIPv6Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:700 */
#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (301)
/* complex XML schema type 'tt:HostnameInformation': */
class SOAP_CMAC tt__HostnameInformation {
      public:
        /// Required element 'tt:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tt:Name' of XML schema type 'xsd:token'
        std::string *Name;
        /// Optional element 'tt:Extension' of XML schema type 'tt:HostnameInformationExtension'
        tt__HostnameInformationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__HostnameInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__HostnameInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__HostnameInformation, default initialized and not managed by a soap context
        virtual tt__HostnameInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__HostnameInformation); }
      public:
        /// Constructor with default initializations
        tt__HostnameInformation() : FromDHCP(), Name(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__HostnameInformation() { }
        /// Friend allocator used by soap_new_tt__HostnameInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__HostnameInformation * SOAP_FMAC2 soap_instantiate_tt__HostnameInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:702 */
#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (302)
/* complex XML schema type 'tt:HostnameInformationExtension': */
class SOAP_CMAC tt__HostnameInformationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__HostnameInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__HostnameInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__HostnameInformationExtension, default initialized and not managed by a soap context
        virtual tt__HostnameInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__HostnameInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__HostnameInformationExtension() : soap() { }
        /// Destructor
        virtual ~tt__HostnameInformationExtension() { }
        /// Friend allocator used by soap_new_tt__HostnameInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__HostnameInformationExtension * SOAP_FMAC2 soap_instantiate_tt__HostnameInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:704 */
#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (303)
/* complex XML schema type 'tt:DNSInformation': */
class SOAP_CMAC tt__DNSInformation {
      public:
        /// Required element 'tt:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tt:SearchDomain' of XML schema type 'xsd:token'
        std::vector<std::string> SearchDomain;
        /// Optional element 'tt:DNSFromDHCP' of XML schema type 'tt:IPAddress'
        std::vector<tt__IPAddress *> DNSFromDHCP;
        /// Optional element 'tt:DNSManual' of XML schema type 'tt:IPAddress'
        std::vector<tt__IPAddress *> DNSManual;
        /// Optional element 'tt:Extension' of XML schema type 'tt:DNSInformationExtension'
        tt__DNSInformationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DNSInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DNSInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DNSInformation, default initialized and not managed by a soap context
        virtual tt__DNSInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DNSInformation); }
      public:
        /// Constructor with default initializations
        tt__DNSInformation() : FromDHCP(), SearchDomain(), DNSFromDHCP(), DNSManual(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__DNSInformation() { }
        /// Friend allocator used by soap_new_tt__DNSInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__DNSInformation * SOAP_FMAC2 soap_instantiate_tt__DNSInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:706 */
#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (304)
/* complex XML schema type 'tt:DNSInformationExtension': */
class SOAP_CMAC tt__DNSInformationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DNSInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DNSInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DNSInformationExtension, default initialized and not managed by a soap context
        virtual tt__DNSInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DNSInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__DNSInformationExtension() : soap() { }
        /// Destructor
        virtual ~tt__DNSInformationExtension() { }
        /// Friend allocator used by soap_new_tt__DNSInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:708 */
#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (305)
/* complex XML schema type 'tt:NTPInformation': */
class SOAP_CMAC tt__NTPInformation {
      public:
        /// Required element 'tt:FromDHCP' of XML schema type 'xsd:boolean'
        bool FromDHCP;
        /// Optional element 'tt:NTPFromDHCP' of XML schema type 'tt:NetworkHost'
        std::vector<tt__NetworkHost *> NTPFromDHCP;
        /// Optional element 'tt:NTPManual' of XML schema type 'tt:NetworkHost'
        std::vector<tt__NetworkHost *> NTPManual;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NTPInformationExtension'
        tt__NTPInformationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NTPInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NTPInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NTPInformation, default initialized and not managed by a soap context
        virtual tt__NTPInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NTPInformation); }
      public:
        /// Constructor with default initializations
        tt__NTPInformation() : FromDHCP(), NTPFromDHCP(), NTPManual(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NTPInformation() { }
        /// Friend allocator used by soap_new_tt__NTPInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__NTPInformation * SOAP_FMAC2 soap_instantiate_tt__NTPInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:710 */
#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (306)
/* complex XML schema type 'tt:NTPInformationExtension': */
class SOAP_CMAC tt__NTPInformationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NTPInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NTPInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NTPInformationExtension, default initialized and not managed by a soap context
        virtual tt__NTPInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NTPInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__NTPInformationExtension() : soap() { }
        /// Destructor
        virtual ~tt__NTPInformationExtension() { }
        /// Friend allocator used by soap_new_tt__NTPInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NTPInformationExtension * SOAP_FMAC2 soap_instantiate_tt__NTPInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:712 */
#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (307)
/* complex XML schema type 'tt:DynamicDNSInformation': */
class SOAP_CMAC tt__DynamicDNSInformation {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:DynamicDNSType'
        enum tt__DynamicDNSType Type;
        /// Optional element 'tt:Name' of XML schema type 'tt:DNSName'
        std::string *Name;
        /// Optional element 'tt:TTL' of XML schema type 'xsd:duration'
        std::string *TTL;
        /// Optional element 'tt:Extension' of XML schema type 'tt:DynamicDNSInformationExtension'
        tt__DynamicDNSInformationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DynamicDNSInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DynamicDNSInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DynamicDNSInformation, default initialized and not managed by a soap context
        virtual tt__DynamicDNSInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DynamicDNSInformation); }
      public:
        /// Constructor with default initializations
        tt__DynamicDNSInformation() : Type(), Name(), TTL(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__DynamicDNSInformation() { }
        /// Friend allocator used by soap_new_tt__DynamicDNSInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__DynamicDNSInformation * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:714 */
#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (308)
/* complex XML schema type 'tt:DynamicDNSInformationExtension': */
class SOAP_CMAC tt__DynamicDNSInformationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DynamicDNSInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DynamicDNSInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DynamicDNSInformationExtension, default initialized and not managed by a soap context
        virtual tt__DynamicDNSInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DynamicDNSInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__DynamicDNSInformationExtension() : soap() { }
        /// Destructor
        virtual ~tt__DynamicDNSInformationExtension() { }
        /// Friend allocator used by soap_new_tt__DynamicDNSInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DynamicDNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:716 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (309)
/* complex XML schema type 'tt:NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__NetworkInterfaceSetConfiguration {
      public:
        /// Optional element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:Link' of XML schema type 'tt:NetworkInterfaceConnectionSetting'
        tt__NetworkInterfaceConnectionSetting *Link;
        /// Optional element 'tt:MTU' of XML schema type 'xsd:int'
        int *MTU;
        /// Optional element 'tt:IPv4' of XML schema type 'tt:IPv4NetworkInterfaceSetConfiguration'
        tt__IPv4NetworkInterfaceSetConfiguration *IPv4;
        /// Optional element 'tt:IPv6' of XML schema type 'tt:IPv6NetworkInterfaceSetConfiguration'
        tt__IPv6NetworkInterfaceSetConfiguration *IPv6;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceSetConfigurationExtension'
        tt__NetworkInterfaceSetConfigurationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceSetConfiguration() : Enabled(), Link(), MTU(), IPv4(), IPv6(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:718 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (310)
/* complex XML schema type 'tt:NetworkInterfaceSetConfigurationExtension': */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension {
      public:
        /// Optional element 'tt:Dot3' of XML schema type 'tt:Dot3Configuration'
        std::vector<tt__Dot3Configuration *> Dot3;
        /// Optional element 'tt:Dot11' of XML schema type 'tt:Dot11Configuration'
        std::vector<tt__Dot11Configuration *> Dot11;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceSetConfigurationExtension2'
        tt__NetworkInterfaceSetConfigurationExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceSetConfigurationExtension() : Dot3(), Dot11(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceSetConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:720 */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (311)
/* complex XML schema type 'tt:IPv6NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__IPv6NetworkInterfaceSetConfiguration {
      public:
        /// Optional element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:AcceptRouterAdvert' of XML schema type 'xsd:boolean'
        bool *AcceptRouterAdvert;
        /// Optional element 'tt:Manual' of XML schema type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> Manual;
        /// Optional element 'tt:DHCP' of XML schema type 'tt:IPv6DHCPConfiguration'
        enum tt__IPv6DHCPConfiguration *DHCP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv6NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__IPv6NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv6NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with default initializations
        tt__IPv6NetworkInterfaceSetConfiguration() : Enabled(), AcceptRouterAdvert(), Manual(), DHCP(), soap() { }
        /// Destructor
        virtual ~tt__IPv6NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:722 */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (312)
/* complex XML schema type 'tt:IPv4NetworkInterfaceSetConfiguration': */
class SOAP_CMAC tt__IPv4NetworkInterfaceSetConfiguration {
      public:
        /// Optional element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool *Enabled;
        /// Optional element 'tt:Manual' of XML schema type 'tt:PrefixedIPv4Address'
        std::vector<tt__PrefixedIPv4Address *> Manual;
        /// Optional element 'tt:DHCP' of XML schema type 'xsd:boolean'
        bool *DHCP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPv4NetworkInterfaceSetConfiguration, default initialized and not managed by a soap context
        virtual tt__IPv4NetworkInterfaceSetConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPv4NetworkInterfaceSetConfiguration); }
      public:
        /// Constructor with default initializations
        tt__IPv4NetworkInterfaceSetConfiguration() : Enabled(), Manual(), DHCP(), soap() { }
        /// Destructor
        virtual ~tt__IPv4NetworkInterfaceSetConfiguration() { }
        /// Friend allocator used by soap_new_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:724 */
#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (313)
/* complex XML schema type 'tt:NetworkGateway': */
class SOAP_CMAC tt__NetworkGateway {
      public:
        /// Optional element 'tt:IPv4Address' of XML schema type 'tt:IPv4Address'
        std::vector<std::string> IPv4Address;
        /// Optional element 'tt:IPv6Address' of XML schema type 'tt:IPv6Address'
        std::vector<std::string> IPv6Address;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkGateway
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkGateway; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkGateway, default initialized and not managed by a soap context
        virtual tt__NetworkGateway *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkGateway); }
      public:
        /// Constructor with default initializations
        tt__NetworkGateway() : IPv4Address(), IPv6Address(), soap() { }
        /// Destructor
        virtual ~tt__NetworkGateway() { }
        /// Friend allocator used by soap_new_tt__NetworkGateway(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkGateway * SOAP_FMAC2 soap_instantiate_tt__NetworkGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:726 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (314)
/* complex XML schema type 'tt:NetworkZeroConfiguration': */
class SOAP_CMAC tt__NetworkZeroConfiguration {
      public:
        /// Required element 'tt:InterfaceToken' of XML schema type 'tt:ReferenceToken'
        std::string InterfaceToken;
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Addresses' of XML schema type 'tt:IPv4Address'
        std::vector<std::string> Addresses;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkZeroConfigurationExtension'
        tt__NetworkZeroConfigurationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfiguration, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfiguration); }
      public:
        /// Constructor with default initializations
        tt__NetworkZeroConfiguration() : InterfaceToken(), Enabled(), Addresses(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkZeroConfiguration() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:728 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (315)
/* Type tt__NetworkZeroConfigurationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'tt:NetworkZeroConfigurationExtension': */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension {
      public:
        /// Optional element 'tt:Additional' of XML schema type 'tt:NetworkZeroConfiguration'
        std::vector<tt__NetworkZeroConfiguration *> Additional;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkZeroConfigurationExtension2'
        tt__NetworkZeroConfigurationExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkZeroConfigurationExtension() : Additional(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkZeroConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:730 */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (316)
/* complex XML schema type 'tt:NetworkZeroConfigurationExtension2': */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension2 {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkZeroConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkZeroConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkZeroConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkZeroConfigurationExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkZeroConfigurationExtension2() : soap() { }
        /// Destructor
        virtual ~tt__NetworkZeroConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkZeroConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:732 */
#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (317)
/* complex XML schema type 'tt:IPAddressFilter': */
class SOAP_CMAC tt__IPAddressFilter {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:IPAddressFilterType'
        enum tt__IPAddressFilterType Type;
        /// Optional element 'tt:IPv4Address' of XML schema type 'tt:PrefixedIPv4Address'
        std::vector<tt__PrefixedIPv4Address *> IPv4Address;
        /// Optional element 'tt:IPv6Address' of XML schema type 'tt:PrefixedIPv6Address'
        std::vector<tt__PrefixedIPv6Address *> IPv6Address;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IPAddressFilterExtension'
        tt__IPAddressFilterExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddressFilter
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddressFilter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddressFilter, default initialized and not managed by a soap context
        virtual tt__IPAddressFilter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddressFilter); }
      public:
        /// Constructor with default initializations
        tt__IPAddressFilter() : Type(), IPv4Address(), IPv6Address(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__IPAddressFilter() { }
        /// Friend allocator used by soap_new_tt__IPAddressFilter(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddressFilter * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:734 */
#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (318)
/* complex XML schema type 'tt:IPAddressFilterExtension': */
class SOAP_CMAC tt__IPAddressFilterExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IPAddressFilterExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IPAddressFilterExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IPAddressFilterExtension, default initialized and not managed by a soap context
        virtual tt__IPAddressFilterExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IPAddressFilterExtension); }
      public:
        /// Constructor with default initializations
        tt__IPAddressFilterExtension() : soap() { }
        /// Destructor
        virtual ~tt__IPAddressFilterExtension() { }
        /// Friend allocator used by soap_new_tt__IPAddressFilterExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IPAddressFilterExtension * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:736 */
#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (319)
/* complex XML schema type 'tt:Dot11Configuration': */
class SOAP_CMAC tt__Dot11Configuration {
      public:
        /// Required element 'tt:SSID' of XML schema type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Required element 'tt:Mode' of XML schema type 'tt:Dot11StationMode'
        enum tt__Dot11StationMode Mode;
        /// Required element 'tt:Alias' of XML schema type 'tt:Name'
        std::string Alias;
        /// Required element 'tt:Priority' of XML schema type 'tt:NetworkInterfaceConfigPriority'
        std::string Priority;
        /// Required element 'tt:Security' of XML schema type 'tt:Dot11SecurityConfiguration'
        tt__Dot11SecurityConfiguration *Security;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Configuration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Configuration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Configuration, default initialized and not managed by a soap context
        virtual tt__Dot11Configuration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Configuration); }
      public:
        /// Constructor with default initializations
        tt__Dot11Configuration() : SSID(), Mode(), Alias(), Priority(), Security(), soap() { }
        /// Destructor
        virtual ~tt__Dot11Configuration() { }
        /// Friend allocator used by soap_new_tt__Dot11Configuration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:738 */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (320)
/* complex XML schema type 'tt:Dot11SecurityConfiguration': */
class SOAP_CMAC tt__Dot11SecurityConfiguration {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:Dot11SecurityMode'
        enum tt__Dot11SecurityMode Mode;
        /// Optional element 'tt:Algorithm' of XML schema type 'tt:Dot11Cipher'
        enum tt__Dot11Cipher *Algorithm;
        /// Optional element 'tt:PSK' of XML schema type 'tt:Dot11PSKSet'
        tt__Dot11PSKSet *PSK;
        /// Optional element 'tt:Dot1X' of XML schema type 'tt:ReferenceToken'
        std::string *Dot1X;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot11SecurityConfigurationExtension'
        tt__Dot11SecurityConfigurationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SecurityConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SecurityConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SecurityConfiguration, default initialized and not managed by a soap context
        virtual tt__Dot11SecurityConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SecurityConfiguration); }
      public:
        /// Constructor with default initializations
        tt__Dot11SecurityConfiguration() : Mode(), Algorithm(), PSK(), Dot1X(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__Dot11SecurityConfiguration() { }
        /// Friend allocator used by soap_new_tt__Dot11SecurityConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SecurityConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:740 */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (321)
/* complex XML schema type 'tt:Dot11SecurityConfigurationExtension': */
class SOAP_CMAC tt__Dot11SecurityConfigurationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11SecurityConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11SecurityConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__Dot11SecurityConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11SecurityConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot11SecurityConfigurationExtension() : soap() { }
        /// Destructor
        virtual ~tt__Dot11SecurityConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11SecurityConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:742 */
#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (322)
/* complex XML schema type 'tt:Dot11PSKSet': */
class SOAP_CMAC tt__Dot11PSKSet {
      public:
        /// Optional element 'tt:Key' of XML schema type 'tt:Dot11PSK'
        xsd__hexBinary *Key;
        /// Optional element 'tt:Passphrase' of XML schema type 'tt:Dot11PSKPassphrase'
        std::string *Passphrase;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot11PSKSetExtension'
        tt__Dot11PSKSetExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSKSet
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSKSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSKSet, default initialized and not managed by a soap context
        virtual tt__Dot11PSKSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSKSet); }
      public:
        /// Constructor with default initializations
        tt__Dot11PSKSet() : Key(), Passphrase(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__Dot11PSKSet() { }
        /// Friend allocator used by soap_new_tt__Dot11PSKSet(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSKSet * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:744 */
#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (323)
/* complex XML schema type 'tt:Dot11PSKSetExtension': */
class SOAP_CMAC tt__Dot11PSKSetExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11PSKSetExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11PSKSetExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11PSKSetExtension, default initialized and not managed by a soap context
        virtual tt__Dot11PSKSetExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11PSKSetExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot11PSKSetExtension() : soap() { }
        /// Destructor
        virtual ~tt__Dot11PSKSetExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11PSKSetExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11PSKSetExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSetExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:746 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (324)
/* complex XML schema type 'tt:NetworkInterfaceSetConfigurationExtension2': */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension2 {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterfaceSetConfigurationExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkInterfaceSetConfigurationExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterfaceSetConfigurationExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterfaceSetConfigurationExtension2() : soap() { }
        /// Destructor
        virtual ~tt__NetworkInterfaceSetConfigurationExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:748 */
#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (325)
/* complex XML schema type 'tt:Dot11Capabilities': */
class SOAP_CMAC tt__Dot11Capabilities {
      public:
        /// Required element 'tt:TKIP' of XML schema type 'xsd:boolean'
        bool TKIP;
        /// Required element 'tt:ScanAvailableNetworks' of XML schema type 'xsd:boolean'
        bool ScanAvailableNetworks;
        /// Required element 'tt:MultipleConfiguration' of XML schema type 'xsd:boolean'
        bool MultipleConfiguration;
        /// Required element 'tt:AdHocStationMode' of XML schema type 'xsd:boolean'
        bool AdHocStationMode;
        /// Required element 'tt:WEP' of XML schema type 'xsd:boolean'
        bool WEP;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Capabilities, default initialized and not managed by a soap context
        virtual tt__Dot11Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Capabilities); }
      public:
        /// Constructor with default initializations
        tt__Dot11Capabilities() : TKIP(), ScanAvailableNetworks(), MultipleConfiguration(), AdHocStationMode(), WEP(), soap() { }
        /// Destructor
        virtual ~tt__Dot11Capabilities() { }
        /// Friend allocator used by soap_new_tt__Dot11Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Capabilities * SOAP_FMAC2 soap_instantiate_tt__Dot11Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:750 */
#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (326)
/* complex XML schema type 'tt:Dot11Status': */
class SOAP_CMAC tt__Dot11Status {
      public:
        /// Required element 'tt:SSID' of XML schema type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Optional element 'tt:BSSID' of XML schema type 'xsd:string'
        std::string *BSSID;
        /// Optional element 'tt:PairCipher' of XML schema type 'tt:Dot11Cipher'
        enum tt__Dot11Cipher *PairCipher;
        /// Optional element 'tt:GroupCipher' of XML schema type 'tt:Dot11Cipher'
        enum tt__Dot11Cipher *GroupCipher;
        /// Optional element 'tt:SignalStrength' of XML schema type 'tt:Dot11SignalStrength'
        enum tt__Dot11SignalStrength *SignalStrength;
        /// Required element 'tt:ActiveConfigAlias' of XML schema type 'tt:ReferenceToken'
        std::string ActiveConfigAlias;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11Status
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11Status; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11Status, default initialized and not managed by a soap context
        virtual tt__Dot11Status *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11Status); }
      public:
        /// Constructor with default initializations
        tt__Dot11Status() : SSID(), BSSID(), PairCipher(), GroupCipher(), SignalStrength(), ActiveConfigAlias(), soap() { }
        /// Destructor
        virtual ~tt__Dot11Status() { }
        /// Friend allocator used by soap_new_tt__Dot11Status(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11Status * SOAP_FMAC2 soap_instantiate_tt__Dot11Status(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:752 */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (327)
/* complex XML schema type 'tt:Dot11AvailableNetworks': */
class SOAP_CMAC tt__Dot11AvailableNetworks {
      public:
        /// Required element 'tt:SSID' of XML schema type 'tt:Dot11SSIDType'
        xsd__hexBinary SSID;
        /// Optional element 'tt:BSSID' of XML schema type 'xsd:string'
        std::string *BSSID;
        /// Optional element 'tt:AuthAndMangementSuite' of XML schema type 'tt:Dot11AuthAndMangementSuite'
        std::vector<enum tt__Dot11AuthAndMangementSuite> AuthAndMangementSuite;
        /// Optional element 'tt:PairCipher' of XML schema type 'tt:Dot11Cipher'
        std::vector<enum tt__Dot11Cipher> PairCipher;
        /// Optional element 'tt:GroupCipher' of XML schema type 'tt:Dot11Cipher'
        std::vector<enum tt__Dot11Cipher> GroupCipher;
        /// Optional element 'tt:SignalStrength' of XML schema type 'tt:Dot11SignalStrength'
        enum tt__Dot11SignalStrength *SignalStrength;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot11AvailableNetworksExtension'
        tt__Dot11AvailableNetworksExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11AvailableNetworks
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11AvailableNetworks; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11AvailableNetworks, default initialized and not managed by a soap context
        virtual tt__Dot11AvailableNetworks *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11AvailableNetworks); }
      public:
        /// Constructor with default initializations
        tt__Dot11AvailableNetworks() : SSID(), BSSID(), AuthAndMangementSuite(), PairCipher(), GroupCipher(), SignalStrength(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__Dot11AvailableNetworks() { }
        /// Friend allocator used by soap_new_tt__Dot11AvailableNetworks(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11AvailableNetworks * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:754 */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (328)
/* complex XML schema type 'tt:Dot11AvailableNetworksExtension': */
class SOAP_CMAC tt__Dot11AvailableNetworksExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot11AvailableNetworksExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot11AvailableNetworksExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot11AvailableNetworksExtension, default initialized and not managed by a soap context
        virtual tt__Dot11AvailableNetworksExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot11AvailableNetworksExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot11AvailableNetworksExtension() : soap() { }
        /// Destructor
        virtual ~tt__Dot11AvailableNetworksExtension() { }
        /// Friend allocator used by soap_new_tt__Dot11AvailableNetworksExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot11AvailableNetworksExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworksExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:756 */
#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (329)
/* complex XML schema type 'tt:Capabilities': */
class SOAP_CMAC tt__Capabilities {
      public:
        /// Optional element 'tt:Analytics' of XML schema type 'tt:AnalyticsCapabilities'
        tt__AnalyticsCapabilities *Analytics;
        /// Optional element 'tt:Device' of XML schema type 'tt:DeviceCapabilities'
        tt__DeviceCapabilities *Device;
        /// Optional element 'tt:Events' of XML schema type 'tt:EventCapabilities'
        tt__EventCapabilities *Events;
        /// Optional element 'tt:Imaging' of XML schema type 'tt:ImagingCapabilities'
        tt__ImagingCapabilities *Imaging;
        /// Optional element 'tt:Media' of XML schema type 'tt:MediaCapabilities'
        tt__MediaCapabilities *Media;
        /// Optional element 'tt:PTZ' of XML schema type 'tt:PTZCapabilities'
        tt__PTZCapabilities *PTZ;
        /// Optional element 'tt:Extension' of XML schema type 'tt:CapabilitiesExtension'
        tt__CapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Capabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Capabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Capabilities, default initialized and not managed by a soap context
        virtual tt__Capabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Capabilities); }
      public:
        /// Constructor with default initializations
        tt__Capabilities() : Analytics(), Device(), Events(), Imaging(), Media(), PTZ(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__Capabilities() { }
        /// Friend allocator used by soap_new_tt__Capabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__Capabilities * SOAP_FMAC2 soap_instantiate_tt__Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:758 */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (330)
/* complex XML schema type 'tt:CapabilitiesExtension': */
class SOAP_CMAC tt__CapabilitiesExtension {
      public:
        /// Optional element 'tt:DeviceIO' of XML schema type 'tt:DeviceIOCapabilities'
        tt__DeviceIOCapabilities *DeviceIO;
        /// Optional element 'tt:Display' of XML schema type 'tt:DisplayCapabilities'
        tt__DisplayCapabilities *Display;
        /// Optional element 'tt:Recording' of XML schema type 'tt:RecordingCapabilities'
        tt__RecordingCapabilities *Recording;
        /// Optional element 'tt:Search' of XML schema type 'tt:SearchCapabilities'
        tt__SearchCapabilities *Search;
        /// Optional element 'tt:Replay' of XML schema type 'tt:ReplayCapabilities'
        tt__ReplayCapabilities *Replay;
        /// Optional element 'tt:Receiver' of XML schema type 'tt:ReceiverCapabilities'
        tt__ReceiverCapabilities *Receiver;
        /// Optional element 'tt:AnalyticsDevice' of XML schema type 'tt:AnalyticsDeviceCapabilities'
        tt__AnalyticsDeviceCapabilities *AnalyticsDevice;
        /// Optional element 'tt:Extensions' of XML schema type 'tt:CapabilitiesExtension2'
        tt__CapabilitiesExtension2 *Extensions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__CapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__CapabilitiesExtension() : DeviceIO(), Display(), Recording(), Search(), Replay(), Receiver(), AnalyticsDevice(), Extensions(), soap() { }
        /// Destructor
        virtual ~tt__CapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__CapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:760 */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (331)
/* complex XML schema type 'tt:CapabilitiesExtension2': */
class SOAP_CMAC tt__CapabilitiesExtension2 {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__CapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__CapabilitiesExtension2() : soap() { }
        /// Destructor
        virtual ~tt__CapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__CapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__CapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:762 */
#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (332)
/* complex XML schema type 'tt:AnalyticsCapabilities': */
class SOAP_CMAC tt__AnalyticsCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:RuleSupport' of XML schema type 'xsd:boolean'
        bool RuleSupport;
        /// Required element 'tt:AnalyticsModuleSupport' of XML schema type 'xsd:boolean'
        bool AnalyticsModuleSupport;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsCapabilities, default initialized and not managed by a soap context
        virtual tt__AnalyticsCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsCapabilities); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsCapabilities() : XAddr(), RuleSupport(), AnalyticsModuleSupport(), soap() { }
        /// Destructor
        virtual ~tt__AnalyticsCapabilities() { }
        /// Friend allocator used by soap_new_tt__AnalyticsCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:764 */
#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (333)
/* complex XML schema type 'tt:DeviceCapabilities': */
class SOAP_CMAC tt__DeviceCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Optional element 'tt:Network' of XML schema type 'tt:NetworkCapabilities'
        tt__NetworkCapabilities *Network;
        /// Optional element 'tt:System' of XML schema type 'tt:SystemCapabilities'
        tt__SystemCapabilities *System;
        /// Optional element 'tt:IO' of XML schema type 'tt:IOCapabilities'
        tt__IOCapabilities *IO;
        /// Optional element 'tt:Security' of XML schema type 'tt:SecurityCapabilities'
        tt__SecurityCapabilities *Security;
        /// Optional element 'tt:Extension' of XML schema type 'tt:DeviceCapabilitiesExtension'
        tt__DeviceCapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceCapabilities, default initialized and not managed by a soap context
        virtual tt__DeviceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceCapabilities); }
      public:
        /// Constructor with default initializations
        tt__DeviceCapabilities() : XAddr(), Network(), System(), IO(), Security(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__DeviceCapabilities() { }
        /// Friend allocator used by soap_new_tt__DeviceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:766 */
#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (334)
/* complex XML schema type 'tt:DeviceCapabilitiesExtension': */
class SOAP_CMAC tt__DeviceCapabilitiesExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__DeviceCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__DeviceCapabilitiesExtension() : soap() { }
        /// Destructor
        virtual ~tt__DeviceCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__DeviceCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:768 */
#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (335)
/* complex XML schema type 'tt:EventCapabilities': */
class SOAP_CMAC tt__EventCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:WSSubscriptionPolicySupport' of XML schema type 'xsd:boolean'
        bool WSSubscriptionPolicySupport;
        /// Required element 'tt:WSPullPointSupport' of XML schema type 'xsd:boolean'
        bool WSPullPointSupport;
        /// Required element 'tt:WSPausableSubscriptionManagerInterfaceSupport' of XML schema type 'xsd:boolean'
        bool WSPausableSubscriptionManagerInterfaceSupport;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EventCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EventCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EventCapabilities, default initialized and not managed by a soap context
        virtual tt__EventCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EventCapabilities); }
      public:
        /// Constructor with default initializations
        tt__EventCapabilities() : XAddr(), WSSubscriptionPolicySupport(), WSPullPointSupport(), WSPausableSubscriptionManagerInterfaceSupport(), soap() { }
        /// Destructor
        virtual ~tt__EventCapabilities() { }
        /// Friend allocator used by soap_new_tt__EventCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__EventCapabilities * SOAP_FMAC2 soap_instantiate_tt__EventCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:770 */
#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (336)
/* complex XML schema type 'tt:IOCapabilities': */
class SOAP_CMAC tt__IOCapabilities {
      public:
        /// Optional element 'tt:InputConnectors' of XML schema type 'xsd:int'
        int *InputConnectors;
        /// Optional element 'tt:RelayOutputs' of XML schema type 'xsd:int'
        int *RelayOutputs;
        /// Optional element 'tt:Extension' of XML schema type 'tt:IOCapabilitiesExtension'
        tt__IOCapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilities, default initialized and not managed by a soap context
        virtual tt__IOCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilities); }
      public:
        /// Constructor with default initializations
        tt__IOCapabilities() : InputConnectors(), RelayOutputs(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__IOCapabilities() { }
        /// Friend allocator used by soap_new_tt__IOCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilities * SOAP_FMAC2 soap_instantiate_tt__IOCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:772 */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (337)
/* complex XML schema type 'tt:IOCapabilitiesExtension': */
class SOAP_CMAC tt__IOCapabilitiesExtension {
      public:
        /// Optional element 'tt:Auxiliary' of XML schema type 'xsd:boolean'
        bool *Auxiliary;
        /// Optional element 'tt:AuxiliaryCommands' of XML schema type 'tt:AuxiliaryData'
        std::vector<std::string> AuxiliaryCommands;
        /// Required element 'tt:Extension' of XML schema type 'tt:IOCapabilitiesExtension2'
        tt__IOCapabilitiesExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__IOCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__IOCapabilitiesExtension() : Auxiliary(), AuxiliaryCommands(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__IOCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__IOCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:774 */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (338)
/* complex XML schema type 'tt:IOCapabilitiesExtension2': */
class SOAP_CMAC tt__IOCapabilitiesExtension2 {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IOCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IOCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IOCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__IOCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IOCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__IOCapabilitiesExtension2() : soap() { }
        /// Destructor
        virtual ~tt__IOCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__IOCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__IOCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:776 */
#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (339)
/* complex XML schema type 'tt:MediaCapabilities': */
class SOAP_CMAC tt__MediaCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:StreamingCapabilities' of XML schema type 'tt:RealTimeStreamingCapabilities'
        tt__RealTimeStreamingCapabilities *StreamingCapabilities;
        /// Optional element 'tt:Extension' of XML schema type 'tt:MediaCapabilitiesExtension'
        tt__MediaCapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaCapabilities, default initialized and not managed by a soap context
        virtual tt__MediaCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaCapabilities); }
      public:
        /// Constructor with default initializations
        tt__MediaCapabilities() : XAddr(), StreamingCapabilities(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__MediaCapabilities() { }
        /// Friend allocator used by soap_new_tt__MediaCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaCapabilities * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:778 */
#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (340)
/* complex XML schema type 'tt:MediaCapabilitiesExtension': */
class SOAP_CMAC tt__MediaCapabilitiesExtension {
      public:
        /// Required element 'tt:ProfileCapabilities' of XML schema type 'tt:ProfileCapabilities'
        tt__ProfileCapabilities *ProfileCapabilities;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__MediaCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__MediaCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__MediaCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__MediaCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__MediaCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__MediaCapabilitiesExtension() : ProfileCapabilities(), soap() { }
        /// Destructor
        virtual ~tt__MediaCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__MediaCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__MediaCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:780 */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (341)
/* complex XML schema type 'tt:RealTimeStreamingCapabilities': */
class SOAP_CMAC tt__RealTimeStreamingCapabilities {
      public:
        /// Optional element 'tt:RTPMulticast' of XML schema type 'xsd:boolean'
        bool *RTPMulticast;
        /// Optional element 'tt:RTP_TCP' of XML schema type 'xsd:boolean'
        bool *RTP_USCORETCP;
        /// Optional element 'tt:RTP_RTSP_TCP' of XML schema type 'xsd:boolean'
        bool *RTP_USCORERTSP_USCORETCP;
        /// Optional element 'tt:Extension' of XML schema type 'tt:RealTimeStreamingCapabilitiesExtension'
        tt__RealTimeStreamingCapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RealTimeStreamingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RealTimeStreamingCapabilities, default initialized and not managed by a soap context
        virtual tt__RealTimeStreamingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RealTimeStreamingCapabilities); }
      public:
        /// Constructor with default initializations
        tt__RealTimeStreamingCapabilities() : RTPMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__RealTimeStreamingCapabilities() { }
        /// Friend allocator used by soap_new_tt__RealTimeStreamingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__RealTimeStreamingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:782 */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (342)
/* complex XML schema type 'tt:RealTimeStreamingCapabilitiesExtension': */
class SOAP_CMAC tt__RealTimeStreamingCapabilitiesExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RealTimeStreamingCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__RealTimeStreamingCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RealTimeStreamingCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__RealTimeStreamingCapabilitiesExtension() : soap() { }
        /// Destructor
        virtual ~tt__RealTimeStreamingCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:784 */
#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (343)
/* complex XML schema type 'tt:ProfileCapabilities': */
class SOAP_CMAC tt__ProfileCapabilities {
      public:
        /// Required element 'tt:MaximumNumberOfProfiles' of XML schema type 'xsd:int'
        int MaximumNumberOfProfiles;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ProfileCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ProfileCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ProfileCapabilities, default initialized and not managed by a soap context
        virtual tt__ProfileCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ProfileCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ProfileCapabilities() : MaximumNumberOfProfiles(), soap() { }
        /// Destructor
        virtual ~tt__ProfileCapabilities() { }
        /// Friend allocator used by soap_new_tt__ProfileCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_tt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:786 */
#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (344)
/* complex XML schema type 'tt:NetworkCapabilities': */
class SOAP_CMAC tt__NetworkCapabilities {
      public:
        /// Optional element 'tt:IPFilter' of XML schema type 'xsd:boolean'
        bool *IPFilter;
        /// Optional element 'tt:ZeroConfiguration' of XML schema type 'xsd:boolean'
        bool *ZeroConfiguration;
        /// Optional element 'tt:IPVersion6' of XML schema type 'xsd:boolean'
        bool *IPVersion6;
        /// Optional element 'tt:DynDNS' of XML schema type 'xsd:boolean'
        bool *DynDNS;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkCapabilitiesExtension'
        tt__NetworkCapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilities, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilities); }
      public:
        /// Constructor with default initializations
        tt__NetworkCapabilities() : IPFilter(), ZeroConfiguration(), IPVersion6(), DynDNS(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkCapabilities() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:788 */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (345)
/* complex XML schema type 'tt:NetworkCapabilitiesExtension': */
class SOAP_CMAC tt__NetworkCapabilitiesExtension {
      public:
        /// Optional element 'tt:Dot11Configuration' of XML schema type 'xsd:boolean'
        bool *Dot11Configuration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkCapabilitiesExtension2'
        tt__NetworkCapabilitiesExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__NetworkCapabilitiesExtension() : Dot11Configuration(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__NetworkCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:790 */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (346)
/* complex XML schema type 'tt:NetworkCapabilitiesExtension2': */
class SOAP_CMAC tt__NetworkCapabilitiesExtension2 {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__NetworkCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__NetworkCapabilitiesExtension2() : soap() { }
        /// Destructor
        virtual ~tt__NetworkCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__NetworkCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:792 */
#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (347)
/* complex XML schema type 'tt:SecurityCapabilities': */
class SOAP_CMAC tt__SecurityCapabilities {
      public:
        /// Required element 'tt:TLS1.1' of XML schema type 'xsd:boolean'
        bool TLS1_x002e1;
        /// Required element 'tt:TLS1.2' of XML schema type 'xsd:boolean'
        bool TLS1_x002e2;
        /// Required element 'tt:OnboardKeyGeneration' of XML schema type 'xsd:boolean'
        bool OnboardKeyGeneration;
        /// Required element 'tt:AccessPolicyConfig' of XML schema type 'xsd:boolean'
        bool AccessPolicyConfig;
        /// Required element 'tt:X.509Token' of XML schema type 'xsd:boolean'
        bool X_x002e509Token;
        /// Required element 'tt:SAMLToken' of XML schema type 'xsd:boolean'
        bool SAMLToken;
        /// Required element 'tt:KerberosToken' of XML schema type 'xsd:boolean'
        bool KerberosToken;
        /// Required element 'tt:RELToken' of XML schema type 'xsd:boolean'
        bool RELToken;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SecurityCapabilitiesExtension'
        tt__SecurityCapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilities, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilities); }
      public:
        /// Constructor with default initializations
        tt__SecurityCapabilities() : TLS1_x002e1(), TLS1_x002e2(), OnboardKeyGeneration(), AccessPolicyConfig(), X_x002e509Token(), SAMLToken(), KerberosToken(), RELToken(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__SecurityCapabilities() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:794 */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (348)
/* complex XML schema type 'tt:SecurityCapabilitiesExtension': */
class SOAP_CMAC tt__SecurityCapabilitiesExtension {
      public:
        /// Required element 'tt:TLS1.0' of XML schema type 'xsd:boolean'
        bool TLS1_x002e0;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SecurityCapabilitiesExtension2'
        tt__SecurityCapabilitiesExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__SecurityCapabilitiesExtension() : TLS1_x002e0(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__SecurityCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:796 */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (349)
/* complex XML schema type 'tt:SecurityCapabilitiesExtension2': */
class SOAP_CMAC tt__SecurityCapabilitiesExtension2 {
      public:
        /// Required element 'tt:Dot1X' of XML schema type 'xsd:boolean'
        bool Dot1X;
        /// Optional element 'tt:SupportedEAPMethod' of XML schema type 'xsd:int'
        std::vector<int> SupportedEAPMethod;
        /// Required element 'tt:RemoteUserHandling' of XML schema type 'xsd:boolean'
        bool RemoteUserHandling;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SecurityCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SecurityCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__SecurityCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SecurityCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__SecurityCapabilitiesExtension2() : Dot1X(), SupportedEAPMethod(), RemoteUserHandling(), soap() { }
        /// Destructor
        virtual ~tt__SecurityCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__SecurityCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:798 */
#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (350)
/* complex XML schema type 'tt:SystemCapabilities': */
class SOAP_CMAC tt__SystemCapabilities {
      public:
        /// Required element 'tt:DiscoveryResolve' of XML schema type 'xsd:boolean'
        bool DiscoveryResolve;
        /// Required element 'tt:DiscoveryBye' of XML schema type 'xsd:boolean'
        bool DiscoveryBye;
        /// Required element 'tt:RemoteDiscovery' of XML schema type 'xsd:boolean'
        bool RemoteDiscovery;
        /// Required element 'tt:SystemBackup' of XML schema type 'xsd:boolean'
        bool SystemBackup;
        /// Required element 'tt:SystemLogging' of XML schema type 'xsd:boolean'
        bool SystemLogging;
        /// Required element 'tt:FirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool FirmwareUpgrade;
        /// Required element 'tt:SupportedVersions' of XML schema type 'tt:OnvifVersion'
        std::vector<tt__OnvifVersion *> SupportedVersions;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SystemCapabilitiesExtension'
        tt__SystemCapabilitiesExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilities, default initialized and not managed by a soap context
        virtual tt__SystemCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilities); }
      public:
        /// Constructor with default initializations
        tt__SystemCapabilities() : DiscoveryResolve(), DiscoveryBye(), RemoteDiscovery(), SystemBackup(), SystemLogging(), FirmwareUpgrade(), SupportedVersions(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__SystemCapabilities() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:800 */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (351)
/* complex XML schema type 'tt:SystemCapabilitiesExtension': */
class SOAP_CMAC tt__SystemCapabilitiesExtension {
      public:
        /// Optional element 'tt:HttpFirmwareUpgrade' of XML schema type 'xsd:boolean'
        bool *HttpFirmwareUpgrade;
        /// Optional element 'tt:HttpSystemBackup' of XML schema type 'xsd:boolean'
        bool *HttpSystemBackup;
        /// Optional element 'tt:HttpSystemLogging' of XML schema type 'xsd:boolean'
        bool *HttpSystemLogging;
        /// Optional element 'tt:HttpSupportInformation' of XML schema type 'xsd:boolean'
        bool *HttpSupportInformation;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SystemCapabilitiesExtension2'
        tt__SystemCapabilitiesExtension2 *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilitiesExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilitiesExtension, default initialized and not managed by a soap context
        virtual tt__SystemCapabilitiesExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilitiesExtension); }
      public:
        /// Constructor with default initializations
        tt__SystemCapabilitiesExtension() : HttpFirmwareUpgrade(), HttpSystemBackup(), HttpSystemLogging(), HttpSupportInformation(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__SystemCapabilitiesExtension() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilitiesExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:802 */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (352)
/* complex XML schema type 'tt:SystemCapabilitiesExtension2': */
class SOAP_CMAC tt__SystemCapabilitiesExtension2 {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension2
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemCapabilitiesExtension2; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemCapabilitiesExtension2, default initialized and not managed by a soap context
        virtual tt__SystemCapabilitiesExtension2 *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemCapabilitiesExtension2); }
      public:
        /// Constructor with default initializations
        tt__SystemCapabilitiesExtension2() : soap() { }
        /// Destructor
        virtual ~tt__SystemCapabilitiesExtension2() { }
        /// Friend allocator used by soap_new_tt__SystemCapabilitiesExtension2(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:804 */
#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (353)
/* complex XML schema type 'tt:OnvifVersion': */
class SOAP_CMAC tt__OnvifVersion {
      public:
        /// Required element 'tt:Major' of XML schema type 'xsd:int'
        int Major;
        /// Required element 'tt:Minor' of XML schema type 'xsd:int'
        int Minor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__OnvifVersion
        virtual long soap_type(void) const { return SOAP_TYPE_tt__OnvifVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__OnvifVersion, default initialized and not managed by a soap context
        virtual tt__OnvifVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__OnvifVersion); }
      public:
        /// Constructor with default initializations
        tt__OnvifVersion() : Major(), Minor(), soap() { }
        /// Destructor
        virtual ~tt__OnvifVersion() { }
        /// Friend allocator used by soap_new_tt__OnvifVersion(struct soap*, int)
        friend SOAP_FMAC1 tt__OnvifVersion * SOAP_FMAC2 soap_instantiate_tt__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:806 */
#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (354)
/* complex XML schema type 'tt:ImagingCapabilities': */
class SOAP_CMAC tt__ImagingCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ImagingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ImagingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ImagingCapabilities, default initialized and not managed by a soap context
        virtual tt__ImagingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ImagingCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ImagingCapabilities() : XAddr(), soap() { }
        /// Destructor
        virtual ~tt__ImagingCapabilities() { }
        /// Friend allocator used by soap_new_tt__ImagingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ImagingCapabilities * SOAP_FMAC2 soap_instantiate_tt__ImagingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:808 */
#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (355)
/* complex XML schema type 'tt:PTZCapabilities': */
class SOAP_CMAC tt__PTZCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__PTZCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__PTZCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__PTZCapabilities, default initialized and not managed by a soap context
        virtual tt__PTZCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__PTZCapabilities); }
      public:
        /// Constructor with default initializations
        tt__PTZCapabilities() : XAddr(), soap() { }
        /// Destructor
        virtual ~tt__PTZCapabilities() { }
        /// Friend allocator used by soap_new_tt__PTZCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__PTZCapabilities * SOAP_FMAC2 soap_instantiate_tt__PTZCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:810 */
#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (356)
/* complex XML schema type 'tt:DeviceIOCapabilities': */
class SOAP_CMAC tt__DeviceIOCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:VideoSources' of XML schema type 'xsd:int'
        int VideoSources;
        /// Required element 'tt:VideoOutputs' of XML schema type 'xsd:int'
        int VideoOutputs;
        /// Required element 'tt:AudioSources' of XML schema type 'xsd:int'
        int AudioSources;
        /// Required element 'tt:AudioOutputs' of XML schema type 'xsd:int'
        int AudioOutputs;
        /// Required element 'tt:RelayOutputs' of XML schema type 'xsd:int'
        int RelayOutputs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DeviceIOCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DeviceIOCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DeviceIOCapabilities, default initialized and not managed by a soap context
        virtual tt__DeviceIOCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DeviceIOCapabilities); }
      public:
        /// Constructor with default initializations
        tt__DeviceIOCapabilities() : XAddr(), VideoSources(), VideoOutputs(), AudioSources(), AudioOutputs(), RelayOutputs(), soap() { }
        /// Destructor
        virtual ~tt__DeviceIOCapabilities() { }
        /// Friend allocator used by soap_new_tt__DeviceIOCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DeviceIOCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceIOCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:812 */
#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (357)
/* complex XML schema type 'tt:DisplayCapabilities': */
class SOAP_CMAC tt__DisplayCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:FixedLayout' of XML schema type 'xsd:boolean'
        bool FixedLayout;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DisplayCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DisplayCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DisplayCapabilities, default initialized and not managed by a soap context
        virtual tt__DisplayCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DisplayCapabilities); }
      public:
        /// Constructor with default initializations
        tt__DisplayCapabilities() : XAddr(), FixedLayout(), soap() { }
        /// Destructor
        virtual ~tt__DisplayCapabilities() { }
        /// Friend allocator used by soap_new_tt__DisplayCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__DisplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__DisplayCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:814 */
#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (358)
/* complex XML schema type 'tt:RecordingCapabilities': */
class SOAP_CMAC tt__RecordingCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:ReceiverSource' of XML schema type 'xsd:boolean'
        bool ReceiverSource;
        /// Required element 'tt:MediaProfileSource' of XML schema type 'xsd:boolean'
        bool MediaProfileSource;
        /// Required element 'tt:DynamicRecordings' of XML schema type 'xsd:boolean'
        bool DynamicRecordings;
        /// Required element 'tt:DynamicTracks' of XML schema type 'xsd:boolean'
        bool DynamicTracks;
        /// Required element 'tt:MaxStringLength' of XML schema type 'xsd:int'
        int MaxStringLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RecordingCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RecordingCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RecordingCapabilities, default initialized and not managed by a soap context
        virtual tt__RecordingCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RecordingCapabilities); }
      public:
        /// Constructor with default initializations
        tt__RecordingCapabilities() : XAddr(), ReceiverSource(), MediaProfileSource(), DynamicRecordings(), DynamicTracks(), MaxStringLength(), soap() { }
        /// Destructor
        virtual ~tt__RecordingCapabilities() { }
        /// Friend allocator used by soap_new_tt__RecordingCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__RecordingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RecordingCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:816 */
#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (359)
/* complex XML schema type 'tt:SearchCapabilities': */
class SOAP_CMAC tt__SearchCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:MetadataSearch' of XML schema type 'xsd:boolean'
        bool MetadataSearch;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SearchCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SearchCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SearchCapabilities, default initialized and not managed by a soap context
        virtual tt__SearchCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SearchCapabilities); }
      public:
        /// Constructor with default initializations
        tt__SearchCapabilities() : XAddr(), MetadataSearch(), soap() { }
        /// Destructor
        virtual ~tt__SearchCapabilities() { }
        /// Friend allocator used by soap_new_tt__SearchCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__SearchCapabilities * SOAP_FMAC2 soap_instantiate_tt__SearchCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:818 */
#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (360)
/* complex XML schema type 'tt:ReplayCapabilities': */
class SOAP_CMAC tt__ReplayCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReplayCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReplayCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReplayCapabilities, default initialized and not managed by a soap context
        virtual tt__ReplayCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReplayCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ReplayCapabilities() : XAddr(), soap() { }
        /// Destructor
        virtual ~tt__ReplayCapabilities() { }
        /// Friend allocator used by soap_new_tt__ReplayCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ReplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReplayCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:820 */
#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (361)
/* complex XML schema type 'tt:ReceiverCapabilities': */
class SOAP_CMAC tt__ReceiverCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Required element 'tt:RTP_Multicast' of XML schema type 'xsd:boolean'
        bool RTP_USCOREMulticast;
        /// Required element 'tt:RTP_TCP' of XML schema type 'xsd:boolean'
        bool RTP_USCORETCP;
        /// Required element 'tt:RTP_RTSP_TCP' of XML schema type 'xsd:boolean'
        bool RTP_USCORERTSP_USCORETCP;
        /// Required element 'tt:SupportedReceivers' of XML schema type 'xsd:int'
        int SupportedReceivers;
        /// Required element 'tt:MaximumRTSPURILength' of XML schema type 'xsd:int'
        int MaximumRTSPURILength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__ReceiverCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__ReceiverCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__ReceiverCapabilities, default initialized and not managed by a soap context
        virtual tt__ReceiverCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__ReceiverCapabilities); }
      public:
        /// Constructor with default initializations
        tt__ReceiverCapabilities() : XAddr(), RTP_USCOREMulticast(), RTP_USCORETCP(), RTP_USCORERTSP_USCORETCP(), SupportedReceivers(), MaximumRTSPURILength(), soap() { }
        /// Destructor
        virtual ~tt__ReceiverCapabilities() { }
        /// Friend allocator used by soap_new_tt__ReceiverCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__ReceiverCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReceiverCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:822 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (362)
/* complex XML schema type 'tt:AnalyticsDeviceCapabilities': */
class SOAP_CMAC tt__AnalyticsDeviceCapabilities {
      public:
        /// Required element 'tt:XAddr' of XML schema type 'xsd:anyURI'
        std::string XAddr;
        /// Optional element 'tt:RuleSupport' of XML schema type 'xsd:boolean'
        bool *RuleSupport;
        /// Optional element 'tt:Extension' of XML schema type 'tt:AnalyticsDeviceExtension'
        tt__AnalyticsDeviceExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceCapabilities
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceCapabilities; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceCapabilities, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceCapabilities *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceCapabilities); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsDeviceCapabilities() : XAddr(), RuleSupport(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__AnalyticsDeviceCapabilities() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceCapabilities(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:824 */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (363)
/* complex XML schema type 'tt:AnalyticsDeviceExtension': */
class SOAP_CMAC tt__AnalyticsDeviceExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AnalyticsDeviceExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AnalyticsDeviceExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AnalyticsDeviceExtension, default initialized and not managed by a soap context
        virtual tt__AnalyticsDeviceExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AnalyticsDeviceExtension); }
      public:
        /// Constructor with default initializations
        tt__AnalyticsDeviceExtension() : soap() { }
        /// Destructor
        virtual ~tt__AnalyticsDeviceExtension() { }
        /// Friend allocator used by soap_new_tt__AnalyticsDeviceExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__AnalyticsDeviceExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:826 */
#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (364)
/* complex XML schema type 'tt:SystemLog': */
class SOAP_CMAC tt__SystemLog {
      public:
        /// Optional element 'tt:Binary' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Binary;
        /// Optional element 'tt:String' of XML schema type 'xsd:string'
        std::string *String;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLog
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLog, default initialized and not managed by a soap context
        virtual tt__SystemLog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLog); }
      public:
        /// Constructor with default initializations
        tt__SystemLog() : Binary(), String(), soap() { }
        /// Destructor
        virtual ~tt__SystemLog() { }
        /// Friend allocator used by soap_new_tt__SystemLog(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLog * SOAP_FMAC2 soap_instantiate_tt__SystemLog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:828 */
#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (365)
/* complex XML schema type 'tt:SupportInformation': */
class SOAP_CMAC tt__SupportInformation {
      public:
        /// Optional element 'tt:Binary' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Binary;
        /// Optional element 'tt:String' of XML schema type 'xsd:string'
        std::string *String;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SupportInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SupportInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SupportInformation, default initialized and not managed by a soap context
        virtual tt__SupportInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SupportInformation); }
      public:
        /// Constructor with default initializations
        tt__SupportInformation() : Binary(), String(), soap() { }
        /// Destructor
        virtual ~tt__SupportInformation() { }
        /// Friend allocator used by soap_new_tt__SupportInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__SupportInformation * SOAP_FMAC2 soap_instantiate_tt__SupportInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:830 */
#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (366)
/* complex XML schema type 'tt:BinaryData': */
class SOAP_CMAC tt__BinaryData {
      public:
        /// Required element 'tt:Data' of XML schema type 'xsd:base64Binary'
        xsd__base64Binary Data;
        /// Optional attribute 'xmime:contentType' of XML schema type 'xsd:string'
        char *xmime__contentType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BinaryData
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BinaryData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BinaryData, default initialized and not managed by a soap context
        virtual tt__BinaryData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BinaryData); }
      public:
        /// Constructor with default initializations
        tt__BinaryData() : Data(), xmime__contentType(), soap() { }
        /// Destructor
        virtual ~tt__BinaryData() { }
        /// Friend allocator used by soap_new_tt__BinaryData(struct soap*, int)
        friend SOAP_FMAC1 tt__BinaryData * SOAP_FMAC2 soap_instantiate_tt__BinaryData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:832 */
#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (367)
/* complex XML schema type 'tt:AttachmentData': */
class SOAP_CMAC tt__AttachmentData {
      public:
        /// Required element 'xop:Include' of XML schema type 'xop:Include'
        struct _xop__Include xop__Include;
        /// Optional attribute 'xmime:contentType' of XML schema type 'xsd:string'
        char *xmime__contentType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__AttachmentData
        virtual long soap_type(void) const { return SOAP_TYPE_tt__AttachmentData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__AttachmentData, default initialized and not managed by a soap context
        virtual tt__AttachmentData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__AttachmentData); }
      public:
        /// Constructor with default initializations
        tt__AttachmentData() : xop__Include(), xmime__contentType(), soap() { }
        /// Destructor
        virtual ~tt__AttachmentData() { }
        /// Friend allocator used by soap_new_tt__AttachmentData(struct soap*, int)
        friend SOAP_FMAC1 tt__AttachmentData * SOAP_FMAC2 soap_instantiate_tt__AttachmentData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:834 */
#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (368)
/* complex XML schema type 'tt:BackupFile': */
class SOAP_CMAC tt__BackupFile {
      public:
        /// Required element 'tt:Name' of XML schema type 'xsd:string'
        std::string Name;
        /// Required element 'tt:Data' of XML schema type 'tt:AttachmentData'
        tt__AttachmentData *Data;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__BackupFile
        virtual long soap_type(void) const { return SOAP_TYPE_tt__BackupFile; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__BackupFile, default initialized and not managed by a soap context
        virtual tt__BackupFile *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__BackupFile); }
      public:
        /// Constructor with default initializations
        tt__BackupFile() : Name(), Data(), soap() { }
        /// Destructor
        virtual ~tt__BackupFile() { }
        /// Friend allocator used by soap_new_tt__BackupFile(struct soap*, int)
        friend SOAP_FMAC1 tt__BackupFile * SOAP_FMAC2 soap_instantiate_tt__BackupFile(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:836 */
#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (369)
/* complex XML schema type 'tt:SystemLogUriList': */
class SOAP_CMAC tt__SystemLogUriList {
      public:
        /// Optional element 'tt:SystemLog' of XML schema type 'tt:SystemLogUri'
        std::vector<tt__SystemLogUri *> SystemLog;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLogUriList
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLogUriList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLogUriList, default initialized and not managed by a soap context
        virtual tt__SystemLogUriList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLogUriList); }
      public:
        /// Constructor with default initializations
        tt__SystemLogUriList() : SystemLog(), soap() { }
        /// Destructor
        virtual ~tt__SystemLogUriList() { }
        /// Friend allocator used by soap_new_tt__SystemLogUriList(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLogUriList * SOAP_FMAC2 soap_instantiate_tt__SystemLogUriList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:838 */
#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (370)
/* complex XML schema type 'tt:SystemLogUri': */
class SOAP_CMAC tt__SystemLogUri {
      public:
        /// Required element 'tt:Type' of XML schema type 'tt:SystemLogType'
        enum tt__SystemLogType Type;
        /// Required element 'tt:Uri' of XML schema type 'xsd:anyURI'
        std::string Uri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemLogUri
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemLogUri; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemLogUri, default initialized and not managed by a soap context
        virtual tt__SystemLogUri *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemLogUri); }
      public:
        /// Constructor with default initializations
        tt__SystemLogUri() : Type(), Uri(), soap() { }
        /// Destructor
        virtual ~tt__SystemLogUri() { }
        /// Friend allocator used by soap_new_tt__SystemLogUri(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemLogUri * SOAP_FMAC2 soap_instantiate_tt__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:840 */
#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (371)
/* complex XML schema type 'tt:SystemDateTime': */
class SOAP_CMAC tt__SystemDateTime {
      public:
        /// Required element 'tt:DateTimeType' of XML schema type 'tt:SetDateTimeType'
        enum tt__SetDateTimeType DateTimeType;
        /// Required element 'tt:DaylightSavings' of XML schema type 'xsd:boolean'
        bool DaylightSavings;
        /// Optional element 'tt:TimeZone' of XML schema type 'tt:TimeZone'
        tt__TimeZone *TimeZone;
        /// Optional element 'tt:UTCDateTime' of XML schema type 'tt:DateTime'
        tt__DateTime *UTCDateTime;
        /// Optional element 'tt:LocalDateTime' of XML schema type 'tt:DateTime'
        tt__DateTime *LocalDateTime;
        /// Optional element 'tt:Extension' of XML schema type 'tt:SystemDateTimeExtension'
        tt__SystemDateTimeExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemDateTime
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemDateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemDateTime, default initialized and not managed by a soap context
        virtual tt__SystemDateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemDateTime); }
      public:
        /// Constructor with default initializations
        tt__SystemDateTime() : DateTimeType(), DaylightSavings(), TimeZone(), UTCDateTime(), LocalDateTime(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__SystemDateTime() { }
        /// Friend allocator used by soap_new_tt__SystemDateTime(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemDateTime * SOAP_FMAC2 soap_instantiate_tt__SystemDateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:842 */
#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (372)
/* complex XML schema type 'tt:SystemDateTimeExtension': */
class SOAP_CMAC tt__SystemDateTimeExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__SystemDateTimeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__SystemDateTimeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__SystemDateTimeExtension, default initialized and not managed by a soap context
        virtual tt__SystemDateTimeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__SystemDateTimeExtension); }
      public:
        /// Constructor with default initializations
        tt__SystemDateTimeExtension() : soap() { }
        /// Destructor
        virtual ~tt__SystemDateTimeExtension() { }
        /// Friend allocator used by soap_new_tt__SystemDateTimeExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__SystemDateTimeExtension * SOAP_FMAC2 soap_instantiate_tt__SystemDateTimeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:844 */
#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (373)
/* complex XML schema type 'tt:DateTime': */
class SOAP_CMAC tt__DateTime {
      public:
        /// Required element 'tt:Time' of XML schema type 'tt:Time'
        tt__Time *Time;
        /// Required element 'tt:Date' of XML schema type 'tt:Date'
        tt__Date *Date;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DateTime
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DateTime, default initialized and not managed by a soap context
        virtual tt__DateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DateTime); }
      public:
        /// Constructor with default initializations
        tt__DateTime() : Time(), Date(), soap() { }
        /// Destructor
        virtual ~tt__DateTime() { }
        /// Friend allocator used by soap_new_tt__DateTime(struct soap*, int)
        friend SOAP_FMAC1 tt__DateTime * SOAP_FMAC2 soap_instantiate_tt__DateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:846 */
#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (374)
/* complex XML schema type 'tt:Date': */
class SOAP_CMAC tt__Date {
      public:
        /// Required element 'tt:Year' of XML schema type 'xsd:int'
        int Year;
        /// Required element 'tt:Month' of XML schema type 'xsd:int'
        int Month;
        /// Required element 'tt:Day' of XML schema type 'xsd:int'
        int Day;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Date
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Date; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Date, default initialized and not managed by a soap context
        virtual tt__Date *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Date); }
      public:
        /// Constructor with default initializations
        tt__Date() : Year(), Month(), Day(), soap() { }
        /// Destructor
        virtual ~tt__Date() { }
        /// Friend allocator used by soap_new_tt__Date(struct soap*, int)
        friend SOAP_FMAC1 tt__Date * SOAP_FMAC2 soap_instantiate_tt__Date(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:848 */
#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (375)
/* complex XML schema type 'tt:Time': */
class SOAP_CMAC tt__Time {
      public:
        /// Required element 'tt:Hour' of XML schema type 'xsd:int'
        int Hour;
        /// Required element 'tt:Minute' of XML schema type 'xsd:int'
        int Minute;
        /// Required element 'tt:Second' of XML schema type 'xsd:int'
        int Second;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Time
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Time; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Time, default initialized and not managed by a soap context
        virtual tt__Time *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Time); }
      public:
        /// Constructor with default initializations
        tt__Time() : Hour(), Minute(), Second(), soap() { }
        /// Destructor
        virtual ~tt__Time() { }
        /// Friend allocator used by soap_new_tt__Time(struct soap*, int)
        friend SOAP_FMAC1 tt__Time * SOAP_FMAC2 soap_instantiate_tt__Time(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:850 */
#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (376)
/* complex XML schema type 'tt:TimeZone': */
class SOAP_CMAC tt__TimeZone {
      public:
        /// Required element 'tt:TZ' of XML schema type 'xsd:token'
        std::string TZ;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TimeZone
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TimeZone; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TimeZone, default initialized and not managed by a soap context
        virtual tt__TimeZone *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TimeZone); }
      public:
        /// Constructor with default initializations
        tt__TimeZone() : TZ(), soap() { }
        /// Destructor
        virtual ~tt__TimeZone() { }
        /// Friend allocator used by soap_new_tt__TimeZone(struct soap*, int)
        friend SOAP_FMAC1 tt__TimeZone * SOAP_FMAC2 soap_instantiate_tt__TimeZone(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:852 */
#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (377)
/* complex XML schema type 'tt:RemoteUser': */
class SOAP_CMAC tt__RemoteUser {
      public:
        /// Required element 'tt:Username' of XML schema type 'xsd:string'
        std::string Username;
        /// Optional element 'tt:Password' of XML schema type 'xsd:string'
        std::string *Password;
        /// Required element 'tt:UseDerivedPassword' of XML schema type 'xsd:boolean'
        bool UseDerivedPassword;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RemoteUser
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RemoteUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RemoteUser, default initialized and not managed by a soap context
        virtual tt__RemoteUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RemoteUser); }
      public:
        /// Constructor with default initializations
        tt__RemoteUser() : Username(), Password(), UseDerivedPassword(), soap() { }
        /// Destructor
        virtual ~tt__RemoteUser() { }
        /// Friend allocator used by soap_new_tt__RemoteUser(struct soap*, int)
        friend SOAP_FMAC1 tt__RemoteUser * SOAP_FMAC2 soap_instantiate_tt__RemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:854 */
#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (378)
/* complex XML schema type 'tt:User': */
class SOAP_CMAC tt__User {
      public:
        /// Required element 'tt:Username' of XML schema type 'xsd:string'
        std::string Username;
        /// Optional element 'tt:Password' of XML schema type 'xsd:string'
        std::string *Password;
        /// Required element 'tt:UserLevel' of XML schema type 'tt:UserLevel'
        enum tt__UserLevel UserLevel;
        /// Optional element 'tt:Extension' of XML schema type 'tt:UserExtension'
        tt__UserExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__User
        virtual long soap_type(void) const { return SOAP_TYPE_tt__User; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__User, default initialized and not managed by a soap context
        virtual tt__User *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__User); }
      public:
        /// Constructor with default initializations
        tt__User() : Username(), Password(), UserLevel(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__User() { }
        /// Friend allocator used by soap_new_tt__User(struct soap*, int)
        friend SOAP_FMAC1 tt__User * SOAP_FMAC2 soap_instantiate_tt__User(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:856 */
#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (379)
/* complex XML schema type 'tt:UserExtension': */
class SOAP_CMAC tt__UserExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__UserExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__UserExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__UserExtension, default initialized and not managed by a soap context
        virtual tt__UserExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__UserExtension); }
      public:
        /// Constructor with default initializations
        tt__UserExtension() : soap() { }
        /// Destructor
        virtual ~tt__UserExtension() { }
        /// Friend allocator used by soap_new_tt__UserExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__UserExtension * SOAP_FMAC2 soap_instantiate_tt__UserExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:858 */
#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (380)
/* complex XML schema type 'tt:Certificate': */
class SOAP_CMAC tt__Certificate {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        std::string CertificateID;
        /// Required element 'tt:Certificate' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Certificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Certificate
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Certificate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Certificate, default initialized and not managed by a soap context
        virtual tt__Certificate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Certificate); }
      public:
        /// Constructor with default initializations
        tt__Certificate() : CertificateID(), Certificate(), soap() { }
        /// Destructor
        virtual ~tt__Certificate() { }
        /// Friend allocator used by soap_new_tt__Certificate(struct soap*, int)
        friend SOAP_FMAC1 tt__Certificate * SOAP_FMAC2 soap_instantiate_tt__Certificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:860 */
#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (381)
/* complex XML schema type 'tt:CertificateStatus': */
class SOAP_CMAC tt__CertificateStatus {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        std::string CertificateID;
        /// Required element 'tt:Status' of XML schema type 'xsd:boolean'
        bool Status;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateStatus
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateStatus, default initialized and not managed by a soap context
        virtual tt__CertificateStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateStatus); }
      public:
        /// Constructor with default initializations
        tt__CertificateStatus() : CertificateID(), Status(), soap() { }
        /// Destructor
        virtual ~tt__CertificateStatus() { }
        /// Friend allocator used by soap_new_tt__CertificateStatus(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateStatus * SOAP_FMAC2 soap_instantiate_tt__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:862 */
#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (382)
/* complex XML schema type 'tt:CertificateWithPrivateKey': */
class SOAP_CMAC tt__CertificateWithPrivateKey {
      public:
        /// Optional element 'tt:CertificateID' of XML schema type 'xsd:token'
        std::string *CertificateID;
        /// Required element 'tt:Certificate' of XML schema type 'tt:BinaryData'
        tt__BinaryData *Certificate;
        /// Required element 'tt:PrivateKey' of XML schema type 'tt:BinaryData'
        tt__BinaryData *PrivateKey;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateWithPrivateKey
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateWithPrivateKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateWithPrivateKey, default initialized and not managed by a soap context
        virtual tt__CertificateWithPrivateKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateWithPrivateKey); }
      public:
        /// Constructor with default initializations
        tt__CertificateWithPrivateKey() : CertificateID(), Certificate(), PrivateKey(), soap() { }
        /// Destructor
        virtual ~tt__CertificateWithPrivateKey() { }
        /// Friend allocator used by soap_new_tt__CertificateWithPrivateKey(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate_tt__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:864 */
#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (383)
/* complex XML schema type 'tt:CertificateInformation': */
class SOAP_CMAC tt__CertificateInformation {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        std::string CertificateID;
        /// Optional element 'tt:IssuerDN' of XML schema type 'xsd:string'
        std::string *IssuerDN;
        /// Optional element 'tt:SubjectDN' of XML schema type 'xsd:string'
        std::string *SubjectDN;
        /// Optional element 'tt:KeyUsage' of XML schema type 'tt:CertificateUsage'
        tt__CertificateUsage *KeyUsage;
        /// Optional element 'tt:ExtendedKeyUsage' of XML schema type 'tt:CertificateUsage'
        tt__CertificateUsage *ExtendedKeyUsage;
        /// Optional element 'tt:KeyLength' of XML schema type 'xsd:int'
        int *KeyLength;
        /// Optional element 'tt:Version' of XML schema type 'xsd:string'
        std::string *Version;
        /// Optional element 'tt:SerialNum' of XML schema type 'xsd:string'
        std::string *SerialNum;
        /// Optional element 'tt:SignatureAlgorithm' of XML schema type 'xsd:string'
        std::string *SignatureAlgorithm;
        /// Optional element 'tt:Validity' of XML schema type 'tt:DateTimeRange'
        tt__DateTimeRange *Validity;
        /// Optional element 'tt:Extension' of XML schema type 'tt:CertificateInformationExtension'
        tt__CertificateInformationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateInformation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateInformation, default initialized and not managed by a soap context
        virtual tt__CertificateInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateInformation); }
      public:
        /// Constructor with default initializations
        tt__CertificateInformation() : CertificateID(), IssuerDN(), SubjectDN(), KeyUsage(), ExtendedKeyUsage(), KeyLength(), Version(), SerialNum(), SignatureAlgorithm(), Validity(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__CertificateInformation() { }
        /// Friend allocator used by soap_new_tt__CertificateInformation(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateInformation * SOAP_FMAC2 soap_instantiate_tt__CertificateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:868 */
#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (385)
/* complex XML schema type 'tt:CertificateInformationExtension': */
class SOAP_CMAC tt__CertificateInformationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateInformationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateInformationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateInformationExtension, default initialized and not managed by a soap context
        virtual tt__CertificateInformationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateInformationExtension); }
      public:
        /// Constructor with default initializations
        tt__CertificateInformationExtension() : soap() { }
        /// Destructor
        virtual ~tt__CertificateInformationExtension() { }
        /// Friend allocator used by soap_new_tt__CertificateInformationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateInformationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:870 */
#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (386)
/* complex XML schema type 'tt:Dot1XConfiguration': */
class SOAP_CMAC tt__Dot1XConfiguration {
      public:
        /// Required element 'tt:Dot1XConfigurationToken' of XML schema type 'tt:ReferenceToken'
        std::string Dot1XConfigurationToken;
        /// Required element 'tt:Identity' of XML schema type 'xsd:string'
        std::string Identity;
        /// Optional element 'tt:AnonymousID' of XML schema type 'xsd:string'
        std::string *AnonymousID;
        /// Required element 'tt:EAPMethod' of XML schema type 'xsd:int'
        int EAPMethod;
        /// Optional element 'tt:CACertificateID' of XML schema type 'xsd:token'
        std::vector<std::string> CACertificateID;
        /// Optional element 'tt:EAPMethodConfiguration' of XML schema type 'tt:EAPMethodConfiguration'
        tt__EAPMethodConfiguration *EAPMethodConfiguration;
        /// Optional element 'tt:Extension' of XML schema type 'tt:Dot1XConfigurationExtension'
        tt__Dot1XConfigurationExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot1XConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot1XConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot1XConfiguration, default initialized and not managed by a soap context
        virtual tt__Dot1XConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot1XConfiguration); }
      public:
        /// Constructor with default initializations
        tt__Dot1XConfiguration() : Dot1XConfigurationToken(), Identity(), AnonymousID(), EAPMethod(), CACertificateID(), EAPMethodConfiguration(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__Dot1XConfiguration() { }
        /// Friend allocator used by soap_new_tt__Dot1XConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot1XConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:872 */
#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (387)
/* complex XML schema type 'tt:Dot1XConfigurationExtension': */
class SOAP_CMAC tt__Dot1XConfigurationExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__Dot1XConfigurationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__Dot1XConfigurationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__Dot1XConfigurationExtension, default initialized and not managed by a soap context
        virtual tt__Dot1XConfigurationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__Dot1XConfigurationExtension); }
      public:
        /// Constructor with default initializations
        tt__Dot1XConfigurationExtension() : soap() { }
        /// Destructor
        virtual ~tt__Dot1XConfigurationExtension() { }
        /// Friend allocator used by soap_new_tt__Dot1XConfigurationExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__Dot1XConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:874 */
#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (388)
/* complex XML schema type 'tt:EAPMethodConfiguration': */
class SOAP_CMAC tt__EAPMethodConfiguration {
      public:
        /// Optional element 'tt:TLSConfiguration' of XML schema type 'tt:TLSConfiguration'
        tt__TLSConfiguration *TLSConfiguration;
        /// Optional element 'tt:Password' of XML schema type 'xsd:string'
        std::string *Password;
        /// Optional element 'tt:Extension' of XML schema type 'tt:EapMethodExtension'
        tt__EapMethodExtension *Extension;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EAPMethodConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EAPMethodConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EAPMethodConfiguration, default initialized and not managed by a soap context
        virtual tt__EAPMethodConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EAPMethodConfiguration); }
      public:
        /// Constructor with default initializations
        tt__EAPMethodConfiguration() : TLSConfiguration(), Password(), Extension(), soap() { }
        /// Destructor
        virtual ~tt__EAPMethodConfiguration() { }
        /// Friend allocator used by soap_new_tt__EAPMethodConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__EAPMethodConfiguration * SOAP_FMAC2 soap_instantiate_tt__EAPMethodConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:876 */
#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (389)
/* complex XML schema type 'tt:EapMethodExtension': */
class SOAP_CMAC tt__EapMethodExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__EapMethodExtension
        virtual long soap_type(void) const { return SOAP_TYPE_tt__EapMethodExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__EapMethodExtension, default initialized and not managed by a soap context
        virtual tt__EapMethodExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__EapMethodExtension); }
      public:
        /// Constructor with default initializations
        tt__EapMethodExtension() : soap() { }
        /// Destructor
        virtual ~tt__EapMethodExtension() { }
        /// Friend allocator used by soap_new_tt__EapMethodExtension(struct soap*, int)
        friend SOAP_FMAC1 tt__EapMethodExtension * SOAP_FMAC2 soap_instantiate_tt__EapMethodExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:878 */
#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (390)
/* complex XML schema type 'tt:TLSConfiguration': */
class SOAP_CMAC tt__TLSConfiguration {
      public:
        /// Required element 'tt:CertificateID' of XML schema type 'xsd:token'
        std::string CertificateID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__TLSConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tt__TLSConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__TLSConfiguration, default initialized and not managed by a soap context
        virtual tt__TLSConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__TLSConfiguration); }
      public:
        /// Constructor with default initializations
        tt__TLSConfiguration() : CertificateID(), soap() { }
        /// Destructor
        virtual ~tt__TLSConfiguration() { }
        /// Friend allocator used by soap_new_tt__TLSConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tt__TLSConfiguration * SOAP_FMAC2 soap_instantiate_tt__TLSConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:880 */
#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (391)
/* complex XML schema type 'tt:RelayOutputSettings': */
class SOAP_CMAC tt__RelayOutputSettings {
      public:
        /// Required element 'tt:Mode' of XML schema type 'tt:RelayMode'
        enum tt__RelayMode Mode;
        /// Required element 'tt:DelayTime' of XML schema type 'xsd:duration'
        std::string DelayTime;
        /// Required element 'tt:IdleState' of XML schema type 'tt:RelayIdleState'
        enum tt__RelayIdleState IdleState;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayOutputSettings
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayOutputSettings; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayOutputSettings, default initialized and not managed by a soap context
        virtual tt__RelayOutputSettings *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayOutputSettings); }
      public:
        /// Constructor with default initializations
        tt__RelayOutputSettings() : Mode(), DelayTime(), IdleState(), soap() { }
        /// Destructor
        virtual ~tt__RelayOutputSettings() { }
        /// Friend allocator used by soap_new_tt__RelayOutputSettings(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayOutputSettings * SOAP_FMAC2 soap_instantiate_tt__RelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:884 */
#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (393)
/* complex XML schema type 'tt:DateTimeRange': */
class SOAP_CMAC tt__DateTimeRange {
      public:
        /// Required element 'tt:From' of XML schema type 'xsd:dateTime'
        time_t From;
        /// Required element 'tt:Until' of XML schema type 'xsd:dateTime'
        time_t Until;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__DateTimeRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__DateTimeRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__DateTimeRange, default initialized and not managed by a soap context
        virtual tt__DateTimeRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__DateTimeRange); }
      public:
        /// Constructor with default initializations
        tt__DateTimeRange() : From(), Until(), soap() { }
        /// Destructor
        virtual ~tt__DateTimeRange() { }
        /// Friend allocator used by soap_new_tt__DateTimeRange(struct soap*, int)
        friend SOAP_FMAC1 tt__DateTimeRange * SOAP_FMAC2 soap_instantiate_tt__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:886 */
#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (394)
/* complex XML schema type 'tt:IntRange': */
class SOAP_CMAC tt__IntRange {
      public:
        /// Required element 'tt:Min' of XML schema type 'xsd:int'
        int Min;
        /// Required element 'tt:Max' of XML schema type 'xsd:int'
        int Max;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__IntRange
        virtual long soap_type(void) const { return SOAP_TYPE_tt__IntRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__IntRange, default initialized and not managed by a soap context
        virtual tt__IntRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__IntRange); }
      public:
        /// Constructor with default initializations
        tt__IntRange() : Min(), Max(), soap() { }
        /// Destructor
        virtual ~tt__IntRange() { }
        /// Friend allocator used by soap_new_tt__IntRange(struct soap*, int)
        friend SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:888 */
#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (395)
/* complex XML schema type 'tt:GeoLocation': */
class SOAP_CMAC tt__GeoLocation {
      public:
        /// Optional attribute 'lon' of XML schema type 'xsd:double'
        double *lon;
        /// Optional attribute 'lat' of XML schema type 'xsd:double'
        double *lat;
        /// Optional attribute 'elevation' of XML schema type 'xsd:float'
        float *elevation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GeoLocation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GeoLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GeoLocation, default initialized and not managed by a soap context
        virtual tt__GeoLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GeoLocation); }
      public:
        /// Constructor with default initializations
        tt__GeoLocation() : lon(), lat(), elevation(), soap() { }
        /// Destructor
        virtual ~tt__GeoLocation() { }
        /// Friend allocator used by soap_new_tt__GeoLocation(struct soap*, int)
        friend SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:890 */
#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (396)
/* complex XML schema type 'tt:GeoOrientation': */
class SOAP_CMAC tt__GeoOrientation {
      public:
        /// Optional attribute 'roll' of XML schema type 'xsd:float'
        float *roll;
        /// Optional attribute 'pitch' of XML schema type 'xsd:float'
        float *pitch;
        /// Optional attribute 'yaw' of XML schema type 'xsd:float'
        float *yaw;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__GeoOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__GeoOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__GeoOrientation, default initialized and not managed by a soap context
        virtual tt__GeoOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__GeoOrientation); }
      public:
        /// Constructor with default initializations
        tt__GeoOrientation() : roll(), pitch(), yaw(), soap() { }
        /// Destructor
        virtual ~tt__GeoOrientation() { }
        /// Friend allocator used by soap_new_tt__GeoOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__GeoOrientation * SOAP_FMAC2 soap_instantiate_tt__GeoOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:892 */
#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (397)
/* complex XML schema type 'tt:LocalLocation': */
class SOAP_CMAC tt__LocalLocation {
      public:
        /// Optional attribute 'x' of XML schema type 'xsd:float'
        float *x;
        /// Optional attribute 'y' of XML schema type 'xsd:float'
        float *y;
        /// Optional attribute 'z' of XML schema type 'xsd:float'
        float *z;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocalLocation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocalLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocalLocation, default initialized and not managed by a soap context
        virtual tt__LocalLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocalLocation); }
      public:
        /// Constructor with default initializations
        tt__LocalLocation() : x(), y(), z(), soap() { }
        /// Destructor
        virtual ~tt__LocalLocation() { }
        /// Friend allocator used by soap_new_tt__LocalLocation(struct soap*, int)
        friend SOAP_FMAC1 tt__LocalLocation * SOAP_FMAC2 soap_instantiate_tt__LocalLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:894 */
#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (398)
/* complex XML schema type 'tt:LocalOrientation': */
class SOAP_CMAC tt__LocalOrientation {
      public:
        /// Optional attribute 'pan' of XML schema type 'xsd:float'
        float *pan;
        /// Optional attribute 'tilt' of XML schema type 'xsd:float'
        float *tilt;
        /// Optional attribute 'roll' of XML schema type 'xsd:float'
        float *roll;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocalOrientation
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocalOrientation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocalOrientation, default initialized and not managed by a soap context
        virtual tt__LocalOrientation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocalOrientation); }
      public:
        /// Constructor with default initializations
        tt__LocalOrientation() : pan(), tilt(), roll(), soap() { }
        /// Destructor
        virtual ~tt__LocalOrientation() { }
        /// Friend allocator used by soap_new_tt__LocalOrientation(struct soap*, int)
        friend SOAP_FMAC1 tt__LocalOrientation * SOAP_FMAC2 soap_instantiate_tt__LocalOrientation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:896 */
#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (399)
/* complex XML schema type 'tt:LocationEntity': */
class SOAP_CMAC tt__LocationEntity {
      public:
        /// Optional element 'tt:GeoLocation' of XML schema type 'tt:GeoLocation'
        tt__GeoLocation *GeoLocation;
        /// Optional element 'tt:GeoOrientation' of XML schema type 'tt:GeoOrientation'
        tt__GeoOrientation *GeoOrientation;
        /// Optional element 'tt:LocalLocation' of XML schema type 'tt:LocalLocation'
        tt__LocalLocation *LocalLocation;
        /// Optional element 'tt:LocalOrientation' of XML schema type 'tt:LocalOrientation'
        tt__LocalOrientation *LocalOrientation;
        /// Optional attribute 'Entity' of XML schema type 'xsd:string'
        std::string *Entity;
        /// Optional attribute 'Token' of XML schema type 'tt:ReferenceToken'
        std::string *Token;
        /// Optional attribute 'Fixed' of XML schema type 'xsd:boolean'
        bool *Fixed;
        /// Optional attribute 'GeoSource' of XML schema type 'xsd:anyURI'
        std::string *GeoSource;
        /// Optional attribute 'AutoGeo' of XML schema type 'xsd:boolean'
        bool *AutoGeo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__LocationEntity
        virtual long soap_type(void) const { return SOAP_TYPE_tt__LocationEntity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__LocationEntity, default initialized and not managed by a soap context
        virtual tt__LocationEntity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__LocationEntity); }
      public:
        /// Constructor with default initializations
        tt__LocationEntity() : GeoLocation(), GeoOrientation(), LocalLocation(), LocalOrientation(), Entity(), Token(), Fixed(), GeoSource(), AutoGeo(), soap() { }
        /// Destructor
        virtual ~tt__LocationEntity() { }
        /// Friend allocator used by soap_new_tt__LocationEntity(struct soap*, int)
        friend SOAP_FMAC1 tt__LocationEntity * SOAP_FMAC2 soap_instantiate_tt__LocationEntity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:260 */
#ifndef SOAP_TYPE_tds__StorageConfiguration
#define SOAP_TYPE_tds__StorageConfiguration (81)
/* complex XML schema type 'tds:StorageConfiguration': */
class SOAP_CMAC tds__StorageConfiguration : public tt__DeviceEntity {
      public:
        /// Required element 'tds:Data' of XML schema type 'tds:StorageConfigurationData'
        tds__StorageConfigurationData *Data;
      public:
        /// Return unique type id SOAP_TYPE_tds__StorageConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_tds__StorageConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tds__StorageConfiguration, default initialized and not managed by a soap context
        virtual tds__StorageConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tds__StorageConfiguration); }
      public:
        /// Constructor with default initializations
        tds__StorageConfiguration() : Data() { }
        /// Destructor
        virtual ~tds__StorageConfiguration() { }
        /// Friend allocator used by soap_new_tds__StorageConfiguration(struct soap*, int)
        friend SOAP_FMAC1 tds__StorageConfiguration * SOAP_FMAC2 soap_instantiate_tds__StorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:662 */
#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (282)
/* complex XML schema type 'tt:NetworkInterface': */
class SOAP_CMAC tt__NetworkInterface : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Enabled' of XML schema type 'xsd:boolean'
        bool Enabled;
        /// Optional element 'tt:Info' of XML schema type 'tt:NetworkInterfaceInfo'
        tt__NetworkInterfaceInfo *Info;
        /// Optional element 'tt:Link' of XML schema type 'tt:NetworkInterfaceLink'
        tt__NetworkInterfaceLink *Link;
        /// Optional element 'tt:IPv4' of XML schema type 'tt:IPv4NetworkInterface'
        tt__IPv4NetworkInterface *IPv4;
        /// Optional element 'tt:IPv6' of XML schema type 'tt:IPv6NetworkInterface'
        tt__IPv6NetworkInterface *IPv6;
        /// Optional element 'tt:Extension' of XML schema type 'tt:NetworkInterfaceExtension'
        tt__NetworkInterfaceExtension *Extension;
      public:
        /// Return unique type id SOAP_TYPE_tt__NetworkInterface
        virtual long soap_type(void) const { return SOAP_TYPE_tt__NetworkInterface; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__NetworkInterface, default initialized and not managed by a soap context
        virtual tt__NetworkInterface *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__NetworkInterface); }
      public:
        /// Constructor with default initializations
        tt__NetworkInterface() : Enabled(), Info(), Link(), IPv4(), IPv6(), Extension() { }
        /// Destructor
        virtual ~tt__NetworkInterface() { }
        /// Friend allocator used by soap_new_tt__NetworkInterface(struct soap*, int)
        friend SOAP_FMAC1 tt__NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:866 */
#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (384)
/* simple XML schema type 'tt:CertificateUsage': */
class SOAP_CMAC tt__CertificateUsage {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
        /// Required attribute 'Critical' of XML schema type 'xsd:boolean'
        bool Critical;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_tt__CertificateUsage
        virtual long soap_type(void) const { return SOAP_TYPE_tt__CertificateUsage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__CertificateUsage, default initialized and not managed by a soap context
        virtual tt__CertificateUsage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__CertificateUsage); }
      public:
        /// Constructor with default initializations
        tt__CertificateUsage() : __item(), Critical(), soap() { }
        /// Destructor
        virtual ~tt__CertificateUsage() { }
        /// Friend allocator used by soap_new_tt__CertificateUsage(struct soap*, int)
        friend SOAP_FMAC1 tt__CertificateUsage * SOAP_FMAC2 soap_instantiate_tt__CertificateUsage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:882 */
#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (392)
/* complex XML schema type 'tt:RelayOutput': */
class SOAP_CMAC tt__RelayOutput : public tt__DeviceEntity {
      public:
        /// Required element 'tt:Properties' of XML schema type 'tt:RelayOutputSettings'
        tt__RelayOutputSettings *Properties;
      public:
        /// Return unique type id SOAP_TYPE_tt__RelayOutput
        virtual long soap_type(void) const { return SOAP_TYPE_tt__RelayOutput; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type tt__RelayOutput, default initialized and not managed by a soap context
        virtual tt__RelayOutput *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(tt__RelayOutput); }
      public:
        /// Constructor with default initializations
        tt__RelayOutput() : Properties() { }
        /// Destructor
        virtual ~tt__RelayOutput() { }
        /// Friend allocator used by soap_new_tt__RelayOutput(struct soap*, int)
        friend SOAP_FMAC1 tt__RelayOutput * SOAP_FMAC2 soap_instantiate_tt__RelayOutput(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:12617 */
#ifndef SOAP_TYPE___tds__GetServices
#define SOAP_TYPE___tds__GetServices (635)
/* Wrapper: */
struct SOAP_CMAC __tds__GetServices {
      public:
        /** Optional element 'tds:GetServices' of XML schema type 'tds:GetServices' */
        _tds__GetServices *tds__GetServices;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetServices */
        long soap_type() const { return SOAP_TYPE___tds__GetServices; }
        /** Constructor with member initializations */
        __tds__GetServices() : tds__GetServices() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetServices * SOAP_FMAC2 soap_instantiate___tds__GetServices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:12686 */
#ifndef SOAP_TYPE___tds__GetServiceCapabilities
#define SOAP_TYPE___tds__GetServiceCapabilities (639)
/* Wrapper: */
struct SOAP_CMAC __tds__GetServiceCapabilities {
      public:
        /** Optional element 'tds:GetServiceCapabilities' of XML schema type 'tds:GetServiceCapabilities' */
        _tds__GetServiceCapabilities *tds__GetServiceCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetServiceCapabilities */
        long soap_type() const { return SOAP_TYPE___tds__GetServiceCapabilities; }
        /** Constructor with member initializations */
        __tds__GetServiceCapabilities() : tds__GetServiceCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:12754 */
#ifndef SOAP_TYPE___tds__GetDeviceInformation
#define SOAP_TYPE___tds__GetDeviceInformation (643)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDeviceInformation {
      public:
        /** Optional element 'tds:GetDeviceInformation' of XML schema type 'tds:GetDeviceInformation' */
        _tds__GetDeviceInformation *tds__GetDeviceInformation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDeviceInformation */
        long soap_type() const { return SOAP_TYPE___tds__GetDeviceInformation; }
        /** Constructor with member initializations */
        __tds__GetDeviceInformation() : tds__GetDeviceInformation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate___tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:12836 */
#ifndef SOAP_TYPE___tds__SetSystemDateAndTime
#define SOAP_TYPE___tds__SetSystemDateAndTime (647)
/* Wrapper: */
struct SOAP_CMAC __tds__SetSystemDateAndTime {
      public:
        /** Optional element 'tds:SetSystemDateAndTime' of XML schema type 'tds:SetSystemDateAndTime' */
        _tds__SetSystemDateAndTime *tds__SetSystemDateAndTime;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetSystemDateAndTime */
        long soap_type() const { return SOAP_TYPE___tds__SetSystemDateAndTime; }
        /** Constructor with member initializations */
        __tds__SetSystemDateAndTime() : tds__SetSystemDateAndTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:12910 */
#ifndef SOAP_TYPE___tds__GetSystemDateAndTime
#define SOAP_TYPE___tds__GetSystemDateAndTime (651)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemDateAndTime {
      public:
        /** Optional element 'tds:GetSystemDateAndTime' of XML schema type 'tds:GetSystemDateAndTime' */
        _tds__GetSystemDateAndTime *tds__GetSystemDateAndTime;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemDateAndTime */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemDateAndTime; }
        /** Constructor with member initializations */
        __tds__GetSystemDateAndTime() : tds__GetSystemDateAndTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:12978 */
#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault
#define SOAP_TYPE___tds__SetSystemFactoryDefault (655)
/* Wrapper: */
struct SOAP_CMAC __tds__SetSystemFactoryDefault {
      public:
        /** Optional element 'tds:SetSystemFactoryDefault' of XML schema type 'tds:SetSystemFactoryDefault' */
        _tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetSystemFactoryDefault */
        long soap_type() const { return SOAP_TYPE___tds__SetSystemFactoryDefault; }
        /** Constructor with member initializations */
        __tds__SetSystemFactoryDefault() : tds__SetSystemFactoryDefault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate___tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13052 */
#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware
#define SOAP_TYPE___tds__UpgradeSystemFirmware (659)
/* Wrapper: */
struct SOAP_CMAC __tds__UpgradeSystemFirmware {
      public:
        /** Optional element 'tds:UpgradeSystemFirmware' of XML schema type 'tds:UpgradeSystemFirmware' */
        _tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware;
      public:
        /** Return unique type id SOAP_TYPE___tds__UpgradeSystemFirmware */
        long soap_type() const { return SOAP_TYPE___tds__UpgradeSystemFirmware; }
        /** Constructor with member initializations */
        __tds__UpgradeSystemFirmware() : tds__UpgradeSystemFirmware() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate___tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13120 */
#ifndef SOAP_TYPE___tds__SystemReboot
#define SOAP_TYPE___tds__SystemReboot (663)
/* Wrapper: */
struct SOAP_CMAC __tds__SystemReboot {
      public:
        /** Optional element 'tds:SystemReboot' of XML schema type 'tds:SystemReboot' */
        _tds__SystemReboot *tds__SystemReboot;
      public:
        /** Return unique type id SOAP_TYPE___tds__SystemReboot */
        long soap_type() const { return SOAP_TYPE___tds__SystemReboot; }
        /** Constructor with member initializations */
        __tds__SystemReboot() : tds__SystemReboot() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SystemReboot * SOAP_FMAC2 soap_instantiate___tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13196 */
#ifndef SOAP_TYPE___tds__RestoreSystem
#define SOAP_TYPE___tds__RestoreSystem (667)
/* Wrapper: */
struct SOAP_CMAC __tds__RestoreSystem {
      public:
        /** Optional element 'tds:RestoreSystem' of XML schema type 'tds:RestoreSystem' */
        _tds__RestoreSystem *tds__RestoreSystem;
      public:
        /** Return unique type id SOAP_TYPE___tds__RestoreSystem */
        long soap_type() const { return SOAP_TYPE___tds__RestoreSystem; }
        /** Constructor with member initializations */
        __tds__RestoreSystem() : tds__RestoreSystem() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__RestoreSystem * SOAP_FMAC2 soap_instantiate___tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13271 */
#ifndef SOAP_TYPE___tds__GetSystemBackup
#define SOAP_TYPE___tds__GetSystemBackup (671)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemBackup {
      public:
        /** Optional element 'tds:GetSystemBackup' of XML schema type 'tds:GetSystemBackup' */
        _tds__GetSystemBackup *tds__GetSystemBackup;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemBackup */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemBackup; }
        /** Constructor with member initializations */
        __tds__GetSystemBackup() : tds__GetSystemBackup() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate___tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13340 */
#ifndef SOAP_TYPE___tds__GetSystemLog
#define SOAP_TYPE___tds__GetSystemLog (675)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemLog {
      public:
        /** Optional element 'tds:GetSystemLog' of XML schema type 'tds:GetSystemLog' */
        _tds__GetSystemLog *tds__GetSystemLog;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemLog */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemLog; }
        /** Constructor with member initializations */
        __tds__GetSystemLog() : tds__GetSystemLog() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemLog * SOAP_FMAC2 soap_instantiate___tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13408 */
#ifndef SOAP_TYPE___tds__GetSystemSupportInformation
#define SOAP_TYPE___tds__GetSystemSupportInformation (679)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemSupportInformation {
      public:
        /** Optional element 'tds:GetSystemSupportInformation' of XML schema type 'tds:GetSystemSupportInformation' */
        _tds__GetSystemSupportInformation *tds__GetSystemSupportInformation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemSupportInformation */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemSupportInformation; }
        /** Constructor with member initializations */
        __tds__GetSystemSupportInformation() : tds__GetSystemSupportInformation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate___tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13491 */
#ifndef SOAP_TYPE___tds__GetScopes
#define SOAP_TYPE___tds__GetScopes (683)
/* Wrapper: */
struct SOAP_CMAC __tds__GetScopes {
      public:
        /** Optional element 'tds:GetScopes' of XML schema type 'tds:GetScopes' */
        _tds__GetScopes *tds__GetScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetScopes */
        long soap_type() const { return SOAP_TYPE___tds__GetScopes; }
        /** Constructor with member initializations */
        __tds__GetScopes() : tds__GetScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetScopes * SOAP_FMAC2 soap_instantiate___tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13567 */
#ifndef SOAP_TYPE___tds__SetScopes
#define SOAP_TYPE___tds__SetScopes (687)
/* Wrapper: */
struct SOAP_CMAC __tds__SetScopes {
      public:
        /** Optional element 'tds:SetScopes' of XML schema type 'tds:SetScopes' */
        _tds__SetScopes *tds__SetScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetScopes */
        long soap_type() const { return SOAP_TYPE___tds__SetScopes; }
        /** Constructor with member initializations */
        __tds__SetScopes() : tds__SetScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetScopes * SOAP_FMAC2 soap_instantiate___tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13639 */
#ifndef SOAP_TYPE___tds__AddScopes
#define SOAP_TYPE___tds__AddScopes (691)
/* Wrapper: */
struct SOAP_CMAC __tds__AddScopes {
      public:
        /** Optional element 'tds:AddScopes' of XML schema type 'tds:AddScopes' */
        _tds__AddScopes *tds__AddScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__AddScopes */
        long soap_type() const { return SOAP_TYPE___tds__AddScopes; }
        /** Constructor with member initializations */
        __tds__AddScopes() : tds__AddScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__AddScopes * SOAP_FMAC2 soap_instantiate___tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13713 */
#ifndef SOAP_TYPE___tds__RemoveScopes
#define SOAP_TYPE___tds__RemoveScopes (695)
/* Wrapper: */
struct SOAP_CMAC __tds__RemoveScopes {
      public:
        /** Optional element 'tds:RemoveScopes' of XML schema type 'tds:RemoveScopes' */
        _tds__RemoveScopes *tds__RemoveScopes;
      public:
        /** Return unique type id SOAP_TYPE___tds__RemoveScopes */
        long soap_type() const { return SOAP_TYPE___tds__RemoveScopes; }
        /** Constructor with member initializations */
        __tds__RemoveScopes() : tds__RemoveScopes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__RemoveScopes * SOAP_FMAC2 soap_instantiate___tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13785 */
#ifndef SOAP_TYPE___tds__GetDiscoveryMode
#define SOAP_TYPE___tds__GetDiscoveryMode (699)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDiscoveryMode {
      public:
        /** Optional element 'tds:GetDiscoveryMode' of XML schema type 'tds:GetDiscoveryMode' */
        _tds__GetDiscoveryMode *tds__GetDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__GetDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__GetDiscoveryMode() : tds__GetDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13858 */
#ifndef SOAP_TYPE___tds__SetDiscoveryMode
#define SOAP_TYPE___tds__SetDiscoveryMode (703)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDiscoveryMode {
      public:
        /** Optional element 'tds:SetDiscoveryMode' of XML schema type 'tds:SetDiscoveryMode' */
        _tds__SetDiscoveryMode *tds__SetDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__SetDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__SetDiscoveryMode() : tds__SetDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:13932 */
#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode (707)
/* Wrapper: */
struct SOAP_CMAC __tds__GetRemoteDiscoveryMode {
      public:
        /** Optional element 'tds:GetRemoteDiscoveryMode' of XML schema type 'tds:GetRemoteDiscoveryMode' */
        _tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetRemoteDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__GetRemoteDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__GetRemoteDiscoveryMode() : tds__GetRemoteDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14006 */
#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode (711)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRemoteDiscoveryMode {
      public:
        /** Optional element 'tds:SetRemoteDiscoveryMode' of XML schema type 'tds:SetRemoteDiscoveryMode' */
        _tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRemoteDiscoveryMode */
        long soap_type() const { return SOAP_TYPE___tds__SetRemoteDiscoveryMode; }
        /** Constructor with member initializations */
        __tds__SetRemoteDiscoveryMode() : tds__SetRemoteDiscoveryMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14078 */
#ifndef SOAP_TYPE___tds__GetDPAddresses
#define SOAP_TYPE___tds__GetDPAddresses (715)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDPAddresses {
      public:
        /** Optional element 'tds:GetDPAddresses' of XML schema type 'tds:GetDPAddresses' */
        _tds__GetDPAddresses *tds__GetDPAddresses;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDPAddresses */
        long soap_type() const { return SOAP_TYPE___tds__GetDPAddresses; }
        /** Constructor with member initializations */
        __tds__GetDPAddresses() : tds__GetDPAddresses() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14152 */
#ifndef SOAP_TYPE___tds__GetEndpointReference
#define SOAP_TYPE___tds__GetEndpointReference (719)
/* Wrapper: */
struct SOAP_CMAC __tds__GetEndpointReference {
      public:
        /** Optional element 'tds:GetEndpointReference' of XML schema type 'tds:GetEndpointReference' */
        _tds__GetEndpointReference *tds__GetEndpointReference;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetEndpointReference */
        long soap_type() const { return SOAP_TYPE___tds__GetEndpointReference; }
        /** Constructor with member initializations */
        __tds__GetEndpointReference() : tds__GetEndpointReference() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate___tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14226 */
#ifndef SOAP_TYPE___tds__GetRemoteUser
#define SOAP_TYPE___tds__GetRemoteUser (723)
/* Wrapper: */
struct SOAP_CMAC __tds__GetRemoteUser {
      public:
        /** Optional element 'tds:GetRemoteUser' of XML schema type 'tds:GetRemoteUser' */
        _tds__GetRemoteUser *tds__GetRemoteUser;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetRemoteUser */
        long soap_type() const { return SOAP_TYPE___tds__GetRemoteUser; }
        /** Constructor with member initializations */
        __tds__GetRemoteUser() : tds__GetRemoteUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14305 */
#ifndef SOAP_TYPE___tds__SetRemoteUser
#define SOAP_TYPE___tds__SetRemoteUser (727)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRemoteUser {
      public:
        /** Optional element 'tds:SetRemoteUser' of XML schema type 'tds:SetRemoteUser' */
        _tds__SetRemoteUser *tds__SetRemoteUser;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRemoteUser */
        long soap_type() const { return SOAP_TYPE___tds__SetRemoteUser; }
        /** Constructor with member initializations */
        __tds__SetRemoteUser() : tds__SetRemoteUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14377 */
#ifndef SOAP_TYPE___tds__GetUsers
#define SOAP_TYPE___tds__GetUsers (731)
/* Wrapper: */
struct SOAP_CMAC __tds__GetUsers {
      public:
        /** Optional element 'tds:GetUsers' of XML schema type 'tds:GetUsers' */
        _tds__GetUsers *tds__GetUsers;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetUsers */
        long soap_type() const { return SOAP_TYPE___tds__GetUsers; }
        /** Constructor with member initializations */
        __tds__GetUsers() : tds__GetUsers() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetUsers * SOAP_FMAC2 soap_instantiate___tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14457 */
#ifndef SOAP_TYPE___tds__CreateUsers
#define SOAP_TYPE___tds__CreateUsers (735)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateUsers {
      public:
        /** Optional element 'tds:CreateUsers' of XML schema type 'tds:CreateUsers' */
        _tds__CreateUsers *tds__CreateUsers;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateUsers */
        long soap_type() const { return SOAP_TYPE___tds__CreateUsers; }
        /** Constructor with member initializations */
        __tds__CreateUsers() : tds__CreateUsers() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateUsers * SOAP_FMAC2 soap_instantiate___tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14532 */
#ifndef SOAP_TYPE___tds__DeleteUsers
#define SOAP_TYPE___tds__DeleteUsers (739)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteUsers {
      public:
        /** Optional element 'tds:DeleteUsers' of XML schema type 'tds:DeleteUsers' */
        _tds__DeleteUsers *tds__DeleteUsers;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteUsers */
        long soap_type() const { return SOAP_TYPE___tds__DeleteUsers; }
        /** Constructor with member initializations */
        __tds__DeleteUsers() : tds__DeleteUsers() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteUsers * SOAP_FMAC2 soap_instantiate___tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14605 */
#ifndef SOAP_TYPE___tds__SetUser
#define SOAP_TYPE___tds__SetUser (743)
/* Wrapper: */
struct SOAP_CMAC __tds__SetUser {
      public:
        /** Optional element 'tds:SetUser' of XML schema type 'tds:SetUser' */
        _tds__SetUser *tds__SetUser;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetUser */
        long soap_type() const { return SOAP_TYPE___tds__SetUser; }
        /** Constructor with member initializations */
        __tds__SetUser() : tds__SetUser() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetUser * SOAP_FMAC2 soap_instantiate___tds__SetUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14674 */
#ifndef SOAP_TYPE___tds__GetWsdlUrl
#define SOAP_TYPE___tds__GetWsdlUrl (747)
/* Wrapper: */
struct SOAP_CMAC __tds__GetWsdlUrl {
      public:
        /** Optional element 'tds:GetWsdlUrl' of XML schema type 'tds:GetWsdlUrl' */
        _tds__GetWsdlUrl *tds__GetWsdlUrl;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetWsdlUrl */
        long soap_type() const { return SOAP_TYPE___tds__GetWsdlUrl; }
        /** Constructor with member initializations */
        __tds__GetWsdlUrl() : tds__GetWsdlUrl() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate___tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14743 */
#ifndef SOAP_TYPE___tds__GetPasswordComplexityOptions
#define SOAP_TYPE___tds__GetPasswordComplexityOptions (751)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPasswordComplexityOptions {
      public:
        /** Optional element 'tds:GetPasswordComplexityOptions' of XML schema type 'tds:GetPasswordComplexityOptions' */
        _tds__GetPasswordComplexityOptions *tds__GetPasswordComplexityOptions;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPasswordComplexityOptions */
        long soap_type() const { return SOAP_TYPE___tds__GetPasswordComplexityOptions; }
        /** Constructor with member initializations */
        __tds__GetPasswordComplexityOptions() : tds__GetPasswordComplexityOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPasswordComplexityOptions * SOAP_FMAC2 soap_instantiate___tds__GetPasswordComplexityOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14811 */
#ifndef SOAP_TYPE___tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE___tds__GetPasswordComplexityConfiguration (755)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPasswordComplexityConfiguration {
      public:
        /** Optional element 'tds:GetPasswordComplexityConfiguration' of XML schema type 'tds:GetPasswordComplexityConfiguration' */
        _tds__GetPasswordComplexityConfiguration *tds__GetPasswordComplexityConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPasswordComplexityConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetPasswordComplexityConfiguration; }
        /** Constructor with member initializations */
        __tds__GetPasswordComplexityConfiguration() : tds__GetPasswordComplexityConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14879 */
#ifndef SOAP_TYPE___tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE___tds__SetPasswordComplexityConfiguration (759)
/* Wrapper: */
struct SOAP_CMAC __tds__SetPasswordComplexityConfiguration {
      public:
        /** Optional element 'tds:SetPasswordComplexityConfiguration' of XML schema type 'tds:SetPasswordComplexityConfiguration' */
        _tds__SetPasswordComplexityConfiguration *tds__SetPasswordComplexityConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetPasswordComplexityConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetPasswordComplexityConfiguration; }
        /** Constructor with member initializations */
        __tds__SetPasswordComplexityConfiguration() : tds__SetPasswordComplexityConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:14947 */
#ifndef SOAP_TYPE___tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE___tds__GetPasswordHistoryConfiguration (763)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPasswordHistoryConfiguration {
      public:
        /** Optional element 'tds:GetPasswordHistoryConfiguration' of XML schema type 'tds:GetPasswordHistoryConfiguration' */
        _tds__GetPasswordHistoryConfiguration *tds__GetPasswordHistoryConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPasswordHistoryConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetPasswordHistoryConfiguration; }
        /** Constructor with member initializations */
        __tds__GetPasswordHistoryConfiguration() : tds__GetPasswordHistoryConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15015 */
#ifndef SOAP_TYPE___tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE___tds__SetPasswordHistoryConfiguration (767)
/* Wrapper: */
struct SOAP_CMAC __tds__SetPasswordHistoryConfiguration {
      public:
        /** Optional element 'tds:SetPasswordHistoryConfiguration' of XML schema type 'tds:SetPasswordHistoryConfiguration' */
        _tds__SetPasswordHistoryConfiguration *tds__SetPasswordHistoryConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetPasswordHistoryConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetPasswordHistoryConfiguration; }
        /** Constructor with member initializations */
        __tds__SetPasswordHistoryConfiguration() : tds__SetPasswordHistoryConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15084 */
#ifndef SOAP_TYPE___tds__GetAuthFailureWarningOptions
#define SOAP_TYPE___tds__GetAuthFailureWarningOptions (771)
/* Wrapper: */
struct SOAP_CMAC __tds__GetAuthFailureWarningOptions {
      public:
        /** Optional element 'tds:GetAuthFailureWarningOptions' of XML schema type 'tds:GetAuthFailureWarningOptions' */
        _tds__GetAuthFailureWarningOptions *tds__GetAuthFailureWarningOptions;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetAuthFailureWarningOptions */
        long soap_type() const { return SOAP_TYPE___tds__GetAuthFailureWarningOptions; }
        /** Constructor with member initializations */
        __tds__GetAuthFailureWarningOptions() : tds__GetAuthFailureWarningOptions() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetAuthFailureWarningOptions * SOAP_FMAC2 soap_instantiate___tds__GetAuthFailureWarningOptions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15153 */
#ifndef SOAP_TYPE___tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE___tds__GetAuthFailureWarningConfiguration (775)
/* Wrapper: */
struct SOAP_CMAC __tds__GetAuthFailureWarningConfiguration {
      public:
        /** Optional element 'tds:GetAuthFailureWarningConfiguration' of XML schema type 'tds:GetAuthFailureWarningConfiguration' */
        _tds__GetAuthFailureWarningConfiguration *tds__GetAuthFailureWarningConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetAuthFailureWarningConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetAuthFailureWarningConfiguration; }
        /** Constructor with member initializations */
        __tds__GetAuthFailureWarningConfiguration() : tds__GetAuthFailureWarningConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15221 */
#ifndef SOAP_TYPE___tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE___tds__SetAuthFailureWarningConfiguration (779)
/* Wrapper: */
struct SOAP_CMAC __tds__SetAuthFailureWarningConfiguration {
      public:
        /** Optional element 'tds:SetAuthFailureWarningConfiguration' of XML schema type 'tds:SetAuthFailureWarningConfiguration' */
        _tds__SetAuthFailureWarningConfiguration *tds__SetAuthFailureWarningConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetAuthFailureWarningConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetAuthFailureWarningConfiguration; }
        /** Constructor with member initializations */
        __tds__SetAuthFailureWarningConfiguration() : tds__SetAuthFailureWarningConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15291 */
#ifndef SOAP_TYPE___tds__GetCapabilities
#define SOAP_TYPE___tds__GetCapabilities (783)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCapabilities {
      public:
        /** Optional element 'tds:GetCapabilities' of XML schema type 'tds:GetCapabilities' */
        _tds__GetCapabilities *tds__GetCapabilities;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCapabilities */
        long soap_type() const { return SOAP_TYPE___tds__GetCapabilities; }
        /** Constructor with member initializations */
        __tds__GetCapabilities() : tds__GetCapabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15364 */
#ifndef SOAP_TYPE___tds__SetDPAddresses
#define SOAP_TYPE___tds__SetDPAddresses (787)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDPAddresses {
      public:
        /** Optional element 'tds:SetDPAddresses' of XML schema type 'tds:SetDPAddresses' */
        _tds__SetDPAddresses *tds__SetDPAddresses;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDPAddresses */
        long soap_type() const { return SOAP_TYPE___tds__SetDPAddresses; }
        /** Constructor with member initializations */
        __tds__SetDPAddresses() : tds__SetDPAddresses() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15435 */
#ifndef SOAP_TYPE___tds__GetHostname
#define SOAP_TYPE___tds__GetHostname (791)
/* Wrapper: */
struct SOAP_CMAC __tds__GetHostname {
      public:
        /** Optional element 'tds:GetHostname' of XML schema type 'tds:GetHostname' */
        _tds__GetHostname *tds__GetHostname;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetHostname */
        long soap_type() const { return SOAP_TYPE___tds__GetHostname; }
        /** Constructor with member initializations */
        __tds__GetHostname() : tds__GetHostname() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetHostname * SOAP_FMAC2 soap_instantiate___tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15510 */
#ifndef SOAP_TYPE___tds__SetHostname
#define SOAP_TYPE___tds__SetHostname (795)
/* Wrapper: */
struct SOAP_CMAC __tds__SetHostname {
      public:
        /** Optional element 'tds:SetHostname' of XML schema type 'tds:SetHostname' */
        _tds__SetHostname *tds__SetHostname;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetHostname */
        long soap_type() const { return SOAP_TYPE___tds__SetHostname; }
        /** Constructor with member initializations */
        __tds__SetHostname() : tds__SetHostname() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetHostname * SOAP_FMAC2 soap_instantiate___tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15578 */
#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP
#define SOAP_TYPE___tds__SetHostnameFromDHCP (799)
/* Wrapper: */
struct SOAP_CMAC __tds__SetHostnameFromDHCP {
      public:
        /** Optional element 'tds:SetHostnameFromDHCP' of XML schema type 'tds:SetHostnameFromDHCP' */
        _tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetHostnameFromDHCP */
        long soap_type() const { return SOAP_TYPE___tds__SetHostnameFromDHCP; }
        /** Constructor with member initializations */
        __tds__SetHostnameFromDHCP() : tds__SetHostnameFromDHCP() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate___tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15648 */
#ifndef SOAP_TYPE___tds__GetDNS
#define SOAP_TYPE___tds__GetDNS (803)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDNS {
      public:
        /** Optional element 'tds:GetDNS' of XML schema type 'tds:GetDNS' */
        _tds__GetDNS *tds__GetDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDNS */
        long soap_type() const { return SOAP_TYPE___tds__GetDNS; }
        /** Constructor with member initializations */
        __tds__GetDNS() : tds__GetDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDNS * SOAP_FMAC2 soap_instantiate___tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15718 */
#ifndef SOAP_TYPE___tds__SetDNS
#define SOAP_TYPE___tds__SetDNS (807)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDNS {
      public:
        /** Optional element 'tds:SetDNS' of XML schema type 'tds:SetDNS' */
        _tds__SetDNS *tds__SetDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDNS */
        long soap_type() const { return SOAP_TYPE___tds__SetDNS; }
        /** Constructor with member initializations */
        __tds__SetDNS() : tds__SetDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDNS * SOAP_FMAC2 soap_instantiate___tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15789 */
#ifndef SOAP_TYPE___tds__GetNTP
#define SOAP_TYPE___tds__GetNTP (811)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNTP {
      public:
        /** Optional element 'tds:GetNTP' of XML schema type 'tds:GetNTP' */
        _tds__GetNTP *tds__GetNTP;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNTP */
        long soap_type() const { return SOAP_TYPE___tds__GetNTP; }
        /** Constructor with member initializations */
        __tds__GetNTP() : tds__GetNTP() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNTP * SOAP_FMAC2 soap_instantiate___tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15867 */
#ifndef SOAP_TYPE___tds__SetNTP
#define SOAP_TYPE___tds__SetNTP (815)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNTP {
      public:
        /** Optional element 'tds:SetNTP' of XML schema type 'tds:SetNTP' */
        _tds__SetNTP *tds__SetNTP;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNTP */
        long soap_type() const { return SOAP_TYPE___tds__SetNTP; }
        /** Constructor with member initializations */
        __tds__SetNTP() : tds__SetNTP() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNTP * SOAP_FMAC2 soap_instantiate___tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:15939 */
#ifndef SOAP_TYPE___tds__GetDynamicDNS
#define SOAP_TYPE___tds__GetDynamicDNS (819)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDynamicDNS {
      public:
        /** Optional element 'tds:GetDynamicDNS' of XML schema type 'tds:GetDynamicDNS' */
        _tds__GetDynamicDNS *tds__GetDynamicDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDynamicDNS */
        long soap_type() const { return SOAP_TYPE___tds__GetDynamicDNS; }
        /** Constructor with member initializations */
        __tds__GetDynamicDNS() : tds__GetDynamicDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16011 */
#ifndef SOAP_TYPE___tds__SetDynamicDNS
#define SOAP_TYPE___tds__SetDynamicDNS (823)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDynamicDNS {
      public:
        /** Optional element 'tds:SetDynamicDNS' of XML schema type 'tds:SetDynamicDNS' */
        _tds__SetDynamicDNS *tds__SetDynamicDNS;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDynamicDNS */
        long soap_type() const { return SOAP_TYPE___tds__SetDynamicDNS; }
        /** Constructor with member initializations */
        __tds__SetDynamicDNS() : tds__SetDynamicDNS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16083 */
#ifndef SOAP_TYPE___tds__GetNetworkInterfaces
#define SOAP_TYPE___tds__GetNetworkInterfaces (827)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNetworkInterfaces {
      public:
        /** Optional element 'tds:GetNetworkInterfaces' of XML schema type 'tds:GetNetworkInterfaces' */
        _tds__GetNetworkInterfaces *tds__GetNetworkInterfaces;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNetworkInterfaces */
        long soap_type() const { return SOAP_TYPE___tds__GetNetworkInterfaces; }
        /** Constructor with member initializations */
        __tds__GetNetworkInterfaces() : tds__GetNetworkInterfaces() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16160 */
#ifndef SOAP_TYPE___tds__SetNetworkInterfaces
#define SOAP_TYPE___tds__SetNetworkInterfaces (831)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNetworkInterfaces {
      public:
        /** Optional element 'tds:SetNetworkInterfaces' of XML schema type 'tds:SetNetworkInterfaces' */
        _tds__SetNetworkInterfaces *tds__SetNetworkInterfaces;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNetworkInterfaces */
        long soap_type() const { return SOAP_TYPE___tds__SetNetworkInterfaces; }
        /** Constructor with member initializations */
        __tds__SetNetworkInterfaces() : tds__SetNetworkInterfaces() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16231 */
#ifndef SOAP_TYPE___tds__GetNetworkProtocols
#define SOAP_TYPE___tds__GetNetworkProtocols (835)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNetworkProtocols {
      public:
        /** Optional element 'tds:GetNetworkProtocols' of XML schema type 'tds:GetNetworkProtocols' */
        _tds__GetNetworkProtocols *tds__GetNetworkProtocols;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNetworkProtocols */
        long soap_type() const { return SOAP_TYPE___tds__GetNetworkProtocols; }
        /** Constructor with member initializations */
        __tds__GetNetworkProtocols() : tds__GetNetworkProtocols() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16302 */
#ifndef SOAP_TYPE___tds__SetNetworkProtocols
#define SOAP_TYPE___tds__SetNetworkProtocols (839)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNetworkProtocols {
      public:
        /** Optional element 'tds:SetNetworkProtocols' of XML schema type 'tds:SetNetworkProtocols' */
        _tds__SetNetworkProtocols *tds__SetNetworkProtocols;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNetworkProtocols */
        long soap_type() const { return SOAP_TYPE___tds__SetNetworkProtocols; }
        /** Constructor with member initializations */
        __tds__SetNetworkProtocols() : tds__SetNetworkProtocols() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16373 */
#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway
#define SOAP_TYPE___tds__GetNetworkDefaultGateway (843)
/* Wrapper: */
struct SOAP_CMAC __tds__GetNetworkDefaultGateway {
      public:
        /** Optional element 'tds:GetNetworkDefaultGateway' of XML schema type 'tds:GetNetworkDefaultGateway' */
        _tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetNetworkDefaultGateway */
        long soap_type() const { return SOAP_TYPE___tds__GetNetworkDefaultGateway; }
        /** Constructor with member initializations */
        __tds__GetNetworkDefaultGateway() : tds__GetNetworkDefaultGateway() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16443 */
#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway
#define SOAP_TYPE___tds__SetNetworkDefaultGateway (847)
/* Wrapper: */
struct SOAP_CMAC __tds__SetNetworkDefaultGateway {
      public:
        /** Optional element 'tds:SetNetworkDefaultGateway' of XML schema type 'tds:SetNetworkDefaultGateway' */
        _tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetNetworkDefaultGateway */
        long soap_type() const { return SOAP_TYPE___tds__SetNetworkDefaultGateway; }
        /** Constructor with member initializations */
        __tds__SetNetworkDefaultGateway() : tds__SetNetworkDefaultGateway() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16518 */
#ifndef SOAP_TYPE___tds__GetZeroConfiguration
#define SOAP_TYPE___tds__GetZeroConfiguration (851)
/* Wrapper: */
struct SOAP_CMAC __tds__GetZeroConfiguration {
      public:
        /** Optional element 'tds:GetZeroConfiguration' of XML schema type 'tds:GetZeroConfiguration' */
        _tds__GetZeroConfiguration *tds__GetZeroConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetZeroConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetZeroConfiguration; }
        /** Constructor with member initializations */
        __tds__GetZeroConfiguration() : tds__GetZeroConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16587 */
#ifndef SOAP_TYPE___tds__SetZeroConfiguration
#define SOAP_TYPE___tds__SetZeroConfiguration (855)
/* Wrapper: */
struct SOAP_CMAC __tds__SetZeroConfiguration {
      public:
        /** Optional element 'tds:SetZeroConfiguration' of XML schema type 'tds:SetZeroConfiguration' */
        _tds__SetZeroConfiguration *tds__SetZeroConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetZeroConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetZeroConfiguration; }
        /** Constructor with member initializations */
        __tds__SetZeroConfiguration() : tds__SetZeroConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16659 */
#ifndef SOAP_TYPE___tds__GetIPAddressFilter
#define SOAP_TYPE___tds__GetIPAddressFilter (859)
/* Wrapper: */
struct SOAP_CMAC __tds__GetIPAddressFilter {
      public:
        /** Optional element 'tds:GetIPAddressFilter' of XML schema type 'tds:GetIPAddressFilter' */
        _tds__GetIPAddressFilter *tds__GetIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__GetIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__GetIPAddressFilter() : tds__GetIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16733 */
#ifndef SOAP_TYPE___tds__SetIPAddressFilter
#define SOAP_TYPE___tds__SetIPAddressFilter (863)
/* Wrapper: */
struct SOAP_CMAC __tds__SetIPAddressFilter {
      public:
        /** Optional element 'tds:SetIPAddressFilter' of XML schema type 'tds:SetIPAddressFilter' */
        _tds__SetIPAddressFilter *tds__SetIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__SetIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__SetIPAddressFilter() : tds__SetIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16806 */
#ifndef SOAP_TYPE___tds__AddIPAddressFilter
#define SOAP_TYPE___tds__AddIPAddressFilter (867)
/* Wrapper: */
struct SOAP_CMAC __tds__AddIPAddressFilter {
      public:
        /** Optional element 'tds:AddIPAddressFilter' of XML schema type 'tds:AddIPAddressFilter' */
        _tds__AddIPAddressFilter *tds__AddIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__AddIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__AddIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__AddIPAddressFilter() : tds__AddIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16879 */
#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter
#define SOAP_TYPE___tds__RemoveIPAddressFilter (871)
/* Wrapper: */
struct SOAP_CMAC __tds__RemoveIPAddressFilter {
      public:
        /** Optional element 'tds:RemoveIPAddressFilter' of XML schema type 'tds:RemoveIPAddressFilter' */
        _tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter;
      public:
        /** Return unique type id SOAP_TYPE___tds__RemoveIPAddressFilter */
        long soap_type() const { return SOAP_TYPE___tds__RemoveIPAddressFilter; }
        /** Constructor with member initializations */
        __tds__RemoveIPAddressFilter() : tds__RemoveIPAddressFilter() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:16961 */
#ifndef SOAP_TYPE___tds__GetAccessPolicy
#define SOAP_TYPE___tds__GetAccessPolicy (875)
/* Wrapper: */
struct SOAP_CMAC __tds__GetAccessPolicy {
      public:
        /** Optional element 'tds:GetAccessPolicy' of XML schema type 'tds:GetAccessPolicy' */
        _tds__GetAccessPolicy *tds__GetAccessPolicy;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetAccessPolicy */
        long soap_type() const { return SOAP_TYPE___tds__GetAccessPolicy; }
        /** Constructor with member initializations */
        __tds__GetAccessPolicy() : tds__GetAccessPolicy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17034 */
#ifndef SOAP_TYPE___tds__SetAccessPolicy
#define SOAP_TYPE___tds__SetAccessPolicy (879)
/* Wrapper: */
struct SOAP_CMAC __tds__SetAccessPolicy {
      public:
        /** Optional element 'tds:SetAccessPolicy' of XML schema type 'tds:SetAccessPolicy' */
        _tds__SetAccessPolicy *tds__SetAccessPolicy;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetAccessPolicy */
        long soap_type() const { return SOAP_TYPE___tds__SetAccessPolicy; }
        /** Constructor with member initializations */
        __tds__SetAccessPolicy() : tds__SetAccessPolicy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17101 */
#ifndef SOAP_TYPE___tds__CreateCertificate
#define SOAP_TYPE___tds__CreateCertificate (883)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateCertificate {
      public:
        /** Optional element 'tds:CreateCertificate' of XML schema type 'tds:CreateCertificate' */
        _tds__CreateCertificate *tds__CreateCertificate;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateCertificate */
        long soap_type() const { return SOAP_TYPE___tds__CreateCertificate; }
        /** Constructor with member initializations */
        __tds__CreateCertificate() : tds__CreateCertificate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateCertificate * SOAP_FMAC2 soap_instantiate___tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17168 */
#ifndef SOAP_TYPE___tds__GetCertificates
#define SOAP_TYPE___tds__GetCertificates (887)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCertificates {
      public:
        /** Optional element 'tds:GetCertificates' of XML schema type 'tds:GetCertificates' */
        _tds__GetCertificates *tds__GetCertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCertificates */
        long soap_type() const { return SOAP_TYPE___tds__GetCertificates; }
        /** Constructor with member initializations */
        __tds__GetCertificates() : tds__GetCertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCertificates * SOAP_FMAC2 soap_instantiate___tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17235 */
#ifndef SOAP_TYPE___tds__GetCertificatesStatus
#define SOAP_TYPE___tds__GetCertificatesStatus (891)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCertificatesStatus {
      public:
        /** Optional element 'tds:GetCertificatesStatus' of XML schema type 'tds:GetCertificatesStatus' */
        _tds__GetCertificatesStatus *tds__GetCertificatesStatus;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCertificatesStatus */
        long soap_type() const { return SOAP_TYPE___tds__GetCertificatesStatus; }
        /** Constructor with member initializations */
        __tds__GetCertificatesStatus() : tds__GetCertificatesStatus() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17302 */
#ifndef SOAP_TYPE___tds__SetCertificatesStatus
#define SOAP_TYPE___tds__SetCertificatesStatus (895)
/* Wrapper: */
struct SOAP_CMAC __tds__SetCertificatesStatus {
      public:
        /** Optional element 'tds:SetCertificatesStatus' of XML schema type 'tds:SetCertificatesStatus' */
        _tds__SetCertificatesStatus *tds__SetCertificatesStatus;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetCertificatesStatus */
        long soap_type() const { return SOAP_TYPE___tds__SetCertificatesStatus; }
        /** Constructor with member initializations */
        __tds__SetCertificatesStatus() : tds__SetCertificatesStatus() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17369 */
#ifndef SOAP_TYPE___tds__DeleteCertificates
#define SOAP_TYPE___tds__DeleteCertificates (899)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteCertificates {
      public:
        /** Optional element 'tds:DeleteCertificates' of XML schema type 'tds:DeleteCertificates' */
        _tds__DeleteCertificates *tds__DeleteCertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteCertificates */
        long soap_type() const { return SOAP_TYPE___tds__DeleteCertificates; }
        /** Constructor with member initializations */
        __tds__DeleteCertificates() : tds__DeleteCertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate___tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17436 */
#ifndef SOAP_TYPE___tds__GetPkcs10Request
#define SOAP_TYPE___tds__GetPkcs10Request (903)
/* Wrapper: */
struct SOAP_CMAC __tds__GetPkcs10Request {
      public:
        /** Optional element 'tds:GetPkcs10Request' of XML schema type 'tds:GetPkcs10Request' */
        _tds__GetPkcs10Request *tds__GetPkcs10Request;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetPkcs10Request */
        long soap_type() const { return SOAP_TYPE___tds__GetPkcs10Request; }
        /** Constructor with member initializations */
        __tds__GetPkcs10Request() : tds__GetPkcs10Request() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate___tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17503 */
#ifndef SOAP_TYPE___tds__LoadCertificates
#define SOAP_TYPE___tds__LoadCertificates (907)
/* Wrapper: */
struct SOAP_CMAC __tds__LoadCertificates {
      public:
        /** Optional element 'tds:LoadCertificates' of XML schema type 'tds:LoadCertificates' */
        _tds__LoadCertificates *tds__LoadCertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__LoadCertificates */
        long soap_type() const { return SOAP_TYPE___tds__LoadCertificates; }
        /** Constructor with member initializations */
        __tds__LoadCertificates() : tds__LoadCertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__LoadCertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17570 */
#ifndef SOAP_TYPE___tds__GetClientCertificateMode
#define SOAP_TYPE___tds__GetClientCertificateMode (911)
/* Wrapper: */
struct SOAP_CMAC __tds__GetClientCertificateMode {
      public:
        /** Optional element 'tds:GetClientCertificateMode' of XML schema type 'tds:GetClientCertificateMode' */
        _tds__GetClientCertificateMode *tds__GetClientCertificateMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetClientCertificateMode */
        long soap_type() const { return SOAP_TYPE___tds__GetClientCertificateMode; }
        /** Constructor with member initializations */
        __tds__GetClientCertificateMode() : tds__GetClientCertificateMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17637 */
#ifndef SOAP_TYPE___tds__SetClientCertificateMode
#define SOAP_TYPE___tds__SetClientCertificateMode (915)
/* Wrapper: */
struct SOAP_CMAC __tds__SetClientCertificateMode {
      public:
        /** Optional element 'tds:SetClientCertificateMode' of XML schema type 'tds:SetClientCertificateMode' */
        _tds__SetClientCertificateMode *tds__SetClientCertificateMode;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetClientCertificateMode */
        long soap_type() const { return SOAP_TYPE___tds__SetClientCertificateMode; }
        /** Constructor with member initializations */
        __tds__SetClientCertificateMode() : tds__SetClientCertificateMode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17707 */
#ifndef SOAP_TYPE___tds__GetRelayOutputs
#define SOAP_TYPE___tds__GetRelayOutputs (919)
/* Wrapper: */
struct SOAP_CMAC __tds__GetRelayOutputs {
      public:
        /** Optional element 'tds:GetRelayOutputs' of XML schema type 'tds:GetRelayOutputs' */
        _tds__GetRelayOutputs *tds__GetRelayOutputs;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetRelayOutputs */
        long soap_type() const { return SOAP_TYPE___tds__GetRelayOutputs; }
        /** Constructor with member initializations */
        __tds__GetRelayOutputs() : tds__GetRelayOutputs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate___tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17777 */
#ifndef SOAP_TYPE___tds__SetRelayOutputSettings
#define SOAP_TYPE___tds__SetRelayOutputSettings (923)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRelayOutputSettings {
      public:
        /** Optional element 'tds:SetRelayOutputSettings' of XML schema type 'tds:SetRelayOutputSettings' */
        _tds__SetRelayOutputSettings *tds__SetRelayOutputSettings;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRelayOutputSettings */
        long soap_type() const { return SOAP_TYPE___tds__SetRelayOutputSettings; }
        /** Constructor with member initializations */
        __tds__SetRelayOutputSettings() : tds__SetRelayOutputSettings() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17847 */
#ifndef SOAP_TYPE___tds__SetRelayOutputState
#define SOAP_TYPE___tds__SetRelayOutputState (927)
/* Wrapper: */
struct SOAP_CMAC __tds__SetRelayOutputState {
      public:
        /** Optional element 'tds:SetRelayOutputState' of XML schema type 'tds:SetRelayOutputState' */
        _tds__SetRelayOutputState *tds__SetRelayOutputState;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetRelayOutputState */
        long soap_type() const { return SOAP_TYPE___tds__SetRelayOutputState; }
        /** Constructor with member initializations */
        __tds__SetRelayOutputState() : tds__SetRelayOutputState() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:17946 */
#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand
#define SOAP_TYPE___tds__SendAuxiliaryCommand (931)
/* Wrapper: */
struct SOAP_CMAC __tds__SendAuxiliaryCommand {
      public:
        /** Optional element 'tds:SendAuxiliaryCommand' of XML schema type 'tds:SendAuxiliaryCommand' */
        _tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand;
      public:
        /** Return unique type id SOAP_TYPE___tds__SendAuxiliaryCommand */
        long soap_type() const { return SOAP_TYPE___tds__SendAuxiliaryCommand; }
        /** Constructor with member initializations */
        __tds__SendAuxiliaryCommand() : tds__SendAuxiliaryCommand() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18013 */
#ifndef SOAP_TYPE___tds__GetCACertificates
#define SOAP_TYPE___tds__GetCACertificates (935)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCACertificates {
      public:
        /** Optional element 'tds:GetCACertificates' of XML schema type 'tds:GetCACertificates' */
        _tds__GetCACertificates *tds__GetCACertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCACertificates */
        long soap_type() const { return SOAP_TYPE___tds__GetCACertificates; }
        /** Constructor with member initializations */
        __tds__GetCACertificates() : tds__GetCACertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCACertificates * SOAP_FMAC2 soap_instantiate___tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18080 */
#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey (939)
/* Wrapper: */
struct SOAP_CMAC __tds__LoadCertificateWithPrivateKey {
      public:
        /** Optional element 'tds:LoadCertificateWithPrivateKey' of XML schema type 'tds:LoadCertificateWithPrivateKey' */
        _tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey;
      public:
        /** Return unique type id SOAP_TYPE___tds__LoadCertificateWithPrivateKey */
        long soap_type() const { return SOAP_TYPE___tds__LoadCertificateWithPrivateKey; }
        /** Constructor with member initializations */
        __tds__LoadCertificateWithPrivateKey() : tds__LoadCertificateWithPrivateKey() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate___tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18147 */
#ifndef SOAP_TYPE___tds__GetCertificateInformation
#define SOAP_TYPE___tds__GetCertificateInformation (943)
/* Wrapper: */
struct SOAP_CMAC __tds__GetCertificateInformation {
      public:
        /** Optional element 'tds:GetCertificateInformation' of XML schema type 'tds:GetCertificateInformation' */
        _tds__GetCertificateInformation *tds__GetCertificateInformation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetCertificateInformation */
        long soap_type() const { return SOAP_TYPE___tds__GetCertificateInformation; }
        /** Constructor with member initializations */
        __tds__GetCertificateInformation() : tds__GetCertificateInformation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate___tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18214 */
#ifndef SOAP_TYPE___tds__LoadCACertificates
#define SOAP_TYPE___tds__LoadCACertificates (947)
/* Wrapper: */
struct SOAP_CMAC __tds__LoadCACertificates {
      public:
        /** Optional element 'tds:LoadCACertificates' of XML schema type 'tds:LoadCACertificates' */
        _tds__LoadCACertificates *tds__LoadCACertificates;
      public:
        /** Return unique type id SOAP_TYPE___tds__LoadCACertificates */
        long soap_type() const { return SOAP_TYPE___tds__LoadCACertificates; }
        /** Constructor with member initializations */
        __tds__LoadCACertificates() : tds__LoadCACertificates() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18281 */
#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration
#define SOAP_TYPE___tds__CreateDot1XConfiguration (951)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateDot1XConfiguration {
      public:
        /** Optional element 'tds:CreateDot1XConfiguration' of XML schema type 'tds:CreateDot1XConfiguration' */
        _tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__CreateDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__CreateDot1XConfiguration() : tds__CreateDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18348 */
#ifndef SOAP_TYPE___tds__SetDot1XConfiguration
#define SOAP_TYPE___tds__SetDot1XConfiguration (955)
/* Wrapper: */
struct SOAP_CMAC __tds__SetDot1XConfiguration {
      public:
        /** Optional element 'tds:SetDot1XConfiguration' of XML schema type 'tds:SetDot1XConfiguration' */
        _tds__SetDot1XConfiguration *tds__SetDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__SetDot1XConfiguration() : tds__SetDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18415 */
#ifndef SOAP_TYPE___tds__GetDot1XConfiguration
#define SOAP_TYPE___tds__GetDot1XConfiguration (959)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot1XConfiguration {
      public:
        /** Optional element 'tds:GetDot1XConfiguration' of XML schema type 'tds:GetDot1XConfiguration' */
        _tds__GetDot1XConfiguration *tds__GetDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__GetDot1XConfiguration() : tds__GetDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18482 */
#ifndef SOAP_TYPE___tds__GetDot1XConfigurations
#define SOAP_TYPE___tds__GetDot1XConfigurations (963)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot1XConfigurations {
      public:
        /** Optional element 'tds:GetDot1XConfigurations' of XML schema type 'tds:GetDot1XConfigurations' */
        _tds__GetDot1XConfigurations *tds__GetDot1XConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot1XConfigurations */
        long soap_type() const { return SOAP_TYPE___tds__GetDot1XConfigurations; }
        /** Constructor with member initializations */
        __tds__GetDot1XConfigurations() : tds__GetDot1XConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18549 */
#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration
#define SOAP_TYPE___tds__DeleteDot1XConfiguration (967)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteDot1XConfiguration {
      public:
        /** Optional element 'tds:DeleteDot1XConfiguration' of XML schema type 'tds:DeleteDot1XConfiguration' */
        _tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteDot1XConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__DeleteDot1XConfiguration; }
        /** Constructor with member initializations */
        __tds__DeleteDot1XConfiguration() : tds__DeleteDot1XConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18618 */
#ifndef SOAP_TYPE___tds__GetDot11Capabilities
#define SOAP_TYPE___tds__GetDot11Capabilities (971)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot11Capabilities {
      public:
        /** Optional element 'tds:GetDot11Capabilities' of XML schema type 'tds:GetDot11Capabilities' */
        _tds__GetDot11Capabilities *tds__GetDot11Capabilities;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot11Capabilities */
        long soap_type() const { return SOAP_TYPE___tds__GetDot11Capabilities; }
        /** Constructor with member initializations */
        __tds__GetDot11Capabilities() : tds__GetDot11Capabilities() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate___tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18688 */
#ifndef SOAP_TYPE___tds__GetDot11Status
#define SOAP_TYPE___tds__GetDot11Status (975)
/* Wrapper: */
struct SOAP_CMAC __tds__GetDot11Status {
      public:
        /** Optional element 'tds:GetDot11Status' of XML schema type 'tds:GetDot11Status' */
        _tds__GetDot11Status *tds__GetDot11Status;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetDot11Status */
        long soap_type() const { return SOAP_TYPE___tds__GetDot11Status; }
        /** Constructor with member initializations */
        __tds__GetDot11Status() : tds__GetDot11Status() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetDot11Status * SOAP_FMAC2 soap_instantiate___tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18758 */
#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks
#define SOAP_TYPE___tds__ScanAvailableDot11Networks (979)
/* Wrapper: */
struct SOAP_CMAC __tds__ScanAvailableDot11Networks {
      public:
        /** Optional element 'tds:ScanAvailableDot11Networks' of XML schema type 'tds:ScanAvailableDot11Networks' */
        _tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks;
      public:
        /** Return unique type id SOAP_TYPE___tds__ScanAvailableDot11Networks */
        long soap_type() const { return SOAP_TYPE___tds__ScanAvailableDot11Networks; }
        /** Constructor with member initializations */
        __tds__ScanAvailableDot11Networks() : tds__ScanAvailableDot11Networks() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate___tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18845 */
#ifndef SOAP_TYPE___tds__GetSystemUris
#define SOAP_TYPE___tds__GetSystemUris (983)
/* Wrapper: */
struct SOAP_CMAC __tds__GetSystemUris {
      public:
        /** Optional element 'tds:GetSystemUris' of XML schema type 'tds:GetSystemUris' */
        _tds__GetSystemUris *tds__GetSystemUris;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetSystemUris */
        long soap_type() const { return SOAP_TYPE___tds__GetSystemUris; }
        /** Constructor with member initializations */
        __tds__GetSystemUris() : tds__GetSystemUris() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetSystemUris * SOAP_FMAC2 soap_instantiate___tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:18941 */
#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade
#define SOAP_TYPE___tds__StartFirmwareUpgrade (987)
/* Wrapper: */
struct SOAP_CMAC __tds__StartFirmwareUpgrade {
      public:
        /** Optional element 'tds:StartFirmwareUpgrade' of XML schema type 'tds:StartFirmwareUpgrade' */
        _tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade;
      public:
        /** Return unique type id SOAP_TYPE___tds__StartFirmwareUpgrade */
        long soap_type() const { return SOAP_TYPE___tds__StartFirmwareUpgrade; }
        /** Constructor with member initializations */
        __tds__StartFirmwareUpgrade() : tds__StartFirmwareUpgrade() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate___tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19036 */
#ifndef SOAP_TYPE___tds__StartSystemRestore
#define SOAP_TYPE___tds__StartSystemRestore (991)
/* Wrapper: */
struct SOAP_CMAC __tds__StartSystemRestore {
      public:
        /** Optional element 'tds:StartSystemRestore' of XML schema type 'tds:StartSystemRestore' */
        _tds__StartSystemRestore *tds__StartSystemRestore;
      public:
        /** Return unique type id SOAP_TYPE___tds__StartSystemRestore */
        long soap_type() const { return SOAP_TYPE___tds__StartSystemRestore; }
        /** Constructor with member initializations */
        __tds__StartSystemRestore() : tds__StartSystemRestore() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate___tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19106 */
#ifndef SOAP_TYPE___tds__GetStorageConfigurations
#define SOAP_TYPE___tds__GetStorageConfigurations (995)
/* Wrapper: */
struct SOAP_CMAC __tds__GetStorageConfigurations {
      public:
        /** Optional element 'tds:GetStorageConfigurations' of XML schema type 'tds:GetStorageConfigurations' */
        _tds__GetStorageConfigurations *tds__GetStorageConfigurations;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetStorageConfigurations */
        long soap_type() const { return SOAP_TYPE___tds__GetStorageConfigurations; }
        /** Constructor with member initializations */
        __tds__GetStorageConfigurations() : tds__GetStorageConfigurations() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19177 */
#ifndef SOAP_TYPE___tds__CreateStorageConfiguration
#define SOAP_TYPE___tds__CreateStorageConfiguration (999)
/* Wrapper: */
struct SOAP_CMAC __tds__CreateStorageConfiguration {
      public:
        /** Optional element 'tds:CreateStorageConfiguration' of XML schema type 'tds:CreateStorageConfiguration' */
        _tds__CreateStorageConfiguration *tds__CreateStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__CreateStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__CreateStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__CreateStorageConfiguration() : tds__CreateStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19247 */
#ifndef SOAP_TYPE___tds__GetStorageConfiguration
#define SOAP_TYPE___tds__GetStorageConfiguration (1003)
/* Wrapper: */
struct SOAP_CMAC __tds__GetStorageConfiguration {
      public:
        /** Optional element 'tds:GetStorageConfiguration' of XML schema type 'tds:GetStorageConfiguration' */
        _tds__GetStorageConfiguration *tds__GetStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__GetStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__GetStorageConfiguration() : tds__GetStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19316 */
#ifndef SOAP_TYPE___tds__SetStorageConfiguration
#define SOAP_TYPE___tds__SetStorageConfiguration (1007)
/* Wrapper: */
struct SOAP_CMAC __tds__SetStorageConfiguration {
      public:
        /** Optional element 'tds:SetStorageConfiguration' of XML schema type 'tds:SetStorageConfiguration' */
        _tds__SetStorageConfiguration *tds__SetStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__SetStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__SetStorageConfiguration() : tds__SetStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19386 */
#ifndef SOAP_TYPE___tds__DeleteStorageConfiguration
#define SOAP_TYPE___tds__DeleteStorageConfiguration (1011)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteStorageConfiguration {
      public:
        /** Optional element 'tds:DeleteStorageConfiguration' of XML schema type 'tds:DeleteStorageConfiguration' */
        _tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteStorageConfiguration */
        long soap_type() const { return SOAP_TYPE___tds__DeleteStorageConfiguration; }
        /** Constructor with member initializations */
        __tds__DeleteStorageConfiguration() : tds__DeleteStorageConfiguration() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19456 */
#ifndef SOAP_TYPE___tds__GetGeoLocation
#define SOAP_TYPE___tds__GetGeoLocation (1015)
/* Wrapper: */
struct SOAP_CMAC __tds__GetGeoLocation {
      public:
        /** Optional element 'tds:GetGeoLocation' of XML schema type 'tds:GetGeoLocation' */
        _tds__GetGeoLocation *tds__GetGeoLocation;
      public:
        /** Return unique type id SOAP_TYPE___tds__GetGeoLocation */
        long soap_type() const { return SOAP_TYPE___tds__GetGeoLocation; }
        /** Constructor with member initializations */
        __tds__GetGeoLocation() : tds__GetGeoLocation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__GetGeoLocation * SOAP_FMAC2 soap_instantiate___tds__GetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19526 */
#ifndef SOAP_TYPE___tds__SetGeoLocation
#define SOAP_TYPE___tds__SetGeoLocation (1019)
/* Wrapper: */
struct SOAP_CMAC __tds__SetGeoLocation {
      public:
        /** Optional element 'tds:SetGeoLocation' of XML schema type 'tds:SetGeoLocation' */
        _tds__SetGeoLocation *tds__SetGeoLocation;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetGeoLocation */
        long soap_type() const { return SOAP_TYPE___tds__SetGeoLocation; }
        /** Constructor with member initializations */
        __tds__SetGeoLocation() : tds__SetGeoLocation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetGeoLocation * SOAP_FMAC2 soap_instantiate___tds__SetGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19595 */
#ifndef SOAP_TYPE___tds__DeleteGeoLocation
#define SOAP_TYPE___tds__DeleteGeoLocation (1023)
/* Wrapper: */
struct SOAP_CMAC __tds__DeleteGeoLocation {
      public:
        /** Optional element 'tds:DeleteGeoLocation' of XML schema type 'tds:DeleteGeoLocation' */
        _tds__DeleteGeoLocation *tds__DeleteGeoLocation;
      public:
        /** Return unique type id SOAP_TYPE___tds__DeleteGeoLocation */
        long soap_type() const { return SOAP_TYPE___tds__DeleteGeoLocation; }
        /** Constructor with member initializations */
        __tds__DeleteGeoLocation() : tds__DeleteGeoLocation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__DeleteGeoLocation * SOAP_FMAC2 soap_instantiate___tds__DeleteGeoLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* onvif.h:19665 */
#ifndef SOAP_TYPE___tds__SetHashingAlgorithm
#define SOAP_TYPE___tds__SetHashingAlgorithm (1027)
/* Wrapper: */
struct SOAP_CMAC __tds__SetHashingAlgorithm {
      public:
        /** Optional element 'tds:SetHashingAlgorithm' of XML schema type 'tds:SetHashingAlgorithm' */
        _tds__SetHashingAlgorithm *tds__SetHashingAlgorithm;
      public:
        /** Return unique type id SOAP_TYPE___tds__SetHashingAlgorithm */
        long soap_type() const { return SOAP_TYPE___tds__SetHashingAlgorithm; }
        /** Constructor with member initializations */
        __tds__SetHashingAlgorithm() : tds__SetHashingAlgorithm() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __tds__SetHashingAlgorithm * SOAP_FMAC2 soap_instantiate___tds__SetHashingAlgorithm(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* wsa5.h:89 */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (17)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

/* wsa5.h:92 */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (18)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

/* wsa5.h:211 */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (25)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

/* wsa5.h:214 */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (26)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

/* wsa5.h:217 */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (27)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

/* wsa5.h:220 */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (28)
typedef char *_wsa5__MessageID;
#endif

/* wsa5.h:223 */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (29)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

/* wsa5.h:226 */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (30)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

/* wsa5.h:229 */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (31)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

/* wsa5.h:232 */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (32)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

/* wsa5.h:235 */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (33)
typedef char *_wsa5__To;
#endif

/* wsa5.h:238 */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (34)
typedef char *_wsa5__Action;
#endif

/* wsa5.h:241 */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (36)
typedef ULONG64 _wsa5__RetryAfter;
#endif

/* wsa5.h:244 */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (37)
typedef _QName _wsa5__ProblemHeaderQName;
#endif

/* wsa5.h:247 */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (38)
typedef char *_wsa5__ProblemIRI;
#endif

/* wsa5.h:250 */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (39)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

/* onvif.h:211 */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (65)
typedef std::string xsd__NCName;
#endif

/* onvif.h:214 */
#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (66)
typedef std::string xsd__anySimpleType;
#endif

/* onvif.h:217 */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (67)
typedef std::string xsd__anyURI;
#endif

/* onvif.h:220 */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (68)
typedef std::string xsd__duration;
#endif

/* onvif.h:223 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (69)
typedef std::string xsd__integer;
#endif

/* onvif.h:226 */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (70)
typedef std::string xsd__nonNegativeInteger;
#endif

/* onvif.h:229 */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (71)
typedef std::string xsd__token;
#endif

/* onvif.h:234 */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (72)
typedef std::string _xml__lang;
#endif

/* onvif.h:916 */
#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (400)
typedef std::string tt__IntList;
#endif

/* onvif.h:922 */
#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (401)
typedef std::string tt__StringAttrList;
#endif

/* onvif.h:926 */
#ifndef SOAP_TYPE_tt__StringList
#define SOAP_TYPE_tt__StringList (402)
typedef std::string tt__StringList;
#endif

/* onvif.h:975 */
#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (403)
typedef std::string tt__Name;
#endif

/* onvif.h:1026 */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (406)
typedef xsd__integer tt__NetworkInterfaceConfigPriority;
#endif

/* onvif.h:1043 */
#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (408)
typedef int tt__IANA_IfTypes;
#endif

/* onvif.h:1078 */
#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (412)
typedef xsd__token tt__IPv4Address;
#endif

/* onvif.h:1082 */
#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (413)
typedef xsd__token tt__IPv6Address;
#endif

/* onvif.h:1086 */
#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (414)
typedef xsd__token tt__HwAddress;
#endif

/* onvif.h:1099 */
#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (416)
typedef xsd__token tt__DNSName;
#endif

/* onvif.h:1125 */
#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (419)
typedef xsd__hexBinary tt__Dot11SSIDType;
#endif

/* onvif.h:1163 */
#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (423)
typedef xsd__hexBinary tt__Dot11PSK;
#endif

/* onvif.h:1168 */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (424)
typedef std::string tt__Dot11PSKPassphrase;
#endif

/* onvif.h:1315 */
#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (435)
typedef std::string tt__AuxiliaryData;
#endif

/* onvif.h:1391 */
#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (436)
typedef std::string tt__ReferenceToken;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* tt__IANA_IfTypes has binding name 'tt__IANA_IfTypes' for type 'tt:IANA-IfTypes' */
#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (408)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (621)
#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (619)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif

/* _wsa5__RetryAfter has binding name '_wsa5__RetryAfter' for type '' */
#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (36)
#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_ULONG64
#define SOAP_TYPE_ULONG64 (35)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (500)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (444)
#endif

/* enum tt__RelayMode has binding name 'tt__RelayMode' for type 'tt:RelayMode' */
#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (434)
#endif

/* enum tt__RelayIdleState has binding name 'tt__RelayIdleState' for type 'tt:RelayIdleState' */
#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (433)
#endif

/* enum tt__RelayLogicalState has binding name 'tt__RelayLogicalState' for type 'tt:RelayLogicalState' */
#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (432)
#endif

/* enum tt__UserLevel has binding name 'tt__UserLevel' for type 'tt:UserLevel' */
#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (431)
#endif

/* enum tt__SetDateTimeType has binding name 'tt__SetDateTimeType' for type 'tt:SetDateTimeType' */
#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (430)
#endif

/* enum tt__FactoryDefaultType has binding name 'tt__FactoryDefaultType' for type 'tt:FactoryDefaultType' */
#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (429)
#endif

/* enum tt__SystemLogType has binding name 'tt__SystemLogType' for type 'tt:SystemLogType' */
#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (428)
#endif

/* enum tt__CapabilityCategory has binding name 'tt__CapabilityCategory' for type 'tt:CapabilityCategory' */
#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (427)
#endif

/* enum tt__Dot11AuthAndMangementSuite has binding name 'tt__Dot11AuthAndMangementSuite' for type 'tt:Dot11AuthAndMangementSuite' */
#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (426)
#endif

/* enum tt__Dot11SignalStrength has binding name 'tt__Dot11SignalStrength' for type 'tt:Dot11SignalStrength' */
#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (425)
#endif

/* enum tt__Dot11Cipher has binding name 'tt__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (422)
#endif

/* enum tt__Dot11SecurityMode has binding name 'tt__Dot11SecurityMode' for type 'tt:Dot11SecurityMode' */
#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (421)
#endif

/* enum tt__Dot11StationMode has binding name 'tt__Dot11StationMode' for type 'tt:Dot11StationMode' */
#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (420)
#endif

/* enum tt__DynamicDNSType has binding name 'tt__DynamicDNSType' for type 'tt:DynamicDNSType' */
#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (418)
#endif

/* enum tt__IPAddressFilterType has binding name 'tt__IPAddressFilterType' for type 'tt:IPAddressFilterType' */
#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (417)
#endif

/* enum tt__IPType has binding name 'tt__IPType' for type 'tt:IPType' */
#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (415)
#endif

/* enum tt__NetworkHostType has binding name 'tt__NetworkHostType' for type 'tt:NetworkHostType' */
#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (411)
#endif

/* enum tt__NetworkProtocolType has binding name 'tt__NetworkProtocolType' for type 'tt:NetworkProtocolType' */
#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (410)
#endif

/* enum tt__IPv6DHCPConfiguration has binding name 'tt__IPv6DHCPConfiguration' for type 'tt:IPv6DHCPConfiguration' */
#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (409)
#endif

/* enum tt__Duplex has binding name 'tt__Duplex' for type 'tt:Duplex' */
#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (407)
#endif

/* enum tt__DiscoveryMode has binding name 'tt__DiscoveryMode' for type 'tt:DiscoveryMode' */
#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (405)
#endif

/* enum tt__ScopeDefinition has binding name 'tt__ScopeDefinition' for type 'tt:ScopeDefinition' */
#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (404)
#endif

/* enum _wsa5__IsReferenceParameter has binding name '_wsa5__IsReferenceParameter' for type 'wsa5:IsReferenceParameter' */
#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (40)
#endif

/* enum wsa5__FaultCodesType has binding name 'wsa5__FaultCodesType' for type 'wsa5:FaultCodesType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (20)
#endif

/* enum wsa5__RelationshipType has binding name 'wsa5__RelationshipType' for type 'wsa5:RelationshipType' */
#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (19)
#endif

/* _tds__GetSystemUrisResponse_Extension has binding name '_tds__GetSystemUrisResponse_Extension' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension (521)
#endif

/* _tds__StorageConfigurationData_Extension has binding name '_tds__StorageConfigurationData_Extension' for type '' */
#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension
#define SOAP_TYPE__tds__StorageConfigurationData_Extension (454)
#endif

/* _tds__UserCredential_Extension has binding name '_tds__UserCredential_Extension' for type '' */
#ifndef SOAP_TYPE__tds__UserCredential_Extension
#define SOAP_TYPE__tds__UserCredential_Extension (450)
#endif

/* _tds__Service_Capabilities has binding name '_tds__Service_Capabilities' for type '' */
#ifndef SOAP_TYPE__tds__Service_Capabilities
#define SOAP_TYPE__tds__Service_Capabilities (437)
#endif

/* tt__ReferenceToken has binding name 'tt__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (436)
#endif

/* tt__AuxiliaryData has binding name 'tt__AuxiliaryData' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (435)
#endif

/* tt__Dot11PSKPassphrase has binding name 'tt__Dot11PSKPassphrase' for type 'tt:Dot11PSKPassphrase' */
#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (424)
#endif

/* tt__Dot11PSK has binding name 'tt__Dot11PSK' for type 'tt:Dot11PSK' */
#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (423)
#endif

/* tt__Dot11SSIDType has binding name 'tt__Dot11SSIDType' for type 'tt:Dot11SSIDType' */
#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (419)
#endif

/* tt__DNSName has binding name 'tt__DNSName' for type 'tt:DNSName' */
#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (416)
#endif

/* tt__HwAddress has binding name 'tt__HwAddress' for type 'tt:HwAddress' */
#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (414)
#endif

/* tt__IPv6Address has binding name 'tt__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (413)
#endif

/* tt__IPv4Address has binding name 'tt__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (412)
#endif

/* tt__NetworkInterfaceConfigPriority has binding name 'tt__NetworkInterfaceConfigPriority' for type 'tt:NetworkInterfaceConfigPriority' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (406)
#endif

/* tt__Name has binding name 'tt__Name' for type 'tt:Name' */
#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (403)
#endif

/* tt__StringList has binding name 'tt__StringList' for type 'tt:StringList' */
#ifndef SOAP_TYPE_tt__StringList
#define SOAP_TYPE_tt__StringList (402)
#endif

/* tt__StringAttrList has binding name 'tt__StringAttrList' for type 'tt:StringAttrList' */
#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (401)
#endif

/* tt__IntList has binding name 'tt__IntList' for type 'tt:IntList' */
#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (400)
#endif

/* tt__LocationEntity has binding name 'tt__LocationEntity' for type 'tt:LocationEntity' */
#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (399)
#endif

/* tt__LocalOrientation has binding name 'tt__LocalOrientation' for type 'tt:LocalOrientation' */
#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (398)
#endif

/* tt__LocalLocation has binding name 'tt__LocalLocation' for type 'tt:LocalLocation' */
#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (397)
#endif

/* tt__GeoOrientation has binding name 'tt__GeoOrientation' for type 'tt:GeoOrientation' */
#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (396)
#endif

/* tt__GeoLocation has binding name 'tt__GeoLocation' for type 'tt:GeoLocation' */
#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (395)
#endif

/* tt__IntRange has binding name 'tt__IntRange' for type 'tt:IntRange' */
#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (394)
#endif

/* tt__DateTimeRange has binding name 'tt__DateTimeRange' for type 'tt:DateTimeRange' */
#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (393)
#endif

/* tt__RelayOutput has binding name 'tt__RelayOutput' for type 'tt:RelayOutput' */
#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (392)
#endif

/* tt__RelayOutputSettings has binding name 'tt__RelayOutputSettings' for type 'tt:RelayOutputSettings' */
#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (391)
#endif

/* tt__TLSConfiguration has binding name 'tt__TLSConfiguration' for type 'tt:TLSConfiguration' */
#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (390)
#endif

/* tt__EapMethodExtension has binding name 'tt__EapMethodExtension' for type 'tt:EapMethodExtension' */
#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (389)
#endif

/* tt__EAPMethodConfiguration has binding name 'tt__EAPMethodConfiguration' for type 'tt:EAPMethodConfiguration' */
#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (388)
#endif

/* tt__Dot1XConfigurationExtension has binding name 'tt__Dot1XConfigurationExtension' for type 'tt:Dot1XConfigurationExtension' */
#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (387)
#endif

/* tt__Dot1XConfiguration has binding name 'tt__Dot1XConfiguration' for type 'tt:Dot1XConfiguration' */
#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (386)
#endif

/* tt__CertificateInformationExtension has binding name 'tt__CertificateInformationExtension' for type 'tt:CertificateInformationExtension' */
#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (385)
#endif

/* tt__CertificateUsage has binding name 'tt__CertificateUsage' for type 'tt:CertificateUsage' */
#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (384)
#endif

/* tt__CertificateInformation has binding name 'tt__CertificateInformation' for type 'tt:CertificateInformation' */
#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (383)
#endif

/* tt__CertificateWithPrivateKey has binding name 'tt__CertificateWithPrivateKey' for type 'tt:CertificateWithPrivateKey' */
#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (382)
#endif

/* tt__CertificateStatus has binding name 'tt__CertificateStatus' for type 'tt:CertificateStatus' */
#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (381)
#endif

/* tt__Certificate has binding name 'tt__Certificate' for type 'tt:Certificate' */
#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (380)
#endif

/* tt__UserExtension has binding name 'tt__UserExtension' for type 'tt:UserExtension' */
#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (379)
#endif

/* tt__User has binding name 'tt__User' for type 'tt:User' */
#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (378)
#endif

/* tt__RemoteUser has binding name 'tt__RemoteUser' for type 'tt:RemoteUser' */
#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (377)
#endif

/* tt__TimeZone has binding name 'tt__TimeZone' for type 'tt:TimeZone' */
#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (376)
#endif

/* tt__Time has binding name 'tt__Time' for type 'tt:Time' */
#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (375)
#endif

/* tt__Date has binding name 'tt__Date' for type 'tt:Date' */
#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (374)
#endif

/* tt__DateTime has binding name 'tt__DateTime' for type 'tt:DateTime' */
#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (373)
#endif

/* tt__SystemDateTimeExtension has binding name 'tt__SystemDateTimeExtension' for type 'tt:SystemDateTimeExtension' */
#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (372)
#endif

/* tt__SystemDateTime has binding name 'tt__SystemDateTime' for type 'tt:SystemDateTime' */
#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (371)
#endif

/* tt__SystemLogUri has binding name 'tt__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (370)
#endif

/* tt__SystemLogUriList has binding name 'tt__SystemLogUriList' for type 'tt:SystemLogUriList' */
#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (369)
#endif

/* tt__BackupFile has binding name 'tt__BackupFile' for type 'tt:BackupFile' */
#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (368)
#endif

/* tt__AttachmentData has binding name 'tt__AttachmentData' for type 'tt:AttachmentData' */
#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (367)
#endif

/* tt__BinaryData has binding name 'tt__BinaryData' for type 'tt:BinaryData' */
#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (366)
#endif

/* tt__SupportInformation has binding name 'tt__SupportInformation' for type 'tt:SupportInformation' */
#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (365)
#endif

/* tt__SystemLog has binding name 'tt__SystemLog' for type 'tt:SystemLog' */
#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (364)
#endif

/* tt__AnalyticsDeviceExtension has binding name 'tt__AnalyticsDeviceExtension' for type 'tt:AnalyticsDeviceExtension' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (363)
#endif

/* tt__AnalyticsDeviceCapabilities has binding name 'tt__AnalyticsDeviceCapabilities' for type 'tt:AnalyticsDeviceCapabilities' */
#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (362)
#endif

/* tt__ReceiverCapabilities has binding name 'tt__ReceiverCapabilities' for type 'tt:ReceiverCapabilities' */
#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (361)
#endif

/* tt__ReplayCapabilities has binding name 'tt__ReplayCapabilities' for type 'tt:ReplayCapabilities' */
#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (360)
#endif

/* tt__SearchCapabilities has binding name 'tt__SearchCapabilities' for type 'tt:SearchCapabilities' */
#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (359)
#endif

/* tt__RecordingCapabilities has binding name 'tt__RecordingCapabilities' for type 'tt:RecordingCapabilities' */
#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (358)
#endif

/* tt__DisplayCapabilities has binding name 'tt__DisplayCapabilities' for type 'tt:DisplayCapabilities' */
#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (357)
#endif

/* tt__DeviceIOCapabilities has binding name 'tt__DeviceIOCapabilities' for type 'tt:DeviceIOCapabilities' */
#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (356)
#endif

/* tt__PTZCapabilities has binding name 'tt__PTZCapabilities' for type 'tt:PTZCapabilities' */
#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (355)
#endif

/* tt__ImagingCapabilities has binding name 'tt__ImagingCapabilities' for type 'tt:ImagingCapabilities' */
#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (354)
#endif

/* tt__OnvifVersion has binding name 'tt__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (353)
#endif

/* tt__SystemCapabilitiesExtension2 has binding name 'tt__SystemCapabilitiesExtension2' for type 'tt:SystemCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (352)
#endif

/* tt__SystemCapabilitiesExtension has binding name 'tt__SystemCapabilitiesExtension' for type 'tt:SystemCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (351)
#endif

/* tt__SystemCapabilities has binding name 'tt__SystemCapabilities' for type 'tt:SystemCapabilities' */
#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (350)
#endif

/* tt__SecurityCapabilitiesExtension2 has binding name 'tt__SecurityCapabilitiesExtension2' for type 'tt:SecurityCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (349)
#endif

/* tt__SecurityCapabilitiesExtension has binding name 'tt__SecurityCapabilitiesExtension' for type 'tt:SecurityCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (348)
#endif

/* tt__SecurityCapabilities has binding name 'tt__SecurityCapabilities' for type 'tt:SecurityCapabilities' */
#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (347)
#endif

/* tt__NetworkCapabilitiesExtension2 has binding name 'tt__NetworkCapabilitiesExtension2' for type 'tt:NetworkCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (346)
#endif

/* tt__NetworkCapabilitiesExtension has binding name 'tt__NetworkCapabilitiesExtension' for type 'tt:NetworkCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (345)
#endif

/* tt__NetworkCapabilities has binding name 'tt__NetworkCapabilities' for type 'tt:NetworkCapabilities' */
#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (344)
#endif

/* tt__ProfileCapabilities has binding name 'tt__ProfileCapabilities' for type 'tt:ProfileCapabilities' */
#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (343)
#endif

/* tt__RealTimeStreamingCapabilitiesExtension has binding name 'tt__RealTimeStreamingCapabilitiesExtension' for type 'tt:RealTimeStreamingCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (342)
#endif

/* tt__RealTimeStreamingCapabilities has binding name 'tt__RealTimeStreamingCapabilities' for type 'tt:RealTimeStreamingCapabilities' */
#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (341)
#endif

/* tt__MediaCapabilitiesExtension has binding name 'tt__MediaCapabilitiesExtension' for type 'tt:MediaCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (340)
#endif

/* tt__MediaCapabilities has binding name 'tt__MediaCapabilities' for type 'tt:MediaCapabilities' */
#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (339)
#endif

/* tt__IOCapabilitiesExtension2 has binding name 'tt__IOCapabilitiesExtension2' for type 'tt:IOCapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (338)
#endif

/* tt__IOCapabilitiesExtension has binding name 'tt__IOCapabilitiesExtension' for type 'tt:IOCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (337)
#endif

/* tt__IOCapabilities has binding name 'tt__IOCapabilities' for type 'tt:IOCapabilities' */
#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (336)
#endif

/* tt__EventCapabilities has binding name 'tt__EventCapabilities' for type 'tt:EventCapabilities' */
#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (335)
#endif

/* tt__DeviceCapabilitiesExtension has binding name 'tt__DeviceCapabilitiesExtension' for type 'tt:DeviceCapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (334)
#endif

/* tt__DeviceCapabilities has binding name 'tt__DeviceCapabilities' for type 'tt:DeviceCapabilities' */
#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (333)
#endif

/* tt__AnalyticsCapabilities has binding name 'tt__AnalyticsCapabilities' for type 'tt:AnalyticsCapabilities' */
#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (332)
#endif

/* tt__CapabilitiesExtension2 has binding name 'tt__CapabilitiesExtension2' for type 'tt:CapabilitiesExtension2' */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (331)
#endif

/* tt__CapabilitiesExtension has binding name 'tt__CapabilitiesExtension' for type 'tt:CapabilitiesExtension' */
#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (330)
#endif

/* tt__Capabilities has binding name 'tt__Capabilities' for type 'tt:Capabilities' */
#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (329)
#endif

/* tt__Dot11AvailableNetworksExtension has binding name 'tt__Dot11AvailableNetworksExtension' for type 'tt:Dot11AvailableNetworksExtension' */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (328)
#endif

/* tt__Dot11AvailableNetworks has binding name 'tt__Dot11AvailableNetworks' for type 'tt:Dot11AvailableNetworks' */
#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (327)
#endif

/* tt__Dot11Status has binding name 'tt__Dot11Status' for type 'tt:Dot11Status' */
#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (326)
#endif

/* tt__Dot11Capabilities has binding name 'tt__Dot11Capabilities' for type 'tt:Dot11Capabilities' */
#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (325)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension2 has binding name 'tt__NetworkInterfaceSetConfigurationExtension2' for type 'tt:NetworkInterfaceSetConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (324)
#endif

/* tt__Dot11PSKSetExtension has binding name 'tt__Dot11PSKSetExtension' for type 'tt:Dot11PSKSetExtension' */
#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (323)
#endif

/* tt__Dot11PSKSet has binding name 'tt__Dot11PSKSet' for type 'tt:Dot11PSKSet' */
#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (322)
#endif

/* tt__Dot11SecurityConfigurationExtension has binding name 'tt__Dot11SecurityConfigurationExtension' for type 'tt:Dot11SecurityConfigurationExtension' */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (321)
#endif

/* tt__Dot11SecurityConfiguration has binding name 'tt__Dot11SecurityConfiguration' for type 'tt:Dot11SecurityConfiguration' */
#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (320)
#endif

/* tt__Dot11Configuration has binding name 'tt__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (319)
#endif

/* tt__IPAddressFilterExtension has binding name 'tt__IPAddressFilterExtension' for type 'tt:IPAddressFilterExtension' */
#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (318)
#endif

/* tt__IPAddressFilter has binding name 'tt__IPAddressFilter' for type 'tt:IPAddressFilter' */
#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (317)
#endif

/* tt__NetworkZeroConfigurationExtension2 has binding name 'tt__NetworkZeroConfigurationExtension2' for type 'tt:NetworkZeroConfigurationExtension2' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (316)
#endif

/* tt__NetworkZeroConfigurationExtension has binding name 'tt__NetworkZeroConfigurationExtension' for type 'tt:NetworkZeroConfigurationExtension' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (315)
#endif

/* tt__NetworkZeroConfiguration has binding name 'tt__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (314)
#endif

/* tt__NetworkGateway has binding name 'tt__NetworkGateway' for type 'tt:NetworkGateway' */
#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (313)
#endif

/* tt__IPv4NetworkInterfaceSetConfiguration has binding name 'tt__IPv4NetworkInterfaceSetConfiguration' for type 'tt:IPv4NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (312)
#endif

/* tt__IPv6NetworkInterfaceSetConfiguration has binding name 'tt__IPv6NetworkInterfaceSetConfiguration' for type 'tt:IPv6NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (311)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension has binding name 'tt__NetworkInterfaceSetConfigurationExtension' for type 'tt:NetworkInterfaceSetConfigurationExtension' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (310)
#endif

/* tt__NetworkInterfaceSetConfiguration has binding name 'tt__NetworkInterfaceSetConfiguration' for type 'tt:NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (309)
#endif

/* tt__DynamicDNSInformationExtension has binding name 'tt__DynamicDNSInformationExtension' for type 'tt:DynamicDNSInformationExtension' */
#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (308)
#endif

/* tt__DynamicDNSInformation has binding name 'tt__DynamicDNSInformation' for type 'tt:DynamicDNSInformation' */
#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (307)
#endif

/* tt__NTPInformationExtension has binding name 'tt__NTPInformationExtension' for type 'tt:NTPInformationExtension' */
#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (306)
#endif

/* tt__NTPInformation has binding name 'tt__NTPInformation' for type 'tt:NTPInformation' */
#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (305)
#endif

/* tt__DNSInformationExtension has binding name 'tt__DNSInformationExtension' for type 'tt:DNSInformationExtension' */
#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (304)
#endif

/* tt__DNSInformation has binding name 'tt__DNSInformation' for type 'tt:DNSInformation' */
#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (303)
#endif

/* tt__HostnameInformationExtension has binding name 'tt__HostnameInformationExtension' for type 'tt:HostnameInformationExtension' */
#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (302)
#endif

/* tt__HostnameInformation has binding name 'tt__HostnameInformation' for type 'tt:HostnameInformation' */
#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (301)
#endif

/* tt__PrefixedIPv6Address has binding name 'tt__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (300)
#endif

/* tt__PrefixedIPv4Address has binding name 'tt__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (299)
#endif

/* tt__IPAddress has binding name 'tt__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (298)
#endif

/* tt__NetworkHostExtension has binding name 'tt__NetworkHostExtension' for type 'tt:NetworkHostExtension' */
#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (297)
#endif

/* tt__NetworkHost has binding name 'tt__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (296)
#endif

/* tt__NetworkProtocolExtension has binding name 'tt__NetworkProtocolExtension' for type 'tt:NetworkProtocolExtension' */
#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (295)
#endif

/* tt__NetworkProtocol has binding name 'tt__NetworkProtocol' for type 'tt:NetworkProtocol' */
#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (294)
#endif

/* tt__IPv6ConfigurationExtension has binding name 'tt__IPv6ConfigurationExtension' for type 'tt:IPv6ConfigurationExtension' */
#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (293)
#endif

/* tt__IPv6Configuration has binding name 'tt__IPv6Configuration' for type 'tt:IPv6Configuration' */
#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (292)
#endif

/* tt__IPv4Configuration has binding name 'tt__IPv4Configuration' for type 'tt:IPv4Configuration' */
#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (291)
#endif

/* tt__IPv4NetworkInterface has binding name 'tt__IPv4NetworkInterface' for type 'tt:IPv4NetworkInterface' */
#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (290)
#endif

/* tt__IPv6NetworkInterface has binding name 'tt__IPv6NetworkInterface' for type 'tt:IPv6NetworkInterface' */
#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (289)
#endif

/* tt__NetworkInterfaceInfo has binding name 'tt__NetworkInterfaceInfo' for type 'tt:NetworkInterfaceInfo' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (288)
#endif

/* tt__NetworkInterfaceConnectionSetting has binding name 'tt__NetworkInterfaceConnectionSetting' for type 'tt:NetworkInterfaceConnectionSetting' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (287)
#endif

/* tt__NetworkInterfaceLink has binding name 'tt__NetworkInterfaceLink' for type 'tt:NetworkInterfaceLink' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (286)
#endif

/* tt__NetworkInterfaceExtension2 has binding name 'tt__NetworkInterfaceExtension2' for type 'tt:NetworkInterfaceExtension2' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (285)
#endif

/* tt__Dot3Configuration has binding name 'tt__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (284)
#endif

/* tt__NetworkInterfaceExtension has binding name 'tt__NetworkInterfaceExtension' for type 'tt:NetworkInterfaceExtension' */
#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (283)
#endif

/* tt__NetworkInterface has binding name 'tt__NetworkInterface' for type 'tt:NetworkInterface' */
#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (282)
#endif

/* tt__Scope has binding name 'tt__Scope' for type 'tt:Scope' */
#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (281)
#endif

/* tt__DeviceEntity has binding name 'tt__DeviceEntity' for type 'tt:DeviceEntity' */
#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (280)
#endif

/* _tds__DeleteGeoLocationResponse has binding name '_tds__DeleteGeoLocationResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteGeoLocationResponse
#define SOAP_TYPE__tds__DeleteGeoLocationResponse (279)
#endif

/* _tds__DeleteGeoLocation has binding name '_tds__DeleteGeoLocation' for type '' */
#ifndef SOAP_TYPE__tds__DeleteGeoLocation
#define SOAP_TYPE__tds__DeleteGeoLocation (278)
#endif

/* _tds__SetGeoLocationResponse has binding name '_tds__SetGeoLocationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetGeoLocationResponse
#define SOAP_TYPE__tds__SetGeoLocationResponse (277)
#endif

/* _tds__SetGeoLocation has binding name '_tds__SetGeoLocation' for type '' */
#ifndef SOAP_TYPE__tds__SetGeoLocation
#define SOAP_TYPE__tds__SetGeoLocation (276)
#endif

/* _tds__GetGeoLocationResponse has binding name '_tds__GetGeoLocationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetGeoLocationResponse
#define SOAP_TYPE__tds__GetGeoLocationResponse (275)
#endif

/* _tds__GetGeoLocation has binding name '_tds__GetGeoLocation' for type '' */
#ifndef SOAP_TYPE__tds__GetGeoLocation
#define SOAP_TYPE__tds__GetGeoLocation (274)
#endif

/* _tds__DeleteStorageConfigurationResponse has binding name '_tds__DeleteStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse (273)
#endif

/* _tds__DeleteStorageConfiguration has binding name '_tds__DeleteStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration
#define SOAP_TYPE__tds__DeleteStorageConfiguration (272)
#endif

/* _tds__SetStorageConfigurationResponse has binding name '_tds__SetStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse
#define SOAP_TYPE__tds__SetStorageConfigurationResponse (271)
#endif

/* _tds__SetStorageConfiguration has binding name '_tds__SetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetStorageConfiguration
#define SOAP_TYPE__tds__SetStorageConfiguration (270)
#endif

/* _tds__GetStorageConfigurationResponse has binding name '_tds__GetStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse
#define SOAP_TYPE__tds__GetStorageConfigurationResponse (269)
#endif

/* _tds__GetStorageConfiguration has binding name '_tds__GetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfiguration
#define SOAP_TYPE__tds__GetStorageConfiguration (268)
#endif

/* _tds__CreateStorageConfigurationResponse has binding name '_tds__CreateStorageConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse (267)
#endif

/* _tds__CreateStorageConfiguration has binding name '_tds__CreateStorageConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__CreateStorageConfiguration
#define SOAP_TYPE__tds__CreateStorageConfiguration (266)
#endif

/* _tds__GetStorageConfigurationsResponse has binding name '_tds__GetStorageConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse (265)
#endif

/* _tds__GetStorageConfigurations has binding name '_tds__GetStorageConfigurations' for type '' */
#ifndef SOAP_TYPE__tds__GetStorageConfigurations
#define SOAP_TYPE__tds__GetStorageConfigurations (264)
#endif

/* _tds__SetHashingAlgorithmResponse has binding name '_tds__SetHashingAlgorithmResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetHashingAlgorithmResponse
#define SOAP_TYPE__tds__SetHashingAlgorithmResponse (263)
#endif

/* _tds__SetHashingAlgorithm has binding name '_tds__SetHashingAlgorithm' for type '' */
#ifndef SOAP_TYPE__tds__SetHashingAlgorithm
#define SOAP_TYPE__tds__SetHashingAlgorithm (262)
#endif

/* _tds__StartSystemRestoreResponse has binding name '_tds__StartSystemRestoreResponse' for type '' */
#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse
#define SOAP_TYPE__tds__StartSystemRestoreResponse (261)
#endif

/* _tds__StartSystemRestore has binding name '_tds__StartSystemRestore' for type '' */
#ifndef SOAP_TYPE__tds__StartSystemRestore
#define SOAP_TYPE__tds__StartSystemRestore (260)
#endif

/* _tds__StartFirmwareUpgradeResponse has binding name '_tds__StartFirmwareUpgradeResponse' for type '' */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse (259)
#endif

/* _tds__StartFirmwareUpgrade has binding name '_tds__StartFirmwareUpgrade' for type '' */
#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade
#define SOAP_TYPE__tds__StartFirmwareUpgrade (258)
#endif

/* _tds__GetSystemUrisResponse has binding name '_tds__GetSystemUrisResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemUrisResponse
#define SOAP_TYPE__tds__GetSystemUrisResponse (257)
#endif

/* _tds__GetSystemUris has binding name '_tds__GetSystemUris' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemUris
#define SOAP_TYPE__tds__GetSystemUris (256)
#endif

/* _tds__ScanAvailableDot11NetworksResponse has binding name '_tds__ScanAvailableDot11NetworksResponse' for type '' */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse (255)
#endif

/* _tds__ScanAvailableDot11Networks has binding name '_tds__ScanAvailableDot11Networks' for type '' */
#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks
#define SOAP_TYPE__tds__ScanAvailableDot11Networks (254)
#endif

/* _tds__GetDot11StatusResponse has binding name '_tds__GetDot11StatusResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11StatusResponse
#define SOAP_TYPE__tds__GetDot11StatusResponse (253)
#endif

/* _tds__GetDot11Status has binding name '_tds__GetDot11Status' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11Status
#define SOAP_TYPE__tds__GetDot11Status (252)
#endif

/* _tds__GetDot11CapabilitiesResponse has binding name '_tds__GetDot11CapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse (251)
#endif

/* _tds__GetDot11Capabilities has binding name '_tds__GetDot11Capabilities' for type '' */
#ifndef SOAP_TYPE__tds__GetDot11Capabilities
#define SOAP_TYPE__tds__GetDot11Capabilities (250)
#endif

/* _tds__SendAuxiliaryCommandResponse has binding name '_tds__SendAuxiliaryCommandResponse' for type '' */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse (249)
#endif

/* _tds__SendAuxiliaryCommand has binding name '_tds__SendAuxiliaryCommand' for type '' */
#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand
#define SOAP_TYPE__tds__SendAuxiliaryCommand (248)
#endif

/* _tds__SetRelayOutputStateResponse has binding name '_tds__SetRelayOutputStateResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse
#define SOAP_TYPE__tds__SetRelayOutputStateResponse (247)
#endif

/* _tds__SetRelayOutputState has binding name '_tds__SetRelayOutputState' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputState
#define SOAP_TYPE__tds__SetRelayOutputState (246)
#endif

/* _tds__SetRelayOutputSettingsResponse has binding name '_tds__SetRelayOutputSettingsResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse (245)
#endif

/* _tds__SetRelayOutputSettings has binding name '_tds__SetRelayOutputSettings' for type '' */
#ifndef SOAP_TYPE__tds__SetRelayOutputSettings
#define SOAP_TYPE__tds__SetRelayOutputSettings (244)
#endif

/* _tds__GetRelayOutputsResponse has binding name '_tds__GetRelayOutputsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse
#define SOAP_TYPE__tds__GetRelayOutputsResponse (243)
#endif

/* _tds__GetRelayOutputs has binding name '_tds__GetRelayOutputs' for type '' */
#ifndef SOAP_TYPE__tds__GetRelayOutputs
#define SOAP_TYPE__tds__GetRelayOutputs (242)
#endif

/* _tds__DeleteDot1XConfigurationResponse has binding name '_tds__DeleteDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse (241)
#endif

/* _tds__DeleteDot1XConfiguration has binding name '_tds__DeleteDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration
#define SOAP_TYPE__tds__DeleteDot1XConfiguration (240)
#endif

/* _tds__GetDot1XConfigurationsResponse has binding name '_tds__GetDot1XConfigurationsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse (239)
#endif

/* _tds__GetDot1XConfigurations has binding name '_tds__GetDot1XConfigurations' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurations
#define SOAP_TYPE__tds__GetDot1XConfigurations (238)
#endif

/* _tds__GetDot1XConfigurationResponse has binding name '_tds__GetDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse (237)
#endif

/* _tds__GetDot1XConfiguration has binding name '_tds__GetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetDot1XConfiguration
#define SOAP_TYPE__tds__GetDot1XConfiguration (236)
#endif

/* _tds__SetDot1XConfigurationResponse has binding name '_tds__SetDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse (235)
#endif

/* _tds__SetDot1XConfiguration has binding name '_tds__SetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetDot1XConfiguration
#define SOAP_TYPE__tds__SetDot1XConfiguration (234)
#endif

/* _tds__CreateDot1XConfigurationResponse has binding name '_tds__CreateDot1XConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse (233)
#endif

/* _tds__CreateDot1XConfiguration has binding name '_tds__CreateDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration
#define SOAP_TYPE__tds__CreateDot1XConfiguration (232)
#endif

/* _tds__LoadCACertificatesResponse has binding name '_tds__LoadCACertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse
#define SOAP_TYPE__tds__LoadCACertificatesResponse (231)
#endif

/* _tds__LoadCACertificates has binding name '_tds__LoadCACertificates' for type '' */
#ifndef SOAP_TYPE__tds__LoadCACertificates
#define SOAP_TYPE__tds__LoadCACertificates (230)
#endif

/* _tds__GetCertificateInformationResponse has binding name '_tds__GetCertificateInformationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse
#define SOAP_TYPE__tds__GetCertificateInformationResponse (229)
#endif

/* _tds__GetCertificateInformation has binding name '_tds__GetCertificateInformation' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificateInformation
#define SOAP_TYPE__tds__GetCertificateInformation (228)
#endif

/* _tds__LoadCertificateWithPrivateKeyResponse has binding name '_tds__LoadCertificateWithPrivateKeyResponse' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse (227)
#endif

/* _tds__LoadCertificateWithPrivateKey has binding name '_tds__LoadCertificateWithPrivateKey' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey (226)
#endif

/* _tds__GetCACertificatesResponse has binding name '_tds__GetCACertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCACertificatesResponse
#define SOAP_TYPE__tds__GetCACertificatesResponse (225)
#endif

/* _tds__GetCACertificates has binding name '_tds__GetCACertificates' for type '' */
#ifndef SOAP_TYPE__tds__GetCACertificates
#define SOAP_TYPE__tds__GetCACertificates (224)
#endif

/* _tds__SetClientCertificateModeResponse has binding name '_tds__SetClientCertificateModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse
#define SOAP_TYPE__tds__SetClientCertificateModeResponse (223)
#endif

/* _tds__SetClientCertificateMode has binding name '_tds__SetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE__tds__SetClientCertificateMode
#define SOAP_TYPE__tds__SetClientCertificateMode (222)
#endif

/* _tds__GetClientCertificateModeResponse has binding name '_tds__GetClientCertificateModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse
#define SOAP_TYPE__tds__GetClientCertificateModeResponse (221)
#endif

/* _tds__GetClientCertificateMode has binding name '_tds__GetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE__tds__GetClientCertificateMode
#define SOAP_TYPE__tds__GetClientCertificateMode (220)
#endif

/* _tds__LoadCertificatesResponse has binding name '_tds__LoadCertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificatesResponse
#define SOAP_TYPE__tds__LoadCertificatesResponse (219)
#endif

/* _tds__LoadCertificates has binding name '_tds__LoadCertificates' for type '' */
#ifndef SOAP_TYPE__tds__LoadCertificates
#define SOAP_TYPE__tds__LoadCertificates (218)
#endif

/* _tds__GetPkcs10RequestResponse has binding name '_tds__GetPkcs10RequestResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse
#define SOAP_TYPE__tds__GetPkcs10RequestResponse (217)
#endif

/* _tds__GetPkcs10Request has binding name '_tds__GetPkcs10Request' for type '' */
#ifndef SOAP_TYPE__tds__GetPkcs10Request
#define SOAP_TYPE__tds__GetPkcs10Request (216)
#endif

/* _tds__DeleteCertificatesResponse has binding name '_tds__DeleteCertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse
#define SOAP_TYPE__tds__DeleteCertificatesResponse (215)
#endif

/* _tds__DeleteCertificates has binding name '_tds__DeleteCertificates' for type '' */
#ifndef SOAP_TYPE__tds__DeleteCertificates
#define SOAP_TYPE__tds__DeleteCertificates (214)
#endif

/* _tds__SetCertificatesStatusResponse has binding name '_tds__SetCertificatesStatusResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse
#define SOAP_TYPE__tds__SetCertificatesStatusResponse (213)
#endif

/* _tds__SetCertificatesStatus has binding name '_tds__SetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE__tds__SetCertificatesStatus
#define SOAP_TYPE__tds__SetCertificatesStatus (212)
#endif

/* _tds__GetCertificatesStatusResponse has binding name '_tds__GetCertificatesStatusResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse
#define SOAP_TYPE__tds__GetCertificatesStatusResponse (211)
#endif

/* _tds__GetCertificatesStatus has binding name '_tds__GetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificatesStatus
#define SOAP_TYPE__tds__GetCertificatesStatus (210)
#endif

/* _tds__GetCertificatesResponse has binding name '_tds__GetCertificatesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificatesResponse
#define SOAP_TYPE__tds__GetCertificatesResponse (209)
#endif

/* _tds__GetCertificates has binding name '_tds__GetCertificates' for type '' */
#ifndef SOAP_TYPE__tds__GetCertificates
#define SOAP_TYPE__tds__GetCertificates (208)
#endif

/* _tds__CreateCertificateResponse has binding name '_tds__CreateCertificateResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateCertificateResponse
#define SOAP_TYPE__tds__CreateCertificateResponse (207)
#endif

/* _tds__CreateCertificate has binding name '_tds__CreateCertificate' for type '' */
#ifndef SOAP_TYPE__tds__CreateCertificate
#define SOAP_TYPE__tds__CreateCertificate (206)
#endif

/* _tds__SetAccessPolicyResponse has binding name '_tds__SetAccessPolicyResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse
#define SOAP_TYPE__tds__SetAccessPolicyResponse (205)
#endif

/* _tds__SetAccessPolicy has binding name '_tds__SetAccessPolicy' for type '' */
#ifndef SOAP_TYPE__tds__SetAccessPolicy
#define SOAP_TYPE__tds__SetAccessPolicy (204)
#endif

/* _tds__GetAccessPolicyResponse has binding name '_tds__GetAccessPolicyResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse
#define SOAP_TYPE__tds__GetAccessPolicyResponse (203)
#endif

/* _tds__GetAccessPolicy has binding name '_tds__GetAccessPolicy' for type '' */
#ifndef SOAP_TYPE__tds__GetAccessPolicy
#define SOAP_TYPE__tds__GetAccessPolicy (202)
#endif

/* _tds__RemoveIPAddressFilterResponse has binding name '_tds__RemoveIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse (201)
#endif

/* _tds__RemoveIPAddressFilter has binding name '_tds__RemoveIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter
#define SOAP_TYPE__tds__RemoveIPAddressFilter (200)
#endif

/* _tds__AddIPAddressFilterResponse has binding name '_tds__AddIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse
#define SOAP_TYPE__tds__AddIPAddressFilterResponse (199)
#endif

/* _tds__AddIPAddressFilter has binding name '_tds__AddIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__AddIPAddressFilter
#define SOAP_TYPE__tds__AddIPAddressFilter (198)
#endif

/* _tds__SetIPAddressFilterResponse has binding name '_tds__SetIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse
#define SOAP_TYPE__tds__SetIPAddressFilterResponse (197)
#endif

/* _tds__SetIPAddressFilter has binding name '_tds__SetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__SetIPAddressFilter
#define SOAP_TYPE__tds__SetIPAddressFilter (196)
#endif

/* _tds__GetIPAddressFilterResponse has binding name '_tds__GetIPAddressFilterResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse
#define SOAP_TYPE__tds__GetIPAddressFilterResponse (195)
#endif

/* _tds__GetIPAddressFilter has binding name '_tds__GetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE__tds__GetIPAddressFilter
#define SOAP_TYPE__tds__GetIPAddressFilter (194)
#endif

/* _tds__SetZeroConfigurationResponse has binding name '_tds__SetZeroConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse
#define SOAP_TYPE__tds__SetZeroConfigurationResponse (193)
#endif

/* _tds__SetZeroConfiguration has binding name '_tds__SetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetZeroConfiguration
#define SOAP_TYPE__tds__SetZeroConfiguration (192)
#endif

/* _tds__GetZeroConfigurationResponse has binding name '_tds__GetZeroConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse
#define SOAP_TYPE__tds__GetZeroConfigurationResponse (191)
#endif

/* _tds__GetZeroConfiguration has binding name '_tds__GetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetZeroConfiguration
#define SOAP_TYPE__tds__GetZeroConfiguration (190)
#endif

/* _tds__SetNetworkDefaultGatewayResponse has binding name '_tds__SetNetworkDefaultGatewayResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse (189)
#endif

/* _tds__SetNetworkDefaultGateway has binding name '_tds__SetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway
#define SOAP_TYPE__tds__SetNetworkDefaultGateway (188)
#endif

/* _tds__GetNetworkDefaultGatewayResponse has binding name '_tds__GetNetworkDefaultGatewayResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse (187)
#endif

/* _tds__GetNetworkDefaultGateway has binding name '_tds__GetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway
#define SOAP_TYPE__tds__GetNetworkDefaultGateway (186)
#endif

/* _tds__SetNetworkProtocolsResponse has binding name '_tds__SetNetworkProtocolsResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse (185)
#endif

/* _tds__SetNetworkProtocols has binding name '_tds__SetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkProtocols
#define SOAP_TYPE__tds__SetNetworkProtocols (184)
#endif

/* _tds__GetNetworkProtocolsResponse has binding name '_tds__GetNetworkProtocolsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse (183)
#endif

/* _tds__GetNetworkProtocols has binding name '_tds__GetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkProtocols
#define SOAP_TYPE__tds__GetNetworkProtocols (182)
#endif

/* _tds__SetNetworkInterfacesResponse has binding name '_tds__SetNetworkInterfacesResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse (181)
#endif

/* _tds__SetNetworkInterfaces has binding name '_tds__SetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE__tds__SetNetworkInterfaces
#define SOAP_TYPE__tds__SetNetworkInterfaces (180)
#endif

/* _tds__GetNetworkInterfacesResponse has binding name '_tds__GetNetworkInterfacesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse (179)
#endif

/* _tds__GetNetworkInterfaces has binding name '_tds__GetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE__tds__GetNetworkInterfaces
#define SOAP_TYPE__tds__GetNetworkInterfaces (178)
#endif

/* _tds__SetDynamicDNSResponse has binding name '_tds__SetDynamicDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse
#define SOAP_TYPE__tds__SetDynamicDNSResponse (177)
#endif

/* _tds__SetDynamicDNS has binding name '_tds__SetDynamicDNS' for type '' */
#ifndef SOAP_TYPE__tds__SetDynamicDNS
#define SOAP_TYPE__tds__SetDynamicDNS (176)
#endif

/* _tds__GetDynamicDNSResponse has binding name '_tds__GetDynamicDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse
#define SOAP_TYPE__tds__GetDynamicDNSResponse (175)
#endif

/* _tds__GetDynamicDNS has binding name '_tds__GetDynamicDNS' for type '' */
#ifndef SOAP_TYPE__tds__GetDynamicDNS
#define SOAP_TYPE__tds__GetDynamicDNS (174)
#endif

/* _tds__SetNTPResponse has binding name '_tds__SetNTPResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetNTPResponse
#define SOAP_TYPE__tds__SetNTPResponse (173)
#endif

/* _tds__SetNTP has binding name '_tds__SetNTP' for type '' */
#ifndef SOAP_TYPE__tds__SetNTP
#define SOAP_TYPE__tds__SetNTP (172)
#endif

/* _tds__GetNTPResponse has binding name '_tds__GetNTPResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetNTPResponse
#define SOAP_TYPE__tds__GetNTPResponse (171)
#endif

/* _tds__GetNTP has binding name '_tds__GetNTP' for type '' */
#ifndef SOAP_TYPE__tds__GetNTP
#define SOAP_TYPE__tds__GetNTP (170)
#endif

/* _tds__SetDNSResponse has binding name '_tds__SetDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDNSResponse
#define SOAP_TYPE__tds__SetDNSResponse (169)
#endif

/* _tds__SetDNS has binding name '_tds__SetDNS' for type '' */
#ifndef SOAP_TYPE__tds__SetDNS
#define SOAP_TYPE__tds__SetDNS (168)
#endif

/* _tds__GetDNSResponse has binding name '_tds__GetDNSResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDNSResponse
#define SOAP_TYPE__tds__GetDNSResponse (167)
#endif

/* _tds__GetDNS has binding name '_tds__GetDNS' for type '' */
#ifndef SOAP_TYPE__tds__GetDNS
#define SOAP_TYPE__tds__GetDNS (166)
#endif

/* _tds__SetHostnameFromDHCPResponse has binding name '_tds__SetHostnameFromDHCPResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse (165)
#endif

/* _tds__SetHostnameFromDHCP has binding name '_tds__SetHostnameFromDHCP' for type '' */
#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP
#define SOAP_TYPE__tds__SetHostnameFromDHCP (164)
#endif

/* _tds__SetHostnameResponse has binding name '_tds__SetHostnameResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetHostnameResponse
#define SOAP_TYPE__tds__SetHostnameResponse (163)
#endif

/* _tds__SetHostname has binding name '_tds__SetHostname' for type '' */
#ifndef SOAP_TYPE__tds__SetHostname
#define SOAP_TYPE__tds__SetHostname (162)
#endif

/* _tds__GetHostnameResponse has binding name '_tds__GetHostnameResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetHostnameResponse
#define SOAP_TYPE__tds__GetHostnameResponse (161)
#endif

/* _tds__GetHostname has binding name '_tds__GetHostname' for type '' */
#ifndef SOAP_TYPE__tds__GetHostname
#define SOAP_TYPE__tds__GetHostname (160)
#endif

/* _tds__GetCapabilitiesResponse has binding name '_tds__GetCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse
#define SOAP_TYPE__tds__GetCapabilitiesResponse (159)
#endif

/* _tds__GetCapabilities has binding name '_tds__GetCapabilities' for type '' */
#ifndef SOAP_TYPE__tds__GetCapabilities
#define SOAP_TYPE__tds__GetCapabilities (158)
#endif

/* _tds__SetAuthFailureWarningConfigurationResponse has binding name '_tds__SetAuthFailureWarningConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse (157)
#endif

/* _tds__SetAuthFailureWarningConfiguration has binding name '_tds__SetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__SetAuthFailureWarningConfiguration (156)
#endif

/* _tds__GetAuthFailureWarningConfigurationResponse has binding name '_tds__GetAuthFailureWarningConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse (155)
#endif

/* _tds__GetAuthFailureWarningConfiguration has binding name '_tds__GetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE__tds__GetAuthFailureWarningConfiguration (154)
#endif

/* _tds__GetAuthFailureWarningOptionsResponse has binding name '_tds__GetAuthFailureWarningOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse
#define SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse (153)
#endif

/* _tds__GetAuthFailureWarningOptions has binding name '_tds__GetAuthFailureWarningOptions' for type '' */
#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptions
#define SOAP_TYPE__tds__GetAuthFailureWarningOptions (152)
#endif

/* _tds__SetPasswordHistoryConfigurationResponse has binding name '_tds__SetPasswordHistoryConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse (151)
#endif

/* _tds__SetPasswordHistoryConfiguration has binding name '_tds__SetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__SetPasswordHistoryConfiguration (150)
#endif

/* _tds__GetPasswordHistoryConfigurationResponse has binding name '_tds__GetPasswordHistoryConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse (149)
#endif

/* _tds__GetPasswordHistoryConfiguration has binding name '_tds__GetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE__tds__GetPasswordHistoryConfiguration (148)
#endif

/* _tds__SetPasswordComplexityConfigurationResponse has binding name '_tds__SetPasswordComplexityConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse (147)
#endif

/* _tds__SetPasswordComplexityConfiguration has binding name '_tds__SetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__SetPasswordComplexityConfiguration (146)
#endif

/* _tds__GetPasswordComplexityConfigurationResponse has binding name '_tds__GetPasswordComplexityConfigurationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse
#define SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse (145)
#endif

/* _tds__GetPasswordComplexityConfiguration has binding name '_tds__GetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE__tds__GetPasswordComplexityConfiguration (144)
#endif

/* _tds__GetPasswordComplexityOptionsResponse has binding name '_tds__GetPasswordComplexityOptionsResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse
#define SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse (143)
#endif

/* _tds__GetPasswordComplexityOptions has binding name '_tds__GetPasswordComplexityOptions' for type '' */
#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptions
#define SOAP_TYPE__tds__GetPasswordComplexityOptions (142)
#endif

/* _tds__GetWsdlUrlResponse has binding name '_tds__GetWsdlUrlResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse
#define SOAP_TYPE__tds__GetWsdlUrlResponse (141)
#endif

/* _tds__GetWsdlUrl has binding name '_tds__GetWsdlUrl' for type '' */
#ifndef SOAP_TYPE__tds__GetWsdlUrl
#define SOAP_TYPE__tds__GetWsdlUrl (140)
#endif

/* _tds__SetUserResponse has binding name '_tds__SetUserResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetUserResponse
#define SOAP_TYPE__tds__SetUserResponse (139)
#endif

/* _tds__SetUser has binding name '_tds__SetUser' for type '' */
#ifndef SOAP_TYPE__tds__SetUser
#define SOAP_TYPE__tds__SetUser (138)
#endif

/* _tds__DeleteUsersResponse has binding name '_tds__DeleteUsersResponse' for type '' */
#ifndef SOAP_TYPE__tds__DeleteUsersResponse
#define SOAP_TYPE__tds__DeleteUsersResponse (137)
#endif

/* _tds__DeleteUsers has binding name '_tds__DeleteUsers' for type '' */
#ifndef SOAP_TYPE__tds__DeleteUsers
#define SOAP_TYPE__tds__DeleteUsers (136)
#endif

/* _tds__CreateUsersResponse has binding name '_tds__CreateUsersResponse' for type '' */
#ifndef SOAP_TYPE__tds__CreateUsersResponse
#define SOAP_TYPE__tds__CreateUsersResponse (135)
#endif

/* _tds__CreateUsers has binding name '_tds__CreateUsers' for type '' */
#ifndef SOAP_TYPE__tds__CreateUsers
#define SOAP_TYPE__tds__CreateUsers (134)
#endif

/* _tds__GetUsersResponse has binding name '_tds__GetUsersResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetUsersResponse
#define SOAP_TYPE__tds__GetUsersResponse (133)
#endif

/* _tds__GetUsers has binding name '_tds__GetUsers' for type '' */
#ifndef SOAP_TYPE__tds__GetUsers
#define SOAP_TYPE__tds__GetUsers (132)
#endif

/* _tds__SetRemoteUserResponse has binding name '_tds__SetRemoteUserResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteUserResponse
#define SOAP_TYPE__tds__SetRemoteUserResponse (131)
#endif

/* _tds__SetRemoteUser has binding name '_tds__SetRemoteUser' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteUser
#define SOAP_TYPE__tds__SetRemoteUser (130)
#endif

/* _tds__GetRemoteUserResponse has binding name '_tds__GetRemoteUserResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteUserResponse
#define SOAP_TYPE__tds__GetRemoteUserResponse (129)
#endif

/* _tds__GetRemoteUser has binding name '_tds__GetRemoteUser' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteUser
#define SOAP_TYPE__tds__GetRemoteUser (128)
#endif

/* _tds__GetEndpointReferenceResponse has binding name '_tds__GetEndpointReferenceResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse
#define SOAP_TYPE__tds__GetEndpointReferenceResponse (127)
#endif

/* _tds__GetEndpointReference has binding name '_tds__GetEndpointReference' for type '' */
#ifndef SOAP_TYPE__tds__GetEndpointReference
#define SOAP_TYPE__tds__GetEndpointReference (126)
#endif

/* _tds__SetDPAddressesResponse has binding name '_tds__SetDPAddressesResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDPAddressesResponse
#define SOAP_TYPE__tds__SetDPAddressesResponse (125)
#endif

/* _tds__SetDPAddresses has binding name '_tds__SetDPAddresses' for type '' */
#ifndef SOAP_TYPE__tds__SetDPAddresses
#define SOAP_TYPE__tds__SetDPAddresses (124)
#endif

/* _tds__GetDPAddressesResponse has binding name '_tds__GetDPAddressesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDPAddressesResponse
#define SOAP_TYPE__tds__GetDPAddressesResponse (123)
#endif

/* _tds__GetDPAddresses has binding name '_tds__GetDPAddresses' for type '' */
#ifndef SOAP_TYPE__tds__GetDPAddresses
#define SOAP_TYPE__tds__GetDPAddresses (122)
#endif

/* _tds__SetRemoteDiscoveryModeResponse has binding name '_tds__SetRemoteDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse (121)
#endif

/* _tds__SetRemoteDiscoveryMode has binding name '_tds__SetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode (120)
#endif

/* _tds__GetRemoteDiscoveryModeResponse has binding name '_tds__GetRemoteDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse (119)
#endif

/* _tds__GetRemoteDiscoveryMode has binding name '_tds__GetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode (118)
#endif

/* _tds__SetDiscoveryModeResponse has binding name '_tds__SetDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse
#define SOAP_TYPE__tds__SetDiscoveryModeResponse (117)
#endif

/* _tds__SetDiscoveryMode has binding name '_tds__SetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__SetDiscoveryMode
#define SOAP_TYPE__tds__SetDiscoveryMode (116)
#endif

/* _tds__GetDiscoveryModeResponse has binding name '_tds__GetDiscoveryModeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse
#define SOAP_TYPE__tds__GetDiscoveryModeResponse (115)
#endif

/* _tds__GetDiscoveryMode has binding name '_tds__GetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE__tds__GetDiscoveryMode
#define SOAP_TYPE__tds__GetDiscoveryMode (114)
#endif

/* _tds__RemoveScopesResponse has binding name '_tds__RemoveScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__RemoveScopesResponse
#define SOAP_TYPE__tds__RemoveScopesResponse (113)
#endif

/* _tds__RemoveScopes has binding name '_tds__RemoveScopes' for type '' */
#ifndef SOAP_TYPE__tds__RemoveScopes
#define SOAP_TYPE__tds__RemoveScopes (112)
#endif

/* _tds__AddScopesResponse has binding name '_tds__AddScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__AddScopesResponse
#define SOAP_TYPE__tds__AddScopesResponse (111)
#endif

/* _tds__AddScopes has binding name '_tds__AddScopes' for type '' */
#ifndef SOAP_TYPE__tds__AddScopes
#define SOAP_TYPE__tds__AddScopes (110)
#endif

/* _tds__SetScopesResponse has binding name '_tds__SetScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetScopesResponse
#define SOAP_TYPE__tds__SetScopesResponse (109)
#endif

/* _tds__SetScopes has binding name '_tds__SetScopes' for type '' */
#ifndef SOAP_TYPE__tds__SetScopes
#define SOAP_TYPE__tds__SetScopes (108)
#endif

/* _tds__GetScopesResponse has binding name '_tds__GetScopesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetScopesResponse
#define SOAP_TYPE__tds__GetScopesResponse (107)
#endif

/* _tds__GetScopes has binding name '_tds__GetScopes' for type '' */
#ifndef SOAP_TYPE__tds__GetScopes
#define SOAP_TYPE__tds__GetScopes (106)
#endif

/* _tds__GetSystemLogResponse has binding name '_tds__GetSystemLogResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemLogResponse
#define SOAP_TYPE__tds__GetSystemLogResponse (105)
#endif

/* _tds__GetSystemLog has binding name '_tds__GetSystemLog' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemLog
#define SOAP_TYPE__tds__GetSystemLog (104)
#endif

/* _tds__GetSystemSupportInformationResponse has binding name '_tds__GetSystemSupportInformationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse (103)
#endif

/* _tds__GetSystemSupportInformation has binding name '_tds__GetSystemSupportInformation' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemSupportInformation
#define SOAP_TYPE__tds__GetSystemSupportInformation (102)
#endif

/* _tds__GetSystemBackupResponse has binding name '_tds__GetSystemBackupResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemBackupResponse
#define SOAP_TYPE__tds__GetSystemBackupResponse (101)
#endif

/* _tds__GetSystemBackup has binding name '_tds__GetSystemBackup' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemBackup
#define SOAP_TYPE__tds__GetSystemBackup (100)
#endif

/* _tds__RestoreSystemResponse has binding name '_tds__RestoreSystemResponse' for type '' */
#ifndef SOAP_TYPE__tds__RestoreSystemResponse
#define SOAP_TYPE__tds__RestoreSystemResponse (99)
#endif

/* _tds__RestoreSystem has binding name '_tds__RestoreSystem' for type '' */
#ifndef SOAP_TYPE__tds__RestoreSystem
#define SOAP_TYPE__tds__RestoreSystem (98)
#endif

/* _tds__SystemRebootResponse has binding name '_tds__SystemRebootResponse' for type '' */
#ifndef SOAP_TYPE__tds__SystemRebootResponse
#define SOAP_TYPE__tds__SystemRebootResponse (97)
#endif

/* _tds__SystemReboot has binding name '_tds__SystemReboot' for type '' */
#ifndef SOAP_TYPE__tds__SystemReboot
#define SOAP_TYPE__tds__SystemReboot (96)
#endif

/* _tds__UpgradeSystemFirmwareResponse has binding name '_tds__UpgradeSystemFirmwareResponse' for type '' */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse (95)
#endif

/* _tds__UpgradeSystemFirmware has binding name '_tds__UpgradeSystemFirmware' for type '' */
#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware
#define SOAP_TYPE__tds__UpgradeSystemFirmware (94)
#endif

/* _tds__SetSystemFactoryDefaultResponse has binding name '_tds__SetSystemFactoryDefaultResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse (93)
#endif

/* _tds__SetSystemFactoryDefault has binding name '_tds__SetSystemFactoryDefault' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault
#define SOAP_TYPE__tds__SetSystemFactoryDefault (92)
#endif

/* _tds__GetSystemDateAndTimeResponse has binding name '_tds__GetSystemDateAndTimeResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse (91)
#endif

/* _tds__GetSystemDateAndTime has binding name '_tds__GetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE__tds__GetSystemDateAndTime
#define SOAP_TYPE__tds__GetSystemDateAndTime (90)
#endif

/* _tds__SetSystemDateAndTimeResponse has binding name '_tds__SetSystemDateAndTimeResponse' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse (89)
#endif

/* _tds__SetSystemDateAndTime has binding name '_tds__SetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE__tds__SetSystemDateAndTime
#define SOAP_TYPE__tds__SetSystemDateAndTime (88)
#endif

/* _tds__GetDeviceInformationResponse has binding name '_tds__GetDeviceInformationResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse
#define SOAP_TYPE__tds__GetDeviceInformationResponse (87)
#endif

/* _tds__GetDeviceInformation has binding name '_tds__GetDeviceInformation' for type '' */
#ifndef SOAP_TYPE__tds__GetDeviceInformation
#define SOAP_TYPE__tds__GetDeviceInformation (86)
#endif

/* _tds__GetServiceCapabilitiesResponse has binding name '_tds__GetServiceCapabilitiesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse (85)
#endif

/* _tds__GetServiceCapabilities has binding name '_tds__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE__tds__GetServiceCapabilities
#define SOAP_TYPE__tds__GetServiceCapabilities (84)
#endif

/* _tds__GetServicesResponse has binding name '_tds__GetServicesResponse' for type '' */
#ifndef SOAP_TYPE__tds__GetServicesResponse
#define SOAP_TYPE__tds__GetServicesResponse (83)
#endif

/* _tds__GetServices has binding name '_tds__GetServices' for type '' */
#ifndef SOAP_TYPE__tds__GetServices
#define SOAP_TYPE__tds__GetServices (82)
#endif

/* tds__StorageConfiguration has binding name 'tds__StorageConfiguration' for type 'tds:StorageConfiguration' */
#ifndef SOAP_TYPE_tds__StorageConfiguration
#define SOAP_TYPE_tds__StorageConfiguration (81)
#endif

/* tds__StorageConfigurationData has binding name 'tds__StorageConfigurationData' for type 'tds:StorageConfigurationData' */
#ifndef SOAP_TYPE_tds__StorageConfigurationData
#define SOAP_TYPE_tds__StorageConfigurationData (80)
#endif

/* tds__UserCredential has binding name 'tds__UserCredential' for type 'tds:UserCredential' */
#ifndef SOAP_TYPE_tds__UserCredential
#define SOAP_TYPE_tds__UserCredential (79)
#endif

/* tds__MiscCapabilities has binding name 'tds__MiscCapabilities' for type 'tds:MiscCapabilities' */
#ifndef SOAP_TYPE_tds__MiscCapabilities
#define SOAP_TYPE_tds__MiscCapabilities (78)
#endif

/* tds__SystemCapabilities has binding name 'tds__SystemCapabilities' for type 'tds:SystemCapabilities' */
#ifndef SOAP_TYPE_tds__SystemCapabilities
#define SOAP_TYPE_tds__SystemCapabilities (77)
#endif

/* tds__SecurityCapabilities has binding name 'tds__SecurityCapabilities' for type 'tds:SecurityCapabilities' */
#ifndef SOAP_TYPE_tds__SecurityCapabilities
#define SOAP_TYPE_tds__SecurityCapabilities (76)
#endif

/* tds__NetworkCapabilities has binding name 'tds__NetworkCapabilities' for type 'tds:NetworkCapabilities' */
#ifndef SOAP_TYPE_tds__NetworkCapabilities
#define SOAP_TYPE_tds__NetworkCapabilities (75)
#endif

/* tds__DeviceServiceCapabilities has binding name 'tds__DeviceServiceCapabilities' for type 'tds:DeviceServiceCapabilities' */
#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities
#define SOAP_TYPE_tds__DeviceServiceCapabilities (74)
#endif

/* tds__Service has binding name 'tds__Service' for type 'tds:Service' */
#ifndef SOAP_TYPE_tds__Service
#define SOAP_TYPE_tds__Service (73)
#endif

/* _xml__lang has binding name '_xml__lang' for type '' */
#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (72)
#endif

/* xsd__token has binding name 'xsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (71)
#endif

/* xsd__nonNegativeInteger has binding name 'xsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (70)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (69)
#endif

/* xsd__duration has binding name 'xsd__duration' for type 'xsd:duration' */
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (68)
#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (67)
#endif

/* xsd__anySimpleType has binding name 'xsd__anySimpleType' for type 'xsd:anySimpleType' */
#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (66)
#endif

/* xsd__NCName has binding name 'xsd__NCName' for type 'xsd:NCName' */
#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (65)
#endif

/* xsd__hexBinary has binding name 'xsd__hexBinary' for type 'xsd:hexBinary' */
#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (64)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (63)
#endif

/* xsd__QName has binding name 'xsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (62)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (61)
#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (57)
#endif

/* struct SOAP_ENV__Envelope has binding name 'SOAP_ENV__Envelope' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (59)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
#endif

/* struct chan__ChannelInstanceType has binding name 'chan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (41)
#endif

/* _wsa5__ProblemAction has binding name '_wsa5__ProblemAction' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (39)
#endif

/* _wsa5__FaultTo has binding name '_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (32)
#endif

/* _wsa5__From has binding name '_wsa5__From' for type '' */
#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (31)
#endif

/* _wsa5__ReplyTo has binding name '_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (30)
#endif

/* _wsa5__RelatesTo has binding name '_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (29)
#endif

/* _wsa5__Metadata has binding name '_wsa5__Metadata' for type '' */
#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (27)
#endif

/* _wsa5__ReferenceParameters has binding name '_wsa5__ReferenceParameters' for type '' */
#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (26)
#endif

/* _wsa5__EndpointReference has binding name '_wsa5__EndpointReference' for type '' */
#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (25)
#endif

/* struct wsa5__ProblemActionType has binding name 'wsa5__ProblemActionType' for type 'wsa5:ProblemActionType' */
#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (16)
#endif

/* struct wsa5__RelatesToType has binding name 'wsa5__RelatesToType' for type 'wsa5:RelatesToType' */
#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (15)
#endif

/* struct wsa5__MetadataType has binding name 'wsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (14)
#endif

/* struct wsa5__ReferenceParametersType has binding name 'wsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (13)
#endif

/* struct wsa5__EndpointReferenceType has binding name 'wsa5__EndpointReferenceType' for type 'wsa5:EndpointReferenceType' */
#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (12)
#endif

/* struct _xop__Include has binding name '_xop__Include' for type '' */
#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (8)
#endif

/* _tds__SetHashingAlgorithm * has binding name 'PointerTo_tds__SetHashingAlgorithm' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetHashingAlgorithm
#define SOAP_TYPE_PointerTo_tds__SetHashingAlgorithm (1024)
#endif

/* _tds__DeleteGeoLocation * has binding name 'PointerTo_tds__DeleteGeoLocation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteGeoLocation
#define SOAP_TYPE_PointerTo_tds__DeleteGeoLocation (1020)
#endif

/* _tds__SetGeoLocation * has binding name 'PointerTo_tds__SetGeoLocation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetGeoLocation
#define SOAP_TYPE_PointerTo_tds__SetGeoLocation (1016)
#endif

/* _tds__GetGeoLocation * has binding name 'PointerTo_tds__GetGeoLocation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetGeoLocation
#define SOAP_TYPE_PointerTo_tds__GetGeoLocation (1012)
#endif

/* _tds__DeleteStorageConfiguration * has binding name 'PointerTo_tds__DeleteStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration (1008)
#endif

/* _tds__SetStorageConfiguration * has binding name 'PointerTo_tds__SetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__SetStorageConfiguration (1004)
#endif

/* _tds__GetStorageConfiguration * has binding name 'PointerTo_tds__GetStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__GetStorageConfiguration (1000)
#endif

/* _tds__CreateStorageConfiguration * has binding name 'PointerTo_tds__CreateStorageConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration
#define SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration (996)
#endif

/* _tds__GetStorageConfigurations * has binding name 'PointerTo_tds__GetStorageConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfigurations
#define SOAP_TYPE_PointerTo_tds__GetStorageConfigurations (992)
#endif

/* _tds__StartSystemRestore * has binding name 'PointerTo_tds__StartSystemRestore' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__StartSystemRestore
#define SOAP_TYPE_PointerTo_tds__StartSystemRestore (988)
#endif

/* _tds__StartFirmwareUpgrade * has binding name 'PointerTo_tds__StartFirmwareUpgrade' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade
#define SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade (984)
#endif

/* _tds__GetSystemUris * has binding name 'PointerTo_tds__GetSystemUris' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUris
#define SOAP_TYPE_PointerTo_tds__GetSystemUris (980)
#endif

/* _tds__ScanAvailableDot11Networks * has binding name 'PointerTo_tds__ScanAvailableDot11Networks' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks
#define SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks (976)
#endif

/* _tds__GetDot11Status * has binding name 'PointerTo_tds__GetDot11Status' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Status
#define SOAP_TYPE_PointerTo_tds__GetDot11Status (972)
#endif

/* _tds__GetDot11Capabilities * has binding name 'PointerTo_tds__GetDot11Capabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Capabilities
#define SOAP_TYPE_PointerTo_tds__GetDot11Capabilities (968)
#endif

/* _tds__DeleteDot1XConfiguration * has binding name 'PointerTo_tds__DeleteDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration (964)
#endif

/* _tds__GetDot1XConfigurations * has binding name 'PointerTo_tds__GetDot1XConfigurations' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations (960)
#endif

/* _tds__GetDot1XConfiguration * has binding name 'PointerTo_tds__GetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration (956)
#endif

/* _tds__SetDot1XConfiguration * has binding name 'PointerTo_tds__SetDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration (952)
#endif

/* _tds__CreateDot1XConfiguration * has binding name 'PointerTo_tds__CreateDot1XConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration
#define SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration (948)
#endif

/* _tds__LoadCACertificates * has binding name 'PointerTo_tds__LoadCACertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__LoadCACertificates
#define SOAP_TYPE_PointerTo_tds__LoadCACertificates (944)
#endif

/* _tds__GetCertificateInformation * has binding name 'PointerTo_tds__GetCertificateInformation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCertificateInformation
#define SOAP_TYPE_PointerTo_tds__GetCertificateInformation (940)
#endif

/* _tds__LoadCertificateWithPrivateKey * has binding name 'PointerTo_tds__LoadCertificateWithPrivateKey' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey (936)
#endif

/* _tds__GetCACertificates * has binding name 'PointerTo_tds__GetCACertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCACertificates
#define SOAP_TYPE_PointerTo_tds__GetCACertificates (932)
#endif

/* _tds__SendAuxiliaryCommand * has binding name 'PointerTo_tds__SendAuxiliaryCommand' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand
#define SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand (928)
#endif

/* _tds__SetRelayOutputState * has binding name 'PointerTo_tds__SetRelayOutputState' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputState
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputState (924)
#endif

/* _tds__SetRelayOutputSettings * has binding name 'PointerTo_tds__SetRelayOutputSettings' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings (920)
#endif

/* _tds__GetRelayOutputs * has binding name 'PointerTo_tds__GetRelayOutputs' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetRelayOutputs
#define SOAP_TYPE_PointerTo_tds__GetRelayOutputs (916)
#endif

/* _tds__SetClientCertificateMode * has binding name 'PointerTo_tds__SetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetClientCertificateMode
#define SOAP_TYPE_PointerTo_tds__SetClientCertificateMode (912)
#endif

/* _tds__GetClientCertificateMode * has binding name 'PointerTo_tds__GetClientCertificateMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetClientCertificateMode
#define SOAP_TYPE_PointerTo_tds__GetClientCertificateMode (908)
#endif

/* _tds__LoadCertificates * has binding name 'PointerTo_tds__LoadCertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificates
#define SOAP_TYPE_PointerTo_tds__LoadCertificates (904)
#endif

/* _tds__GetPkcs10Request * has binding name 'PointerTo_tds__GetPkcs10Request' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPkcs10Request
#define SOAP_TYPE_PointerTo_tds__GetPkcs10Request (900)
#endif

/* _tds__DeleteCertificates * has binding name 'PointerTo_tds__DeleteCertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteCertificates
#define SOAP_TYPE_PointerTo_tds__DeleteCertificates (896)
#endif

/* _tds__SetCertificatesStatus * has binding name 'PointerTo_tds__SetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetCertificatesStatus
#define SOAP_TYPE_PointerTo_tds__SetCertificatesStatus (892)
#endif

/* _tds__GetCertificatesStatus * has binding name 'PointerTo_tds__GetCertificatesStatus' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCertificatesStatus
#define SOAP_TYPE_PointerTo_tds__GetCertificatesStatus (888)
#endif

/* _tds__GetCertificates * has binding name 'PointerTo_tds__GetCertificates' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCertificates
#define SOAP_TYPE_PointerTo_tds__GetCertificates (884)
#endif

/* _tds__CreateCertificate * has binding name 'PointerTo_tds__CreateCertificate' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateCertificate
#define SOAP_TYPE_PointerTo_tds__CreateCertificate (880)
#endif

/* _tds__SetAccessPolicy * has binding name 'PointerTo_tds__SetAccessPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetAccessPolicy
#define SOAP_TYPE_PointerTo_tds__SetAccessPolicy (876)
#endif

/* _tds__GetAccessPolicy * has binding name 'PointerTo_tds__GetAccessPolicy' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetAccessPolicy
#define SOAP_TYPE_PointerTo_tds__GetAccessPolicy (872)
#endif

/* _tds__RemoveIPAddressFilter * has binding name 'PointerTo_tds__RemoveIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter (868)
#endif

/* _tds__AddIPAddressFilter * has binding name 'PointerTo_tds__AddIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__AddIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__AddIPAddressFilter (864)
#endif

/* _tds__SetIPAddressFilter * has binding name 'PointerTo_tds__SetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__SetIPAddressFilter (860)
#endif

/* _tds__GetIPAddressFilter * has binding name 'PointerTo_tds__GetIPAddressFilter' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetIPAddressFilter
#define SOAP_TYPE_PointerTo_tds__GetIPAddressFilter (856)
#endif

/* _tds__SetZeroConfiguration * has binding name 'PointerTo_tds__SetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetZeroConfiguration
#define SOAP_TYPE_PointerTo_tds__SetZeroConfiguration (852)
#endif

/* _tds__GetZeroConfiguration * has binding name 'PointerTo_tds__GetZeroConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetZeroConfiguration
#define SOAP_TYPE_PointerTo_tds__GetZeroConfiguration (848)
#endif

/* _tds__SetNetworkDefaultGateway * has binding name 'PointerTo_tds__SetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway
#define SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway (844)
#endif

/* _tds__GetNetworkDefaultGateway * has binding name 'PointerTo_tds__GetNetworkDefaultGateway' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway
#define SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway (840)
#endif

/* _tds__SetNetworkProtocols * has binding name 'PointerTo_tds__SetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkProtocols
#define SOAP_TYPE_PointerTo_tds__SetNetworkProtocols (836)
#endif

/* _tds__GetNetworkProtocols * has binding name 'PointerTo_tds__GetNetworkProtocols' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkProtocols
#define SOAP_TYPE_PointerTo_tds__GetNetworkProtocols (832)
#endif

/* _tds__SetNetworkInterfaces * has binding name 'PointerTo_tds__SetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces
#define SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces (828)
#endif

/* _tds__GetNetworkInterfaces * has binding name 'PointerTo_tds__GetNetworkInterfaces' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces
#define SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces (824)
#endif

/* _tds__SetDynamicDNS * has binding name 'PointerTo_tds__SetDynamicDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDynamicDNS
#define SOAP_TYPE_PointerTo_tds__SetDynamicDNS (820)
#endif

/* _tds__GetDynamicDNS * has binding name 'PointerTo_tds__GetDynamicDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDynamicDNS
#define SOAP_TYPE_PointerTo_tds__GetDynamicDNS (816)
#endif

/* _tds__SetNTP * has binding name 'PointerTo_tds__SetNTP' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetNTP
#define SOAP_TYPE_PointerTo_tds__SetNTP (812)
#endif

/* _tds__GetNTP * has binding name 'PointerTo_tds__GetNTP' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetNTP
#define SOAP_TYPE_PointerTo_tds__GetNTP (808)
#endif

/* _tds__SetDNS * has binding name 'PointerTo_tds__SetDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDNS
#define SOAP_TYPE_PointerTo_tds__SetDNS (804)
#endif

/* _tds__GetDNS * has binding name 'PointerTo_tds__GetDNS' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDNS
#define SOAP_TYPE_PointerTo_tds__GetDNS (800)
#endif

/* _tds__SetHostnameFromDHCP * has binding name 'PointerTo_tds__SetHostnameFromDHCP' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP
#define SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP (796)
#endif

/* _tds__SetHostname * has binding name 'PointerTo_tds__SetHostname' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetHostname
#define SOAP_TYPE_PointerTo_tds__SetHostname (792)
#endif

/* _tds__GetHostname * has binding name 'PointerTo_tds__GetHostname' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetHostname
#define SOAP_TYPE_PointerTo_tds__GetHostname (788)
#endif

/* _tds__SetDPAddresses * has binding name 'PointerTo_tds__SetDPAddresses' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDPAddresses
#define SOAP_TYPE_PointerTo_tds__SetDPAddresses (784)
#endif

/* _tds__GetCapabilities * has binding name 'PointerTo_tds__GetCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetCapabilities
#define SOAP_TYPE_PointerTo_tds__GetCapabilities (780)
#endif

/* _tds__SetAuthFailureWarningConfiguration * has binding name 'PointerTo_tds__SetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetAuthFailureWarningConfiguration
#define SOAP_TYPE_PointerTo_tds__SetAuthFailureWarningConfiguration (776)
#endif

/* _tds__GetAuthFailureWarningConfiguration * has binding name 'PointerTo_tds__GetAuthFailureWarningConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningConfiguration
#define SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningConfiguration (772)
#endif

/* _tds__GetAuthFailureWarningOptions * has binding name 'PointerTo_tds__GetAuthFailureWarningOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningOptions
#define SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningOptions (768)
#endif

/* _tds__SetPasswordHistoryConfiguration * has binding name 'PointerTo_tds__SetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetPasswordHistoryConfiguration
#define SOAP_TYPE_PointerTo_tds__SetPasswordHistoryConfiguration (764)
#endif

/* _tds__GetPasswordHistoryConfiguration * has binding name 'PointerTo_tds__GetPasswordHistoryConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordHistoryConfiguration
#define SOAP_TYPE_PointerTo_tds__GetPasswordHistoryConfiguration (760)
#endif

/* _tds__SetPasswordComplexityConfiguration * has binding name 'PointerTo_tds__SetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetPasswordComplexityConfiguration
#define SOAP_TYPE_PointerTo_tds__SetPasswordComplexityConfiguration (756)
#endif

/* _tds__GetPasswordComplexityConfiguration * has binding name 'PointerTo_tds__GetPasswordComplexityConfiguration' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordComplexityConfiguration
#define SOAP_TYPE_PointerTo_tds__GetPasswordComplexityConfiguration (752)
#endif

/* _tds__GetPasswordComplexityOptions * has binding name 'PointerTo_tds__GetPasswordComplexityOptions' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordComplexityOptions
#define SOAP_TYPE_PointerTo_tds__GetPasswordComplexityOptions (748)
#endif

/* _tds__GetWsdlUrl * has binding name 'PointerTo_tds__GetWsdlUrl' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetWsdlUrl
#define SOAP_TYPE_PointerTo_tds__GetWsdlUrl (744)
#endif

/* _tds__SetUser * has binding name 'PointerTo_tds__SetUser' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetUser
#define SOAP_TYPE_PointerTo_tds__SetUser (740)
#endif

/* _tds__DeleteUsers * has binding name 'PointerTo_tds__DeleteUsers' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__DeleteUsers
#define SOAP_TYPE_PointerTo_tds__DeleteUsers (736)
#endif

/* _tds__CreateUsers * has binding name 'PointerTo_tds__CreateUsers' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__CreateUsers
#define SOAP_TYPE_PointerTo_tds__CreateUsers (732)
#endif

/* _tds__GetUsers * has binding name 'PointerTo_tds__GetUsers' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetUsers
#define SOAP_TYPE_PointerTo_tds__GetUsers (728)
#endif

/* _tds__SetRemoteUser * has binding name 'PointerTo_tds__SetRemoteUser' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteUser
#define SOAP_TYPE_PointerTo_tds__SetRemoteUser (724)
#endif

/* _tds__GetRemoteUser * has binding name 'PointerTo_tds__GetRemoteUser' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteUser
#define SOAP_TYPE_PointerTo_tds__GetRemoteUser (720)
#endif

/* _tds__GetEndpointReference * has binding name 'PointerTo_tds__GetEndpointReference' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetEndpointReference
#define SOAP_TYPE_PointerTo_tds__GetEndpointReference (716)
#endif

/* _tds__GetDPAddresses * has binding name 'PointerTo_tds__GetDPAddresses' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDPAddresses
#define SOAP_TYPE_PointerTo_tds__GetDPAddresses (712)
#endif

/* _tds__SetRemoteDiscoveryMode * has binding name 'PointerTo_tds__SetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode (708)
#endif

/* _tds__GetRemoteDiscoveryMode * has binding name 'PointerTo_tds__GetRemoteDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode (704)
#endif

/* _tds__SetDiscoveryMode * has binding name 'PointerTo_tds__SetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__SetDiscoveryMode (700)
#endif

/* _tds__GetDiscoveryMode * has binding name 'PointerTo_tds__GetDiscoveryMode' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDiscoveryMode
#define SOAP_TYPE_PointerTo_tds__GetDiscoveryMode (696)
#endif

/* _tds__RemoveScopes * has binding name 'PointerTo_tds__RemoveScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__RemoveScopes
#define SOAP_TYPE_PointerTo_tds__RemoveScopes (692)
#endif

/* _tds__AddScopes * has binding name 'PointerTo_tds__AddScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__AddScopes
#define SOAP_TYPE_PointerTo_tds__AddScopes (688)
#endif

/* _tds__SetScopes * has binding name 'PointerTo_tds__SetScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetScopes
#define SOAP_TYPE_PointerTo_tds__SetScopes (684)
#endif

/* _tds__GetScopes * has binding name 'PointerTo_tds__GetScopes' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetScopes
#define SOAP_TYPE_PointerTo_tds__GetScopes (680)
#endif

/* _tds__GetSystemSupportInformation * has binding name 'PointerTo_tds__GetSystemSupportInformation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation
#define SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation (676)
#endif

/* _tds__GetSystemLog * has binding name 'PointerTo_tds__GetSystemLog' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemLog
#define SOAP_TYPE_PointerTo_tds__GetSystemLog (672)
#endif

/* _tds__GetSystemBackup * has binding name 'PointerTo_tds__GetSystemBackup' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemBackup
#define SOAP_TYPE_PointerTo_tds__GetSystemBackup (668)
#endif

/* _tds__RestoreSystem * has binding name 'PointerTo_tds__RestoreSystem' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__RestoreSystem
#define SOAP_TYPE_PointerTo_tds__RestoreSystem (664)
#endif

/* _tds__SystemReboot * has binding name 'PointerTo_tds__SystemReboot' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SystemReboot
#define SOAP_TYPE_PointerTo_tds__SystemReboot (660)
#endif

/* _tds__UpgradeSystemFirmware * has binding name 'PointerTo_tds__UpgradeSystemFirmware' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware
#define SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware (656)
#endif

/* _tds__SetSystemFactoryDefault * has binding name 'PointerTo_tds__SetSystemFactoryDefault' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault
#define SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault (652)
#endif

/* _tds__GetSystemDateAndTime * has binding name 'PointerTo_tds__GetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime
#define SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime (648)
#endif

/* _tds__SetSystemDateAndTime * has binding name 'PointerTo_tds__SetSystemDateAndTime' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime
#define SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime (644)
#endif

/* _tds__GetDeviceInformation * has binding name 'PointerTo_tds__GetDeviceInformation' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetDeviceInformation
#define SOAP_TYPE_PointerTo_tds__GetDeviceInformation (640)
#endif

/* _tds__GetServiceCapabilities * has binding name 'PointerTo_tds__GetServiceCapabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_tds__GetServiceCapabilities (636)
#endif

/* _tds__GetServices * has binding name 'PointerTo_tds__GetServices' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetServices
#define SOAP_TYPE_PointerTo_tds__GetServices (632)
#endif

/* tt__NetworkInterfaceExtension * has binding name 'PointerTott__NetworkInterfaceExtension' for type 'tt:NetworkInterfaceExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension (631)
#endif

/* tt__IPv6NetworkInterface * has binding name 'PointerTott__IPv6NetworkInterface' for type 'tt:IPv6NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterface
#define SOAP_TYPE_PointerTott__IPv6NetworkInterface (630)
#endif

/* tt__IPv4NetworkInterface * has binding name 'PointerTott__IPv4NetworkInterface' for type 'tt:IPv4NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterface
#define SOAP_TYPE_PointerTott__IPv4NetworkInterface (629)
#endif

/* tt__NetworkInterfaceLink * has binding name 'PointerTott__NetworkInterfaceLink' for type 'tt:NetworkInterfaceLink' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceLink
#define SOAP_TYPE_PointerTott__NetworkInterfaceLink (628)
#endif

/* tt__NetworkInterfaceInfo * has binding name 'PointerTott__NetworkInterfaceInfo' for type 'tt:NetworkInterfaceInfo' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceInfo
#define SOAP_TYPE_PointerTott__NetworkInterfaceInfo (627)
#endif

/* tt__LocalOrientation * has binding name 'PointerTott__LocalOrientation' for type 'tt:LocalOrientation' */
#ifndef SOAP_TYPE_PointerTott__LocalOrientation
#define SOAP_TYPE_PointerTott__LocalOrientation (626)
#endif

/* tt__LocalLocation * has binding name 'PointerTott__LocalLocation' for type 'tt:LocalLocation' */
#ifndef SOAP_TYPE_PointerTott__LocalLocation
#define SOAP_TYPE_PointerTott__LocalLocation (625)
#endif

/* tt__GeoOrientation * has binding name 'PointerTott__GeoOrientation' for type 'tt:GeoOrientation' */
#ifndef SOAP_TYPE_PointerTott__GeoOrientation
#define SOAP_TYPE_PointerTott__GeoOrientation (624)
#endif

/* tt__GeoLocation * has binding name 'PointerTott__GeoLocation' for type 'tt:GeoLocation' */
#ifndef SOAP_TYPE_PointerTott__GeoLocation
#define SOAP_TYPE_PointerTott__GeoLocation (623)
#endif

/* float * has binding name 'PointerTofloat' for type 'xsd:float' */
#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (622)
#endif

/* double * has binding name 'PointerTodouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_PointerTodouble
#define SOAP_TYPE_PointerTodouble (620)
#endif

/* tt__EapMethodExtension * has binding name 'PointerTott__EapMethodExtension' for type 'tt:EapMethodExtension' */
#ifndef SOAP_TYPE_PointerTott__EapMethodExtension
#define SOAP_TYPE_PointerTott__EapMethodExtension (618)
#endif

/* tt__TLSConfiguration * has binding name 'PointerTott__TLSConfiguration' for type 'tt:TLSConfiguration' */
#ifndef SOAP_TYPE_PointerTott__TLSConfiguration
#define SOAP_TYPE_PointerTott__TLSConfiguration (617)
#endif

/* tt__Dot1XConfigurationExtension * has binding name 'PointerTott__Dot1XConfigurationExtension' for type 'tt:Dot1XConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot1XConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot1XConfigurationExtension (616)
#endif

/* tt__EAPMethodConfiguration * has binding name 'PointerTott__EAPMethodConfiguration' for type 'tt:EAPMethodConfiguration' */
#ifndef SOAP_TYPE_PointerTott__EAPMethodConfiguration
#define SOAP_TYPE_PointerTott__EAPMethodConfiguration (615)
#endif

/* tt__CertificateInformationExtension * has binding name 'PointerTott__CertificateInformationExtension' for type 'tt:CertificateInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__CertificateInformationExtension
#define SOAP_TYPE_PointerTott__CertificateInformationExtension (614)
#endif

/* tt__DateTimeRange * has binding name 'PointerTott__DateTimeRange' for type 'tt:DateTimeRange' */
#ifndef SOAP_TYPE_PointerTott__DateTimeRange
#define SOAP_TYPE_PointerTott__DateTimeRange (613)
#endif

/* tt__CertificateUsage * has binding name 'PointerTott__CertificateUsage' for type 'tt:CertificateUsage' */
#ifndef SOAP_TYPE_PointerTott__CertificateUsage
#define SOAP_TYPE_PointerTott__CertificateUsage (612)
#endif

/* tt__UserExtension * has binding name 'PointerTott__UserExtension' for type 'tt:UserExtension' */
#ifndef SOAP_TYPE_PointerTott__UserExtension
#define SOAP_TYPE_PointerTott__UserExtension (611)
#endif

/* tt__Date * has binding name 'PointerTott__Date' for type 'tt:Date' */
#ifndef SOAP_TYPE_PointerTott__Date
#define SOAP_TYPE_PointerTott__Date (610)
#endif

/* tt__Time * has binding name 'PointerTott__Time' for type 'tt:Time' */
#ifndef SOAP_TYPE_PointerTott__Time
#define SOAP_TYPE_PointerTott__Time (609)
#endif

/* tt__SystemDateTimeExtension * has binding name 'PointerTott__SystemDateTimeExtension' for type 'tt:SystemDateTimeExtension' */
#ifndef SOAP_TYPE_PointerTott__SystemDateTimeExtension
#define SOAP_TYPE_PointerTott__SystemDateTimeExtension (608)
#endif

/* tt__SystemLogUri * has binding name 'PointerTott__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_PointerTott__SystemLogUri
#define SOAP_TYPE_PointerTott__SystemLogUri (606)
#endif

/* tt__AnalyticsDeviceExtension * has binding name 'PointerTott__AnalyticsDeviceExtension' for type 'tt:AnalyticsDeviceExtension' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceExtension
#define SOAP_TYPE_PointerTott__AnalyticsDeviceExtension (605)
#endif

/* tt__SystemCapabilitiesExtension2 * has binding name 'PointerTott__SystemCapabilitiesExtension2' for type 'tt:SystemCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2 (604)
#endif

/* tt__SystemCapabilitiesExtension * has binding name 'PointerTott__SystemCapabilitiesExtension' for type 'tt:SystemCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension (603)
#endif

/* tt__SecurityCapabilitiesExtension2 * has binding name 'PointerTott__SecurityCapabilitiesExtension2' for type 'tt:SecurityCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2 (601)
#endif

/* tt__SecurityCapabilitiesExtension * has binding name 'PointerTott__SecurityCapabilitiesExtension' for type 'tt:SecurityCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension (600)
#endif

/* tt__NetworkCapabilitiesExtension2 * has binding name 'PointerTott__NetworkCapabilitiesExtension2' for type 'tt:NetworkCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2 (599)
#endif

/* tt__NetworkCapabilitiesExtension * has binding name 'PointerTott__NetworkCapabilitiesExtension' for type 'tt:NetworkCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension (598)
#endif

/* tt__RealTimeStreamingCapabilitiesExtension * has binding name 'PointerTott__RealTimeStreamingCapabilitiesExtension' for type 'tt:RealTimeStreamingCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension (597)
#endif

/* tt__ProfileCapabilities * has binding name 'PointerTott__ProfileCapabilities' for type 'tt:ProfileCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ProfileCapabilities
#define SOAP_TYPE_PointerTott__ProfileCapabilities (596)
#endif

/* tt__MediaCapabilitiesExtension * has binding name 'PointerTott__MediaCapabilitiesExtension' for type 'tt:MediaCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__MediaCapabilitiesExtension
#define SOAP_TYPE_PointerTott__MediaCapabilitiesExtension (595)
#endif

/* tt__RealTimeStreamingCapabilities * has binding name 'PointerTott__RealTimeStreamingCapabilities' for type 'tt:RealTimeStreamingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities (594)
#endif

/* tt__IOCapabilitiesExtension2 * has binding name 'PointerTott__IOCapabilitiesExtension2' for type 'tt:IOCapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension2 (593)
#endif

/* tt__IOCapabilitiesExtension * has binding name 'PointerTott__IOCapabilitiesExtension' for type 'tt:IOCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension (591)
#endif

/* tt__DeviceCapabilitiesExtension * has binding name 'PointerTott__DeviceCapabilitiesExtension' for type 'tt:DeviceCapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension
#define SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension (590)
#endif

/* tt__SecurityCapabilities * has binding name 'PointerTott__SecurityCapabilities' for type 'tt:SecurityCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SecurityCapabilities
#define SOAP_TYPE_PointerTott__SecurityCapabilities (589)
#endif

/* tt__IOCapabilities * has binding name 'PointerTott__IOCapabilities' for type 'tt:IOCapabilities' */
#ifndef SOAP_TYPE_PointerTott__IOCapabilities
#define SOAP_TYPE_PointerTott__IOCapabilities (588)
#endif

/* tt__SystemCapabilities * has binding name 'PointerTott__SystemCapabilities' for type 'tt:SystemCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SystemCapabilities
#define SOAP_TYPE_PointerTott__SystemCapabilities (587)
#endif

/* tt__NetworkCapabilities * has binding name 'PointerTott__NetworkCapabilities' for type 'tt:NetworkCapabilities' */
#ifndef SOAP_TYPE_PointerTott__NetworkCapabilities
#define SOAP_TYPE_PointerTott__NetworkCapabilities (586)
#endif

/* tt__CapabilitiesExtension2 * has binding name 'PointerTott__CapabilitiesExtension2' for type 'tt:CapabilitiesExtension2' */
#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension2
#define SOAP_TYPE_PointerTott__CapabilitiesExtension2 (585)
#endif

/* tt__AnalyticsDeviceCapabilities * has binding name 'PointerTott__AnalyticsDeviceCapabilities' for type 'tt:AnalyticsDeviceCapabilities' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities (584)
#endif

/* tt__ReceiverCapabilities * has binding name 'PointerTott__ReceiverCapabilities' for type 'tt:ReceiverCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ReceiverCapabilities
#define SOAP_TYPE_PointerTott__ReceiverCapabilities (583)
#endif

/* tt__ReplayCapabilities * has binding name 'PointerTott__ReplayCapabilities' for type 'tt:ReplayCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ReplayCapabilities
#define SOAP_TYPE_PointerTott__ReplayCapabilities (582)
#endif

/* tt__SearchCapabilities * has binding name 'PointerTott__SearchCapabilities' for type 'tt:SearchCapabilities' */
#ifndef SOAP_TYPE_PointerTott__SearchCapabilities
#define SOAP_TYPE_PointerTott__SearchCapabilities (581)
#endif

/* tt__RecordingCapabilities * has binding name 'PointerTott__RecordingCapabilities' for type 'tt:RecordingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__RecordingCapabilities
#define SOAP_TYPE_PointerTott__RecordingCapabilities (580)
#endif

/* tt__DisplayCapabilities * has binding name 'PointerTott__DisplayCapabilities' for type 'tt:DisplayCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DisplayCapabilities
#define SOAP_TYPE_PointerTott__DisplayCapabilities (579)
#endif

/* tt__DeviceIOCapabilities * has binding name 'PointerTott__DeviceIOCapabilities' for type 'tt:DeviceIOCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DeviceIOCapabilities
#define SOAP_TYPE_PointerTott__DeviceIOCapabilities (578)
#endif

/* tt__CapabilitiesExtension * has binding name 'PointerTott__CapabilitiesExtension' for type 'tt:CapabilitiesExtension' */
#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension
#define SOAP_TYPE_PointerTott__CapabilitiesExtension (577)
#endif

/* tt__PTZCapabilities * has binding name 'PointerTott__PTZCapabilities' for type 'tt:PTZCapabilities' */
#ifndef SOAP_TYPE_PointerTott__PTZCapabilities
#define SOAP_TYPE_PointerTott__PTZCapabilities (576)
#endif

/* tt__MediaCapabilities * has binding name 'PointerTott__MediaCapabilities' for type 'tt:MediaCapabilities' */
#ifndef SOAP_TYPE_PointerTott__MediaCapabilities
#define SOAP_TYPE_PointerTott__MediaCapabilities (575)
#endif

/* tt__ImagingCapabilities * has binding name 'PointerTott__ImagingCapabilities' for type 'tt:ImagingCapabilities' */
#ifndef SOAP_TYPE_PointerTott__ImagingCapabilities
#define SOAP_TYPE_PointerTott__ImagingCapabilities (574)
#endif

/* tt__EventCapabilities * has binding name 'PointerTott__EventCapabilities' for type 'tt:EventCapabilities' */
#ifndef SOAP_TYPE_PointerTott__EventCapabilities
#define SOAP_TYPE_PointerTott__EventCapabilities (573)
#endif

/* tt__DeviceCapabilities * has binding name 'PointerTott__DeviceCapabilities' for type 'tt:DeviceCapabilities' */
#ifndef SOAP_TYPE_PointerTott__DeviceCapabilities
#define SOAP_TYPE_PointerTott__DeviceCapabilities (572)
#endif

/* tt__AnalyticsCapabilities * has binding name 'PointerTott__AnalyticsCapabilities' for type 'tt:AnalyticsCapabilities' */
#ifndef SOAP_TYPE_PointerTott__AnalyticsCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsCapabilities (571)
#endif

/* tt__Dot11AvailableNetworksExtension * has binding name 'PointerTott__Dot11AvailableNetworksExtension' for type 'tt:Dot11AvailableNetworksExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension (570)
#endif

/* enum tt__Dot11SignalStrength * has binding name 'PointerTott__Dot11SignalStrength' for type 'tt:Dot11SignalStrength' */
#ifndef SOAP_TYPE_PointerTott__Dot11SignalStrength
#define SOAP_TYPE_PointerTott__Dot11SignalStrength (567)
#endif

/* tt__Dot11PSKSetExtension * has binding name 'PointerTott__Dot11PSKSetExtension' for type 'tt:Dot11PSKSetExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKSetExtension
#define SOAP_TYPE_PointerTott__Dot11PSKSetExtension (566)
#endif

/* std::string * has binding name 'PointerTott__Dot11PSKPassphrase' for type 'tt:Dot11PSKPassphrase' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKPassphrase
#define SOAP_TYPE_PointerTott__Dot11PSKPassphrase (565)
#endif

/* xsd__hexBinary * has binding name 'PointerTott__Dot11PSK' for type 'tt:Dot11PSK' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSK
#define SOAP_TYPE_PointerTott__Dot11PSK (564)
#endif

/* tt__Dot11SecurityConfigurationExtension * has binding name 'PointerTott__Dot11SecurityConfigurationExtension' for type 'tt:Dot11SecurityConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension (563)
#endif

/* std::string * has binding name 'PointerTott__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_PointerTott__ReferenceToken
#define SOAP_TYPE_PointerTott__ReferenceToken (562)
#endif

/* tt__Dot11PSKSet * has binding name 'PointerTott__Dot11PSKSet' for type 'tt:Dot11PSKSet' */
#ifndef SOAP_TYPE_PointerTott__Dot11PSKSet
#define SOAP_TYPE_PointerTott__Dot11PSKSet (561)
#endif

/* enum tt__Dot11Cipher * has binding name 'PointerTott__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_PointerTott__Dot11Cipher
#define SOAP_TYPE_PointerTott__Dot11Cipher (560)
#endif

/* tt__Dot11SecurityConfiguration * has binding name 'PointerTott__Dot11SecurityConfiguration' for type 'tt:Dot11SecurityConfiguration' */
#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfiguration
#define SOAP_TYPE_PointerTott__Dot11SecurityConfiguration (559)
#endif

/* tt__IPAddressFilterExtension * has binding name 'PointerTott__IPAddressFilterExtension' for type 'tt:IPAddressFilterExtension' */
#ifndef SOAP_TYPE_PointerTott__IPAddressFilterExtension
#define SOAP_TYPE_PointerTott__IPAddressFilterExtension (558)
#endif

/* tt__NetworkZeroConfigurationExtension2 * has binding name 'PointerTott__NetworkZeroConfigurationExtension2' for type 'tt:NetworkZeroConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2 (557)
#endif

/* tt__NetworkZeroConfigurationExtension * has binding name 'PointerTott__NetworkZeroConfigurationExtension' for type 'tt:NetworkZeroConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension (555)
#endif

/* enum tt__IPv6DHCPConfiguration * has binding name 'PointerTott__IPv6DHCPConfiguration' for type 'tt:IPv6DHCPConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv6DHCPConfiguration
#define SOAP_TYPE_PointerTott__IPv6DHCPConfiguration (554)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension2 * has binding name 'PointerTott__NetworkInterfaceSetConfigurationExtension2' for type 'tt:NetworkInterfaceSetConfigurationExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2 (553)
#endif

/* tt__NetworkInterfaceSetConfigurationExtension * has binding name 'PointerTott__NetworkInterfaceSetConfigurationExtension' for type 'tt:NetworkInterfaceSetConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension (552)
#endif

/* tt__IPv6NetworkInterfaceSetConfiguration * has binding name 'PointerTott__IPv6NetworkInterfaceSetConfiguration' for type 'tt:IPv6NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration (551)
#endif

/* tt__IPv4NetworkInterfaceSetConfiguration * has binding name 'PointerTott__IPv4NetworkInterfaceSetConfiguration' for type 'tt:IPv4NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration (550)
#endif

/* tt__DynamicDNSInformationExtension * has binding name 'PointerTott__DynamicDNSInformationExtension' for type 'tt:DynamicDNSInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformationExtension
#define SOAP_TYPE_PointerTott__DynamicDNSInformationExtension (549)
#endif

/* tt__NTPInformationExtension * has binding name 'PointerTott__NTPInformationExtension' for type 'tt:NTPInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__NTPInformationExtension
#define SOAP_TYPE_PointerTott__NTPInformationExtension (548)
#endif

/* tt__DNSInformationExtension * has binding name 'PointerTott__DNSInformationExtension' for type 'tt:DNSInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__DNSInformationExtension
#define SOAP_TYPE_PointerTott__DNSInformationExtension (547)
#endif

/* tt__HostnameInformationExtension * has binding name 'PointerTott__HostnameInformationExtension' for type 'tt:HostnameInformationExtension' */
#ifndef SOAP_TYPE_PointerTott__HostnameInformationExtension
#define SOAP_TYPE_PointerTott__HostnameInformationExtension (546)
#endif

/* tt__NetworkHostExtension * has binding name 'PointerTott__NetworkHostExtension' for type 'tt:NetworkHostExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkHostExtension
#define SOAP_TYPE_PointerTott__NetworkHostExtension (545)
#endif

/* std::string * has binding name 'PointerTott__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_PointerTott__IPv6Address
#define SOAP_TYPE_PointerTott__IPv6Address (544)
#endif

/* std::string * has binding name 'PointerTott__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_PointerTott__IPv4Address
#define SOAP_TYPE_PointerTott__IPv4Address (543)
#endif

/* tt__NetworkProtocolExtension * has binding name 'PointerTott__NetworkProtocolExtension' for type 'tt:NetworkProtocolExtension' */
#ifndef SOAP_TYPE_PointerTott__NetworkProtocolExtension
#define SOAP_TYPE_PointerTott__NetworkProtocolExtension (542)
#endif

/* tt__IPv6ConfigurationExtension * has binding name 'PointerTott__IPv6ConfigurationExtension' for type 'tt:IPv6ConfigurationExtension' */
#ifndef SOAP_TYPE_PointerTott__IPv6ConfigurationExtension
#define SOAP_TYPE_PointerTott__IPv6ConfigurationExtension (540)
#endif

/* tt__PrefixedIPv6Address * has binding name 'PointerTott__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_PointerTott__PrefixedIPv6Address
#define SOAP_TYPE_PointerTott__PrefixedIPv6Address (538)
#endif

/* tt__PrefixedIPv4Address * has binding name 'PointerTott__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_PointerTott__PrefixedIPv4Address
#define SOAP_TYPE_PointerTott__PrefixedIPv4Address (536)
#endif

/* tt__IPv4Configuration * has binding name 'PointerTott__IPv4Configuration' for type 'tt:IPv4Configuration' */
#ifndef SOAP_TYPE_PointerTott__IPv4Configuration
#define SOAP_TYPE_PointerTott__IPv4Configuration (535)
#endif

/* tt__IPv6Configuration * has binding name 'PointerTott__IPv6Configuration' for type 'tt:IPv6Configuration' */
#ifndef SOAP_TYPE_PointerTott__IPv6Configuration
#define SOAP_TYPE_PointerTott__IPv6Configuration (534)
#endif

/* tt__NetworkInterfaceConnectionSetting * has binding name 'PointerTott__NetworkInterfaceConnectionSetting' for type 'tt:NetworkInterfaceConnectionSetting' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting (533)
#endif

/* tt__NetworkInterfaceExtension2 * has binding name 'PointerTott__NetworkInterfaceExtension2' for type 'tt:NetworkInterfaceExtension2' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension2 (532)
#endif

/* tt__Dot11Configuration * has binding name 'PointerTott__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_PointerTott__Dot11Configuration
#define SOAP_TYPE_PointerTott__Dot11Configuration (530)
#endif

/* tt__Dot3Configuration * has binding name 'PointerTott__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_PointerTott__Dot3Configuration
#define SOAP_TYPE_PointerTott__Dot3Configuration (528)
#endif

/* tt__LocationEntity * has binding name 'PointerTott__LocationEntity' for type 'tt:LocationEntity' */
#ifndef SOAP_TYPE_PointerTott__LocationEntity
#define SOAP_TYPE_PointerTott__LocationEntity (526)
#endif

/* tds__StorageConfigurationData * has binding name 'PointerTotds__StorageConfigurationData' for type 'tds:StorageConfigurationData' */
#ifndef SOAP_TYPE_PointerTotds__StorageConfigurationData
#define SOAP_TYPE_PointerTotds__StorageConfigurationData (525)
#endif

/* tds__StorageConfiguration * has binding name 'PointerTotds__StorageConfiguration' for type 'tds:StorageConfiguration' */
#ifndef SOAP_TYPE_PointerTotds__StorageConfiguration
#define SOAP_TYPE_PointerTotds__StorageConfiguration (523)
#endif

/* _tds__GetSystemUrisResponse_Extension * has binding name 'PointerTo_tds__GetSystemUrisResponse_Extension' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension (522)
#endif

/* tt__SystemLogUriList * has binding name 'PointerTott__SystemLogUriList' for type 'tt:SystemLogUriList' */
#ifndef SOAP_TYPE_PointerTott__SystemLogUriList
#define SOAP_TYPE_PointerTott__SystemLogUriList (520)
#endif

/* tt__Dot11AvailableNetworks * has binding name 'PointerTott__Dot11AvailableNetworks' for type 'tt:Dot11AvailableNetworks' */
#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworks
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworks (518)
#endif

/* tt__Dot11Status * has binding name 'PointerTott__Dot11Status' for type 'tt:Dot11Status' */
#ifndef SOAP_TYPE_PointerTott__Dot11Status
#define SOAP_TYPE_PointerTott__Dot11Status (517)
#endif

/* tt__Dot11Capabilities * has binding name 'PointerTott__Dot11Capabilities' for type 'tt:Dot11Capabilities' */
#ifndef SOAP_TYPE_PointerTott__Dot11Capabilities
#define SOAP_TYPE_PointerTott__Dot11Capabilities (516)
#endif

/* std::string * has binding name 'PointerTott__AuxiliaryData' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_PointerTott__AuxiliaryData
#define SOAP_TYPE_PointerTott__AuxiliaryData (515)
#endif

/* tt__RelayOutputSettings * has binding name 'PointerTott__RelayOutputSettings' for type 'tt:RelayOutputSettings' */
#ifndef SOAP_TYPE_PointerTott__RelayOutputSettings
#define SOAP_TYPE_PointerTott__RelayOutputSettings (514)
#endif

/* tt__RelayOutput * has binding name 'PointerTott__RelayOutput' for type 'tt:RelayOutput' */
#ifndef SOAP_TYPE_PointerTott__RelayOutput
#define SOAP_TYPE_PointerTott__RelayOutput (512)
#endif

/* tt__Dot1XConfiguration * has binding name 'PointerTott__Dot1XConfiguration' for type 'tt:Dot1XConfiguration' */
#ifndef SOAP_TYPE_PointerTott__Dot1XConfiguration
#define SOAP_TYPE_PointerTott__Dot1XConfiguration (509)
#endif

/* tt__CertificateInformation * has binding name 'PointerTott__CertificateInformation' for type 'tt:CertificateInformation' */
#ifndef SOAP_TYPE_PointerTott__CertificateInformation
#define SOAP_TYPE_PointerTott__CertificateInformation (508)
#endif

/* tt__CertificateWithPrivateKey * has binding name 'PointerTott__CertificateWithPrivateKey' for type 'tt:CertificateWithPrivateKey' */
#ifndef SOAP_TYPE_PointerTott__CertificateWithPrivateKey
#define SOAP_TYPE_PointerTott__CertificateWithPrivateKey (506)
#endif

/* tt__CertificateStatus * has binding name 'PointerTott__CertificateStatus' for type 'tt:CertificateStatus' */
#ifndef SOAP_TYPE_PointerTott__CertificateStatus
#define SOAP_TYPE_PointerTott__CertificateStatus (504)
#endif

/* tt__Certificate * has binding name 'PointerTott__Certificate' for type 'tt:Certificate' */
#ifndef SOAP_TYPE_PointerTott__Certificate
#define SOAP_TYPE_PointerTott__Certificate (502)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (501)
#endif

/* std::string * has binding name 'PointerToxsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_PointerToxsd__token
#define SOAP_TYPE_PointerToxsd__token (499)
#endif

/* tt__BinaryData * has binding name 'PointerTott__BinaryData' for type 'tt:BinaryData' */
#ifndef SOAP_TYPE_PointerTott__BinaryData
#define SOAP_TYPE_PointerTott__BinaryData (498)
#endif

/* tt__IPAddressFilter * has binding name 'PointerTott__IPAddressFilter' for type 'tt:IPAddressFilter' */
#ifndef SOAP_TYPE_PointerTott__IPAddressFilter
#define SOAP_TYPE_PointerTott__IPAddressFilter (497)
#endif

/* tt__NetworkZeroConfiguration * has binding name 'PointerTott__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_PointerTott__NetworkZeroConfiguration (496)
#endif

/* tt__NetworkGateway * has binding name 'PointerTott__NetworkGateway' for type 'tt:NetworkGateway' */
#ifndef SOAP_TYPE_PointerTott__NetworkGateway
#define SOAP_TYPE_PointerTott__NetworkGateway (493)
#endif

/* tt__NetworkProtocol * has binding name 'PointerTott__NetworkProtocol' for type 'tt:NetworkProtocol' */
#ifndef SOAP_TYPE_PointerTott__NetworkProtocol
#define SOAP_TYPE_PointerTott__NetworkProtocol (491)
#endif

/* tt__NetworkInterfaceSetConfiguration * has binding name 'PointerTott__NetworkInterfaceSetConfiguration' for type 'tt:NetworkInterfaceSetConfiguration' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration (490)
#endif

/* tt__NetworkInterface * has binding name 'PointerTott__NetworkInterface' for type 'tt:NetworkInterface' */
#ifndef SOAP_TYPE_PointerTott__NetworkInterface
#define SOAP_TYPE_PointerTott__NetworkInterface (488)
#endif

/* std::string * has binding name 'PointerToxsd__duration' for type 'xsd:duration' */
#ifndef SOAP_TYPE_PointerToxsd__duration
#define SOAP_TYPE_PointerToxsd__duration (487)
#endif

/* std::string * has binding name 'PointerTott__DNSName' for type 'tt:DNSName' */
#ifndef SOAP_TYPE_PointerTott__DNSName
#define SOAP_TYPE_PointerTott__DNSName (486)
#endif

/* tt__DynamicDNSInformation * has binding name 'PointerTott__DynamicDNSInformation' for type 'tt:DynamicDNSInformation' */
#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformation
#define SOAP_TYPE_PointerTott__DynamicDNSInformation (485)
#endif

/* tt__NTPInformation * has binding name 'PointerTott__NTPInformation' for type 'tt:NTPInformation' */
#ifndef SOAP_TYPE_PointerTott__NTPInformation
#define SOAP_TYPE_PointerTott__NTPInformation (484)
#endif

/* tt__IPAddress * has binding name 'PointerTott__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_PointerTott__IPAddress
#define SOAP_TYPE_PointerTott__IPAddress (482)
#endif

/* tt__DNSInformation * has binding name 'PointerTott__DNSInformation' for type 'tt:DNSInformation' */
#ifndef SOAP_TYPE_PointerTott__DNSInformation
#define SOAP_TYPE_PointerTott__DNSInformation (480)
#endif

/* tt__HostnameInformation * has binding name 'PointerTott__HostnameInformation' for type 'tt:HostnameInformation' */
#ifndef SOAP_TYPE_PointerTott__HostnameInformation
#define SOAP_TYPE_PointerTott__HostnameInformation (479)
#endif

/* tt__Capabilities * has binding name 'PointerTott__Capabilities' for type 'tt:Capabilities' */
#ifndef SOAP_TYPE_PointerTott__Capabilities
#define SOAP_TYPE_PointerTott__Capabilities (478)
#endif

/* tt__IntRange * has binding name 'PointerTott__IntRange' for type 'tt:IntRange' */
#ifndef SOAP_TYPE_PointerTott__IntRange
#define SOAP_TYPE_PointerTott__IntRange (476)
#endif

/* tt__User * has binding name 'PointerTott__User' for type 'tt:User' */
#ifndef SOAP_TYPE_PointerTott__User
#define SOAP_TYPE_PointerTott__User (473)
#endif

/* tt__RemoteUser * has binding name 'PointerTott__RemoteUser' for type 'tt:RemoteUser' */
#ifndef SOAP_TYPE_PointerTott__RemoteUser
#define SOAP_TYPE_PointerTott__RemoteUser (472)
#endif

/* tt__NetworkHost * has binding name 'PointerTott__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_PointerTott__NetworkHost
#define SOAP_TYPE_PointerTott__NetworkHost (470)
#endif

/* tt__Scope * has binding name 'PointerTott__Scope' for type 'tt:Scope' */
#ifndef SOAP_TYPE_PointerTott__Scope
#define SOAP_TYPE_PointerTott__Scope (467)
#endif

/* tt__SystemLog * has binding name 'PointerTott__SystemLog' for type 'tt:SystemLog' */
#ifndef SOAP_TYPE_PointerTott__SystemLog
#define SOAP_TYPE_PointerTott__SystemLog (466)
#endif

/* tt__SupportInformation * has binding name 'PointerTott__SupportInformation' for type 'tt:SupportInformation' */
#ifndef SOAP_TYPE_PointerTott__SupportInformation
#define SOAP_TYPE_PointerTott__SupportInformation (465)
#endif

/* tt__BackupFile * has binding name 'PointerTott__BackupFile' for type 'tt:BackupFile' */
#ifndef SOAP_TYPE_PointerTott__BackupFile
#define SOAP_TYPE_PointerTott__BackupFile (463)
#endif

/* tt__AttachmentData * has binding name 'PointerTott__AttachmentData' for type 'tt:AttachmentData' */
#ifndef SOAP_TYPE_PointerTott__AttachmentData
#define SOAP_TYPE_PointerTott__AttachmentData (462)
#endif

/* tt__SystemDateTime * has binding name 'PointerTott__SystemDateTime' for type 'tt:SystemDateTime' */
#ifndef SOAP_TYPE_PointerTott__SystemDateTime
#define SOAP_TYPE_PointerTott__SystemDateTime (461)
#endif

/* tt__DateTime * has binding name 'PointerTott__DateTime' for type 'tt:DateTime' */
#ifndef SOAP_TYPE_PointerTott__DateTime
#define SOAP_TYPE_PointerTott__DateTime (460)
#endif

/* tt__TimeZone * has binding name 'PointerTott__TimeZone' for type 'tt:TimeZone' */
#ifndef SOAP_TYPE_PointerTott__TimeZone
#define SOAP_TYPE_PointerTott__TimeZone (459)
#endif

/* tds__DeviceServiceCapabilities * has binding name 'PointerTotds__DeviceServiceCapabilities' for type 'tds:DeviceServiceCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__DeviceServiceCapabilities
#define SOAP_TYPE_PointerTotds__DeviceServiceCapabilities (458)
#endif

/* tds__Service * has binding name 'PointerTotds__Service' for type 'tds:Service' */
#ifndef SOAP_TYPE_PointerTotds__Service
#define SOAP_TYPE_PointerTotds__Service (456)
#endif

/* _tds__StorageConfigurationData_Extension * has binding name 'PointerTo_tds__StorageConfigurationData_Extension' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension
#define SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension (455)
#endif

/* tds__UserCredential * has binding name 'PointerTotds__UserCredential' for type 'tds:UserCredential' */
#ifndef SOAP_TYPE_PointerTotds__UserCredential
#define SOAP_TYPE_PointerTotds__UserCredential (453)
#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (452)
#endif

/* _tds__UserCredential_Extension * has binding name 'PointerTo_tds__UserCredential_Extension' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__UserCredential_Extension
#define SOAP_TYPE_PointerTo_tds__UserCredential_Extension (451)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (449)
#endif

/* std::string * has binding name 'PointerTott__StringAttrList' for type 'tt:StringAttrList' */
#ifndef SOAP_TYPE_PointerTott__StringAttrList
#define SOAP_TYPE_PointerTott__StringAttrList (448)
#endif

/* std::string * has binding name 'PointerTott__StringList' for type 'tt:StringList' */
#ifndef SOAP_TYPE_PointerTott__StringList
#define SOAP_TYPE_PointerTott__StringList (447)
#endif

/* std::string * has binding name 'PointerTott__IntList' for type 'tt:IntList' */
#ifndef SOAP_TYPE_PointerTott__IntList
#define SOAP_TYPE_PointerTott__IntList (446)
#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (445)
#endif

/* tds__MiscCapabilities * has binding name 'PointerTotds__MiscCapabilities' for type 'tds:MiscCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__MiscCapabilities
#define SOAP_TYPE_PointerTotds__MiscCapabilities (443)
#endif

/* tds__SystemCapabilities * has binding name 'PointerTotds__SystemCapabilities' for type 'tds:SystemCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__SystemCapabilities
#define SOAP_TYPE_PointerTotds__SystemCapabilities (442)
#endif

/* tds__SecurityCapabilities * has binding name 'PointerTotds__SecurityCapabilities' for type 'tds:SecurityCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__SecurityCapabilities
#define SOAP_TYPE_PointerTotds__SecurityCapabilities (441)
#endif

/* tds__NetworkCapabilities * has binding name 'PointerTotds__NetworkCapabilities' for type 'tds:NetworkCapabilities' */
#ifndef SOAP_TYPE_PointerTotds__NetworkCapabilities
#define SOAP_TYPE_PointerTotds__NetworkCapabilities (440)
#endif

/* tt__OnvifVersion * has binding name 'PointerTott__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_PointerTott__OnvifVersion
#define SOAP_TYPE_PointerTott__OnvifVersion (439)
#endif

/* _tds__Service_Capabilities * has binding name 'PointerTo_tds__Service_Capabilities' for type '' */
#ifndef SOAP_TYPE_PointerTo_tds__Service_Capabilities
#define SOAP_TYPE_PointerTo_tds__Service_Capabilities (438)
#endif

/* struct SOAP_ENV__Header * has binding name 'PointerToSOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header
#define SOAP_TYPE_PointerToSOAP_ENV__Header (60)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (53)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (51)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (49)
#endif

/* struct chan__ChannelInstanceType * has binding name 'PointerTochan__ChannelInstanceType' for type 'chan:ChannelInstanceType' */
#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType
#define SOAP_TYPE_PointerTochan__ChannelInstanceType (47)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__FaultTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo
#define SOAP_TYPE_PointerTo_wsa5__FaultTo (46)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__ReplyTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo (45)
#endif

/* struct wsa5__EndpointReferenceType * has binding name 'PointerTo_wsa5__From' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__From
#define SOAP_TYPE_PointerTo_wsa5__From (44)
#endif

/* struct wsa5__RelatesToType * has binding name 'PointerTo_wsa5__RelatesTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo (43)
#endif

/* _wsa5__ProblemIRI has binding name '_wsa5__ProblemIRI' for type '' */
#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (38)
#endif

/* _wsa5__ProblemHeaderQName has binding name '_wsa5__ProblemHeaderQName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (37)
#endif

/* _wsa5__Action has binding name '_wsa5__Action' for type '' */
#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (34)
#endif

/* _wsa5__To has binding name '_wsa5__To' for type '' */
#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (33)
#endif

/* _wsa5__MessageID has binding name '_wsa5__MessageID' for type '' */
#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (28)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (24)
#endif

/* char ** has binding name 'PointerTo_XML' for type '' */
#ifndef SOAP_TYPE_PointerTo_XML
#define SOAP_TYPE_PointerTo_XML (23)
#endif

/* struct wsa5__MetadataType * has binding name 'PointerTowsa5__MetadataType' for type 'wsa5:MetadataType' */
#ifndef SOAP_TYPE_PointerTowsa5__MetadataType
#define SOAP_TYPE_PointerTowsa5__MetadataType (22)
#endif

/* struct wsa5__ReferenceParametersType * has binding name 'PointerTowsa5__ReferenceParametersType' for type 'wsa5:ReferenceParametersType' */
#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType (21)
#endif

/* wsa5__FaultCodesOpenEnumType has binding name 'wsa5__FaultCodesOpenEnumType' for type 'wsa5:FaultCodesOpenEnumType' */
#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (18)
#endif

/* wsa5__RelationshipTypeOpenEnum has binding name 'wsa5__RelationshipTypeOpenEnum' for type 'wsa5:RelationshipTypeOpenEnum' */
#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (17)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<tt__SystemLogUri *>  has binding name 'std__vectorTemplateOfPointerTott__SystemLogUri' for type 'tt:SystemLogUri' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri (607)
#endif

/* std::vector<tt__OnvifVersion *>  has binding name 'std__vectorTemplateOfPointerTott__OnvifVersion' for type 'tt:OnvifVersion' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion (602)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__AuxiliaryData' for type 'tt:AuxiliaryData' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData (592)
#endif

/* std::vector<enum tt__Dot11Cipher>  has binding name 'std__vectorTemplateOftt__Dot11Cipher' for type 'tt:Dot11Cipher' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher (569)
#endif

/* std::vector<enum tt__Dot11AuthAndMangementSuite>  has binding name 'std__vectorTemplateOftt__Dot11AuthAndMangementSuite' for type 'tt:Dot11AuthAndMangementSuite' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite (568)
#endif

/* std::vector<tt__NetworkZeroConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__NetworkZeroConfiguration' for type 'tt:NetworkZeroConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration (556)
#endif

/* std::vector<int>  has binding name 'std__vectorTemplateOfint' for type 'xsd:int' */
#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (541)
#endif

/* std::vector<tt__PrefixedIPv6Address *>  has binding name 'std__vectorTemplateOfPointerTott__PrefixedIPv6Address' for type 'tt:PrefixedIPv6Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address (539)
#endif

/* std::vector<tt__PrefixedIPv4Address *>  has binding name 'std__vectorTemplateOfPointerTott__PrefixedIPv4Address' for type 'tt:PrefixedIPv4Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address (537)
#endif

/* std::vector<tt__Dot11Configuration *>  has binding name 'std__vectorTemplateOfPointerTott__Dot11Configuration' for type 'tt:Dot11Configuration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration (531)
#endif

/* std::vector<tt__Dot3Configuration *>  has binding name 'std__vectorTemplateOfPointerTott__Dot3Configuration' for type 'tt:Dot3Configuration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration (529)
#endif

/* std::vector<tt__LocationEntity *>  has binding name 'std__vectorTemplateOfPointerTott__LocationEntity' for type 'tt:LocationEntity' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LocationEntity
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LocationEntity (527)
#endif

/* std::vector<tds__StorageConfiguration *>  has binding name 'std__vectorTemplateOfPointerTotds__StorageConfiguration' for type 'tds:StorageConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration (524)
#endif

/* std::vector<tt__Dot11AvailableNetworks *>  has binding name 'std__vectorTemplateOfPointerTott__Dot11AvailableNetworks' for type 'tt:Dot11AvailableNetworks' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks (519)
#endif

/* std::vector<tt__RelayOutput *>  has binding name 'std__vectorTemplateOfPointerTott__RelayOutput' for type 'tt:RelayOutput' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput (513)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__ReferenceToken' for type 'tt:ReferenceToken' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken (511)
#endif

/* std::vector<tt__Dot1XConfiguration *>  has binding name 'std__vectorTemplateOfPointerTott__Dot1XConfiguration' for type 'tt:Dot1XConfiguration' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration (510)
#endif

/* std::vector<tt__CertificateWithPrivateKey *>  has binding name 'std__vectorTemplateOfPointerTott__CertificateWithPrivateKey' for type 'tt:CertificateWithPrivateKey' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey (507)
#endif

/* std::vector<tt__CertificateStatus *>  has binding name 'std__vectorTemplateOfPointerTott__CertificateStatus' for type 'tt:CertificateStatus' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus (505)
#endif

/* std::vector<tt__Certificate *>  has binding name 'std__vectorTemplateOfPointerTott__Certificate' for type 'tt:Certificate' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate (503)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__IPv6Address' for type 'tt:IPv6Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv6Address
#define SOAP_TYPE_std__vectorTemplateOftt__IPv6Address (495)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOftt__IPv4Address' for type 'tt:IPv4Address' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv4Address
#define SOAP_TYPE_std__vectorTemplateOftt__IPv4Address (494)
#endif

/* std::vector<tt__NetworkProtocol *>  has binding name 'std__vectorTemplateOfPointerTott__NetworkProtocol' for type 'tt:NetworkProtocol' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol (492)
#endif

/* std::vector<tt__NetworkInterface *>  has binding name 'std__vectorTemplateOfPointerTott__NetworkInterface' for type 'tt:NetworkInterface' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface (489)
#endif

/* std::vector<tt__IPAddress *>  has binding name 'std__vectorTemplateOfPointerTott__IPAddress' for type 'tt:IPAddress' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress (483)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfxsd__token' for type 'xsd:token' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__token
#define SOAP_TYPE_std__vectorTemplateOfxsd__token (481)
#endif

/* std::vector<enum tt__CapabilityCategory>  has binding name 'std__vectorTemplateOftt__CapabilityCategory' for type 'tt:CapabilityCategory' */
#ifndef SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory
#define SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory (477)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (475)
#endif

/* std::vector<tt__User *>  has binding name 'std__vectorTemplateOfPointerTott__User' for type 'tt:User' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__User
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__User (474)
#endif

/* std::vector<tt__NetworkHost *>  has binding name 'std__vectorTemplateOfPointerTott__NetworkHost' for type 'tt:NetworkHost' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost (471)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI (469)
#endif

/* std::vector<tt__Scope *>  has binding name 'std__vectorTemplateOfPointerTott__Scope' for type 'tt:Scope' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope (468)
#endif

/* std::vector<tt__BackupFile *>  has binding name 'std__vectorTemplateOfPointerTott__BackupFile' for type 'tt:BackupFile' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile (464)
#endif

/* std::vector<tds__Service *>  has binding name 'std__vectorTemplateOfPointerTotds__Service' for type 'tds:Service' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service
#define SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service (457)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    /** Web service one-way asynchronous operation 'soap_send_SOAP_ENV__Fault' */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send_SOAP_ENV__Fault(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail);
    /** Web service one-way asynchronous operation 'soap_recv_SOAP_ENV__Fault' */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *_param_1);
    
    /** Web service synchronous operation 'soap_call___tds__GetServices' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetServices(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetServices *tds__GetServices, _tds__GetServicesResponse &tds__GetServicesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetServices' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetServices(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetServices *tds__GetServices);
    /** Web service asynchronous operation 'soap_recv___tds__GetServices' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetServices(struct soap *soap, _tds__GetServicesResponse &tds__GetServicesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetServiceCapabilities' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetServiceCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetServiceCapabilities *tds__GetServiceCapabilities, _tds__GetServiceCapabilitiesResponse &tds__GetServiceCapabilitiesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetServiceCapabilities' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetServiceCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetServiceCapabilities *tds__GetServiceCapabilities);
    /** Web service asynchronous operation 'soap_recv___tds__GetServiceCapabilities' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetServiceCapabilities(struct soap *soap, _tds__GetServiceCapabilitiesResponse &tds__GetServiceCapabilitiesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDeviceInformation' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDeviceInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDeviceInformation *tds__GetDeviceInformation, _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDeviceInformation' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDeviceInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDeviceInformation *tds__GetDeviceInformation);
    /** Web service asynchronous operation 'soap_recv___tds__GetDeviceInformation' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDeviceInformation(struct soap *soap, _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetSystemDateAndTime' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetSystemDateAndTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetSystemDateAndTime *tds__SetSystemDateAndTime, _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetSystemDateAndTime' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetSystemDateAndTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetSystemDateAndTime *tds__SetSystemDateAndTime);
    /** Web service asynchronous operation 'soap_recv___tds__SetSystemDateAndTime' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetSystemDateAndTime(struct soap *soap, _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetSystemDateAndTime' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetSystemDateAndTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemDateAndTime *tds__GetSystemDateAndTime, _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetSystemDateAndTime' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetSystemDateAndTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemDateAndTime *tds__GetSystemDateAndTime);
    /** Web service asynchronous operation 'soap_recv___tds__GetSystemDateAndTime' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetSystemDateAndTime(struct soap *soap, _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetSystemFactoryDefault' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetSystemFactoryDefault(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault, _tds__SetSystemFactoryDefaultResponse &tds__SetSystemFactoryDefaultResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetSystemFactoryDefault' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetSystemFactoryDefault(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault);
    /** Web service asynchronous operation 'soap_recv___tds__SetSystemFactoryDefault' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetSystemFactoryDefault(struct soap *soap, _tds__SetSystemFactoryDefaultResponse &tds__SetSystemFactoryDefaultResponse);
    
    /** Web service synchronous operation 'soap_call___tds__UpgradeSystemFirmware' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__UpgradeSystemFirmware(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware, _tds__UpgradeSystemFirmwareResponse &tds__UpgradeSystemFirmwareResponse);
    /** Web service asynchronous operation 'soap_send___tds__UpgradeSystemFirmware' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__UpgradeSystemFirmware(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware);
    /** Web service asynchronous operation 'soap_recv___tds__UpgradeSystemFirmware' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__UpgradeSystemFirmware(struct soap *soap, _tds__UpgradeSystemFirmwareResponse &tds__UpgradeSystemFirmwareResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SystemReboot' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SystemReboot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SystemReboot *tds__SystemReboot, _tds__SystemRebootResponse &tds__SystemRebootResponse);
    /** Web service asynchronous operation 'soap_send___tds__SystemReboot' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SystemReboot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SystemReboot *tds__SystemReboot);
    /** Web service asynchronous operation 'soap_recv___tds__SystemReboot' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SystemReboot(struct soap *soap, _tds__SystemRebootResponse &tds__SystemRebootResponse);
    
    /** Web service synchronous operation 'soap_call___tds__RestoreSystem' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__RestoreSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__RestoreSystem *tds__RestoreSystem, _tds__RestoreSystemResponse &tds__RestoreSystemResponse);
    /** Web service asynchronous operation 'soap_send___tds__RestoreSystem' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__RestoreSystem(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__RestoreSystem *tds__RestoreSystem);
    /** Web service asynchronous operation 'soap_recv___tds__RestoreSystem' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__RestoreSystem(struct soap *soap, _tds__RestoreSystemResponse &tds__RestoreSystemResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetSystemBackup' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetSystemBackup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemBackup *tds__GetSystemBackup, _tds__GetSystemBackupResponse &tds__GetSystemBackupResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetSystemBackup' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetSystemBackup(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemBackup *tds__GetSystemBackup);
    /** Web service asynchronous operation 'soap_recv___tds__GetSystemBackup' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetSystemBackup(struct soap *soap, _tds__GetSystemBackupResponse &tds__GetSystemBackupResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetSystemLog' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetSystemLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemLog *tds__GetSystemLog, _tds__GetSystemLogResponse &tds__GetSystemLogResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetSystemLog' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetSystemLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemLog *tds__GetSystemLog);
    /** Web service asynchronous operation 'soap_recv___tds__GetSystemLog' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetSystemLog(struct soap *soap, _tds__GetSystemLogResponse &tds__GetSystemLogResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetSystemSupportInformation' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetSystemSupportInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemSupportInformation *tds__GetSystemSupportInformation, _tds__GetSystemSupportInformationResponse &tds__GetSystemSupportInformationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetSystemSupportInformation' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetSystemSupportInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemSupportInformation *tds__GetSystemSupportInformation);
    /** Web service asynchronous operation 'soap_recv___tds__GetSystemSupportInformation' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetSystemSupportInformation(struct soap *soap, _tds__GetSystemSupportInformationResponse &tds__GetSystemSupportInformationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetScopes' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetScopes *tds__GetScopes, _tds__GetScopesResponse &tds__GetScopesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetScopes' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetScopes *tds__GetScopes);
    /** Web service asynchronous operation 'soap_recv___tds__GetScopes' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetScopes(struct soap *soap, _tds__GetScopesResponse &tds__GetScopesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetScopes' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetScopes *tds__SetScopes, _tds__SetScopesResponse &tds__SetScopesResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetScopes' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetScopes *tds__SetScopes);
    /** Web service asynchronous operation 'soap_recv___tds__SetScopes' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetScopes(struct soap *soap, _tds__SetScopesResponse &tds__SetScopesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__AddScopes' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__AddScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__AddScopes *tds__AddScopes, _tds__AddScopesResponse &tds__AddScopesResponse);
    /** Web service asynchronous operation 'soap_send___tds__AddScopes' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__AddScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__AddScopes *tds__AddScopes);
    /** Web service asynchronous operation 'soap_recv___tds__AddScopes' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__AddScopes(struct soap *soap, _tds__AddScopesResponse &tds__AddScopesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__RemoveScopes' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__RemoveScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__RemoveScopes *tds__RemoveScopes, _tds__RemoveScopesResponse &tds__RemoveScopesResponse);
    /** Web service asynchronous operation 'soap_send___tds__RemoveScopes' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__RemoveScopes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__RemoveScopes *tds__RemoveScopes);
    /** Web service asynchronous operation 'soap_recv___tds__RemoveScopes' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__RemoveScopes(struct soap *soap, _tds__RemoveScopesResponse &tds__RemoveScopesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDiscoveryMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDiscoveryMode *tds__GetDiscoveryMode, _tds__GetDiscoveryModeResponse &tds__GetDiscoveryModeResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDiscoveryMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDiscoveryMode *tds__GetDiscoveryMode);
    /** Web service asynchronous operation 'soap_recv___tds__GetDiscoveryMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDiscoveryMode(struct soap *soap, _tds__GetDiscoveryModeResponse &tds__GetDiscoveryModeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetDiscoveryMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDiscoveryMode *tds__SetDiscoveryMode, _tds__SetDiscoveryModeResponse &tds__SetDiscoveryModeResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetDiscoveryMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDiscoveryMode *tds__SetDiscoveryMode);
    /** Web service asynchronous operation 'soap_recv___tds__SetDiscoveryMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetDiscoveryMode(struct soap *soap, _tds__SetDiscoveryModeResponse &tds__SetDiscoveryModeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetRemoteDiscoveryMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetRemoteDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode, _tds__GetRemoteDiscoveryModeResponse &tds__GetRemoteDiscoveryModeResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetRemoteDiscoveryMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetRemoteDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode);
    /** Web service asynchronous operation 'soap_recv___tds__GetRemoteDiscoveryMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetRemoteDiscoveryMode(struct soap *soap, _tds__GetRemoteDiscoveryModeResponse &tds__GetRemoteDiscoveryModeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetRemoteDiscoveryMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetRemoteDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode, _tds__SetRemoteDiscoveryModeResponse &tds__SetRemoteDiscoveryModeResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetRemoteDiscoveryMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetRemoteDiscoveryMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode);
    /** Web service asynchronous operation 'soap_recv___tds__SetRemoteDiscoveryMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetRemoteDiscoveryMode(struct soap *soap, _tds__SetRemoteDiscoveryModeResponse &tds__SetRemoteDiscoveryModeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDPAddresses' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDPAddresses(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDPAddresses *tds__GetDPAddresses, _tds__GetDPAddressesResponse &tds__GetDPAddressesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDPAddresses' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDPAddresses(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDPAddresses *tds__GetDPAddresses);
    /** Web service asynchronous operation 'soap_recv___tds__GetDPAddresses' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDPAddresses(struct soap *soap, _tds__GetDPAddressesResponse &tds__GetDPAddressesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetEndpointReference' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetEndpointReference(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetEndpointReference *tds__GetEndpointReference, _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetEndpointReference' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetEndpointReference(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetEndpointReference *tds__GetEndpointReference);
    /** Web service asynchronous operation 'soap_recv___tds__GetEndpointReference' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetEndpointReference(struct soap *soap, _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetRemoteUser' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetRemoteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetRemoteUser *tds__GetRemoteUser, _tds__GetRemoteUserResponse &tds__GetRemoteUserResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetRemoteUser' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetRemoteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetRemoteUser *tds__GetRemoteUser);
    /** Web service asynchronous operation 'soap_recv___tds__GetRemoteUser' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetRemoteUser(struct soap *soap, _tds__GetRemoteUserResponse &tds__GetRemoteUserResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetRemoteUser' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetRemoteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRemoteUser *tds__SetRemoteUser, _tds__SetRemoteUserResponse &tds__SetRemoteUserResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetRemoteUser' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetRemoteUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRemoteUser *tds__SetRemoteUser);
    /** Web service asynchronous operation 'soap_recv___tds__SetRemoteUser' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetRemoteUser(struct soap *soap, _tds__SetRemoteUserResponse &tds__SetRemoteUserResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetUsers' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetUsers(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetUsers *tds__GetUsers, _tds__GetUsersResponse &tds__GetUsersResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetUsers' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetUsers(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetUsers *tds__GetUsers);
    /** Web service asynchronous operation 'soap_recv___tds__GetUsers' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetUsers(struct soap *soap, _tds__GetUsersResponse &tds__GetUsersResponse);
    
    /** Web service synchronous operation 'soap_call___tds__CreateUsers' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__CreateUsers(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateUsers *tds__CreateUsers, _tds__CreateUsersResponse &tds__CreateUsersResponse);
    /** Web service asynchronous operation 'soap_send___tds__CreateUsers' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__CreateUsers(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateUsers *tds__CreateUsers);
    /** Web service asynchronous operation 'soap_recv___tds__CreateUsers' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__CreateUsers(struct soap *soap, _tds__CreateUsersResponse &tds__CreateUsersResponse);
    
    /** Web service synchronous operation 'soap_call___tds__DeleteUsers' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__DeleteUsers(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteUsers *tds__DeleteUsers, _tds__DeleteUsersResponse &tds__DeleteUsersResponse);
    /** Web service asynchronous operation 'soap_send___tds__DeleteUsers' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__DeleteUsers(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteUsers *tds__DeleteUsers);
    /** Web service asynchronous operation 'soap_recv___tds__DeleteUsers' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__DeleteUsers(struct soap *soap, _tds__DeleteUsersResponse &tds__DeleteUsersResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetUser' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetUser *tds__SetUser, _tds__SetUserResponse &tds__SetUserResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetUser' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetUser *tds__SetUser);
    /** Web service asynchronous operation 'soap_recv___tds__SetUser' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetUser(struct soap *soap, _tds__SetUserResponse &tds__SetUserResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetWsdlUrl' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetWsdlUrl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetWsdlUrl *tds__GetWsdlUrl, _tds__GetWsdlUrlResponse &tds__GetWsdlUrlResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetWsdlUrl' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetWsdlUrl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetWsdlUrl *tds__GetWsdlUrl);
    /** Web service asynchronous operation 'soap_recv___tds__GetWsdlUrl' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetWsdlUrl(struct soap *soap, _tds__GetWsdlUrlResponse &tds__GetWsdlUrlResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetPasswordComplexityOptions' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetPasswordComplexityOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPasswordComplexityOptions *tds__GetPasswordComplexityOptions, _tds__GetPasswordComplexityOptionsResponse &tds__GetPasswordComplexityOptionsResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetPasswordComplexityOptions' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetPasswordComplexityOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPasswordComplexityOptions *tds__GetPasswordComplexityOptions);
    /** Web service asynchronous operation 'soap_recv___tds__GetPasswordComplexityOptions' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetPasswordComplexityOptions(struct soap *soap, _tds__GetPasswordComplexityOptionsResponse &tds__GetPasswordComplexityOptionsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetPasswordComplexityConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPasswordComplexityConfiguration *tds__GetPasswordComplexityConfiguration, _tds__GetPasswordComplexityConfigurationResponse &tds__GetPasswordComplexityConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetPasswordComplexityConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPasswordComplexityConfiguration *tds__GetPasswordComplexityConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__GetPasswordComplexityConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetPasswordComplexityConfiguration(struct soap *soap, _tds__GetPasswordComplexityConfigurationResponse &tds__GetPasswordComplexityConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetPasswordComplexityConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetPasswordComplexityConfiguration *tds__SetPasswordComplexityConfiguration, _tds__SetPasswordComplexityConfigurationResponse &tds__SetPasswordComplexityConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetPasswordComplexityConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetPasswordComplexityConfiguration *tds__SetPasswordComplexityConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__SetPasswordComplexityConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetPasswordComplexityConfiguration(struct soap *soap, _tds__SetPasswordComplexityConfigurationResponse &tds__SetPasswordComplexityConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetPasswordHistoryConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPasswordHistoryConfiguration *tds__GetPasswordHistoryConfiguration, _tds__GetPasswordHistoryConfigurationResponse &tds__GetPasswordHistoryConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetPasswordHistoryConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPasswordHistoryConfiguration *tds__GetPasswordHistoryConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__GetPasswordHistoryConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetPasswordHistoryConfiguration(struct soap *soap, _tds__GetPasswordHistoryConfigurationResponse &tds__GetPasswordHistoryConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetPasswordHistoryConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetPasswordHistoryConfiguration *tds__SetPasswordHistoryConfiguration, _tds__SetPasswordHistoryConfigurationResponse &tds__SetPasswordHistoryConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetPasswordHistoryConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetPasswordHistoryConfiguration *tds__SetPasswordHistoryConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__SetPasswordHistoryConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetPasswordHistoryConfiguration(struct soap *soap, _tds__SetPasswordHistoryConfigurationResponse &tds__SetPasswordHistoryConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetAuthFailureWarningOptions' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetAuthFailureWarningOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetAuthFailureWarningOptions *tds__GetAuthFailureWarningOptions, _tds__GetAuthFailureWarningOptionsResponse &tds__GetAuthFailureWarningOptionsResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetAuthFailureWarningOptions' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetAuthFailureWarningOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetAuthFailureWarningOptions *tds__GetAuthFailureWarningOptions);
    /** Web service asynchronous operation 'soap_recv___tds__GetAuthFailureWarningOptions' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetAuthFailureWarningOptions(struct soap *soap, _tds__GetAuthFailureWarningOptionsResponse &tds__GetAuthFailureWarningOptionsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetAuthFailureWarningConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetAuthFailureWarningConfiguration *tds__GetAuthFailureWarningConfiguration, _tds__GetAuthFailureWarningConfigurationResponse &tds__GetAuthFailureWarningConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetAuthFailureWarningConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetAuthFailureWarningConfiguration *tds__GetAuthFailureWarningConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__GetAuthFailureWarningConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetAuthFailureWarningConfiguration(struct soap *soap, _tds__GetAuthFailureWarningConfigurationResponse &tds__GetAuthFailureWarningConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetAuthFailureWarningConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetAuthFailureWarningConfiguration *tds__SetAuthFailureWarningConfiguration, _tds__SetAuthFailureWarningConfigurationResponse &tds__SetAuthFailureWarningConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetAuthFailureWarningConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetAuthFailureWarningConfiguration *tds__SetAuthFailureWarningConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__SetAuthFailureWarningConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetAuthFailureWarningConfiguration(struct soap *soap, _tds__SetAuthFailureWarningConfigurationResponse &tds__SetAuthFailureWarningConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetCapabilities' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCapabilities *tds__GetCapabilities, _tds__GetCapabilitiesResponse &tds__GetCapabilitiesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetCapabilities' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCapabilities *tds__GetCapabilities);
    /** Web service asynchronous operation 'soap_recv___tds__GetCapabilities' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetCapabilities(struct soap *soap, _tds__GetCapabilitiesResponse &tds__GetCapabilitiesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetDPAddresses' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetDPAddresses(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDPAddresses *tds__SetDPAddresses, _tds__SetDPAddressesResponse &tds__SetDPAddressesResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetDPAddresses' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetDPAddresses(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDPAddresses *tds__SetDPAddresses);
    /** Web service asynchronous operation 'soap_recv___tds__SetDPAddresses' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetDPAddresses(struct soap *soap, _tds__SetDPAddressesResponse &tds__SetDPAddressesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetHostname' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetHostname(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetHostname *tds__GetHostname, _tds__GetHostnameResponse &tds__GetHostnameResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetHostname' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetHostname(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetHostname *tds__GetHostname);
    /** Web service asynchronous operation 'soap_recv___tds__GetHostname' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetHostname(struct soap *soap, _tds__GetHostnameResponse &tds__GetHostnameResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetHostname' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetHostname(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetHostname *tds__SetHostname, _tds__SetHostnameResponse &tds__SetHostnameResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetHostname' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetHostname(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetHostname *tds__SetHostname);
    /** Web service asynchronous operation 'soap_recv___tds__SetHostname' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetHostname(struct soap *soap, _tds__SetHostnameResponse &tds__SetHostnameResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetHostnameFromDHCP' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetHostnameFromDHCP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP, _tds__SetHostnameFromDHCPResponse &tds__SetHostnameFromDHCPResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetHostnameFromDHCP' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetHostnameFromDHCP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP);
    /** Web service asynchronous operation 'soap_recv___tds__SetHostnameFromDHCP' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetHostnameFromDHCP(struct soap *soap, _tds__SetHostnameFromDHCPResponse &tds__SetHostnameFromDHCPResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDNS' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDNS *tds__GetDNS, _tds__GetDNSResponse &tds__GetDNSResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDNS' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDNS *tds__GetDNS);
    /** Web service asynchronous operation 'soap_recv___tds__GetDNS' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDNS(struct soap *soap, _tds__GetDNSResponse &tds__GetDNSResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetDNS' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDNS *tds__SetDNS, _tds__SetDNSResponse &tds__SetDNSResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetDNS' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDNS *tds__SetDNS);
    /** Web service asynchronous operation 'soap_recv___tds__SetDNS' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetDNS(struct soap *soap, _tds__SetDNSResponse &tds__SetDNSResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetNTP' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetNTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNTP *tds__GetNTP, _tds__GetNTPResponse &tds__GetNTPResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetNTP' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetNTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNTP *tds__GetNTP);
    /** Web service asynchronous operation 'soap_recv___tds__GetNTP' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetNTP(struct soap *soap, _tds__GetNTPResponse &tds__GetNTPResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetNTP' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetNTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNTP *tds__SetNTP, _tds__SetNTPResponse &tds__SetNTPResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetNTP' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetNTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNTP *tds__SetNTP);
    /** Web service asynchronous operation 'soap_recv___tds__SetNTP' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetNTP(struct soap *soap, _tds__SetNTPResponse &tds__SetNTPResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDynamicDNS' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDynamicDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDynamicDNS *tds__GetDynamicDNS, _tds__GetDynamicDNSResponse &tds__GetDynamicDNSResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDynamicDNS' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDynamicDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDynamicDNS *tds__GetDynamicDNS);
    /** Web service asynchronous operation 'soap_recv___tds__GetDynamicDNS' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDynamicDNS(struct soap *soap, _tds__GetDynamicDNSResponse &tds__GetDynamicDNSResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetDynamicDNS' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetDynamicDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDynamicDNS *tds__SetDynamicDNS, _tds__SetDynamicDNSResponse &tds__SetDynamicDNSResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetDynamicDNS' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetDynamicDNS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDynamicDNS *tds__SetDynamicDNS);
    /** Web service asynchronous operation 'soap_recv___tds__SetDynamicDNS' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetDynamicDNS(struct soap *soap, _tds__SetDynamicDNSResponse &tds__SetDynamicDNSResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetNetworkInterfaces' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetNetworkInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNetworkInterfaces *tds__GetNetworkInterfaces, _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetNetworkInterfaces' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetNetworkInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNetworkInterfaces *tds__GetNetworkInterfaces);
    /** Web service asynchronous operation 'soap_recv___tds__GetNetworkInterfaces' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetNetworkInterfaces(struct soap *soap, _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetNetworkInterfaces' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetNetworkInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNetworkInterfaces *tds__SetNetworkInterfaces, _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetNetworkInterfaces' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetNetworkInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNetworkInterfaces *tds__SetNetworkInterfaces);
    /** Web service asynchronous operation 'soap_recv___tds__SetNetworkInterfaces' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetNetworkInterfaces(struct soap *soap, _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetNetworkProtocols' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetNetworkProtocols(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNetworkProtocols *tds__GetNetworkProtocols, _tds__GetNetworkProtocolsResponse &tds__GetNetworkProtocolsResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetNetworkProtocols' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetNetworkProtocols(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNetworkProtocols *tds__GetNetworkProtocols);
    /** Web service asynchronous operation 'soap_recv___tds__GetNetworkProtocols' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetNetworkProtocols(struct soap *soap, _tds__GetNetworkProtocolsResponse &tds__GetNetworkProtocolsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetNetworkProtocols' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetNetworkProtocols(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNetworkProtocols *tds__SetNetworkProtocols, _tds__SetNetworkProtocolsResponse &tds__SetNetworkProtocolsResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetNetworkProtocols' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetNetworkProtocols(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNetworkProtocols *tds__SetNetworkProtocols);
    /** Web service asynchronous operation 'soap_recv___tds__SetNetworkProtocols' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetNetworkProtocols(struct soap *soap, _tds__SetNetworkProtocolsResponse &tds__SetNetworkProtocolsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetNetworkDefaultGateway' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetNetworkDefaultGateway(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway, _tds__GetNetworkDefaultGatewayResponse &tds__GetNetworkDefaultGatewayResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetNetworkDefaultGateway' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetNetworkDefaultGateway(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway);
    /** Web service asynchronous operation 'soap_recv___tds__GetNetworkDefaultGateway' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetNetworkDefaultGateway(struct soap *soap, _tds__GetNetworkDefaultGatewayResponse &tds__GetNetworkDefaultGatewayResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetNetworkDefaultGateway' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetNetworkDefaultGateway(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway, _tds__SetNetworkDefaultGatewayResponse &tds__SetNetworkDefaultGatewayResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetNetworkDefaultGateway' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetNetworkDefaultGateway(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway);
    /** Web service asynchronous operation 'soap_recv___tds__SetNetworkDefaultGateway' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetNetworkDefaultGateway(struct soap *soap, _tds__SetNetworkDefaultGatewayResponse &tds__SetNetworkDefaultGatewayResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetZeroConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetZeroConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetZeroConfiguration *tds__GetZeroConfiguration, _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetZeroConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetZeroConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetZeroConfiguration *tds__GetZeroConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__GetZeroConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetZeroConfiguration(struct soap *soap, _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetZeroConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetZeroConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetZeroConfiguration *tds__SetZeroConfiguration, _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetZeroConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetZeroConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetZeroConfiguration *tds__SetZeroConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__SetZeroConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetZeroConfiguration(struct soap *soap, _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetIPAddressFilter' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetIPAddressFilter *tds__GetIPAddressFilter, _tds__GetIPAddressFilterResponse &tds__GetIPAddressFilterResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetIPAddressFilter' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetIPAddressFilter *tds__GetIPAddressFilter);
    /** Web service asynchronous operation 'soap_recv___tds__GetIPAddressFilter' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetIPAddressFilter(struct soap *soap, _tds__GetIPAddressFilterResponse &tds__GetIPAddressFilterResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetIPAddressFilter' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetIPAddressFilter *tds__SetIPAddressFilter, _tds__SetIPAddressFilterResponse &tds__SetIPAddressFilterResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetIPAddressFilter' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetIPAddressFilter *tds__SetIPAddressFilter);
    /** Web service asynchronous operation 'soap_recv___tds__SetIPAddressFilter' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetIPAddressFilter(struct soap *soap, _tds__SetIPAddressFilterResponse &tds__SetIPAddressFilterResponse);
    
    /** Web service synchronous operation 'soap_call___tds__AddIPAddressFilter' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__AddIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__AddIPAddressFilter *tds__AddIPAddressFilter, _tds__AddIPAddressFilterResponse &tds__AddIPAddressFilterResponse);
    /** Web service asynchronous operation 'soap_send___tds__AddIPAddressFilter' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__AddIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__AddIPAddressFilter *tds__AddIPAddressFilter);
    /** Web service asynchronous operation 'soap_recv___tds__AddIPAddressFilter' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__AddIPAddressFilter(struct soap *soap, _tds__AddIPAddressFilterResponse &tds__AddIPAddressFilterResponse);
    
    /** Web service synchronous operation 'soap_call___tds__RemoveIPAddressFilter' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__RemoveIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter, _tds__RemoveIPAddressFilterResponse &tds__RemoveIPAddressFilterResponse);
    /** Web service asynchronous operation 'soap_send___tds__RemoveIPAddressFilter' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__RemoveIPAddressFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter);
    /** Web service asynchronous operation 'soap_recv___tds__RemoveIPAddressFilter' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__RemoveIPAddressFilter(struct soap *soap, _tds__RemoveIPAddressFilterResponse &tds__RemoveIPAddressFilterResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetAccessPolicy' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetAccessPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetAccessPolicy *tds__GetAccessPolicy, _tds__GetAccessPolicyResponse &tds__GetAccessPolicyResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetAccessPolicy' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetAccessPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetAccessPolicy *tds__GetAccessPolicy);
    /** Web service asynchronous operation 'soap_recv___tds__GetAccessPolicy' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetAccessPolicy(struct soap *soap, _tds__GetAccessPolicyResponse &tds__GetAccessPolicyResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetAccessPolicy' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetAccessPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetAccessPolicy *tds__SetAccessPolicy, _tds__SetAccessPolicyResponse &tds__SetAccessPolicyResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetAccessPolicy' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetAccessPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetAccessPolicy *tds__SetAccessPolicy);
    /** Web service asynchronous operation 'soap_recv___tds__SetAccessPolicy' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetAccessPolicy(struct soap *soap, _tds__SetAccessPolicyResponse &tds__SetAccessPolicyResponse);
    
    /** Web service synchronous operation 'soap_call___tds__CreateCertificate' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__CreateCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateCertificate *tds__CreateCertificate, _tds__CreateCertificateResponse &tds__CreateCertificateResponse);
    /** Web service asynchronous operation 'soap_send___tds__CreateCertificate' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__CreateCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateCertificate *tds__CreateCertificate);
    /** Web service asynchronous operation 'soap_recv___tds__CreateCertificate' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__CreateCertificate(struct soap *soap, _tds__CreateCertificateResponse &tds__CreateCertificateResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetCertificates' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCertificates *tds__GetCertificates, _tds__GetCertificatesResponse &tds__GetCertificatesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetCertificates' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCertificates *tds__GetCertificates);
    /** Web service asynchronous operation 'soap_recv___tds__GetCertificates' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetCertificates(struct soap *soap, _tds__GetCertificatesResponse &tds__GetCertificatesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetCertificatesStatus' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetCertificatesStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCertificatesStatus *tds__GetCertificatesStatus, _tds__GetCertificatesStatusResponse &tds__GetCertificatesStatusResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetCertificatesStatus' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetCertificatesStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCertificatesStatus *tds__GetCertificatesStatus);
    /** Web service asynchronous operation 'soap_recv___tds__GetCertificatesStatus' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetCertificatesStatus(struct soap *soap, _tds__GetCertificatesStatusResponse &tds__GetCertificatesStatusResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetCertificatesStatus' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetCertificatesStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetCertificatesStatus *tds__SetCertificatesStatus, _tds__SetCertificatesStatusResponse &tds__SetCertificatesStatusResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetCertificatesStatus' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetCertificatesStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetCertificatesStatus *tds__SetCertificatesStatus);
    /** Web service asynchronous operation 'soap_recv___tds__SetCertificatesStatus' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetCertificatesStatus(struct soap *soap, _tds__SetCertificatesStatusResponse &tds__SetCertificatesStatusResponse);
    
    /** Web service synchronous operation 'soap_call___tds__DeleteCertificates' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__DeleteCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteCertificates *tds__DeleteCertificates, _tds__DeleteCertificatesResponse &tds__DeleteCertificatesResponse);
    /** Web service asynchronous operation 'soap_send___tds__DeleteCertificates' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__DeleteCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteCertificates *tds__DeleteCertificates);
    /** Web service asynchronous operation 'soap_recv___tds__DeleteCertificates' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__DeleteCertificates(struct soap *soap, _tds__DeleteCertificatesResponse &tds__DeleteCertificatesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetPkcs10Request' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetPkcs10Request(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPkcs10Request *tds__GetPkcs10Request, _tds__GetPkcs10RequestResponse &tds__GetPkcs10RequestResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetPkcs10Request' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetPkcs10Request(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetPkcs10Request *tds__GetPkcs10Request);
    /** Web service asynchronous operation 'soap_recv___tds__GetPkcs10Request' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetPkcs10Request(struct soap *soap, _tds__GetPkcs10RequestResponse &tds__GetPkcs10RequestResponse);
    
    /** Web service synchronous operation 'soap_call___tds__LoadCertificates' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__LoadCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__LoadCertificates *tds__LoadCertificates, _tds__LoadCertificatesResponse &tds__LoadCertificatesResponse);
    /** Web service asynchronous operation 'soap_send___tds__LoadCertificates' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__LoadCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__LoadCertificates *tds__LoadCertificates);
    /** Web service asynchronous operation 'soap_recv___tds__LoadCertificates' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__LoadCertificates(struct soap *soap, _tds__LoadCertificatesResponse &tds__LoadCertificatesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetClientCertificateMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetClientCertificateMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetClientCertificateMode *tds__GetClientCertificateMode, _tds__GetClientCertificateModeResponse &tds__GetClientCertificateModeResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetClientCertificateMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetClientCertificateMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetClientCertificateMode *tds__GetClientCertificateMode);
    /** Web service asynchronous operation 'soap_recv___tds__GetClientCertificateMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetClientCertificateMode(struct soap *soap, _tds__GetClientCertificateModeResponse &tds__GetClientCertificateModeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetClientCertificateMode' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetClientCertificateMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetClientCertificateMode *tds__SetClientCertificateMode, _tds__SetClientCertificateModeResponse &tds__SetClientCertificateModeResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetClientCertificateMode' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetClientCertificateMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetClientCertificateMode *tds__SetClientCertificateMode);
    /** Web service asynchronous operation 'soap_recv___tds__SetClientCertificateMode' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetClientCertificateMode(struct soap *soap, _tds__SetClientCertificateModeResponse &tds__SetClientCertificateModeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetRelayOutputs' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetRelayOutputs(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetRelayOutputs *tds__GetRelayOutputs, _tds__GetRelayOutputsResponse &tds__GetRelayOutputsResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetRelayOutputs' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetRelayOutputs(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetRelayOutputs *tds__GetRelayOutputs);
    /** Web service asynchronous operation 'soap_recv___tds__GetRelayOutputs' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputsResponse &tds__GetRelayOutputsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetRelayOutputSettings' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetRelayOutputSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRelayOutputSettings *tds__SetRelayOutputSettings, _tds__SetRelayOutputSettingsResponse &tds__SetRelayOutputSettingsResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetRelayOutputSettings' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetRelayOutputSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRelayOutputSettings *tds__SetRelayOutputSettings);
    /** Web service asynchronous operation 'soap_recv___tds__SetRelayOutputSettings' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetRelayOutputSettings(struct soap *soap, _tds__SetRelayOutputSettingsResponse &tds__SetRelayOutputSettingsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetRelayOutputState' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetRelayOutputState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRelayOutputState *tds__SetRelayOutputState, _tds__SetRelayOutputStateResponse &tds__SetRelayOutputStateResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetRelayOutputState' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetRelayOutputState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetRelayOutputState *tds__SetRelayOutputState);
    /** Web service asynchronous operation 'soap_recv___tds__SetRelayOutputState' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputStateResponse &tds__SetRelayOutputStateResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SendAuxiliaryCommand' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SendAuxiliaryCommand(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand, _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse);
    /** Web service asynchronous operation 'soap_send___tds__SendAuxiliaryCommand' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SendAuxiliaryCommand(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand);
    /** Web service asynchronous operation 'soap_recv___tds__SendAuxiliaryCommand' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SendAuxiliaryCommand(struct soap *soap, _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetCACertificates' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetCACertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCACertificates *tds__GetCACertificates, _tds__GetCACertificatesResponse &tds__GetCACertificatesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetCACertificates' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetCACertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCACertificates *tds__GetCACertificates);
    /** Web service asynchronous operation 'soap_recv___tds__GetCACertificates' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetCACertificates(struct soap *soap, _tds__GetCACertificatesResponse &tds__GetCACertificatesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__LoadCertificateWithPrivateKey' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey, _tds__LoadCertificateWithPrivateKeyResponse &tds__LoadCertificateWithPrivateKeyResponse);
    /** Web service asynchronous operation 'soap_send___tds__LoadCertificateWithPrivateKey' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey);
    /** Web service asynchronous operation 'soap_recv___tds__LoadCertificateWithPrivateKey' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__LoadCertificateWithPrivateKey(struct soap *soap, _tds__LoadCertificateWithPrivateKeyResponse &tds__LoadCertificateWithPrivateKeyResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetCertificateInformation' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetCertificateInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCertificateInformation *tds__GetCertificateInformation, _tds__GetCertificateInformationResponse &tds__GetCertificateInformationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetCertificateInformation' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetCertificateInformation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetCertificateInformation *tds__GetCertificateInformation);
    /** Web service asynchronous operation 'soap_recv___tds__GetCertificateInformation' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetCertificateInformation(struct soap *soap, _tds__GetCertificateInformationResponse &tds__GetCertificateInformationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__LoadCACertificates' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__LoadCACertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__LoadCACertificates *tds__LoadCACertificates, _tds__LoadCACertificatesResponse &tds__LoadCACertificatesResponse);
    /** Web service asynchronous operation 'soap_send___tds__LoadCACertificates' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__LoadCACertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__LoadCACertificates *tds__LoadCACertificates);
    /** Web service asynchronous operation 'soap_recv___tds__LoadCACertificates' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__LoadCACertificates(struct soap *soap, _tds__LoadCACertificatesResponse &tds__LoadCACertificatesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__CreateDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__CreateDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration, _tds__CreateDot1XConfigurationResponse &tds__CreateDot1XConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__CreateDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__CreateDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__CreateDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__CreateDot1XConfiguration(struct soap *soap, _tds__CreateDot1XConfigurationResponse &tds__CreateDot1XConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDot1XConfiguration *tds__SetDot1XConfiguration, _tds__SetDot1XConfigurationResponse &tds__SetDot1XConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetDot1XConfiguration *tds__SetDot1XConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__SetDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetDot1XConfiguration(struct soap *soap, _tds__SetDot1XConfigurationResponse &tds__SetDot1XConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot1XConfiguration *tds__GetDot1XConfiguration, _tds__GetDot1XConfigurationResponse &tds__GetDot1XConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot1XConfiguration *tds__GetDot1XConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__GetDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDot1XConfiguration(struct soap *soap, _tds__GetDot1XConfigurationResponse &tds__GetDot1XConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDot1XConfigurations' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDot1XConfigurations(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot1XConfigurations *tds__GetDot1XConfigurations, _tds__GetDot1XConfigurationsResponse &tds__GetDot1XConfigurationsResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDot1XConfigurations' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDot1XConfigurations(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot1XConfigurations *tds__GetDot1XConfigurations);
    /** Web service asynchronous operation 'soap_recv___tds__GetDot1XConfigurations' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDot1XConfigurations(struct soap *soap, _tds__GetDot1XConfigurationsResponse &tds__GetDot1XConfigurationsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__DeleteDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__DeleteDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration, _tds__DeleteDot1XConfigurationResponse &tds__DeleteDot1XConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__DeleteDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__DeleteDot1XConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__DeleteDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__DeleteDot1XConfiguration(struct soap *soap, _tds__DeleteDot1XConfigurationResponse &tds__DeleteDot1XConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDot11Capabilities' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDot11Capabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot11Capabilities *tds__GetDot11Capabilities, _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDot11Capabilities' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDot11Capabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot11Capabilities *tds__GetDot11Capabilities);
    /** Web service asynchronous operation 'soap_recv___tds__GetDot11Capabilities' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDot11Capabilities(struct soap *soap, _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetDot11Status' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetDot11Status(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot11Status *tds__GetDot11Status, _tds__GetDot11StatusResponse &tds__GetDot11StatusResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetDot11Status' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetDot11Status(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetDot11Status *tds__GetDot11Status);
    /** Web service asynchronous operation 'soap_recv___tds__GetDot11Status' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetDot11Status(struct soap *soap, _tds__GetDot11StatusResponse &tds__GetDot11StatusResponse);
    
    /** Web service synchronous operation 'soap_call___tds__ScanAvailableDot11Networks' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__ScanAvailableDot11Networks(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks, _tds__ScanAvailableDot11NetworksResponse &tds__ScanAvailableDot11NetworksResponse);
    /** Web service asynchronous operation 'soap_send___tds__ScanAvailableDot11Networks' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__ScanAvailableDot11Networks(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks);
    /** Web service asynchronous operation 'soap_recv___tds__ScanAvailableDot11Networks' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__ScanAvailableDot11Networks(struct soap *soap, _tds__ScanAvailableDot11NetworksResponse &tds__ScanAvailableDot11NetworksResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetSystemUris' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetSystemUris(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemUris *tds__GetSystemUris, _tds__GetSystemUrisResponse &tds__GetSystemUrisResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetSystemUris' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetSystemUris(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetSystemUris *tds__GetSystemUris);
    /** Web service asynchronous operation 'soap_recv___tds__GetSystemUris' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetSystemUris(struct soap *soap, _tds__GetSystemUrisResponse &tds__GetSystemUrisResponse);
    
    /** Web service synchronous operation 'soap_call___tds__StartFirmwareUpgrade' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__StartFirmwareUpgrade(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade, _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse);
    /** Web service asynchronous operation 'soap_send___tds__StartFirmwareUpgrade' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__StartFirmwareUpgrade(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade);
    /** Web service asynchronous operation 'soap_recv___tds__StartFirmwareUpgrade' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__StartFirmwareUpgrade(struct soap *soap, _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse);
    
    /** Web service synchronous operation 'soap_call___tds__StartSystemRestore' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__StartSystemRestore(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__StartSystemRestore *tds__StartSystemRestore, _tds__StartSystemRestoreResponse &tds__StartSystemRestoreResponse);
    /** Web service asynchronous operation 'soap_send___tds__StartSystemRestore' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__StartSystemRestore(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__StartSystemRestore *tds__StartSystemRestore);
    /** Web service asynchronous operation 'soap_recv___tds__StartSystemRestore' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__StartSystemRestore(struct soap *soap, _tds__StartSystemRestoreResponse &tds__StartSystemRestoreResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetStorageConfigurations' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetStorageConfigurations(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetStorageConfigurations *tds__GetStorageConfigurations, _tds__GetStorageConfigurationsResponse &tds__GetStorageConfigurationsResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetStorageConfigurations' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetStorageConfigurations(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetStorageConfigurations *tds__GetStorageConfigurations);
    /** Web service asynchronous operation 'soap_recv___tds__GetStorageConfigurations' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetStorageConfigurations(struct soap *soap, _tds__GetStorageConfigurationsResponse &tds__GetStorageConfigurationsResponse);
    
    /** Web service synchronous operation 'soap_call___tds__CreateStorageConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__CreateStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateStorageConfiguration *tds__CreateStorageConfiguration, _tds__CreateStorageConfigurationResponse &tds__CreateStorageConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__CreateStorageConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__CreateStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__CreateStorageConfiguration *tds__CreateStorageConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__CreateStorageConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__CreateStorageConfiguration(struct soap *soap, _tds__CreateStorageConfigurationResponse &tds__CreateStorageConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetStorageConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetStorageConfiguration *tds__GetStorageConfiguration, _tds__GetStorageConfigurationResponse &tds__GetStorageConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetStorageConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetStorageConfiguration *tds__GetStorageConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__GetStorageConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetStorageConfiguration(struct soap *soap, _tds__GetStorageConfigurationResponse &tds__GetStorageConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetStorageConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetStorageConfiguration *tds__SetStorageConfiguration, _tds__SetStorageConfigurationResponse &tds__SetStorageConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetStorageConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetStorageConfiguration *tds__SetStorageConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__SetStorageConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetStorageConfiguration(struct soap *soap, _tds__SetStorageConfigurationResponse &tds__SetStorageConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__DeleteStorageConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__DeleteStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration, _tds__DeleteStorageConfigurationResponse &tds__DeleteStorageConfigurationResponse);
    /** Web service asynchronous operation 'soap_send___tds__DeleteStorageConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__DeleteStorageConfiguration(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration);
    /** Web service asynchronous operation 'soap_recv___tds__DeleteStorageConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__DeleteStorageConfiguration(struct soap *soap, _tds__DeleteStorageConfigurationResponse &tds__DeleteStorageConfigurationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__GetGeoLocation' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__GetGeoLocation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetGeoLocation *tds__GetGeoLocation, _tds__GetGeoLocationResponse &tds__GetGeoLocationResponse);
    /** Web service asynchronous operation 'soap_send___tds__GetGeoLocation' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__GetGeoLocation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__GetGeoLocation *tds__GetGeoLocation);
    /** Web service asynchronous operation 'soap_recv___tds__GetGeoLocation' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__GetGeoLocation(struct soap *soap, _tds__GetGeoLocationResponse &tds__GetGeoLocationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetGeoLocation' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetGeoLocation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetGeoLocation *tds__SetGeoLocation, _tds__SetGeoLocationResponse &tds__SetGeoLocationResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetGeoLocation' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetGeoLocation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetGeoLocation *tds__SetGeoLocation);
    /** Web service asynchronous operation 'soap_recv___tds__SetGeoLocation' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetGeoLocation(struct soap *soap, _tds__SetGeoLocationResponse &tds__SetGeoLocationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__DeleteGeoLocation' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__DeleteGeoLocation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteGeoLocation *tds__DeleteGeoLocation, _tds__DeleteGeoLocationResponse &tds__DeleteGeoLocationResponse);
    /** Web service asynchronous operation 'soap_send___tds__DeleteGeoLocation' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__DeleteGeoLocation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__DeleteGeoLocation *tds__DeleteGeoLocation);
    /** Web service asynchronous operation 'soap_recv___tds__DeleteGeoLocation' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__DeleteGeoLocation(struct soap *soap, _tds__DeleteGeoLocationResponse &tds__DeleteGeoLocationResponse);
    
    /** Web service synchronous operation 'soap_call___tds__SetHashingAlgorithm' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___tds__SetHashingAlgorithm(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetHashingAlgorithm *tds__SetHashingAlgorithm, _tds__SetHashingAlgorithmResponse &tds__SetHashingAlgorithmResponse);
    /** Web service asynchronous operation 'soap_send___tds__SetHashingAlgorithm' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___tds__SetHashingAlgorithm(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tds__SetHashingAlgorithm *tds__SetHashingAlgorithm);
    /** Web service asynchronous operation 'soap_recv___tds__SetHashingAlgorithm' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___tds__SetHashingAlgorithm(struct soap *soap, _tds__SetHashingAlgorithmResponse &tds__SetHashingAlgorithmResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service one-way operation 'SOAP_ENV__Fault' implementation, should return value of soap_send_empty_response() to send HTTP Accept acknowledgment, or return an error code, or return SOAP_OK to immediately return without sending an HTTP response message */
    SOAP_FMAC5 int SOAP_FMAC6 SOAP_ENV__Fault(struct soap*, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail);
    /** Web service operation '__tds__GetServices' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetServices(struct soap*, _tds__GetServices *tds__GetServices, _tds__GetServicesResponse &tds__GetServicesResponse);
    /** Web service operation '__tds__GetServiceCapabilities' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities *tds__GetServiceCapabilities, _tds__GetServiceCapabilitiesResponse &tds__GetServiceCapabilitiesResponse);
    /** Web service operation '__tds__GetDeviceInformation' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation *tds__GetDeviceInformation, _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse);
    /** Web service operation '__tds__SetSystemDateAndTime' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime *tds__SetSystemDateAndTime, _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse);
    /** Web service operation '__tds__GetSystemDateAndTime' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime *tds__GetSystemDateAndTime, _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse);
    /** Web service operation '__tds__SetSystemFactoryDefault' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault, _tds__SetSystemFactoryDefaultResponse &tds__SetSystemFactoryDefaultResponse);
    /** Web service operation '__tds__UpgradeSystemFirmware' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware, _tds__UpgradeSystemFirmwareResponse &tds__UpgradeSystemFirmwareResponse);
    /** Web service operation '__tds__SystemReboot' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SystemReboot(struct soap*, _tds__SystemReboot *tds__SystemReboot, _tds__SystemRebootResponse &tds__SystemRebootResponse);
    /** Web service operation '__tds__RestoreSystem' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__RestoreSystem(struct soap*, _tds__RestoreSystem *tds__RestoreSystem, _tds__RestoreSystemResponse &tds__RestoreSystemResponse);
    /** Web service operation '__tds__GetSystemBackup' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup *tds__GetSystemBackup, _tds__GetSystemBackupResponse &tds__GetSystemBackupResponse);
    /** Web service operation '__tds__GetSystemLog' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetSystemLog(struct soap*, _tds__GetSystemLog *tds__GetSystemLog, _tds__GetSystemLogResponse &tds__GetSystemLogResponse);
    /** Web service operation '__tds__GetSystemSupportInformation' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation *tds__GetSystemSupportInformation, _tds__GetSystemSupportInformationResponse &tds__GetSystemSupportInformationResponse);
    /** Web service operation '__tds__GetScopes' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetScopes(struct soap*, _tds__GetScopes *tds__GetScopes, _tds__GetScopesResponse &tds__GetScopesResponse);
    /** Web service operation '__tds__SetScopes' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetScopes(struct soap*, _tds__SetScopes *tds__SetScopes, _tds__SetScopesResponse &tds__SetScopesResponse);
    /** Web service operation '__tds__AddScopes' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__AddScopes(struct soap*, _tds__AddScopes *tds__AddScopes, _tds__AddScopesResponse &tds__AddScopesResponse);
    /** Web service operation '__tds__RemoveScopes' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__RemoveScopes(struct soap*, _tds__RemoveScopes *tds__RemoveScopes, _tds__RemoveScopesResponse &tds__RemoveScopesResponse);
    /** Web service operation '__tds__GetDiscoveryMode' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode *tds__GetDiscoveryMode, _tds__GetDiscoveryModeResponse &tds__GetDiscoveryModeResponse);
    /** Web service operation '__tds__SetDiscoveryMode' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode *tds__SetDiscoveryMode, _tds__SetDiscoveryModeResponse &tds__SetDiscoveryModeResponse);
    /** Web service operation '__tds__GetRemoteDiscoveryMode' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode, _tds__GetRemoteDiscoveryModeResponse &tds__GetRemoteDiscoveryModeResponse);
    /** Web service operation '__tds__SetRemoteDiscoveryMode' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode, _tds__SetRemoteDiscoveryModeResponse &tds__SetRemoteDiscoveryModeResponse);
    /** Web service operation '__tds__GetDPAddresses' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses *tds__GetDPAddresses, _tds__GetDPAddressesResponse &tds__GetDPAddressesResponse);
    /** Web service operation '__tds__GetEndpointReference' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference *tds__GetEndpointReference, _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse);
    /** Web service operation '__tds__GetRemoteUser' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser *tds__GetRemoteUser, _tds__GetRemoteUserResponse &tds__GetRemoteUserResponse);
    /** Web service operation '__tds__SetRemoteUser' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser *tds__SetRemoteUser, _tds__SetRemoteUserResponse &tds__SetRemoteUserResponse);
    /** Web service operation '__tds__GetUsers' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetUsers(struct soap*, _tds__GetUsers *tds__GetUsers, _tds__GetUsersResponse &tds__GetUsersResponse);
    /** Web service operation '__tds__CreateUsers' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__CreateUsers(struct soap*, _tds__CreateUsers *tds__CreateUsers, _tds__CreateUsersResponse &tds__CreateUsersResponse);
    /** Web service operation '__tds__DeleteUsers' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__DeleteUsers(struct soap*, _tds__DeleteUsers *tds__DeleteUsers, _tds__DeleteUsersResponse &tds__DeleteUsersResponse);
    /** Web service operation '__tds__SetUser' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetUser(struct soap*, _tds__SetUser *tds__SetUser, _tds__SetUserResponse &tds__SetUserResponse);
    /** Web service operation '__tds__GetWsdlUrl' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl *tds__GetWsdlUrl, _tds__GetWsdlUrlResponse &tds__GetWsdlUrlResponse);
    /** Web service operation '__tds__GetPasswordComplexityOptions' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetPasswordComplexityOptions(struct soap*, _tds__GetPasswordComplexityOptions *tds__GetPasswordComplexityOptions, _tds__GetPasswordComplexityOptionsResponse &tds__GetPasswordComplexityOptionsResponse);
    /** Web service operation '__tds__GetPasswordComplexityConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetPasswordComplexityConfiguration(struct soap*, _tds__GetPasswordComplexityConfiguration *tds__GetPasswordComplexityConfiguration, _tds__GetPasswordComplexityConfigurationResponse &tds__GetPasswordComplexityConfigurationResponse);
    /** Web service operation '__tds__SetPasswordComplexityConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetPasswordComplexityConfiguration(struct soap*, _tds__SetPasswordComplexityConfiguration *tds__SetPasswordComplexityConfiguration, _tds__SetPasswordComplexityConfigurationResponse &tds__SetPasswordComplexityConfigurationResponse);
    /** Web service operation '__tds__GetPasswordHistoryConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetPasswordHistoryConfiguration(struct soap*, _tds__GetPasswordHistoryConfiguration *tds__GetPasswordHistoryConfiguration, _tds__GetPasswordHistoryConfigurationResponse &tds__GetPasswordHistoryConfigurationResponse);
    /** Web service operation '__tds__SetPasswordHistoryConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetPasswordHistoryConfiguration(struct soap*, _tds__SetPasswordHistoryConfiguration *tds__SetPasswordHistoryConfiguration, _tds__SetPasswordHistoryConfigurationResponse &tds__SetPasswordHistoryConfigurationResponse);
    /** Web service operation '__tds__GetAuthFailureWarningOptions' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetAuthFailureWarningOptions(struct soap*, _tds__GetAuthFailureWarningOptions *tds__GetAuthFailureWarningOptions, _tds__GetAuthFailureWarningOptionsResponse &tds__GetAuthFailureWarningOptionsResponse);
    /** Web service operation '__tds__GetAuthFailureWarningConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetAuthFailureWarningConfiguration(struct soap*, _tds__GetAuthFailureWarningConfiguration *tds__GetAuthFailureWarningConfiguration, _tds__GetAuthFailureWarningConfigurationResponse &tds__GetAuthFailureWarningConfigurationResponse);
    /** Web service operation '__tds__SetAuthFailureWarningConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetAuthFailureWarningConfiguration(struct soap*, _tds__SetAuthFailureWarningConfiguration *tds__SetAuthFailureWarningConfiguration, _tds__SetAuthFailureWarningConfigurationResponse &tds__SetAuthFailureWarningConfigurationResponse);
    /** Web service operation '__tds__GetCapabilities' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetCapabilities(struct soap*, _tds__GetCapabilities *tds__GetCapabilities, _tds__GetCapabilitiesResponse &tds__GetCapabilitiesResponse);
    /** Web service operation '__tds__SetDPAddresses' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses *tds__SetDPAddresses, _tds__SetDPAddressesResponse &tds__SetDPAddressesResponse);
    /** Web service operation '__tds__GetHostname' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetHostname(struct soap*, _tds__GetHostname *tds__GetHostname, _tds__GetHostnameResponse &tds__GetHostnameResponse);
    /** Web service operation '__tds__SetHostname' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetHostname(struct soap*, _tds__SetHostname *tds__SetHostname, _tds__SetHostnameResponse &tds__SetHostnameResponse);
    /** Web service operation '__tds__SetHostnameFromDHCP' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP, _tds__SetHostnameFromDHCPResponse &tds__SetHostnameFromDHCPResponse);
    /** Web service operation '__tds__GetDNS' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDNS(struct soap*, _tds__GetDNS *tds__GetDNS, _tds__GetDNSResponse &tds__GetDNSResponse);
    /** Web service operation '__tds__SetDNS' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetDNS(struct soap*, _tds__SetDNS *tds__SetDNS, _tds__SetDNSResponse &tds__SetDNSResponse);
    /** Web service operation '__tds__GetNTP' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetNTP(struct soap*, _tds__GetNTP *tds__GetNTP, _tds__GetNTPResponse &tds__GetNTPResponse);
    /** Web service operation '__tds__SetNTP' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetNTP(struct soap*, _tds__SetNTP *tds__SetNTP, _tds__SetNTPResponse &tds__SetNTPResponse);
    /** Web service operation '__tds__GetDynamicDNS' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS *tds__GetDynamicDNS, _tds__GetDynamicDNSResponse &tds__GetDynamicDNSResponse);
    /** Web service operation '__tds__SetDynamicDNS' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS *tds__SetDynamicDNS, _tds__SetDynamicDNSResponse &tds__SetDynamicDNSResponse);
    /** Web service operation '__tds__GetNetworkInterfaces' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces *tds__GetNetworkInterfaces, _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse);
    /** Web service operation '__tds__SetNetworkInterfaces' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces *tds__SetNetworkInterfaces, _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse);
    /** Web service operation '__tds__GetNetworkProtocols' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols *tds__GetNetworkProtocols, _tds__GetNetworkProtocolsResponse &tds__GetNetworkProtocolsResponse);
    /** Web service operation '__tds__SetNetworkProtocols' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols *tds__SetNetworkProtocols, _tds__SetNetworkProtocolsResponse &tds__SetNetworkProtocolsResponse);
    /** Web service operation '__tds__GetNetworkDefaultGateway' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway, _tds__GetNetworkDefaultGatewayResponse &tds__GetNetworkDefaultGatewayResponse);
    /** Web service operation '__tds__SetNetworkDefaultGateway' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway, _tds__SetNetworkDefaultGatewayResponse &tds__SetNetworkDefaultGatewayResponse);
    /** Web service operation '__tds__GetZeroConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration *tds__GetZeroConfiguration, _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse);
    /** Web service operation '__tds__SetZeroConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration *tds__SetZeroConfiguration, _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse);
    /** Web service operation '__tds__GetIPAddressFilter' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter *tds__GetIPAddressFilter, _tds__GetIPAddressFilterResponse &tds__GetIPAddressFilterResponse);
    /** Web service operation '__tds__SetIPAddressFilter' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter *tds__SetIPAddressFilter, _tds__SetIPAddressFilterResponse &tds__SetIPAddressFilterResponse);
    /** Web service operation '__tds__AddIPAddressFilter' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter *tds__AddIPAddressFilter, _tds__AddIPAddressFilterResponse &tds__AddIPAddressFilterResponse);
    /** Web service operation '__tds__RemoveIPAddressFilter' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter, _tds__RemoveIPAddressFilterResponse &tds__RemoveIPAddressFilterResponse);
    /** Web service operation '__tds__GetAccessPolicy' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy *tds__GetAccessPolicy, _tds__GetAccessPolicyResponse &tds__GetAccessPolicyResponse);
    /** Web service operation '__tds__SetAccessPolicy' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy *tds__SetAccessPolicy, _tds__SetAccessPolicyResponse &tds__SetAccessPolicyResponse);
    /** Web service operation '__tds__CreateCertificate' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__CreateCertificate(struct soap*, _tds__CreateCertificate *tds__CreateCertificate, _tds__CreateCertificateResponse &tds__CreateCertificateResponse);
    /** Web service operation '__tds__GetCertificates' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetCertificates(struct soap*, _tds__GetCertificates *tds__GetCertificates, _tds__GetCertificatesResponse &tds__GetCertificatesResponse);
    /** Web service operation '__tds__GetCertificatesStatus' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus *tds__GetCertificatesStatus, _tds__GetCertificatesStatusResponse &tds__GetCertificatesStatusResponse);
    /** Web service operation '__tds__SetCertificatesStatus' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus *tds__SetCertificatesStatus, _tds__SetCertificatesStatusResponse &tds__SetCertificatesStatusResponse);
    /** Web service operation '__tds__DeleteCertificates' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates *tds__DeleteCertificates, _tds__DeleteCertificatesResponse &tds__DeleteCertificatesResponse);
    /** Web service operation '__tds__GetPkcs10Request' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request *tds__GetPkcs10Request, _tds__GetPkcs10RequestResponse &tds__GetPkcs10RequestResponse);
    /** Web service operation '__tds__LoadCertificates' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__LoadCertificates(struct soap*, _tds__LoadCertificates *tds__LoadCertificates, _tds__LoadCertificatesResponse &tds__LoadCertificatesResponse);
    /** Web service operation '__tds__GetClientCertificateMode' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode *tds__GetClientCertificateMode, _tds__GetClientCertificateModeResponse &tds__GetClientCertificateModeResponse);
    /** Web service operation '__tds__SetClientCertificateMode' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode *tds__SetClientCertificateMode, _tds__SetClientCertificateModeResponse &tds__SetClientCertificateModeResponse);
    /** Web service operation '__tds__GetRelayOutputs' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs *tds__GetRelayOutputs, _tds__GetRelayOutputsResponse &tds__GetRelayOutputsResponse);
    /** Web service operation '__tds__SetRelayOutputSettings' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings *tds__SetRelayOutputSettings, _tds__SetRelayOutputSettingsResponse &tds__SetRelayOutputSettingsResponse);
    /** Web service operation '__tds__SetRelayOutputState' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState *tds__SetRelayOutputState, _tds__SetRelayOutputStateResponse &tds__SetRelayOutputStateResponse);
    /** Web service operation '__tds__SendAuxiliaryCommand' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand, _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse);
    /** Web service operation '__tds__GetCACertificates' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetCACertificates(struct soap*, _tds__GetCACertificates *tds__GetCACertificates, _tds__GetCACertificatesResponse &tds__GetCACertificatesResponse);
    /** Web service operation '__tds__LoadCertificateWithPrivateKey' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey, _tds__LoadCertificateWithPrivateKeyResponse &tds__LoadCertificateWithPrivateKeyResponse);
    /** Web service operation '__tds__GetCertificateInformation' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation *tds__GetCertificateInformation, _tds__GetCertificateInformationResponse &tds__GetCertificateInformationResponse);
    /** Web service operation '__tds__LoadCACertificates' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates *tds__LoadCACertificates, _tds__LoadCACertificatesResponse &tds__LoadCACertificatesResponse);
    /** Web service operation '__tds__CreateDot1XConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration, _tds__CreateDot1XConfigurationResponse &tds__CreateDot1XConfigurationResponse);
    /** Web service operation '__tds__SetDot1XConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration *tds__SetDot1XConfiguration, _tds__SetDot1XConfigurationResponse &tds__SetDot1XConfigurationResponse);
    /** Web service operation '__tds__GetDot1XConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration *tds__GetDot1XConfiguration, _tds__GetDot1XConfigurationResponse &tds__GetDot1XConfigurationResponse);
    /** Web service operation '__tds__GetDot1XConfigurations' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations *tds__GetDot1XConfigurations, _tds__GetDot1XConfigurationsResponse &tds__GetDot1XConfigurationsResponse);
    /** Web service operation '__tds__DeleteDot1XConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration, _tds__DeleteDot1XConfigurationResponse &tds__DeleteDot1XConfigurationResponse);
    /** Web service operation '__tds__GetDot11Capabilities' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities *tds__GetDot11Capabilities, _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse);
    /** Web service operation '__tds__GetDot11Status' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetDot11Status(struct soap*, _tds__GetDot11Status *tds__GetDot11Status, _tds__GetDot11StatusResponse &tds__GetDot11StatusResponse);
    /** Web service operation '__tds__ScanAvailableDot11Networks' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks, _tds__ScanAvailableDot11NetworksResponse &tds__ScanAvailableDot11NetworksResponse);
    /** Web service operation '__tds__GetSystemUris' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetSystemUris(struct soap*, _tds__GetSystemUris *tds__GetSystemUris, _tds__GetSystemUrisResponse &tds__GetSystemUrisResponse);
    /** Web service operation '__tds__StartFirmwareUpgrade' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade, _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse);
    /** Web service operation '__tds__StartSystemRestore' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore *tds__StartSystemRestore, _tds__StartSystemRestoreResponse &tds__StartSystemRestoreResponse);
    /** Web service operation '__tds__GetStorageConfigurations' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations *tds__GetStorageConfigurations, _tds__GetStorageConfigurationsResponse &tds__GetStorageConfigurationsResponse);
    /** Web service operation '__tds__CreateStorageConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration *tds__CreateStorageConfiguration, _tds__CreateStorageConfigurationResponse &tds__CreateStorageConfigurationResponse);
    /** Web service operation '__tds__GetStorageConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration *tds__GetStorageConfiguration, _tds__GetStorageConfigurationResponse &tds__GetStorageConfigurationResponse);
    /** Web service operation '__tds__SetStorageConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration *tds__SetStorageConfiguration, _tds__SetStorageConfigurationResponse &tds__SetStorageConfigurationResponse);
    /** Web service operation '__tds__DeleteStorageConfiguration' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration, _tds__DeleteStorageConfigurationResponse &tds__DeleteStorageConfigurationResponse);
    /** Web service operation '__tds__GetGeoLocation' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation *tds__GetGeoLocation, _tds__GetGeoLocationResponse &tds__GetGeoLocationResponse);
    /** Web service operation '__tds__SetGeoLocation' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation *tds__SetGeoLocation, _tds__SetGeoLocationResponse &tds__SetGeoLocationResponse);
    /** Web service operation '__tds__DeleteGeoLocation' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation *tds__DeleteGeoLocation, _tds__DeleteGeoLocationResponse &tds__DeleteGeoLocationResponse);
    /** Web service operation '__tds__SetHashingAlgorithm' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __tds__SetHashingAlgorithm(struct soap*, _tds__SetHashingAlgorithm *tds__SetHashingAlgorithm, _tds__SetHashingAlgorithmResponse &tds__SetHashingAlgorithmResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_SOAP_ENV__Fault(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetServices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetServiceCapabilities(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDeviceInformation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetSystemDateAndTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetSystemDateAndTime(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetSystemFactoryDefault(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__UpgradeSystemFirmware(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SystemReboot(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__RestoreSystem(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetSystemBackup(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetSystemLog(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetSystemSupportInformation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetScopes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetScopes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__AddScopes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__RemoveScopes(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDiscoveryMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetDiscoveryMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetRemoteDiscoveryMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetRemoteDiscoveryMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDPAddresses(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetEndpointReference(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetRemoteUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetRemoteUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetUsers(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__CreateUsers(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__DeleteUsers(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetWsdlUrl(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetPasswordComplexityOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetPasswordComplexityConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetPasswordComplexityConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetPasswordHistoryConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetPasswordHistoryConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetAuthFailureWarningOptions(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetAuthFailureWarningConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetAuthFailureWarningConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetCapabilities(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetDPAddresses(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetHostname(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetHostname(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetHostnameFromDHCP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDNS(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetDNS(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetNTP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetNTP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDynamicDNS(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetDynamicDNS(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetNetworkInterfaces(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetNetworkInterfaces(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetNetworkProtocols(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetNetworkProtocols(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetNetworkDefaultGateway(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetNetworkDefaultGateway(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetZeroConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetZeroConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetIPAddressFilter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetIPAddressFilter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__AddIPAddressFilter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__RemoveIPAddressFilter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetAccessPolicy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetAccessPolicy(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__CreateCertificate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetCertificates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetCertificatesStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetCertificatesStatus(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__DeleteCertificates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetPkcs10Request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__LoadCertificates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetClientCertificateMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetClientCertificateMode(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetRelayOutputs(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetRelayOutputSettings(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetRelayOutputState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SendAuxiliaryCommand(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetCACertificates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__LoadCertificateWithPrivateKey(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetCertificateInformation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__LoadCACertificates(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__CreateDot1XConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetDot1XConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDot1XConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDot1XConfigurations(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__DeleteDot1XConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDot11Capabilities(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDot11Status(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__ScanAvailableDot11Networks(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetSystemUris(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__StartFirmwareUpgrade(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__StartSystemRestore(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetStorageConfigurations(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__CreateStorageConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetStorageConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetStorageConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__DeleteStorageConfiguration(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetGeoLocation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetGeoLocation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__DeleteGeoLocation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__SetHashingAlgorithm(struct soap*);

#endif

/* End of soapStub.h */
