/* soapH.h
   Generated by gSOAP 2.8.124 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes_DEFINED
#define SOAP_TYPE_tt__IANA_IfTypes_DEFINED

inline void soap_default_tt__IANA_IfTypes(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__IANA_IfTypes
	*a = SOAP_DEFAULT_tt__IANA_IfTypes;
#else
	*a = (int)0;
#endif
}

#define soap_tt__IANA_IfTypes2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IANA_IfTypes(struct soap*, const char*, int, const int *, const char*);

#define soap_s2tt__IANA_IfTypes soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_tt__IANA_IfTypes(struct soap*, const char*, int *, const char*);

#define soap_instantiate_tt__IANA_IfTypes soap_instantiate_int


#define soap_new_tt__IANA_IfTypes soap_new_int

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IANA_IfTypes(struct soap*, const int *, const char*, const char*);

inline int soap_write_tt__IANA_IfTypes(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IANA_IfTypes(soap, p, "tt:IANA-IfTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IANA_IfTypes(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IANA_IfTypes(soap, p, "tt:IANA-IfTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IANA_IfTypes(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IANA_IfTypes(soap, p, "tt:IANA-IfTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IANA_IfTypes(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IANA_IfTypes(soap, p, "tt:IANA-IfTypes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_tt__IANA_IfTypes(struct soap*, int *, const char*, const char*);

inline int soap_read_tt__IANA_IfTypes(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IANA_IfTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IANA_IfTypes(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IANA_IfTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IANA_IfTypes(struct soap *soap, int *p)
{
	if (::soap_read_tt__IANA_IfTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write__wsa5__RetryAfter(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RelayMode_DEFINED
#define SOAP_TYPE_tt__RelayMode_DEFINED

inline void soap_default_tt__RelayMode(struct soap *soap, enum tt__RelayMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__RelayMode
	*a = SOAP_DEFAULT_tt__RelayMode;
#else
	*a = (enum tt__RelayMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayMode(struct soap*, const char*, int, const enum tt__RelayMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayMode2s(struct soap*, enum tt__RelayMode);
SOAP_FMAC3 enum tt__RelayMode * SOAP_FMAC4 soap_in_tt__RelayMode(struct soap*, const char*, enum tt__RelayMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayMode(struct soap*, const char*, enum tt__RelayMode *);

SOAP_FMAC3 enum tt__RelayMode * SOAP_FMAC4 soap_new_tt__RelayMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayMode(struct soap*, const enum tt__RelayMode *, const char*, const char*);

inline int soap_write_tt__RelayMode(struct soap *soap, enum tt__RelayMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__RelayMode(soap, p, "tt:RelayMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__RelayMode(struct soap *soap, const char *URL, enum tt__RelayMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayMode(soap, p, "tt:RelayMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RelayMode(struct soap *soap, const char *URL, enum tt__RelayMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayMode(soap, p, "tt:RelayMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RelayMode(struct soap *soap, const char *URL, enum tt__RelayMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayMode(soap, p, "tt:RelayMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RelayMode * SOAP_FMAC4 soap_get_tt__RelayMode(struct soap*, enum tt__RelayMode *, const char*, const char*);

inline int soap_read_tt__RelayMode(struct soap *soap, enum tt__RelayMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__RelayMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RelayMode(struct soap *soap, const char *URL, enum tt__RelayMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RelayMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RelayMode(struct soap *soap, enum tt__RelayMode *p)
{
	if (::soap_read_tt__RelayMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState_DEFINED
#define SOAP_TYPE_tt__RelayIdleState_DEFINED

inline void soap_default_tt__RelayIdleState(struct soap *soap, enum tt__RelayIdleState *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__RelayIdleState
	*a = SOAP_DEFAULT_tt__RelayIdleState;
#else
	*a = (enum tt__RelayIdleState)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayIdleState(struct soap*, const char*, int, const enum tt__RelayIdleState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayIdleState2s(struct soap*, enum tt__RelayIdleState);
SOAP_FMAC3 enum tt__RelayIdleState * SOAP_FMAC4 soap_in_tt__RelayIdleState(struct soap*, const char*, enum tt__RelayIdleState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayIdleState(struct soap*, const char*, enum tt__RelayIdleState *);

SOAP_FMAC3 enum tt__RelayIdleState * SOAP_FMAC4 soap_new_tt__RelayIdleState(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayIdleState(struct soap*, const enum tt__RelayIdleState *, const char*, const char*);

inline int soap_write_tt__RelayIdleState(struct soap *soap, enum tt__RelayIdleState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__RelayIdleState(soap, p, "tt:RelayIdleState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__RelayIdleState(struct soap *soap, const char *URL, enum tt__RelayIdleState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayIdleState(soap, p, "tt:RelayIdleState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RelayIdleState(struct soap *soap, const char *URL, enum tt__RelayIdleState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayIdleState(soap, p, "tt:RelayIdleState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RelayIdleState(struct soap *soap, const char *URL, enum tt__RelayIdleState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayIdleState(soap, p, "tt:RelayIdleState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RelayIdleState * SOAP_FMAC4 soap_get_tt__RelayIdleState(struct soap*, enum tt__RelayIdleState *, const char*, const char*);

inline int soap_read_tt__RelayIdleState(struct soap *soap, enum tt__RelayIdleState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__RelayIdleState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RelayIdleState(struct soap *soap, const char *URL, enum tt__RelayIdleState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RelayIdleState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RelayIdleState(struct soap *soap, enum tt__RelayIdleState *p)
{
	if (::soap_read_tt__RelayIdleState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState_DEFINED
#define SOAP_TYPE_tt__RelayLogicalState_DEFINED

inline void soap_default_tt__RelayLogicalState(struct soap *soap, enum tt__RelayLogicalState *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__RelayLogicalState
	*a = SOAP_DEFAULT_tt__RelayLogicalState;
#else
	*a = (enum tt__RelayLogicalState)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayLogicalState(struct soap*, const char*, int, const enum tt__RelayLogicalState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayLogicalState2s(struct soap*, enum tt__RelayLogicalState);
SOAP_FMAC3 enum tt__RelayLogicalState * SOAP_FMAC4 soap_in_tt__RelayLogicalState(struct soap*, const char*, enum tt__RelayLogicalState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayLogicalState(struct soap*, const char*, enum tt__RelayLogicalState *);

SOAP_FMAC3 enum tt__RelayLogicalState * SOAP_FMAC4 soap_new_tt__RelayLogicalState(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayLogicalState(struct soap*, const enum tt__RelayLogicalState *, const char*, const char*);

inline int soap_write_tt__RelayLogicalState(struct soap *soap, enum tt__RelayLogicalState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__RelayLogicalState(soap, p, "tt:RelayLogicalState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__RelayLogicalState(struct soap *soap, const char *URL, enum tt__RelayLogicalState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayLogicalState(soap, p, "tt:RelayLogicalState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RelayLogicalState(struct soap *soap, const char *URL, enum tt__RelayLogicalState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayLogicalState(soap, p, "tt:RelayLogicalState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RelayLogicalState(struct soap *soap, const char *URL, enum tt__RelayLogicalState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__RelayLogicalState(soap, p, "tt:RelayLogicalState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__RelayLogicalState * SOAP_FMAC4 soap_get_tt__RelayLogicalState(struct soap*, enum tt__RelayLogicalState *, const char*, const char*);

inline int soap_read_tt__RelayLogicalState(struct soap *soap, enum tt__RelayLogicalState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__RelayLogicalState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RelayLogicalState(struct soap *soap, const char *URL, enum tt__RelayLogicalState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RelayLogicalState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RelayLogicalState(struct soap *soap, enum tt__RelayLogicalState *p)
{
	if (::soap_read_tt__RelayLogicalState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__UserLevel_DEFINED
#define SOAP_TYPE_tt__UserLevel_DEFINED

inline void soap_default_tt__UserLevel(struct soap *soap, enum tt__UserLevel *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__UserLevel
	*a = SOAP_DEFAULT_tt__UserLevel;
#else
	*a = (enum tt__UserLevel)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserLevel(struct soap*, const char*, int, const enum tt__UserLevel *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__UserLevel2s(struct soap*, enum tt__UserLevel);
SOAP_FMAC3 enum tt__UserLevel * SOAP_FMAC4 soap_in_tt__UserLevel(struct soap*, const char*, enum tt__UserLevel *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__UserLevel(struct soap*, const char*, enum tt__UserLevel *);

SOAP_FMAC3 enum tt__UserLevel * SOAP_FMAC4 soap_new_tt__UserLevel(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__UserLevel(struct soap*, const enum tt__UserLevel *, const char*, const char*);

inline int soap_write_tt__UserLevel(struct soap *soap, enum tt__UserLevel const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__UserLevel(soap, p, "tt:UserLevel", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__UserLevel(struct soap *soap, const char *URL, enum tt__UserLevel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__UserLevel(soap, p, "tt:UserLevel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__UserLevel(struct soap *soap, const char *URL, enum tt__UserLevel const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__UserLevel(soap, p, "tt:UserLevel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__UserLevel(struct soap *soap, const char *URL, enum tt__UserLevel const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__UserLevel(soap, p, "tt:UserLevel", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__UserLevel * SOAP_FMAC4 soap_get_tt__UserLevel(struct soap*, enum tt__UserLevel *, const char*, const char*);

inline int soap_read_tt__UserLevel(struct soap *soap, enum tt__UserLevel *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__UserLevel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__UserLevel(struct soap *soap, const char *URL, enum tt__UserLevel *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__UserLevel(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__UserLevel(struct soap *soap, enum tt__UserLevel *p)
{
	if (::soap_read_tt__UserLevel(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType_DEFINED
#define SOAP_TYPE_tt__SetDateTimeType_DEFINED

inline void soap_default_tt__SetDateTimeType(struct soap *soap, enum tt__SetDateTimeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__SetDateTimeType
	*a = SOAP_DEFAULT_tt__SetDateTimeType;
#else
	*a = (enum tt__SetDateTimeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SetDateTimeType(struct soap*, const char*, int, const enum tt__SetDateTimeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SetDateTimeType2s(struct soap*, enum tt__SetDateTimeType);
SOAP_FMAC3 enum tt__SetDateTimeType * SOAP_FMAC4 soap_in_tt__SetDateTimeType(struct soap*, const char*, enum tt__SetDateTimeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SetDateTimeType(struct soap*, const char*, enum tt__SetDateTimeType *);

SOAP_FMAC3 enum tt__SetDateTimeType * SOAP_FMAC4 soap_new_tt__SetDateTimeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SetDateTimeType(struct soap*, const enum tt__SetDateTimeType *, const char*, const char*);

inline int soap_write_tt__SetDateTimeType(struct soap *soap, enum tt__SetDateTimeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__SetDateTimeType(soap, p, "tt:SetDateTimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__SetDateTimeType(struct soap *soap, const char *URL, enum tt__SetDateTimeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SetDateTimeType(soap, p, "tt:SetDateTimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SetDateTimeType(struct soap *soap, const char *URL, enum tt__SetDateTimeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SetDateTimeType(soap, p, "tt:SetDateTimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SetDateTimeType(struct soap *soap, const char *URL, enum tt__SetDateTimeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SetDateTimeType(soap, p, "tt:SetDateTimeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__SetDateTimeType * SOAP_FMAC4 soap_get_tt__SetDateTimeType(struct soap*, enum tt__SetDateTimeType *, const char*, const char*);

inline int soap_read_tt__SetDateTimeType(struct soap *soap, enum tt__SetDateTimeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__SetDateTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SetDateTimeType(struct soap *soap, const char *URL, enum tt__SetDateTimeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SetDateTimeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SetDateTimeType(struct soap *soap, enum tt__SetDateTimeType *p)
{
	if (::soap_read_tt__SetDateTimeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType_DEFINED
#define SOAP_TYPE_tt__FactoryDefaultType_DEFINED

inline void soap_default_tt__FactoryDefaultType(struct soap *soap, enum tt__FactoryDefaultType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__FactoryDefaultType
	*a = SOAP_DEFAULT_tt__FactoryDefaultType;
#else
	*a = (enum tt__FactoryDefaultType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FactoryDefaultType(struct soap*, const char*, int, const enum tt__FactoryDefaultType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__FactoryDefaultType2s(struct soap*, enum tt__FactoryDefaultType);
SOAP_FMAC3 enum tt__FactoryDefaultType * SOAP_FMAC4 soap_in_tt__FactoryDefaultType(struct soap*, const char*, enum tt__FactoryDefaultType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__FactoryDefaultType(struct soap*, const char*, enum tt__FactoryDefaultType *);

SOAP_FMAC3 enum tt__FactoryDefaultType * SOAP_FMAC4 soap_new_tt__FactoryDefaultType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__FactoryDefaultType(struct soap*, const enum tt__FactoryDefaultType *, const char*, const char*);

inline int soap_write_tt__FactoryDefaultType(struct soap *soap, enum tt__FactoryDefaultType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__FactoryDefaultType(soap, p, "tt:FactoryDefaultType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__FactoryDefaultType(struct soap *soap, const char *URL, enum tt__FactoryDefaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__FactoryDefaultType(soap, p, "tt:FactoryDefaultType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__FactoryDefaultType(struct soap *soap, const char *URL, enum tt__FactoryDefaultType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__FactoryDefaultType(soap, p, "tt:FactoryDefaultType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__FactoryDefaultType(struct soap *soap, const char *URL, enum tt__FactoryDefaultType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__FactoryDefaultType(soap, p, "tt:FactoryDefaultType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__FactoryDefaultType * SOAP_FMAC4 soap_get_tt__FactoryDefaultType(struct soap*, enum tt__FactoryDefaultType *, const char*, const char*);

inline int soap_read_tt__FactoryDefaultType(struct soap *soap, enum tt__FactoryDefaultType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__FactoryDefaultType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__FactoryDefaultType(struct soap *soap, const char *URL, enum tt__FactoryDefaultType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__FactoryDefaultType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__FactoryDefaultType(struct soap *soap, enum tt__FactoryDefaultType *p)
{
	if (::soap_read_tt__FactoryDefaultType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemLogType_DEFINED
#define SOAP_TYPE_tt__SystemLogType_DEFINED

inline void soap_default_tt__SystemLogType(struct soap *soap, enum tt__SystemLogType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__SystemLogType
	*a = SOAP_DEFAULT_tt__SystemLogType;
#else
	*a = (enum tt__SystemLogType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogType(struct soap*, const char*, int, const enum tt__SystemLogType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SystemLogType2s(struct soap*, enum tt__SystemLogType);
SOAP_FMAC3 enum tt__SystemLogType * SOAP_FMAC4 soap_in_tt__SystemLogType(struct soap*, const char*, enum tt__SystemLogType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SystemLogType(struct soap*, const char*, enum tt__SystemLogType *);

SOAP_FMAC3 enum tt__SystemLogType * SOAP_FMAC4 soap_new_tt__SystemLogType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SystemLogType(struct soap*, const enum tt__SystemLogType *, const char*, const char*);

inline int soap_write_tt__SystemLogType(struct soap *soap, enum tt__SystemLogType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__SystemLogType(soap, p, "tt:SystemLogType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemLogType(struct soap *soap, const char *URL, enum tt__SystemLogType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SystemLogType(soap, p, "tt:SystemLogType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemLogType(struct soap *soap, const char *URL, enum tt__SystemLogType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SystemLogType(soap, p, "tt:SystemLogType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemLogType(struct soap *soap, const char *URL, enum tt__SystemLogType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__SystemLogType(soap, p, "tt:SystemLogType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__SystemLogType * SOAP_FMAC4 soap_get_tt__SystemLogType(struct soap*, enum tt__SystemLogType *, const char*, const char*);

inline int soap_read_tt__SystemLogType(struct soap *soap, enum tt__SystemLogType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__SystemLogType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemLogType(struct soap *soap, const char *URL, enum tt__SystemLogType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemLogType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemLogType(struct soap *soap, enum tt__SystemLogType *p)
{
	if (::soap_read_tt__SystemLogType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory_DEFINED
#define SOAP_TYPE_tt__CapabilityCategory_DEFINED

inline void soap_default_tt__CapabilityCategory(struct soap *soap, enum tt__CapabilityCategory *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__CapabilityCategory
	*a = SOAP_DEFAULT_tt__CapabilityCategory;
#else
	*a = (enum tt__CapabilityCategory)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilityCategory(struct soap*, const char*, int, const enum tt__CapabilityCategory *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__CapabilityCategory2s(struct soap*, enum tt__CapabilityCategory);
SOAP_FMAC3 enum tt__CapabilityCategory * SOAP_FMAC4 soap_in_tt__CapabilityCategory(struct soap*, const char*, enum tt__CapabilityCategory *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__CapabilityCategory(struct soap*, const char*, enum tt__CapabilityCategory *);

SOAP_FMAC3 enum tt__CapabilityCategory * SOAP_FMAC4 soap_new_tt__CapabilityCategory(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__CapabilityCategory(struct soap*, const enum tt__CapabilityCategory *, const char*, const char*);

inline int soap_write_tt__CapabilityCategory(struct soap *soap, enum tt__CapabilityCategory const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__CapabilityCategory(soap, p, "tt:CapabilityCategory", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__CapabilityCategory(struct soap *soap, const char *URL, enum tt__CapabilityCategory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__CapabilityCategory(soap, p, "tt:CapabilityCategory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CapabilityCategory(struct soap *soap, const char *URL, enum tt__CapabilityCategory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__CapabilityCategory(soap, p, "tt:CapabilityCategory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CapabilityCategory(struct soap *soap, const char *URL, enum tt__CapabilityCategory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__CapabilityCategory(soap, p, "tt:CapabilityCategory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__CapabilityCategory * SOAP_FMAC4 soap_get_tt__CapabilityCategory(struct soap*, enum tt__CapabilityCategory *, const char*, const char*);

inline int soap_read_tt__CapabilityCategory(struct soap *soap, enum tt__CapabilityCategory *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__CapabilityCategory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CapabilityCategory(struct soap *soap, const char *URL, enum tt__CapabilityCategory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CapabilityCategory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CapabilityCategory(struct soap *soap, enum tt__CapabilityCategory *p)
{
	if (::soap_read_tt__CapabilityCategory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite_DEFINED
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite_DEFINED

inline void soap_default_tt__Dot11AuthAndMangementSuite(struct soap *soap, enum tt__Dot11AuthAndMangementSuite *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__Dot11AuthAndMangementSuite
	*a = SOAP_DEFAULT_tt__Dot11AuthAndMangementSuite;
#else
	*a = (enum tt__Dot11AuthAndMangementSuite)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const enum tt__Dot11AuthAndMangementSuite *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11AuthAndMangementSuite2s(struct soap*, enum tt__Dot11AuthAndMangementSuite);
SOAP_FMAC3 enum tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_in_tt__Dot11AuthAndMangementSuite(struct soap*, const char*, enum tt__Dot11AuthAndMangementSuite *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11AuthAndMangementSuite(struct soap*, const char*, enum tt__Dot11AuthAndMangementSuite *);

SOAP_FMAC3 enum tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_new_tt__Dot11AuthAndMangementSuite(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11AuthAndMangementSuite(struct soap*, const enum tt__Dot11AuthAndMangementSuite *, const char*, const char*);

inline int soap_write_tt__Dot11AuthAndMangementSuite(struct soap *soap, enum tt__Dot11AuthAndMangementSuite const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Dot11AuthAndMangementSuite(soap, p, "tt:Dot11AuthAndMangementSuite", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11AuthAndMangementSuite(struct soap *soap, const char *URL, enum tt__Dot11AuthAndMangementSuite const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11AuthAndMangementSuite(soap, p, "tt:Dot11AuthAndMangementSuite", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11AuthAndMangementSuite(struct soap *soap, const char *URL, enum tt__Dot11AuthAndMangementSuite const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11AuthAndMangementSuite(soap, p, "tt:Dot11AuthAndMangementSuite", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11AuthAndMangementSuite(struct soap *soap, const char *URL, enum tt__Dot11AuthAndMangementSuite const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11AuthAndMangementSuite(soap, p, "tt:Dot11AuthAndMangementSuite", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_get_tt__Dot11AuthAndMangementSuite(struct soap*, enum tt__Dot11AuthAndMangementSuite *, const char*, const char*);

inline int soap_read_tt__Dot11AuthAndMangementSuite(struct soap *soap, enum tt__Dot11AuthAndMangementSuite *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Dot11AuthAndMangementSuite(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11AuthAndMangementSuite(struct soap *soap, const char *URL, enum tt__Dot11AuthAndMangementSuite *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11AuthAndMangementSuite(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11AuthAndMangementSuite(struct soap *soap, enum tt__Dot11AuthAndMangementSuite *p)
{
	if (::soap_read_tt__Dot11AuthAndMangementSuite(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength_DEFINED
#define SOAP_TYPE_tt__Dot11SignalStrength_DEFINED

inline void soap_default_tt__Dot11SignalStrength(struct soap *soap, enum tt__Dot11SignalStrength *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__Dot11SignalStrength
	*a = SOAP_DEFAULT_tt__Dot11SignalStrength;
#else
	*a = (enum tt__Dot11SignalStrength)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SignalStrength(struct soap*, const char*, int, const enum tt__Dot11SignalStrength *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SignalStrength2s(struct soap*, enum tt__Dot11SignalStrength);
SOAP_FMAC3 enum tt__Dot11SignalStrength * SOAP_FMAC4 soap_in_tt__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength *);

SOAP_FMAC3 enum tt__Dot11SignalStrength * SOAP_FMAC4 soap_new_tt__Dot11SignalStrength(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SignalStrength(struct soap*, const enum tt__Dot11SignalStrength *, const char*, const char*);

inline int soap_write_tt__Dot11SignalStrength(struct soap *soap, enum tt__Dot11SignalStrength const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Dot11SignalStrength(soap, p, "tt:Dot11SignalStrength", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11SignalStrength(struct soap *soap, const char *URL, enum tt__Dot11SignalStrength const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11SignalStrength(soap, p, "tt:Dot11SignalStrength", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11SignalStrength(struct soap *soap, const char *URL, enum tt__Dot11SignalStrength const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11SignalStrength(soap, p, "tt:Dot11SignalStrength", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11SignalStrength(struct soap *soap, const char *URL, enum tt__Dot11SignalStrength const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11SignalStrength(soap, p, "tt:Dot11SignalStrength", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11SignalStrength * SOAP_FMAC4 soap_get_tt__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *, const char*, const char*);

inline int soap_read_tt__Dot11SignalStrength(struct soap *soap, enum tt__Dot11SignalStrength *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Dot11SignalStrength(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11SignalStrength(struct soap *soap, const char *URL, enum tt__Dot11SignalStrength *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11SignalStrength(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11SignalStrength(struct soap *soap, enum tt__Dot11SignalStrength *p)
{
	if (::soap_read_tt__Dot11SignalStrength(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher_DEFINED
#define SOAP_TYPE_tt__Dot11Cipher_DEFINED

inline void soap_default_tt__Dot11Cipher(struct soap *soap, enum tt__Dot11Cipher *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__Dot11Cipher
	*a = SOAP_DEFAULT_tt__Dot11Cipher;
#else
	*a = (enum tt__Dot11Cipher)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Cipher(struct soap*, const char*, int, const enum tt__Dot11Cipher *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11Cipher2s(struct soap*, enum tt__Dot11Cipher);
SOAP_FMAC3 enum tt__Dot11Cipher * SOAP_FMAC4 soap_in_tt__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher *);

SOAP_FMAC3 enum tt__Dot11Cipher * SOAP_FMAC4 soap_new_tt__Dot11Cipher(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11Cipher(struct soap*, const enum tt__Dot11Cipher *, const char*, const char*);

inline int soap_write_tt__Dot11Cipher(struct soap *soap, enum tt__Dot11Cipher const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Dot11Cipher(soap, p, "tt:Dot11Cipher", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11Cipher(struct soap *soap, const char *URL, enum tt__Dot11Cipher const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11Cipher(soap, p, "tt:Dot11Cipher", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11Cipher(struct soap *soap, const char *URL, enum tt__Dot11Cipher const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11Cipher(soap, p, "tt:Dot11Cipher", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11Cipher(struct soap *soap, const char *URL, enum tt__Dot11Cipher const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11Cipher(soap, p, "tt:Dot11Cipher", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11Cipher * SOAP_FMAC4 soap_get_tt__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *, const char*, const char*);

inline int soap_read_tt__Dot11Cipher(struct soap *soap, enum tt__Dot11Cipher *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Dot11Cipher(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11Cipher(struct soap *soap, const char *URL, enum tt__Dot11Cipher *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11Cipher(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11Cipher(struct soap *soap, enum tt__Dot11Cipher *p)
{
	if (::soap_read_tt__Dot11Cipher(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode_DEFINED
#define SOAP_TYPE_tt__Dot11SecurityMode_DEFINED

inline void soap_default_tt__Dot11SecurityMode(struct soap *soap, enum tt__Dot11SecurityMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__Dot11SecurityMode
	*a = SOAP_DEFAULT_tt__Dot11SecurityMode;
#else
	*a = (enum tt__Dot11SecurityMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityMode(struct soap*, const char*, int, const enum tt__Dot11SecurityMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SecurityMode2s(struct soap*, enum tt__Dot11SecurityMode);
SOAP_FMAC3 enum tt__Dot11SecurityMode * SOAP_FMAC4 soap_in_tt__Dot11SecurityMode(struct soap*, const char*, enum tt__Dot11SecurityMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SecurityMode(struct soap*, const char*, enum tt__Dot11SecurityMode *);

SOAP_FMAC3 enum tt__Dot11SecurityMode * SOAP_FMAC4 soap_new_tt__Dot11SecurityMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SecurityMode(struct soap*, const enum tt__Dot11SecurityMode *, const char*, const char*);

inline int soap_write_tt__Dot11SecurityMode(struct soap *soap, enum tt__Dot11SecurityMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Dot11SecurityMode(soap, p, "tt:Dot11SecurityMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11SecurityMode(struct soap *soap, const char *URL, enum tt__Dot11SecurityMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11SecurityMode(soap, p, "tt:Dot11SecurityMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11SecurityMode(struct soap *soap, const char *URL, enum tt__Dot11SecurityMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11SecurityMode(soap, p, "tt:Dot11SecurityMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11SecurityMode(struct soap *soap, const char *URL, enum tt__Dot11SecurityMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11SecurityMode(soap, p, "tt:Dot11SecurityMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11SecurityMode * SOAP_FMAC4 soap_get_tt__Dot11SecurityMode(struct soap*, enum tt__Dot11SecurityMode *, const char*, const char*);

inline int soap_read_tt__Dot11SecurityMode(struct soap *soap, enum tt__Dot11SecurityMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Dot11SecurityMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11SecurityMode(struct soap *soap, const char *URL, enum tt__Dot11SecurityMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11SecurityMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11SecurityMode(struct soap *soap, enum tt__Dot11SecurityMode *p)
{
	if (::soap_read_tt__Dot11SecurityMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode_DEFINED
#define SOAP_TYPE_tt__Dot11StationMode_DEFINED

inline void soap_default_tt__Dot11StationMode(struct soap *soap, enum tt__Dot11StationMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__Dot11StationMode
	*a = SOAP_DEFAULT_tt__Dot11StationMode;
#else
	*a = (enum tt__Dot11StationMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11StationMode(struct soap*, const char*, int, const enum tt__Dot11StationMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11StationMode2s(struct soap*, enum tt__Dot11StationMode);
SOAP_FMAC3 enum tt__Dot11StationMode * SOAP_FMAC4 soap_in_tt__Dot11StationMode(struct soap*, const char*, enum tt__Dot11StationMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11StationMode(struct soap*, const char*, enum tt__Dot11StationMode *);

SOAP_FMAC3 enum tt__Dot11StationMode * SOAP_FMAC4 soap_new_tt__Dot11StationMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11StationMode(struct soap*, const enum tt__Dot11StationMode *, const char*, const char*);

inline int soap_write_tt__Dot11StationMode(struct soap *soap, enum tt__Dot11StationMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Dot11StationMode(soap, p, "tt:Dot11StationMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11StationMode(struct soap *soap, const char *URL, enum tt__Dot11StationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11StationMode(soap, p, "tt:Dot11StationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11StationMode(struct soap *soap, const char *URL, enum tt__Dot11StationMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11StationMode(soap, p, "tt:Dot11StationMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11StationMode(struct soap *soap, const char *URL, enum tt__Dot11StationMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11StationMode(soap, p, "tt:Dot11StationMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Dot11StationMode * SOAP_FMAC4 soap_get_tt__Dot11StationMode(struct soap*, enum tt__Dot11StationMode *, const char*, const char*);

inline int soap_read_tt__Dot11StationMode(struct soap *soap, enum tt__Dot11StationMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Dot11StationMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11StationMode(struct soap *soap, const char *URL, enum tt__Dot11StationMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11StationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11StationMode(struct soap *soap, enum tt__Dot11StationMode *p)
{
	if (::soap_read_tt__Dot11StationMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType_DEFINED
#define SOAP_TYPE_tt__DynamicDNSType_DEFINED

inline void soap_default_tt__DynamicDNSType(struct soap *soap, enum tt__DynamicDNSType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__DynamicDNSType
	*a = SOAP_DEFAULT_tt__DynamicDNSType;
#else
	*a = (enum tt__DynamicDNSType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSType(struct soap*, const char*, int, const enum tt__DynamicDNSType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DynamicDNSType2s(struct soap*, enum tt__DynamicDNSType);
SOAP_FMAC3 enum tt__DynamicDNSType * SOAP_FMAC4 soap_in_tt__DynamicDNSType(struct soap*, const char*, enum tt__DynamicDNSType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DynamicDNSType(struct soap*, const char*, enum tt__DynamicDNSType *);

SOAP_FMAC3 enum tt__DynamicDNSType * SOAP_FMAC4 soap_new_tt__DynamicDNSType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DynamicDNSType(struct soap*, const enum tt__DynamicDNSType *, const char*, const char*);

inline int soap_write_tt__DynamicDNSType(struct soap *soap, enum tt__DynamicDNSType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__DynamicDNSType(soap, p, "tt:DynamicDNSType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__DynamicDNSType(struct soap *soap, const char *URL, enum tt__DynamicDNSType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__DynamicDNSType(soap, p, "tt:DynamicDNSType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DynamicDNSType(struct soap *soap, const char *URL, enum tt__DynamicDNSType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__DynamicDNSType(soap, p, "tt:DynamicDNSType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DynamicDNSType(struct soap *soap, const char *URL, enum tt__DynamicDNSType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__DynamicDNSType(soap, p, "tt:DynamicDNSType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__DynamicDNSType * SOAP_FMAC4 soap_get_tt__DynamicDNSType(struct soap*, enum tt__DynamicDNSType *, const char*, const char*);

inline int soap_read_tt__DynamicDNSType(struct soap *soap, enum tt__DynamicDNSType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__DynamicDNSType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DynamicDNSType(struct soap *soap, const char *URL, enum tt__DynamicDNSType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DynamicDNSType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DynamicDNSType(struct soap *soap, enum tt__DynamicDNSType *p)
{
	if (::soap_read_tt__DynamicDNSType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType_DEFINED
#define SOAP_TYPE_tt__IPAddressFilterType_DEFINED

inline void soap_default_tt__IPAddressFilterType(struct soap *soap, enum tt__IPAddressFilterType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__IPAddressFilterType
	*a = SOAP_DEFAULT_tt__IPAddressFilterType;
#else
	*a = (enum tt__IPAddressFilterType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterType(struct soap*, const char*, int, const enum tt__IPAddressFilterType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPAddressFilterType2s(struct soap*, enum tt__IPAddressFilterType);
SOAP_FMAC3 enum tt__IPAddressFilterType * SOAP_FMAC4 soap_in_tt__IPAddressFilterType(struct soap*, const char*, enum tt__IPAddressFilterType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPAddressFilterType(struct soap*, const char*, enum tt__IPAddressFilterType *);

SOAP_FMAC3 enum tt__IPAddressFilterType * SOAP_FMAC4 soap_new_tt__IPAddressFilterType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPAddressFilterType(struct soap*, const enum tt__IPAddressFilterType *, const char*, const char*);

inline int soap_write_tt__IPAddressFilterType(struct soap *soap, enum tt__IPAddressFilterType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IPAddressFilterType(soap, p, "tt:IPAddressFilterType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IPAddressFilterType(struct soap *soap, const char *URL, enum tt__IPAddressFilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPAddressFilterType(soap, p, "tt:IPAddressFilterType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPAddressFilterType(struct soap *soap, const char *URL, enum tt__IPAddressFilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPAddressFilterType(soap, p, "tt:IPAddressFilterType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPAddressFilterType(struct soap *soap, const char *URL, enum tt__IPAddressFilterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPAddressFilterType(soap, p, "tt:IPAddressFilterType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IPAddressFilterType * SOAP_FMAC4 soap_get_tt__IPAddressFilterType(struct soap*, enum tt__IPAddressFilterType *, const char*, const char*);

inline int soap_read_tt__IPAddressFilterType(struct soap *soap, enum tt__IPAddressFilterType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IPAddressFilterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPAddressFilterType(struct soap *soap, const char *URL, enum tt__IPAddressFilterType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPAddressFilterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPAddressFilterType(struct soap *soap, enum tt__IPAddressFilterType *p)
{
	if (::soap_read_tt__IPAddressFilterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPType_DEFINED
#define SOAP_TYPE_tt__IPType_DEFINED

inline void soap_default_tt__IPType(struct soap *soap, enum tt__IPType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__IPType
	*a = SOAP_DEFAULT_tt__IPType;
#else
	*a = (enum tt__IPType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPType(struct soap*, const char*, int, const enum tt__IPType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPType2s(struct soap*, enum tt__IPType);
SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_in_tt__IPType(struct soap*, const char*, enum tt__IPType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPType(struct soap*, const char*, enum tt__IPType *);

SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_new_tt__IPType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPType(struct soap*, const enum tt__IPType *, const char*, const char*);

inline int soap_write_tt__IPType(struct soap *soap, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPType(soap, p, "tt:IPType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_get_tt__IPType(struct soap*, enum tt__IPType *, const char*, const char*);

inline int soap_read_tt__IPType(struct soap *soap, enum tt__IPType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IPType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPType(struct soap *soap, const char *URL, enum tt__IPType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPType(struct soap *soap, enum tt__IPType *p)
{
	if (::soap_read_tt__IPType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkHostType_DEFINED
#define SOAP_TYPE_tt__NetworkHostType_DEFINED

inline void soap_default_tt__NetworkHostType(struct soap *soap, enum tt__NetworkHostType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__NetworkHostType
	*a = SOAP_DEFAULT_tt__NetworkHostType;
#else
	*a = (enum tt__NetworkHostType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostType(struct soap*, const char*, int, const enum tt__NetworkHostType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkHostType2s(struct soap*, enum tt__NetworkHostType);
SOAP_FMAC3 enum tt__NetworkHostType * SOAP_FMAC4 soap_in_tt__NetworkHostType(struct soap*, const char*, enum tt__NetworkHostType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkHostType(struct soap*, const char*, enum tt__NetworkHostType *);

SOAP_FMAC3 enum tt__NetworkHostType * SOAP_FMAC4 soap_new_tt__NetworkHostType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkHostType(struct soap*, const enum tt__NetworkHostType *, const char*, const char*);

inline int soap_write_tt__NetworkHostType(struct soap *soap, enum tt__NetworkHostType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__NetworkHostType(soap, p, "tt:NetworkHostType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkHostType(struct soap *soap, const char *URL, enum tt__NetworkHostType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__NetworkHostType(soap, p, "tt:NetworkHostType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkHostType(struct soap *soap, const char *URL, enum tt__NetworkHostType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__NetworkHostType(soap, p, "tt:NetworkHostType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkHostType(struct soap *soap, const char *URL, enum tt__NetworkHostType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__NetworkHostType(soap, p, "tt:NetworkHostType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__NetworkHostType * SOAP_FMAC4 soap_get_tt__NetworkHostType(struct soap*, enum tt__NetworkHostType *, const char*, const char*);

inline int soap_read_tt__NetworkHostType(struct soap *soap, enum tt__NetworkHostType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__NetworkHostType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkHostType(struct soap *soap, const char *URL, enum tt__NetworkHostType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkHostType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkHostType(struct soap *soap, enum tt__NetworkHostType *p)
{
	if (::soap_read_tt__NetworkHostType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType_DEFINED
#define SOAP_TYPE_tt__NetworkProtocolType_DEFINED

inline void soap_default_tt__NetworkProtocolType(struct soap *soap, enum tt__NetworkProtocolType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__NetworkProtocolType
	*a = SOAP_DEFAULT_tt__NetworkProtocolType;
#else
	*a = (enum tt__NetworkProtocolType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolType(struct soap*, const char*, int, const enum tt__NetworkProtocolType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkProtocolType2s(struct soap*, enum tt__NetworkProtocolType);
SOAP_FMAC3 enum tt__NetworkProtocolType * SOAP_FMAC4 soap_in_tt__NetworkProtocolType(struct soap*, const char*, enum tt__NetworkProtocolType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkProtocolType(struct soap*, const char*, enum tt__NetworkProtocolType *);

SOAP_FMAC3 enum tt__NetworkProtocolType * SOAP_FMAC4 soap_new_tt__NetworkProtocolType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkProtocolType(struct soap*, const enum tt__NetworkProtocolType *, const char*, const char*);

inline int soap_write_tt__NetworkProtocolType(struct soap *soap, enum tt__NetworkProtocolType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__NetworkProtocolType(soap, p, "tt:NetworkProtocolType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkProtocolType(struct soap *soap, const char *URL, enum tt__NetworkProtocolType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__NetworkProtocolType(soap, p, "tt:NetworkProtocolType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkProtocolType(struct soap *soap, const char *URL, enum tt__NetworkProtocolType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__NetworkProtocolType(soap, p, "tt:NetworkProtocolType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkProtocolType(struct soap *soap, const char *URL, enum tt__NetworkProtocolType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__NetworkProtocolType(soap, p, "tt:NetworkProtocolType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__NetworkProtocolType * SOAP_FMAC4 soap_get_tt__NetworkProtocolType(struct soap*, enum tt__NetworkProtocolType *, const char*, const char*);

inline int soap_read_tt__NetworkProtocolType(struct soap *soap, enum tt__NetworkProtocolType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__NetworkProtocolType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkProtocolType(struct soap *soap, const char *URL, enum tt__NetworkProtocolType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkProtocolType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkProtocolType(struct soap *soap, enum tt__NetworkProtocolType *p)
{
	if (::soap_read_tt__NetworkProtocolType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration_DEFINED
#define SOAP_TYPE_tt__IPv6DHCPConfiguration_DEFINED

inline void soap_default_tt__IPv6DHCPConfiguration(struct soap *soap, enum tt__IPv6DHCPConfiguration *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__IPv6DHCPConfiguration
	*a = SOAP_DEFAULT_tt__IPv6DHCPConfiguration;
#else
	*a = (enum tt__IPv6DHCPConfiguration)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6DHCPConfiguration(struct soap*, const char*, int, const enum tt__IPv6DHCPConfiguration *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPv6DHCPConfiguration2s(struct soap*, enum tt__IPv6DHCPConfiguration);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_in_tt__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration *);

SOAP_FMAC3 enum tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_new_tt__IPv6DHCPConfiguration(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPv6DHCPConfiguration(struct soap*, const enum tt__IPv6DHCPConfiguration *, const char*, const char*);

inline int soap_write_tt__IPv6DHCPConfiguration(struct soap *soap, enum tt__IPv6DHCPConfiguration const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IPv6DHCPConfiguration(soap, p, "tt:IPv6DHCPConfiguration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv6DHCPConfiguration(struct soap *soap, const char *URL, enum tt__IPv6DHCPConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPv6DHCPConfiguration(soap, p, "tt:IPv6DHCPConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv6DHCPConfiguration(struct soap *soap, const char *URL, enum tt__IPv6DHCPConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPv6DHCPConfiguration(soap, p, "tt:IPv6DHCPConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv6DHCPConfiguration(struct soap *soap, const char *URL, enum tt__IPv6DHCPConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IPv6DHCPConfiguration(soap, p, "tt:IPv6DHCPConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_get_tt__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *, const char*, const char*);

inline int soap_read_tt__IPv6DHCPConfiguration(struct soap *soap, enum tt__IPv6DHCPConfiguration *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IPv6DHCPConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv6DHCPConfiguration(struct soap *soap, const char *URL, enum tt__IPv6DHCPConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv6DHCPConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv6DHCPConfiguration(struct soap *soap, enum tt__IPv6DHCPConfiguration *p)
{
	if (::soap_read_tt__IPv6DHCPConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Duplex_DEFINED
#define SOAP_TYPE_tt__Duplex_DEFINED

inline void soap_default_tt__Duplex(struct soap *soap, enum tt__Duplex *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__Duplex
	*a = SOAP_DEFAULT_tt__Duplex;
#else
	*a = (enum tt__Duplex)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Duplex(struct soap*, const char*, int, const enum tt__Duplex *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Duplex2s(struct soap*, enum tt__Duplex);
SOAP_FMAC3 enum tt__Duplex * SOAP_FMAC4 soap_in_tt__Duplex(struct soap*, const char*, enum tt__Duplex *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Duplex(struct soap*, const char*, enum tt__Duplex *);

SOAP_FMAC3 enum tt__Duplex * SOAP_FMAC4 soap_new_tt__Duplex(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Duplex(struct soap*, const enum tt__Duplex *, const char*, const char*);

inline int soap_write_tt__Duplex(struct soap *soap, enum tt__Duplex const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Duplex(soap, p, "tt:Duplex", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Duplex(struct soap *soap, const char *URL, enum tt__Duplex const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Duplex(soap, p, "tt:Duplex", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Duplex(struct soap *soap, const char *URL, enum tt__Duplex const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Duplex(soap, p, "tt:Duplex", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Duplex(struct soap *soap, const char *URL, enum tt__Duplex const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Duplex(soap, p, "tt:Duplex", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__Duplex * SOAP_FMAC4 soap_get_tt__Duplex(struct soap*, enum tt__Duplex *, const char*, const char*);

inline int soap_read_tt__Duplex(struct soap *soap, enum tt__Duplex *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Duplex(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Duplex(struct soap *soap, const char *URL, enum tt__Duplex *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Duplex(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Duplex(struct soap *soap, enum tt__Duplex *p)
{
	if (::soap_read_tt__Duplex(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode_DEFINED
#define SOAP_TYPE_tt__DiscoveryMode_DEFINED

inline void soap_default_tt__DiscoveryMode(struct soap *soap, enum tt__DiscoveryMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__DiscoveryMode
	*a = SOAP_DEFAULT_tt__DiscoveryMode;
#else
	*a = (enum tt__DiscoveryMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DiscoveryMode(struct soap*, const char*, int, const enum tt__DiscoveryMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DiscoveryMode2s(struct soap*, enum tt__DiscoveryMode);
SOAP_FMAC3 enum tt__DiscoveryMode * SOAP_FMAC4 soap_in_tt__DiscoveryMode(struct soap*, const char*, enum tt__DiscoveryMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DiscoveryMode(struct soap*, const char*, enum tt__DiscoveryMode *);

SOAP_FMAC3 enum tt__DiscoveryMode * SOAP_FMAC4 soap_new_tt__DiscoveryMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DiscoveryMode(struct soap*, const enum tt__DiscoveryMode *, const char*, const char*);

inline int soap_write_tt__DiscoveryMode(struct soap *soap, enum tt__DiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__DiscoveryMode(soap, p, "tt:DiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__DiscoveryMode(struct soap *soap, const char *URL, enum tt__DiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__DiscoveryMode(soap, p, "tt:DiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DiscoveryMode(struct soap *soap, const char *URL, enum tt__DiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__DiscoveryMode(soap, p, "tt:DiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DiscoveryMode(struct soap *soap, const char *URL, enum tt__DiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__DiscoveryMode(soap, p, "tt:DiscoveryMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__DiscoveryMode * SOAP_FMAC4 soap_get_tt__DiscoveryMode(struct soap*, enum tt__DiscoveryMode *, const char*, const char*);

inline int soap_read_tt__DiscoveryMode(struct soap *soap, enum tt__DiscoveryMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__DiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DiscoveryMode(struct soap *soap, const char *URL, enum tt__DiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DiscoveryMode(struct soap *soap, enum tt__DiscoveryMode *p)
{
	if (::soap_read_tt__DiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition_DEFINED
#define SOAP_TYPE_tt__ScopeDefinition_DEFINED

inline void soap_default_tt__ScopeDefinition(struct soap *soap, enum tt__ScopeDefinition *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__ScopeDefinition
	*a = SOAP_DEFAULT_tt__ScopeDefinition;
#else
	*a = (enum tt__ScopeDefinition)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ScopeDefinition(struct soap*, const char*, int, const enum tt__ScopeDefinition *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ScopeDefinition2s(struct soap*, enum tt__ScopeDefinition);
SOAP_FMAC3 enum tt__ScopeDefinition * SOAP_FMAC4 soap_in_tt__ScopeDefinition(struct soap*, const char*, enum tt__ScopeDefinition *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ScopeDefinition(struct soap*, const char*, enum tt__ScopeDefinition *);

SOAP_FMAC3 enum tt__ScopeDefinition * SOAP_FMAC4 soap_new_tt__ScopeDefinition(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ScopeDefinition(struct soap*, const enum tt__ScopeDefinition *, const char*, const char*);

inline int soap_write_tt__ScopeDefinition(struct soap *soap, enum tt__ScopeDefinition const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ScopeDefinition(soap, p, "tt:ScopeDefinition", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ScopeDefinition(struct soap *soap, const char *URL, enum tt__ScopeDefinition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ScopeDefinition(soap, p, "tt:ScopeDefinition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ScopeDefinition(struct soap *soap, const char *URL, enum tt__ScopeDefinition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ScopeDefinition(soap, p, "tt:ScopeDefinition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ScopeDefinition(struct soap *soap, const char *URL, enum tt__ScopeDefinition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ScopeDefinition(soap, p, "tt:ScopeDefinition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ScopeDefinition * SOAP_FMAC4 soap_get_tt__ScopeDefinition(struct soap*, enum tt__ScopeDefinition *, const char*, const char*);

inline int soap_read_tt__ScopeDefinition(struct soap *soap, enum tt__ScopeDefinition *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ScopeDefinition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ScopeDefinition(struct soap *soap, const char *URL, enum tt__ScopeDefinition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ScopeDefinition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ScopeDefinition(struct soap *soap, enum tt__ScopeDefinition *p)
{
	if (::soap_read_tt__ScopeDefinition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension_DEFINED
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemUrisResponse_Extension(struct soap*, const char*, int, const _tds__GetSystemUrisResponse_Extension *, const char*);
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC4 soap_in__tds__GetSystemUrisResponse_Extension(struct soap*, const char*, _tds__GetSystemUrisResponse_Extension *, const char*);
SOAP_FMAC1 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse_Extension(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemUrisResponse_Extension * soap_new__tds__GetSystemUrisResponse_Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemUrisResponse_Extension(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemUrisResponse_Extension * soap_new_req__tds__GetSystemUrisResponse_Extension(
	struct soap *soap)
{
	_tds__GetSystemUrisResponse_Extension *_p = ::soap_new__tds__GetSystemUrisResponse_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemUrisResponse_Extension * soap_new_set__tds__GetSystemUrisResponse_Extension(
	struct soap *soap)
{
	_tds__GetSystemUrisResponse_Extension *_p = ::soap_new__tds__GetSystemUrisResponse_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemUrisResponse_Extension(struct soap *soap, _tds__GetSystemUrisResponse_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse-Extension", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse_Extension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemUrisResponse_Extension(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse-Extension", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse_Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemUrisResponse_Extension(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse-Extension", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse_Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemUrisResponse_Extension(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse-Extension", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse_Extension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension * SOAP_FMAC4 soap_get__tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension *, const char*, const char*);

inline int soap_read__tds__GetSystemUrisResponse_Extension(struct soap *soap, _tds__GetSystemUrisResponse_Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemUrisResponse_Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemUrisResponse_Extension(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse_Extension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemUrisResponse_Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemUrisResponse_Extension(struct soap *soap, _tds__GetSystemUrisResponse_Extension *p)
{
	if (::soap_read__tds__GetSystemUrisResponse_Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension_DEFINED
#define SOAP_TYPE__tds__StorageConfigurationData_Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StorageConfigurationData_Extension(struct soap*, const char*, int, const _tds__StorageConfigurationData_Extension *, const char*);
SOAP_FMAC3 _tds__StorageConfigurationData_Extension * SOAP_FMAC4 soap_in__tds__StorageConfigurationData_Extension(struct soap*, const char*, _tds__StorageConfigurationData_Extension *, const char*);
SOAP_FMAC1 _tds__StorageConfigurationData_Extension * SOAP_FMAC2 soap_instantiate__tds__StorageConfigurationData_Extension(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StorageConfigurationData_Extension * soap_new__tds__StorageConfigurationData_Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StorageConfigurationData_Extension(soap, n, NULL, NULL, NULL);
}

inline _tds__StorageConfigurationData_Extension * soap_new_req__tds__StorageConfigurationData_Extension(
	struct soap *soap)
{
	_tds__StorageConfigurationData_Extension *_p = ::soap_new__tds__StorageConfigurationData_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__StorageConfigurationData_Extension * soap_new_set__tds__StorageConfigurationData_Extension(
	struct soap *soap)
{
	_tds__StorageConfigurationData_Extension *_p = ::soap_new__tds__StorageConfigurationData_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__StorageConfigurationData_Extension(struct soap *soap, _tds__StorageConfigurationData_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData-Extension", p->soap_type() == SOAP_TYPE__tds__StorageConfigurationData_Extension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__StorageConfigurationData_Extension(struct soap *soap, const char *URL, _tds__StorageConfigurationData_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData-Extension", p->soap_type() == SOAP_TYPE__tds__StorageConfigurationData_Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__StorageConfigurationData_Extension(struct soap *soap, const char *URL, _tds__StorageConfigurationData_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData-Extension", p->soap_type() == SOAP_TYPE__tds__StorageConfigurationData_Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__StorageConfigurationData_Extension(struct soap *soap, const char *URL, _tds__StorageConfigurationData_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData-Extension", p->soap_type() == SOAP_TYPE__tds__StorageConfigurationData_Extension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StorageConfigurationData_Extension * SOAP_FMAC4 soap_get__tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension *, const char*, const char*);

inline int soap_read__tds__StorageConfigurationData_Extension(struct soap *soap, _tds__StorageConfigurationData_Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__StorageConfigurationData_Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__StorageConfigurationData_Extension(struct soap *soap, const char *URL, _tds__StorageConfigurationData_Extension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__StorageConfigurationData_Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__StorageConfigurationData_Extension(struct soap *soap, _tds__StorageConfigurationData_Extension *p)
{
	if (::soap_read__tds__StorageConfigurationData_Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__UserCredential_Extension_DEFINED
#define SOAP_TYPE__tds__UserCredential_Extension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__UserCredential_Extension(struct soap*, const char*, int, const _tds__UserCredential_Extension *, const char*);
SOAP_FMAC3 _tds__UserCredential_Extension * SOAP_FMAC4 soap_in__tds__UserCredential_Extension(struct soap*, const char*, _tds__UserCredential_Extension *, const char*);
SOAP_FMAC1 _tds__UserCredential_Extension * SOAP_FMAC2 soap_instantiate__tds__UserCredential_Extension(struct soap*, int, const char*, const char*, size_t*);

inline _tds__UserCredential_Extension * soap_new__tds__UserCredential_Extension(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__UserCredential_Extension(soap, n, NULL, NULL, NULL);
}

inline _tds__UserCredential_Extension * soap_new_req__tds__UserCredential_Extension(
	struct soap *soap)
{
	_tds__UserCredential_Extension *_p = ::soap_new__tds__UserCredential_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__UserCredential_Extension * soap_new_set__tds__UserCredential_Extension(
	struct soap *soap)
{
	_tds__UserCredential_Extension *_p = ::soap_new__tds__UserCredential_Extension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__UserCredential_Extension(struct soap *soap, _tds__UserCredential_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential-Extension", p->soap_type() == SOAP_TYPE__tds__UserCredential_Extension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__UserCredential_Extension(struct soap *soap, const char *URL, _tds__UserCredential_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential-Extension", p->soap_type() == SOAP_TYPE__tds__UserCredential_Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__UserCredential_Extension(struct soap *soap, const char *URL, _tds__UserCredential_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential-Extension", p->soap_type() == SOAP_TYPE__tds__UserCredential_Extension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__UserCredential_Extension(struct soap *soap, const char *URL, _tds__UserCredential_Extension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential-Extension", p->soap_type() == SOAP_TYPE__tds__UserCredential_Extension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__UserCredential_Extension * SOAP_FMAC4 soap_get__tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension *, const char*, const char*);

inline int soap_read__tds__UserCredential_Extension(struct soap *soap, _tds__UserCredential_Extension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__UserCredential_Extension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__UserCredential_Extension(struct soap *soap, const char *URL, _tds__UserCredential_Extension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__UserCredential_Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__UserCredential_Extension(struct soap *soap, _tds__UserCredential_Extension *p)
{
	if (::soap_read__tds__UserCredential_Extension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__Service_Capabilities_DEFINED
#define SOAP_TYPE__tds__Service_Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__Service_Capabilities(struct soap*, const char*, int, const _tds__Service_Capabilities *, const char*);
SOAP_FMAC3 _tds__Service_Capabilities * SOAP_FMAC4 soap_in__tds__Service_Capabilities(struct soap*, const char*, _tds__Service_Capabilities *, const char*);
SOAP_FMAC1 _tds__Service_Capabilities * SOAP_FMAC2 soap_instantiate__tds__Service_Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__Service_Capabilities * soap_new__tds__Service_Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__Service_Capabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__Service_Capabilities * soap_new_req__tds__Service_Capabilities(
	struct soap *soap)
{
	_tds__Service_Capabilities *_p = ::soap_new__tds__Service_Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__Service_Capabilities * soap_new_set__tds__Service_Capabilities(
	struct soap *soap)
{
	_tds__Service_Capabilities *_p = ::soap_new__tds__Service_Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__Service_Capabilities(struct soap *soap, _tds__Service_Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service-Capabilities", p->soap_type() == SOAP_TYPE__tds__Service_Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__Service_Capabilities(struct soap *soap, const char *URL, _tds__Service_Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service-Capabilities", p->soap_type() == SOAP_TYPE__tds__Service_Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__Service_Capabilities(struct soap *soap, const char *URL, _tds__Service_Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service-Capabilities", p->soap_type() == SOAP_TYPE__tds__Service_Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__Service_Capabilities(struct soap *soap, const char *URL, _tds__Service_Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service-Capabilities", p->soap_type() == SOAP_TYPE__tds__Service_Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__Service_Capabilities * SOAP_FMAC4 soap_get__tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities *, const char*, const char*);

inline int soap_read__tds__Service_Capabilities(struct soap *soap, _tds__Service_Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__Service_Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__Service_Capabilities(struct soap *soap, const char *URL, _tds__Service_Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__Service_Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__Service_Capabilities(struct soap *soap, _tds__Service_Capabilities *p)
{
	if (::soap_read__tds__Service_Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken_DEFINED
#define SOAP_TYPE_tt__ReferenceToken_DEFINED

inline void soap_default_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceToken(struct soap*, const std::string *);

#define soap_tt__ReferenceToken2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__ReferenceToken(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceToken(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__ReferenceToken soap_instantiate_std__string


#define soap_new_tt__ReferenceToken soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceToken(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__ReferenceToken(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceToken(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ReferenceToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReferenceToken(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData_DEFINED
#define SOAP_TYPE_tt__AuxiliaryData_DEFINED

inline void soap_default_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AuxiliaryData(struct soap*, const std::string *);

#define soap_tt__AuxiliaryData2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__AuxiliaryData(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 128, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AuxiliaryData(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__AuxiliaryData soap_instantiate_std__string


#define soap_new_tt__AuxiliaryData soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AuxiliaryData(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__AuxiliaryData(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AuxiliaryData(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__AuxiliaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase_DEFINED
#define SOAP_TYPE_tt__Dot11PSKPassphrase_DEFINED

inline void soap_default_tt__Dot11PSKPassphrase(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Dot11PSKPassphrase(struct soap*, const std::string *);

#define soap_tt__Dot11PSKPassphrase2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKPassphrase(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Dot11PSKPassphrase(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[ -~]{8,63}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Dot11PSKPassphrase(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Dot11PSKPassphrase soap_instantiate_std__string


#define soap_new_tt__Dot11PSKPassphrase soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11PSKPassphrase(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Dot11PSKPassphrase(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Dot11PSKPassphrase(soap, p, "tt:Dot11PSKPassphrase", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11PSKPassphrase(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11PSKPassphrase(soap, p, "tt:Dot11PSKPassphrase", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11PSKPassphrase(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11PSKPassphrase(soap, p, "tt:Dot11PSKPassphrase", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11PSKPassphrase(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Dot11PSKPassphrase(soap, p, "tt:Dot11PSKPassphrase", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Dot11PSKPassphrase(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Dot11PSKPassphrase(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Dot11PSKPassphrase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11PSKPassphrase(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11PSKPassphrase(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11PSKPassphrase(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__Dot11PSKPassphrase(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK_DEFINED
#define SOAP_TYPE_tt__Dot11PSK_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11PSK(struct soap*, xsd__hexBinary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Dot11PSK(struct soap*, const xsd__hexBinary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSK(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11PSK2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_tt__Dot11PSK(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11PSK(struct soap*, const char*, xsd__hexBinary *);

#define soap_instantiate_tt__Dot11PSK soap_instantiate_xsd__hexBinary


#define soap_new_tt__Dot11PSK soap_new_xsd__hexBinary


#define soap_new_req_tt__Dot11PSK soap_new_req_xsd__hexBinary


#define soap_new_set_tt__Dot11PSK soap_new_set_xsd__hexBinary

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11PSK(struct soap*, const xsd__hexBinary *, const char*, const char*);

inline int soap_write_tt__Dot11PSK(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_tt__Dot11PSK(soap, p), 0) || ::soap_put_tt__Dot11PSK(soap, p, "tt:Dot11PSK", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11PSK(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_tt__Dot11PSK(soap, p), 0) || ::soap_put_tt__Dot11PSK(soap, p, "tt:Dot11PSK", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11PSK(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_tt__Dot11PSK(soap, p), 0) || ::soap_put_tt__Dot11PSK(soap, p, "tt:Dot11PSK", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11PSK(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_tt__Dot11PSK(soap, p), 0) || ::soap_put_tt__Dot11PSK(soap, p, "tt:Dot11PSK", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_tt__Dot11PSK(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_tt__Dot11PSK(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	::soap_default_tt__Dot11PSK(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11PSK(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11PSK(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11PSK(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11PSK(struct soap *soap, xsd__hexBinary *p)
{
	if (::soap_read_tt__Dot11PSK(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType_DEFINED
#define SOAP_TYPE_tt__Dot11SSIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11SSIDType(struct soap*, xsd__hexBinary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Dot11SSIDType(struct soap*, const xsd__hexBinary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SSIDType(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SSIDType2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_tt__Dot11SSIDType(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SSIDType(struct soap*, const char*, xsd__hexBinary *);

#define soap_instantiate_tt__Dot11SSIDType soap_instantiate_xsd__hexBinary


#define soap_new_tt__Dot11SSIDType soap_new_xsd__hexBinary


#define soap_new_req_tt__Dot11SSIDType soap_new_req_xsd__hexBinary


#define soap_new_set_tt__Dot11SSIDType soap_new_set_xsd__hexBinary

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SSIDType(struct soap*, const xsd__hexBinary *, const char*, const char*);

inline int soap_write_tt__Dot11SSIDType(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_tt__Dot11SSIDType(soap, p), 0) || ::soap_put_tt__Dot11SSIDType(soap, p, "tt:Dot11SSIDType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11SSIDType(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_tt__Dot11SSIDType(soap, p), 0) || ::soap_put_tt__Dot11SSIDType(soap, p, "tt:Dot11SSIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11SSIDType(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_tt__Dot11SSIDType(soap, p), 0) || ::soap_put_tt__Dot11SSIDType(soap, p, "tt:Dot11SSIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11SSIDType(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_tt__Dot11SSIDType(soap, p), 0) || ::soap_put_tt__Dot11SSIDType(soap, p, "tt:Dot11SSIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_tt__Dot11SSIDType(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_tt__Dot11SSIDType(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	::soap_default_tt__Dot11SSIDType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11SSIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11SSIDType(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11SSIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11SSIDType(struct soap *soap, xsd__hexBinary *p)
{
	if (::soap_read_tt__Dot11SSIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* tt__DNSName is a typedef synonym of xsd__token */

#ifndef SOAP_TYPE_tt__DNSName_DEFINED
#define SOAP_TYPE_tt__DNSName_DEFINED

#define soap_default_tt__DNSName soap_default_xsd__token


#define soap_serialize_tt__DNSName soap_serialize_xsd__token


#define soap_tt__DNSName2s(soap, a) ((a).c_str())

#define soap_out_tt__DNSName soap_out_xsd__token


#define soap_s2tt__DNSName(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)

#define soap_in_tt__DNSName soap_in_xsd__token


#define soap_instantiate_tt__DNSName soap_instantiate_xsd__token


#define soap_new_tt__DNSName soap_new_xsd__token


#define soap_put_tt__DNSName soap_put_xsd__token


#define soap_write_tt__DNSName soap_write_xsd__token


#define soap_PUT_tt__DNSName soap_PUT_xsd__token


#define soap_PATCH_tt__DNSName soap_PATCH_xsd__token


#define soap_POST_send_tt__DNSName soap_POST_send_xsd__token


#define soap_get_tt__DNSName soap_get_xsd__token


#define soap_read_tt__DNSName soap_read_xsd__token


#define soap_GET_tt__DNSName soap_GET_xsd__token


#define soap_POST_recv_tt__DNSName soap_POST_recv_xsd__token

#endif
/* tt__HwAddress is a typedef synonym of xsd__token */

#ifndef SOAP_TYPE_tt__HwAddress_DEFINED
#define SOAP_TYPE_tt__HwAddress_DEFINED

#define soap_default_tt__HwAddress soap_default_xsd__token


#define soap_serialize_tt__HwAddress soap_serialize_xsd__token


#define soap_tt__HwAddress2s(soap, a) ((a).c_str())

#define soap_out_tt__HwAddress soap_out_xsd__token


#define soap_s2tt__HwAddress(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)

#define soap_in_tt__HwAddress soap_in_xsd__token


#define soap_instantiate_tt__HwAddress soap_instantiate_xsd__token


#define soap_new_tt__HwAddress soap_new_xsd__token


#define soap_put_tt__HwAddress soap_put_xsd__token


#define soap_write_tt__HwAddress soap_write_xsd__token


#define soap_PUT_tt__HwAddress soap_PUT_xsd__token


#define soap_PATCH_tt__HwAddress soap_PATCH_xsd__token


#define soap_POST_send_tt__HwAddress soap_POST_send_xsd__token


#define soap_get_tt__HwAddress soap_get_xsd__token


#define soap_read_tt__HwAddress soap_read_xsd__token


#define soap_GET_tt__HwAddress soap_GET_xsd__token


#define soap_POST_recv_tt__HwAddress soap_POST_recv_xsd__token

#endif
/* tt__IPv6Address is a typedef synonym of xsd__token */

#ifndef SOAP_TYPE_tt__IPv6Address_DEFINED
#define SOAP_TYPE_tt__IPv6Address_DEFINED

#define soap_default_tt__IPv6Address soap_default_xsd__token


#define soap_serialize_tt__IPv6Address soap_serialize_xsd__token


#define soap_tt__IPv6Address2s(soap, a) ((a).c_str())

#define soap_out_tt__IPv6Address soap_out_xsd__token


#define soap_s2tt__IPv6Address(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)

#define soap_in_tt__IPv6Address soap_in_xsd__token


#define soap_instantiate_tt__IPv6Address soap_instantiate_xsd__token


#define soap_new_tt__IPv6Address soap_new_xsd__token


#define soap_put_tt__IPv6Address soap_put_xsd__token


#define soap_write_tt__IPv6Address soap_write_xsd__token


#define soap_PUT_tt__IPv6Address soap_PUT_xsd__token


#define soap_PATCH_tt__IPv6Address soap_PATCH_xsd__token


#define soap_POST_send_tt__IPv6Address soap_POST_send_xsd__token


#define soap_get_tt__IPv6Address soap_get_xsd__token


#define soap_read_tt__IPv6Address soap_read_xsd__token


#define soap_GET_tt__IPv6Address soap_GET_xsd__token


#define soap_POST_recv_tt__IPv6Address soap_POST_recv_xsd__token

#endif
/* tt__IPv4Address is a typedef synonym of xsd__token */

#ifndef SOAP_TYPE_tt__IPv4Address_DEFINED
#define SOAP_TYPE_tt__IPv4Address_DEFINED

#define soap_default_tt__IPv4Address soap_default_xsd__token


#define soap_serialize_tt__IPv4Address soap_serialize_xsd__token


#define soap_tt__IPv4Address2s(soap, a) ((a).c_str())

#define soap_out_tt__IPv4Address soap_out_xsd__token


#define soap_s2tt__IPv4Address(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)

#define soap_in_tt__IPv4Address soap_in_xsd__token


#define soap_instantiate_tt__IPv4Address soap_instantiate_xsd__token


#define soap_new_tt__IPv4Address soap_new_xsd__token


#define soap_put_tt__IPv4Address soap_put_xsd__token


#define soap_write_tt__IPv4Address soap_write_xsd__token


#define soap_PUT_tt__IPv4Address soap_PUT_xsd__token


#define soap_PATCH_tt__IPv4Address soap_PATCH_xsd__token


#define soap_POST_send_tt__IPv4Address soap_POST_send_xsd__token


#define soap_get_tt__IPv4Address soap_get_xsd__token


#define soap_read_tt__IPv4Address soap_read_xsd__token


#define soap_GET_tt__IPv4Address soap_GET_xsd__token


#define soap_POST_recv_tt__IPv4Address soap_POST_recv_xsd__token

#endif
/* tt__NetworkInterfaceConfigPriority is a typedef synonym of xsd__integer */

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority_DEFINED

#define soap_default_tt__NetworkInterfaceConfigPriority soap_default_xsd__integer


#define soap_serialize_tt__NetworkInterfaceConfigPriority soap_serialize_xsd__integer


#define soap_tt__NetworkInterfaceConfigPriority2s(soap, a) ((a).c_str())

#define soap_out_tt__NetworkInterfaceConfigPriority soap_out_xsd__integer


#define soap_s2tt__NetworkInterfaceConfigPriority(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")

#define soap_in_tt__NetworkInterfaceConfigPriority soap_in_xsd__integer


#define soap_instantiate_tt__NetworkInterfaceConfigPriority soap_instantiate_xsd__integer


#define soap_new_tt__NetworkInterfaceConfigPriority soap_new_xsd__integer


#define soap_put_tt__NetworkInterfaceConfigPriority soap_put_xsd__integer


#define soap_write_tt__NetworkInterfaceConfigPriority soap_write_xsd__integer


#define soap_PUT_tt__NetworkInterfaceConfigPriority soap_PUT_xsd__integer


#define soap_PATCH_tt__NetworkInterfaceConfigPriority soap_PATCH_xsd__integer


#define soap_POST_send_tt__NetworkInterfaceConfigPriority soap_POST_send_xsd__integer


#define soap_get_tt__NetworkInterfaceConfigPriority soap_get_xsd__integer


#define soap_read_tt__NetworkInterfaceConfigPriority soap_read_xsd__integer


#define soap_GET_tt__NetworkInterfaceConfigPriority soap_GET_xsd__integer


#define soap_POST_recv_tt__NetworkInterfaceConfigPriority soap_POST_recv_xsd__integer

#endif

#ifndef SOAP_TYPE_tt__Name_DEFINED
#define SOAP_TYPE_tt__Name_DEFINED

inline void soap_default_tt__Name(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Name(struct soap*, const std::string *);

#define soap_tt__Name2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Name(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Name(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Name soap_instantiate_std__string


#define soap_new_tt__Name soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Name(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Name(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Name(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Name(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Name(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Name(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Name(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__StringList_DEFINED
#define SOAP_TYPE_tt__StringList_DEFINED

inline void soap_default_tt__StringList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringList(struct soap*, const std::string *);

#define soap_tt__StringList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__StringList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__StringList soap_instantiate_std__string


#define soap_new_tt__StringList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__StringList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__StringList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringList(soap, p, "tt:StringList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__StringList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__StringList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__StringList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__StringList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__StringList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__StringList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__StringAttrList_DEFINED
#define SOAP_TYPE_tt__StringAttrList_DEFINED

inline void soap_default_tt__StringAttrList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringAttrList(struct soap*, const std::string *);

#define soap_tt__StringAttrList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__StringAttrList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__StringAttrList soap_instantiate_std__string


#define soap_new_tt__StringAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__StringAttrList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__StringAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__StringAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__StringAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__StringAttrList(soap, p, "tt:StringAttrList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__StringAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__StringAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__StringAttrList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__StringAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__StringAttrList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__StringAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntList_DEFINED
#define SOAP_TYPE_tt__IntList_DEFINED

inline void soap_default_tt__IntList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IntList(struct soap*, const std::string *);

#define soap_tt__IntList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__IntList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IntList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__IntList soap_instantiate_std__string


#define soap_new_tt__IntList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IntList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__IntList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IntList(soap, p, "tt:IntList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IntList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntList(soap, p, "tt:IntList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntList(soap, p, "tt:IntList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntList(soap, p, "tt:IntList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IntList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__IntList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IntList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__IntList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__LocationEntity_DEFINED
#define SOAP_TYPE_tt__LocationEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LocationEntity(struct soap*, const char*, int, const tt__LocationEntity *, const char*);
SOAP_FMAC3 tt__LocationEntity * SOAP_FMAC4 soap_in_tt__LocationEntity(struct soap*, const char*, tt__LocationEntity *, const char*);
SOAP_FMAC1 tt__LocationEntity * SOAP_FMAC2 soap_instantiate_tt__LocationEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__LocationEntity * soap_new_tt__LocationEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LocationEntity(soap, n, NULL, NULL, NULL);
}

inline tt__LocationEntity * soap_new_req_tt__LocationEntity(
	struct soap *soap)
{
	tt__LocationEntity *_p = ::soap_new_tt__LocationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__LocationEntity * soap_new_set_tt__LocationEntity(
	struct soap *soap,
	tt__GeoLocation *GeoLocation,
	tt__GeoOrientation *GeoOrientation,
	tt__LocalLocation *LocalLocation,
	tt__LocalOrientation *LocalOrientation,
	std::string *Entity,
	std::string *Token,
	bool *Fixed,
	std::string *GeoSource,
	bool *AutoGeo)
{
	tt__LocationEntity *_p = ::soap_new_tt__LocationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LocationEntity::GeoLocation = GeoLocation;
		_p->tt__LocationEntity::GeoOrientation = GeoOrientation;
		_p->tt__LocationEntity::LocalLocation = LocalLocation;
		_p->tt__LocationEntity::LocalOrientation = LocalOrientation;
		_p->tt__LocationEntity::Entity = Entity;
		_p->tt__LocationEntity::Token = Token;
		_p->tt__LocationEntity::Fixed = Fixed;
		_p->tt__LocationEntity::GeoSource = GeoSource;
		_p->tt__LocationEntity::AutoGeo = AutoGeo;
	}
	return _p;
}

inline int soap_write_tt__LocationEntity(struct soap *soap, tt__LocationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocationEntity", p->soap_type() == SOAP_TYPE_tt__LocationEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__LocationEntity(struct soap *soap, const char *URL, tt__LocationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocationEntity", p->soap_type() == SOAP_TYPE_tt__LocationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__LocationEntity(struct soap *soap, const char *URL, tt__LocationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocationEntity", p->soap_type() == SOAP_TYPE_tt__LocationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__LocationEntity(struct soap *soap, const char *URL, tt__LocationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocationEntity", p->soap_type() == SOAP_TYPE_tt__LocationEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__LocationEntity * SOAP_FMAC4 soap_get_tt__LocationEntity(struct soap*, tt__LocationEntity *, const char*, const char*);

inline int soap_read_tt__LocationEntity(struct soap *soap, tt__LocationEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__LocationEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__LocationEntity(struct soap *soap, const char *URL, tt__LocationEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__LocationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__LocationEntity(struct soap *soap, tt__LocationEntity *p)
{
	if (::soap_read_tt__LocationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__LocalOrientation_DEFINED
#define SOAP_TYPE_tt__LocalOrientation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LocalOrientation(struct soap*, const char*, int, const tt__LocalOrientation *, const char*);
SOAP_FMAC3 tt__LocalOrientation * SOAP_FMAC4 soap_in_tt__LocalOrientation(struct soap*, const char*, tt__LocalOrientation *, const char*);
SOAP_FMAC1 tt__LocalOrientation * SOAP_FMAC2 soap_instantiate_tt__LocalOrientation(struct soap*, int, const char*, const char*, size_t*);

inline tt__LocalOrientation * soap_new_tt__LocalOrientation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LocalOrientation(soap, n, NULL, NULL, NULL);
}

inline tt__LocalOrientation * soap_new_req_tt__LocalOrientation(
	struct soap *soap)
{
	tt__LocalOrientation *_p = ::soap_new_tt__LocalOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__LocalOrientation * soap_new_set_tt__LocalOrientation(
	struct soap *soap,
	float *pan,
	float *tilt,
	float *roll)
{
	tt__LocalOrientation *_p = ::soap_new_tt__LocalOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LocalOrientation::pan = pan;
		_p->tt__LocalOrientation::tilt = tilt;
		_p->tt__LocalOrientation::roll = roll;
	}
	return _p;
}

inline int soap_write_tt__LocalOrientation(struct soap *soap, tt__LocalOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalOrientation", p->soap_type() == SOAP_TYPE_tt__LocalOrientation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__LocalOrientation(struct soap *soap, const char *URL, tt__LocalOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalOrientation", p->soap_type() == SOAP_TYPE_tt__LocalOrientation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__LocalOrientation(struct soap *soap, const char *URL, tt__LocalOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalOrientation", p->soap_type() == SOAP_TYPE_tt__LocalOrientation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__LocalOrientation(struct soap *soap, const char *URL, tt__LocalOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalOrientation", p->soap_type() == SOAP_TYPE_tt__LocalOrientation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__LocalOrientation * SOAP_FMAC4 soap_get_tt__LocalOrientation(struct soap*, tt__LocalOrientation *, const char*, const char*);

inline int soap_read_tt__LocalOrientation(struct soap *soap, tt__LocalOrientation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__LocalOrientation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__LocalOrientation(struct soap *soap, const char *URL, tt__LocalOrientation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__LocalOrientation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__LocalOrientation(struct soap *soap, tt__LocalOrientation *p)
{
	if (::soap_read_tt__LocalOrientation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__LocalLocation_DEFINED
#define SOAP_TYPE_tt__LocalLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LocalLocation(struct soap*, const char*, int, const tt__LocalLocation *, const char*);
SOAP_FMAC3 tt__LocalLocation * SOAP_FMAC4 soap_in_tt__LocalLocation(struct soap*, const char*, tt__LocalLocation *, const char*);
SOAP_FMAC1 tt__LocalLocation * SOAP_FMAC2 soap_instantiate_tt__LocalLocation(struct soap*, int, const char*, const char*, size_t*);

inline tt__LocalLocation * soap_new_tt__LocalLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__LocalLocation(soap, n, NULL, NULL, NULL);
}

inline tt__LocalLocation * soap_new_req_tt__LocalLocation(
	struct soap *soap)
{
	tt__LocalLocation *_p = ::soap_new_tt__LocalLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__LocalLocation * soap_new_set_tt__LocalLocation(
	struct soap *soap,
	float *x,
	float *y,
	float *z)
{
	tt__LocalLocation *_p = ::soap_new_tt__LocalLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__LocalLocation::x = x;
		_p->tt__LocalLocation::y = y;
		_p->tt__LocalLocation::z = z;
	}
	return _p;
}

inline int soap_write_tt__LocalLocation(struct soap *soap, tt__LocalLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalLocation", p->soap_type() == SOAP_TYPE_tt__LocalLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__LocalLocation(struct soap *soap, const char *URL, tt__LocalLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalLocation", p->soap_type() == SOAP_TYPE_tt__LocalLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__LocalLocation(struct soap *soap, const char *URL, tt__LocalLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalLocation", p->soap_type() == SOAP_TYPE_tt__LocalLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__LocalLocation(struct soap *soap, const char *URL, tt__LocalLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:LocalLocation", p->soap_type() == SOAP_TYPE_tt__LocalLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__LocalLocation * SOAP_FMAC4 soap_get_tt__LocalLocation(struct soap*, tt__LocalLocation *, const char*, const char*);

inline int soap_read_tt__LocalLocation(struct soap *soap, tt__LocalLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__LocalLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__LocalLocation(struct soap *soap, const char *URL, tt__LocalLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__LocalLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__LocalLocation(struct soap *soap, tt__LocalLocation *p)
{
	if (::soap_read_tt__LocalLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__GeoOrientation_DEFINED
#define SOAP_TYPE_tt__GeoOrientation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GeoOrientation(struct soap*, const char*, int, const tt__GeoOrientation *, const char*);
SOAP_FMAC3 tt__GeoOrientation * SOAP_FMAC4 soap_in_tt__GeoOrientation(struct soap*, const char*, tt__GeoOrientation *, const char*);
SOAP_FMAC1 tt__GeoOrientation * SOAP_FMAC2 soap_instantiate_tt__GeoOrientation(struct soap*, int, const char*, const char*, size_t*);

inline tt__GeoOrientation * soap_new_tt__GeoOrientation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GeoOrientation(soap, n, NULL, NULL, NULL);
}

inline tt__GeoOrientation * soap_new_req_tt__GeoOrientation(
	struct soap *soap)
{
	tt__GeoOrientation *_p = ::soap_new_tt__GeoOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__GeoOrientation * soap_new_set_tt__GeoOrientation(
	struct soap *soap,
	float *roll,
	float *pitch,
	float *yaw)
{
	tt__GeoOrientation *_p = ::soap_new_tt__GeoOrientation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GeoOrientation::roll = roll;
		_p->tt__GeoOrientation::pitch = pitch;
		_p->tt__GeoOrientation::yaw = yaw;
	}
	return _p;
}

inline int soap_write_tt__GeoOrientation(struct soap *soap, tt__GeoOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoOrientation", p->soap_type() == SOAP_TYPE_tt__GeoOrientation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__GeoOrientation(struct soap *soap, const char *URL, tt__GeoOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoOrientation", p->soap_type() == SOAP_TYPE_tt__GeoOrientation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__GeoOrientation(struct soap *soap, const char *URL, tt__GeoOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoOrientation", p->soap_type() == SOAP_TYPE_tt__GeoOrientation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__GeoOrientation(struct soap *soap, const char *URL, tt__GeoOrientation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoOrientation", p->soap_type() == SOAP_TYPE_tt__GeoOrientation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__GeoOrientation * SOAP_FMAC4 soap_get_tt__GeoOrientation(struct soap*, tt__GeoOrientation *, const char*, const char*);

inline int soap_read_tt__GeoOrientation(struct soap *soap, tt__GeoOrientation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__GeoOrientation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__GeoOrientation(struct soap *soap, const char *URL, tt__GeoOrientation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__GeoOrientation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__GeoOrientation(struct soap *soap, tt__GeoOrientation *p)
{
	if (::soap_read_tt__GeoOrientation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__GeoLocation_DEFINED
#define SOAP_TYPE_tt__GeoLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GeoLocation(struct soap*, const char*, int, const tt__GeoLocation *, const char*);
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_in_tt__GeoLocation(struct soap*, const char*, tt__GeoLocation *, const char*);
SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline tt__GeoLocation * soap_new_tt__GeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GeoLocation(soap, n, NULL, NULL, NULL);
}

inline tt__GeoLocation * soap_new_req_tt__GeoLocation(
	struct soap *soap)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__GeoLocation * soap_new_set_tt__GeoLocation(
	struct soap *soap,
	double *lon,
	double *lat,
	float *elevation)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GeoLocation::lon = lon;
		_p->tt__GeoLocation::lat = lat;
		_p->tt__GeoLocation::elevation = elevation;
	}
	return _p;
}

inline int soap_write_tt__GeoLocation(struct soap *soap, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_get_tt__GeoLocation(struct soap*, tt__GeoLocation *, const char*, const char*);

inline int soap_read_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__GeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntRange_DEFINED
#define SOAP_TYPE_tt__IntRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRange(struct soap*, const char*, int, const tt__IntRange *, const char*);
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_in_tt__IntRange(struct soap*, const char*, tt__IntRange *, const char*);
SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRange * soap_new_tt__IntRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRange(soap, n, NULL, NULL, NULL);
}

inline tt__IntRange * soap_new_req_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline tt__IntRange * soap_new_set_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__IntRange(struct soap *soap, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_get_tt__IntRange(struct soap*, tt__IntRange *, const char*, const char*);

inline int soap_read_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IntRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DateTimeRange_DEFINED
#define SOAP_TYPE_tt__DateTimeRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DateTimeRange(struct soap*, const char*, int, const tt__DateTimeRange *, const char*);
SOAP_FMAC3 tt__DateTimeRange * SOAP_FMAC4 soap_in_tt__DateTimeRange(struct soap*, const char*, tt__DateTimeRange *, const char*);
SOAP_FMAC1 tt__DateTimeRange * SOAP_FMAC2 soap_instantiate_tt__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DateTimeRange * soap_new_tt__DateTimeRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DateTimeRange(soap, n, NULL, NULL, NULL);
}

inline tt__DateTimeRange * soap_new_req_tt__DateTimeRange(
	struct soap *soap,
	time_t From,
	time_t Until)
{
	tt__DateTimeRange *_p = ::soap_new_tt__DateTimeRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTimeRange::From = From;
		_p->tt__DateTimeRange::Until = Until;
	}
	return _p;
}

inline tt__DateTimeRange * soap_new_set_tt__DateTimeRange(
	struct soap *soap,
	time_t From,
	time_t Until)
{
	tt__DateTimeRange *_p = ::soap_new_tt__DateTimeRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTimeRange::From = From;
		_p->tt__DateTimeRange::Until = Until;
	}
	return _p;
}

inline int soap_write_tt__DateTimeRange(struct soap *soap, tt__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTimeRange", p->soap_type() == SOAP_TYPE_tt__DateTimeRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DateTimeRange(struct soap *soap, const char *URL, tt__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTimeRange", p->soap_type() == SOAP_TYPE_tt__DateTimeRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DateTimeRange(struct soap *soap, const char *URL, tt__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTimeRange", p->soap_type() == SOAP_TYPE_tt__DateTimeRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DateTimeRange(struct soap *soap, const char *URL, tt__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTimeRange", p->soap_type() == SOAP_TYPE_tt__DateTimeRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DateTimeRange * SOAP_FMAC4 soap_get_tt__DateTimeRange(struct soap*, tt__DateTimeRange *, const char*, const char*);

inline int soap_read_tt__DateTimeRange(struct soap *soap, tt__DateTimeRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DateTimeRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DateTimeRange(struct soap *soap, const char *URL, tt__DateTimeRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DateTimeRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DateTimeRange(struct soap *soap, tt__DateTimeRange *p)
{
	if (::soap_read_tt__DateTimeRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RelayOutput_DEFINED
#define SOAP_TYPE_tt__RelayOutput_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayOutput(struct soap*, const char*, int, const tt__RelayOutput *, const char*);
SOAP_FMAC3 tt__RelayOutput * SOAP_FMAC4 soap_in_tt__RelayOutput(struct soap*, const char*, tt__RelayOutput *, const char*);
SOAP_FMAC1 tt__RelayOutput * SOAP_FMAC2 soap_instantiate_tt__RelayOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayOutput * soap_new_tt__RelayOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelayOutput(soap, n, NULL, NULL, NULL);
}

inline tt__RelayOutput * soap_new_req_tt__RelayOutput(
	struct soap *soap,
	tt__RelayOutputSettings *Properties,
	const std::string& token__1)
{
	tt__RelayOutput *_p = ::soap_new_tt__RelayOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutput::Properties = Properties;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__RelayOutput * soap_new_set_tt__RelayOutput(
	struct soap *soap,
	tt__RelayOutputSettings *Properties,
	const std::string& token__1)
{
	tt__RelayOutput *_p = ::soap_new_tt__RelayOutput(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutput::Properties = Properties;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__RelayOutput(struct soap *soap, tt__RelayOutput const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutput", p->soap_type() == SOAP_TYPE_tt__RelayOutput ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RelayOutput(struct soap *soap, const char *URL, tt__RelayOutput const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutput", p->soap_type() == SOAP_TYPE_tt__RelayOutput ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RelayOutput(struct soap *soap, const char *URL, tt__RelayOutput const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutput", p->soap_type() == SOAP_TYPE_tt__RelayOutput ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RelayOutput(struct soap *soap, const char *URL, tt__RelayOutput const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutput", p->soap_type() == SOAP_TYPE_tt__RelayOutput ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelayOutput * SOAP_FMAC4 soap_get_tt__RelayOutput(struct soap*, tt__RelayOutput *, const char*, const char*);

inline int soap_read_tt__RelayOutput(struct soap *soap, tt__RelayOutput *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RelayOutput(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RelayOutput(struct soap *soap, const char *URL, tt__RelayOutput *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RelayOutput(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RelayOutput(struct soap *soap, tt__RelayOutput *p)
{
	if (::soap_read_tt__RelayOutput(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RelayOutputSettings_DEFINED
#define SOAP_TYPE_tt__RelayOutputSettings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayOutputSettings(struct soap*, const char*, int, const tt__RelayOutputSettings *, const char*);
SOAP_FMAC3 tt__RelayOutputSettings * SOAP_FMAC4 soap_in_tt__RelayOutputSettings(struct soap*, const char*, tt__RelayOutputSettings *, const char*);
SOAP_FMAC1 tt__RelayOutputSettings * SOAP_FMAC2 soap_instantiate_tt__RelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayOutputSettings * soap_new_tt__RelayOutputSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RelayOutputSettings(soap, n, NULL, NULL, NULL);
}

inline tt__RelayOutputSettings * soap_new_req_tt__RelayOutputSettings(
	struct soap *soap,
	enum tt__RelayMode Mode,
	const std::string& DelayTime,
	enum tt__RelayIdleState IdleState)
{
	tt__RelayOutputSettings *_p = ::soap_new_tt__RelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutputSettings::Mode = Mode;
		_p->tt__RelayOutputSettings::DelayTime = DelayTime;
		_p->tt__RelayOutputSettings::IdleState = IdleState;
	}
	return _p;
}

inline tt__RelayOutputSettings * soap_new_set_tt__RelayOutputSettings(
	struct soap *soap,
	enum tt__RelayMode Mode,
	const std::string& DelayTime,
	enum tt__RelayIdleState IdleState)
{
	tt__RelayOutputSettings *_p = ::soap_new_tt__RelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RelayOutputSettings::Mode = Mode;
		_p->tt__RelayOutputSettings::DelayTime = DelayTime;
		_p->tt__RelayOutputSettings::IdleState = IdleState;
	}
	return _p;
}

inline int soap_write_tt__RelayOutputSettings(struct soap *soap, tt__RelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutputSettings", p->soap_type() == SOAP_TYPE_tt__RelayOutputSettings ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RelayOutputSettings(struct soap *soap, const char *URL, tt__RelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutputSettings", p->soap_type() == SOAP_TYPE_tt__RelayOutputSettings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RelayOutputSettings(struct soap *soap, const char *URL, tt__RelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutputSettings", p->soap_type() == SOAP_TYPE_tt__RelayOutputSettings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RelayOutputSettings(struct soap *soap, const char *URL, tt__RelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RelayOutputSettings", p->soap_type() == SOAP_TYPE_tt__RelayOutputSettings ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RelayOutputSettings * SOAP_FMAC4 soap_get_tt__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *, const char*, const char*);

inline int soap_read_tt__RelayOutputSettings(struct soap *soap, tt__RelayOutputSettings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RelayOutputSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RelayOutputSettings(struct soap *soap, const char *URL, tt__RelayOutputSettings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RelayOutputSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RelayOutputSettings(struct soap *soap, tt__RelayOutputSettings *p)
{
	if (::soap_read_tt__RelayOutputSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__TLSConfiguration_DEFINED
#define SOAP_TYPE_tt__TLSConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TLSConfiguration(struct soap*, const char*, int, const tt__TLSConfiguration *, const char*);
SOAP_FMAC3 tt__TLSConfiguration * SOAP_FMAC4 soap_in_tt__TLSConfiguration(struct soap*, const char*, tt__TLSConfiguration *, const char*);
SOAP_FMAC1 tt__TLSConfiguration * SOAP_FMAC2 soap_instantiate_tt__TLSConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__TLSConfiguration * soap_new_tt__TLSConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TLSConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__TLSConfiguration * soap_new_req_tt__TLSConfiguration(
	struct soap *soap,
	const std::string& CertificateID)
{
	tt__TLSConfiguration *_p = ::soap_new_tt__TLSConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TLSConfiguration::CertificateID = CertificateID;
	}
	return _p;
}

inline tt__TLSConfiguration * soap_new_set_tt__TLSConfiguration(
	struct soap *soap,
	const std::string& CertificateID)
{
	tt__TLSConfiguration *_p = ::soap_new_tt__TLSConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TLSConfiguration::CertificateID = CertificateID;
	}
	return _p;
}

inline int soap_write_tt__TLSConfiguration(struct soap *soap, tt__TLSConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TLSConfiguration", p->soap_type() == SOAP_TYPE_tt__TLSConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__TLSConfiguration(struct soap *soap, const char *URL, tt__TLSConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TLSConfiguration", p->soap_type() == SOAP_TYPE_tt__TLSConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__TLSConfiguration(struct soap *soap, const char *URL, tt__TLSConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TLSConfiguration", p->soap_type() == SOAP_TYPE_tt__TLSConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__TLSConfiguration(struct soap *soap, const char *URL, tt__TLSConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TLSConfiguration", p->soap_type() == SOAP_TYPE_tt__TLSConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__TLSConfiguration * SOAP_FMAC4 soap_get_tt__TLSConfiguration(struct soap*, tt__TLSConfiguration *, const char*, const char*);

inline int soap_read_tt__TLSConfiguration(struct soap *soap, tt__TLSConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__TLSConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__TLSConfiguration(struct soap *soap, const char *URL, tt__TLSConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__TLSConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__TLSConfiguration(struct soap *soap, tt__TLSConfiguration *p)
{
	if (::soap_read_tt__TLSConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EapMethodExtension_DEFINED
#define SOAP_TYPE_tt__EapMethodExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EapMethodExtension(struct soap*, const char*, int, const tt__EapMethodExtension *, const char*);
SOAP_FMAC3 tt__EapMethodExtension * SOAP_FMAC4 soap_in_tt__EapMethodExtension(struct soap*, const char*, tt__EapMethodExtension *, const char*);
SOAP_FMAC1 tt__EapMethodExtension * SOAP_FMAC2 soap_instantiate_tt__EapMethodExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EapMethodExtension * soap_new_tt__EapMethodExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EapMethodExtension(soap, n, NULL, NULL, NULL);
}

inline tt__EapMethodExtension * soap_new_req_tt__EapMethodExtension(
	struct soap *soap)
{
	tt__EapMethodExtension *_p = ::soap_new_tt__EapMethodExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EapMethodExtension * soap_new_set_tt__EapMethodExtension(
	struct soap *soap)
{
	tt__EapMethodExtension *_p = ::soap_new_tt__EapMethodExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__EapMethodExtension(struct soap *soap, tt__EapMethodExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EapMethodExtension", p->soap_type() == SOAP_TYPE_tt__EapMethodExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EapMethodExtension(struct soap *soap, const char *URL, tt__EapMethodExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EapMethodExtension", p->soap_type() == SOAP_TYPE_tt__EapMethodExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EapMethodExtension(struct soap *soap, const char *URL, tt__EapMethodExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EapMethodExtension", p->soap_type() == SOAP_TYPE_tt__EapMethodExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EapMethodExtension(struct soap *soap, const char *URL, tt__EapMethodExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EapMethodExtension", p->soap_type() == SOAP_TYPE_tt__EapMethodExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EapMethodExtension * SOAP_FMAC4 soap_get_tt__EapMethodExtension(struct soap*, tt__EapMethodExtension *, const char*, const char*);

inline int soap_read_tt__EapMethodExtension(struct soap *soap, tt__EapMethodExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EapMethodExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EapMethodExtension(struct soap *soap, const char *URL, tt__EapMethodExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EapMethodExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EapMethodExtension(struct soap *soap, tt__EapMethodExtension *p)
{
	if (::soap_read_tt__EapMethodExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EAPMethodConfiguration_DEFINED
#define SOAP_TYPE_tt__EAPMethodConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EAPMethodConfiguration(struct soap*, const char*, int, const tt__EAPMethodConfiguration *, const char*);
SOAP_FMAC3 tt__EAPMethodConfiguration * SOAP_FMAC4 soap_in_tt__EAPMethodConfiguration(struct soap*, const char*, tt__EAPMethodConfiguration *, const char*);
SOAP_FMAC1 tt__EAPMethodConfiguration * SOAP_FMAC2 soap_instantiate_tt__EAPMethodConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__EAPMethodConfiguration * soap_new_tt__EAPMethodConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EAPMethodConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__EAPMethodConfiguration * soap_new_req_tt__EAPMethodConfiguration(
	struct soap *soap)
{
	tt__EAPMethodConfiguration *_p = ::soap_new_tt__EAPMethodConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EAPMethodConfiguration * soap_new_set_tt__EAPMethodConfiguration(
	struct soap *soap,
	tt__TLSConfiguration *TLSConfiguration,
	std::string *Password,
	tt__EapMethodExtension *Extension)
{
	tt__EAPMethodConfiguration *_p = ::soap_new_tt__EAPMethodConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EAPMethodConfiguration::TLSConfiguration = TLSConfiguration;
		_p->tt__EAPMethodConfiguration::Password = Password;
		_p->tt__EAPMethodConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__EAPMethodConfiguration(struct soap *soap, tt__EAPMethodConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EAPMethodConfiguration", p->soap_type() == SOAP_TYPE_tt__EAPMethodConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EAPMethodConfiguration(struct soap *soap, const char *URL, tt__EAPMethodConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EAPMethodConfiguration", p->soap_type() == SOAP_TYPE_tt__EAPMethodConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EAPMethodConfiguration(struct soap *soap, const char *URL, tt__EAPMethodConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EAPMethodConfiguration", p->soap_type() == SOAP_TYPE_tt__EAPMethodConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EAPMethodConfiguration(struct soap *soap, const char *URL, tt__EAPMethodConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EAPMethodConfiguration", p->soap_type() == SOAP_TYPE_tt__EAPMethodConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EAPMethodConfiguration * SOAP_FMAC4 soap_get_tt__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *, const char*, const char*);

inline int soap_read_tt__EAPMethodConfiguration(struct soap *soap, tt__EAPMethodConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EAPMethodConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EAPMethodConfiguration(struct soap *soap, const char *URL, tt__EAPMethodConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EAPMethodConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EAPMethodConfiguration(struct soap *soap, tt__EAPMethodConfiguration *p)
{
	if (::soap_read_tt__EAPMethodConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__Dot1XConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot1XConfigurationExtension(struct soap*, const char*, int, const tt__Dot1XConfigurationExtension *, const char*);
SOAP_FMAC3 tt__Dot1XConfigurationExtension * SOAP_FMAC4 soap_in_tt__Dot1XConfigurationExtension(struct soap*, const char*, tt__Dot1XConfigurationExtension *, const char*);
SOAP_FMAC1 tt__Dot1XConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot1XConfigurationExtension * soap_new_tt__Dot1XConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot1XConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot1XConfigurationExtension * soap_new_req_tt__Dot1XConfigurationExtension(
	struct soap *soap)
{
	tt__Dot1XConfigurationExtension *_p = ::soap_new_tt__Dot1XConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot1XConfigurationExtension * soap_new_set_tt__Dot1XConfigurationExtension(
	struct soap *soap)
{
	tt__Dot1XConfigurationExtension *_p = ::soap_new_tt__Dot1XConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__Dot1XConfigurationExtension(struct soap *soap, tt__Dot1XConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot1XConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot1XConfigurationExtension(struct soap *soap, const char *URL, tt__Dot1XConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot1XConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot1XConfigurationExtension(struct soap *soap, const char *URL, tt__Dot1XConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot1XConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot1XConfigurationExtension(struct soap *soap, const char *URL, tt__Dot1XConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot1XConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot1XConfigurationExtension * SOAP_FMAC4 soap_get_tt__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__Dot1XConfigurationExtension(struct soap *soap, tt__Dot1XConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot1XConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot1XConfigurationExtension(struct soap *soap, const char *URL, tt__Dot1XConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot1XConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot1XConfigurationExtension(struct soap *soap, tt__Dot1XConfigurationExtension *p)
{
	if (::soap_read_tt__Dot1XConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfiguration_DEFINED
#define SOAP_TYPE_tt__Dot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot1XConfiguration(struct soap*, const char*, int, const tt__Dot1XConfiguration *, const char*);
SOAP_FMAC3 tt__Dot1XConfiguration * SOAP_FMAC4 soap_in_tt__Dot1XConfiguration(struct soap*, const char*, tt__Dot1XConfiguration *, const char*);
SOAP_FMAC1 tt__Dot1XConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot1XConfiguration * soap_new_tt__Dot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot1XConfiguration * soap_new_req_tt__Dot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken,
	const std::string& Identity,
	int EAPMethod)
{
	tt__Dot1XConfiguration *_p = ::soap_new_tt__Dot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
		_p->tt__Dot1XConfiguration::Identity = Identity;
		_p->tt__Dot1XConfiguration::EAPMethod = EAPMethod;
	}
	return _p;
}

inline tt__Dot1XConfiguration * soap_new_set_tt__Dot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken,
	const std::string& Identity,
	std::string *AnonymousID,
	int EAPMethod,
	const std::vector<std::string> & CACertificateID,
	tt__EAPMethodConfiguration *EAPMethodConfiguration,
	tt__Dot1XConfigurationExtension *Extension)
{
	tt__Dot1XConfiguration *_p = ::soap_new_tt__Dot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
		_p->tt__Dot1XConfiguration::Identity = Identity;
		_p->tt__Dot1XConfiguration::AnonymousID = AnonymousID;
		_p->tt__Dot1XConfiguration::EAPMethod = EAPMethod;
		_p->tt__Dot1XConfiguration::CACertificateID = CACertificateID;
		_p->tt__Dot1XConfiguration::EAPMethodConfiguration = EAPMethodConfiguration;
		_p->tt__Dot1XConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__Dot1XConfiguration(struct soap *soap, tt__Dot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot1XConfiguration(struct soap *soap, const char *URL, tt__Dot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot1XConfiguration(struct soap *soap, const char *URL, tt__Dot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot1XConfiguration(struct soap *soap, const char *URL, tt__Dot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot1XConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot1XConfiguration * SOAP_FMAC4 soap_get_tt__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration *, const char*, const char*);

inline int soap_read_tt__Dot1XConfiguration(struct soap *soap, tt__Dot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot1XConfiguration(struct soap *soap, const char *URL, tt__Dot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot1XConfiguration(struct soap *soap, tt__Dot1XConfiguration *p)
{
	if (::soap_read_tt__Dot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CertificateInformationExtension_DEFINED
#define SOAP_TYPE_tt__CertificateInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateInformationExtension(struct soap*, const char*, int, const tt__CertificateInformationExtension *, const char*);
SOAP_FMAC3 tt__CertificateInformationExtension * SOAP_FMAC4 soap_in_tt__CertificateInformationExtension(struct soap*, const char*, tt__CertificateInformationExtension *, const char*);
SOAP_FMAC1 tt__CertificateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateInformationExtension * soap_new_tt__CertificateInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateInformationExtension * soap_new_req_tt__CertificateInformationExtension(
	struct soap *soap)
{
	tt__CertificateInformationExtension *_p = ::soap_new_tt__CertificateInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CertificateInformationExtension * soap_new_set_tt__CertificateInformationExtension(
	struct soap *soap)
{
	tt__CertificateInformationExtension *_p = ::soap_new_tt__CertificateInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__CertificateInformationExtension(struct soap *soap, tt__CertificateInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformationExtension", p->soap_type() == SOAP_TYPE_tt__CertificateInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__CertificateInformationExtension(struct soap *soap, const char *URL, tt__CertificateInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformationExtension", p->soap_type() == SOAP_TYPE_tt__CertificateInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CertificateInformationExtension(struct soap *soap, const char *URL, tt__CertificateInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformationExtension", p->soap_type() == SOAP_TYPE_tt__CertificateInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CertificateInformationExtension(struct soap *soap, const char *URL, tt__CertificateInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformationExtension", p->soap_type() == SOAP_TYPE_tt__CertificateInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateInformationExtension * SOAP_FMAC4 soap_get_tt__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *, const char*, const char*);

inline int soap_read_tt__CertificateInformationExtension(struct soap *soap, tt__CertificateInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__CertificateInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CertificateInformationExtension(struct soap *soap, const char *URL, tt__CertificateInformationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CertificateInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CertificateInformationExtension(struct soap *soap, tt__CertificateInformationExtension *p)
{
	if (::soap_read_tt__CertificateInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CertificateUsage_DEFINED
#define SOAP_TYPE_tt__CertificateUsage_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateUsage(struct soap*, const char*, int, const tt__CertificateUsage *, const char*);
SOAP_FMAC3 tt__CertificateUsage * SOAP_FMAC4 soap_in_tt__CertificateUsage(struct soap*, const char*, tt__CertificateUsage *, const char*);
SOAP_FMAC1 tt__CertificateUsage * SOAP_FMAC2 soap_instantiate_tt__CertificateUsage(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateUsage * soap_new_tt__CertificateUsage(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateUsage(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateUsage * soap_new_req_tt__CertificateUsage(
	struct soap *soap,
	const std::string& __item,
	bool Critical)
{
	tt__CertificateUsage *_p = ::soap_new_tt__CertificateUsage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateUsage::__item = __item;
		_p->tt__CertificateUsage::Critical = Critical;
	}
	return _p;
}

inline tt__CertificateUsage * soap_new_set_tt__CertificateUsage(
	struct soap *soap,
	const std::string& __item,
	bool Critical)
{
	tt__CertificateUsage *_p = ::soap_new_tt__CertificateUsage(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateUsage::__item = __item;
		_p->tt__CertificateUsage::Critical = Critical;
	}
	return _p;
}

inline int soap_write_tt__CertificateUsage(struct soap *soap, tt__CertificateUsage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateUsage", p->soap_type() == SOAP_TYPE_tt__CertificateUsage ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__CertificateUsage(struct soap *soap, const char *URL, tt__CertificateUsage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateUsage", p->soap_type() == SOAP_TYPE_tt__CertificateUsage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CertificateUsage(struct soap *soap, const char *URL, tt__CertificateUsage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateUsage", p->soap_type() == SOAP_TYPE_tt__CertificateUsage ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CertificateUsage(struct soap *soap, const char *URL, tt__CertificateUsage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateUsage", p->soap_type() == SOAP_TYPE_tt__CertificateUsage ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateUsage * SOAP_FMAC4 soap_get_tt__CertificateUsage(struct soap*, tt__CertificateUsage *, const char*, const char*);

inline int soap_read_tt__CertificateUsage(struct soap *soap, tt__CertificateUsage *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__CertificateUsage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CertificateUsage(struct soap *soap, const char *URL, tt__CertificateUsage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CertificateUsage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CertificateUsage(struct soap *soap, tt__CertificateUsage *p)
{
	if (::soap_read_tt__CertificateUsage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CertificateInformation_DEFINED
#define SOAP_TYPE_tt__CertificateInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateInformation(struct soap*, const char*, int, const tt__CertificateInformation *, const char*);
SOAP_FMAC3 tt__CertificateInformation * SOAP_FMAC4 soap_in_tt__CertificateInformation(struct soap*, const char*, tt__CertificateInformation *, const char*);
SOAP_FMAC1 tt__CertificateInformation * SOAP_FMAC2 soap_instantiate_tt__CertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateInformation * soap_new_tt__CertificateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateInformation(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateInformation * soap_new_req_tt__CertificateInformation(
	struct soap *soap,
	const std::string& CertificateID)
{
	tt__CertificateInformation *_p = ::soap_new_tt__CertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateInformation::CertificateID = CertificateID;
	}
	return _p;
}

inline tt__CertificateInformation * soap_new_set_tt__CertificateInformation(
	struct soap *soap,
	const std::string& CertificateID,
	std::string *IssuerDN,
	std::string *SubjectDN,
	tt__CertificateUsage *KeyUsage,
	tt__CertificateUsage *ExtendedKeyUsage,
	int *KeyLength,
	std::string *Version,
	std::string *SerialNum,
	std::string *SignatureAlgorithm,
	tt__DateTimeRange *Validity,
	tt__CertificateInformationExtension *Extension)
{
	tt__CertificateInformation *_p = ::soap_new_tt__CertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateInformation::CertificateID = CertificateID;
		_p->tt__CertificateInformation::IssuerDN = IssuerDN;
		_p->tt__CertificateInformation::SubjectDN = SubjectDN;
		_p->tt__CertificateInformation::KeyUsage = KeyUsage;
		_p->tt__CertificateInformation::ExtendedKeyUsage = ExtendedKeyUsage;
		_p->tt__CertificateInformation::KeyLength = KeyLength;
		_p->tt__CertificateInformation::Version = Version;
		_p->tt__CertificateInformation::SerialNum = SerialNum;
		_p->tt__CertificateInformation::SignatureAlgorithm = SignatureAlgorithm;
		_p->tt__CertificateInformation::Validity = Validity;
		_p->tt__CertificateInformation::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__CertificateInformation(struct soap *soap, tt__CertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformation", p->soap_type() == SOAP_TYPE_tt__CertificateInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__CertificateInformation(struct soap *soap, const char *URL, tt__CertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformation", p->soap_type() == SOAP_TYPE_tt__CertificateInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CertificateInformation(struct soap *soap, const char *URL, tt__CertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformation", p->soap_type() == SOAP_TYPE_tt__CertificateInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CertificateInformation(struct soap *soap, const char *URL, tt__CertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateInformation", p->soap_type() == SOAP_TYPE_tt__CertificateInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateInformation * SOAP_FMAC4 soap_get_tt__CertificateInformation(struct soap*, tt__CertificateInformation *, const char*, const char*);

inline int soap_read_tt__CertificateInformation(struct soap *soap, tt__CertificateInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__CertificateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CertificateInformation(struct soap *soap, const char *URL, tt__CertificateInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CertificateInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CertificateInformation(struct soap *soap, tt__CertificateInformation *p)
{
	if (::soap_read_tt__CertificateInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_tt__CertificateWithPrivateKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateWithPrivateKey(struct soap*, const char*, int, const tt__CertificateWithPrivateKey *, const char*);
SOAP_FMAC3 tt__CertificateWithPrivateKey * SOAP_FMAC4 soap_in_tt__CertificateWithPrivateKey(struct soap*, const char*, tt__CertificateWithPrivateKey *, const char*);
SOAP_FMAC1 tt__CertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate_tt__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateWithPrivateKey * soap_new_tt__CertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateWithPrivateKey * soap_new_req_tt__CertificateWithPrivateKey(
	struct soap *soap,
	tt__BinaryData *Certificate,
	tt__BinaryData *PrivateKey)
{
	tt__CertificateWithPrivateKey *_p = ::soap_new_tt__CertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateWithPrivateKey::Certificate = Certificate;
		_p->tt__CertificateWithPrivateKey::PrivateKey = PrivateKey;
	}
	return _p;
}

inline tt__CertificateWithPrivateKey * soap_new_set_tt__CertificateWithPrivateKey(
	struct soap *soap,
	std::string *CertificateID,
	tt__BinaryData *Certificate,
	tt__BinaryData *PrivateKey)
{
	tt__CertificateWithPrivateKey *_p = ::soap_new_tt__CertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateWithPrivateKey::CertificateID = CertificateID;
		_p->tt__CertificateWithPrivateKey::Certificate = Certificate;
		_p->tt__CertificateWithPrivateKey::PrivateKey = PrivateKey;
	}
	return _p;
}

inline int soap_write_tt__CertificateWithPrivateKey(struct soap *soap, tt__CertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateWithPrivateKey", p->soap_type() == SOAP_TYPE_tt__CertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__CertificateWithPrivateKey(struct soap *soap, const char *URL, tt__CertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateWithPrivateKey", p->soap_type() == SOAP_TYPE_tt__CertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CertificateWithPrivateKey(struct soap *soap, const char *URL, tt__CertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateWithPrivateKey", p->soap_type() == SOAP_TYPE_tt__CertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CertificateWithPrivateKey(struct soap *soap, const char *URL, tt__CertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateWithPrivateKey", p->soap_type() == SOAP_TYPE_tt__CertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateWithPrivateKey * SOAP_FMAC4 soap_get_tt__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey *, const char*, const char*);

inline int soap_read_tt__CertificateWithPrivateKey(struct soap *soap, tt__CertificateWithPrivateKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__CertificateWithPrivateKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CertificateWithPrivateKey(struct soap *soap, const char *URL, tt__CertificateWithPrivateKey *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CertificateWithPrivateKey(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CertificateWithPrivateKey(struct soap *soap, tt__CertificateWithPrivateKey *p)
{
	if (::soap_read_tt__CertificateWithPrivateKey(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CertificateStatus_DEFINED
#define SOAP_TYPE_tt__CertificateStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateStatus(struct soap*, const char*, int, const tt__CertificateStatus *, const char*);
SOAP_FMAC3 tt__CertificateStatus * SOAP_FMAC4 soap_in_tt__CertificateStatus(struct soap*, const char*, tt__CertificateStatus *, const char*);
SOAP_FMAC1 tt__CertificateStatus * SOAP_FMAC2 soap_instantiate_tt__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateStatus * soap_new_tt__CertificateStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CertificateStatus(soap, n, NULL, NULL, NULL);
}

inline tt__CertificateStatus * soap_new_req_tt__CertificateStatus(
	struct soap *soap,
	const std::string& CertificateID,
	bool Status)
{
	tt__CertificateStatus *_p = ::soap_new_tt__CertificateStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateStatus::CertificateID = CertificateID;
		_p->tt__CertificateStatus::Status = Status;
	}
	return _p;
}

inline tt__CertificateStatus * soap_new_set_tt__CertificateStatus(
	struct soap *soap,
	const std::string& CertificateID,
	bool Status)
{
	tt__CertificateStatus *_p = ::soap_new_tt__CertificateStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CertificateStatus::CertificateID = CertificateID;
		_p->tt__CertificateStatus::Status = Status;
	}
	return _p;
}

inline int soap_write_tt__CertificateStatus(struct soap *soap, tt__CertificateStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateStatus", p->soap_type() == SOAP_TYPE_tt__CertificateStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__CertificateStatus(struct soap *soap, const char *URL, tt__CertificateStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateStatus", p->soap_type() == SOAP_TYPE_tt__CertificateStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CertificateStatus(struct soap *soap, const char *URL, tt__CertificateStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateStatus", p->soap_type() == SOAP_TYPE_tt__CertificateStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CertificateStatus(struct soap *soap, const char *URL, tt__CertificateStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CertificateStatus", p->soap_type() == SOAP_TYPE_tt__CertificateStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__CertificateStatus * SOAP_FMAC4 soap_get_tt__CertificateStatus(struct soap*, tt__CertificateStatus *, const char*, const char*);

inline int soap_read_tt__CertificateStatus(struct soap *soap, tt__CertificateStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__CertificateStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CertificateStatus(struct soap *soap, const char *URL, tt__CertificateStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CertificateStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CertificateStatus(struct soap *soap, tt__CertificateStatus *p)
{
	if (::soap_read_tt__CertificateStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Certificate_DEFINED
#define SOAP_TYPE_tt__Certificate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Certificate(struct soap*, const char*, int, const tt__Certificate *, const char*);
SOAP_FMAC3 tt__Certificate * SOAP_FMAC4 soap_in_tt__Certificate(struct soap*, const char*, tt__Certificate *, const char*);
SOAP_FMAC1 tt__Certificate * SOAP_FMAC2 soap_instantiate_tt__Certificate(struct soap*, int, const char*, const char*, size_t*);

inline tt__Certificate * soap_new_tt__Certificate(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Certificate(soap, n, NULL, NULL, NULL);
}

inline tt__Certificate * soap_new_req_tt__Certificate(
	struct soap *soap,
	const std::string& CertificateID,
	tt__BinaryData *Certificate)
{
	tt__Certificate *_p = ::soap_new_tt__Certificate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Certificate::CertificateID = CertificateID;
		_p->tt__Certificate::Certificate = Certificate;
	}
	return _p;
}

inline tt__Certificate * soap_new_set_tt__Certificate(
	struct soap *soap,
	const std::string& CertificateID,
	tt__BinaryData *Certificate)
{
	tt__Certificate *_p = ::soap_new_tt__Certificate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Certificate::CertificateID = CertificateID;
		_p->tt__Certificate::Certificate = Certificate;
	}
	return _p;
}

inline int soap_write_tt__Certificate(struct soap *soap, tt__Certificate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Certificate", p->soap_type() == SOAP_TYPE_tt__Certificate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Certificate(struct soap *soap, const char *URL, tt__Certificate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Certificate", p->soap_type() == SOAP_TYPE_tt__Certificate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Certificate(struct soap *soap, const char *URL, tt__Certificate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Certificate", p->soap_type() == SOAP_TYPE_tt__Certificate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Certificate(struct soap *soap, const char *URL, tt__Certificate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Certificate", p->soap_type() == SOAP_TYPE_tt__Certificate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Certificate * SOAP_FMAC4 soap_get_tt__Certificate(struct soap*, tt__Certificate *, const char*, const char*);

inline int soap_read_tt__Certificate(struct soap *soap, tt__Certificate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Certificate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Certificate(struct soap *soap, const char *URL, tt__Certificate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Certificate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Certificate(struct soap *soap, tt__Certificate *p)
{
	if (::soap_read_tt__Certificate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__UserExtension_DEFINED
#define SOAP_TYPE_tt__UserExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserExtension(struct soap*, const char*, int, const tt__UserExtension *, const char*);
SOAP_FMAC3 tt__UserExtension * SOAP_FMAC4 soap_in_tt__UserExtension(struct soap*, const char*, tt__UserExtension *, const char*);
SOAP_FMAC1 tt__UserExtension * SOAP_FMAC2 soap_instantiate_tt__UserExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__UserExtension * soap_new_tt__UserExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__UserExtension(soap, n, NULL, NULL, NULL);
}

inline tt__UserExtension * soap_new_req_tt__UserExtension(
	struct soap *soap)
{
	tt__UserExtension *_p = ::soap_new_tt__UserExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__UserExtension * soap_new_set_tt__UserExtension(
	struct soap *soap)
{
	tt__UserExtension *_p = ::soap_new_tt__UserExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__UserExtension(struct soap *soap, tt__UserExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:UserExtension", p->soap_type() == SOAP_TYPE_tt__UserExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__UserExtension(struct soap *soap, const char *URL, tt__UserExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:UserExtension", p->soap_type() == SOAP_TYPE_tt__UserExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__UserExtension(struct soap *soap, const char *URL, tt__UserExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:UserExtension", p->soap_type() == SOAP_TYPE_tt__UserExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__UserExtension(struct soap *soap, const char *URL, tt__UserExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:UserExtension", p->soap_type() == SOAP_TYPE_tt__UserExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__UserExtension * SOAP_FMAC4 soap_get_tt__UserExtension(struct soap*, tt__UserExtension *, const char*, const char*);

inline int soap_read_tt__UserExtension(struct soap *soap, tt__UserExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__UserExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__UserExtension(struct soap *soap, const char *URL, tt__UserExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__UserExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__UserExtension(struct soap *soap, tt__UserExtension *p)
{
	if (::soap_read_tt__UserExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__User_DEFINED
#define SOAP_TYPE_tt__User_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__User(struct soap*, const char*, int, const tt__User *, const char*);
SOAP_FMAC3 tt__User * SOAP_FMAC4 soap_in_tt__User(struct soap*, const char*, tt__User *, const char*);
SOAP_FMAC1 tt__User * SOAP_FMAC2 soap_instantiate_tt__User(struct soap*, int, const char*, const char*, size_t*);

inline tt__User * soap_new_tt__User(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__User(soap, n, NULL, NULL, NULL);
}

inline tt__User * soap_new_req_tt__User(
	struct soap *soap,
	const std::string& Username,
	enum tt__UserLevel UserLevel)
{
	tt__User *_p = ::soap_new_tt__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__User::Username = Username;
		_p->tt__User::UserLevel = UserLevel;
	}
	return _p;
}

inline tt__User * soap_new_set_tt__User(
	struct soap *soap,
	const std::string& Username,
	std::string *Password,
	enum tt__UserLevel UserLevel,
	tt__UserExtension *Extension)
{
	tt__User *_p = ::soap_new_tt__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__User::Username = Username;
		_p->tt__User::Password = Password;
		_p->tt__User::UserLevel = UserLevel;
		_p->tt__User::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__User(struct soap *soap, tt__User const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:User", p->soap_type() == SOAP_TYPE_tt__User ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__User(struct soap *soap, const char *URL, tt__User const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:User", p->soap_type() == SOAP_TYPE_tt__User ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__User(struct soap *soap, const char *URL, tt__User const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:User", p->soap_type() == SOAP_TYPE_tt__User ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__User(struct soap *soap, const char *URL, tt__User const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:User", p->soap_type() == SOAP_TYPE_tt__User ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__User * SOAP_FMAC4 soap_get_tt__User(struct soap*, tt__User *, const char*, const char*);

inline int soap_read_tt__User(struct soap *soap, tt__User *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__User(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__User(struct soap *soap, const char *URL, tt__User *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__User(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__User(struct soap *soap, tt__User *p)
{
	if (::soap_read_tt__User(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RemoteUser_DEFINED
#define SOAP_TYPE_tt__RemoteUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RemoteUser(struct soap*, const char*, int, const tt__RemoteUser *, const char*);
SOAP_FMAC3 tt__RemoteUser * SOAP_FMAC4 soap_in_tt__RemoteUser(struct soap*, const char*, tt__RemoteUser *, const char*);
SOAP_FMAC1 tt__RemoteUser * SOAP_FMAC2 soap_instantiate_tt__RemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline tt__RemoteUser * soap_new_tt__RemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RemoteUser(soap, n, NULL, NULL, NULL);
}

inline tt__RemoteUser * soap_new_req_tt__RemoteUser(
	struct soap *soap,
	const std::string& Username,
	bool UseDerivedPassword)
{
	tt__RemoteUser *_p = ::soap_new_tt__RemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RemoteUser::Username = Username;
		_p->tt__RemoteUser::UseDerivedPassword = UseDerivedPassword;
	}
	return _p;
}

inline tt__RemoteUser * soap_new_set_tt__RemoteUser(
	struct soap *soap,
	const std::string& Username,
	std::string *Password,
	bool UseDerivedPassword)
{
	tt__RemoteUser *_p = ::soap_new_tt__RemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RemoteUser::Username = Username;
		_p->tt__RemoteUser::Password = Password;
		_p->tt__RemoteUser::UseDerivedPassword = UseDerivedPassword;
	}
	return _p;
}

inline int soap_write_tt__RemoteUser(struct soap *soap, tt__RemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RemoteUser", p->soap_type() == SOAP_TYPE_tt__RemoteUser ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RemoteUser(struct soap *soap, const char *URL, tt__RemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RemoteUser", p->soap_type() == SOAP_TYPE_tt__RemoteUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RemoteUser(struct soap *soap, const char *URL, tt__RemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RemoteUser", p->soap_type() == SOAP_TYPE_tt__RemoteUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RemoteUser(struct soap *soap, const char *URL, tt__RemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RemoteUser", p->soap_type() == SOAP_TYPE_tt__RemoteUser ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RemoteUser * SOAP_FMAC4 soap_get_tt__RemoteUser(struct soap*, tt__RemoteUser *, const char*, const char*);

inline int soap_read_tt__RemoteUser(struct soap *soap, tt__RemoteUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RemoteUser(struct soap *soap, const char *URL, tt__RemoteUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RemoteUser(struct soap *soap, tt__RemoteUser *p)
{
	if (::soap_read_tt__RemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__TimeZone_DEFINED
#define SOAP_TYPE_tt__TimeZone_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TimeZone(struct soap*, const char*, int, const tt__TimeZone *, const char*);
SOAP_FMAC3 tt__TimeZone * SOAP_FMAC4 soap_in_tt__TimeZone(struct soap*, const char*, tt__TimeZone *, const char*);
SOAP_FMAC1 tt__TimeZone * SOAP_FMAC2 soap_instantiate_tt__TimeZone(struct soap*, int, const char*, const char*, size_t*);

inline tt__TimeZone * soap_new_tt__TimeZone(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__TimeZone(soap, n, NULL, NULL, NULL);
}

inline tt__TimeZone * soap_new_req_tt__TimeZone(
	struct soap *soap,
	const std::string& TZ)
{
	tt__TimeZone *_p = ::soap_new_tt__TimeZone(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TimeZone::TZ = TZ;
	}
	return _p;
}

inline tt__TimeZone * soap_new_set_tt__TimeZone(
	struct soap *soap,
	const std::string& TZ)
{
	tt__TimeZone *_p = ::soap_new_tt__TimeZone(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__TimeZone::TZ = TZ;
	}
	return _p;
}

inline int soap_write_tt__TimeZone(struct soap *soap, tt__TimeZone const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TimeZone", p->soap_type() == SOAP_TYPE_tt__TimeZone ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__TimeZone(struct soap *soap, const char *URL, tt__TimeZone const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TimeZone", p->soap_type() == SOAP_TYPE_tt__TimeZone ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__TimeZone(struct soap *soap, const char *URL, tt__TimeZone const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TimeZone", p->soap_type() == SOAP_TYPE_tt__TimeZone ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__TimeZone(struct soap *soap, const char *URL, tt__TimeZone const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:TimeZone", p->soap_type() == SOAP_TYPE_tt__TimeZone ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__TimeZone * SOAP_FMAC4 soap_get_tt__TimeZone(struct soap*, tt__TimeZone *, const char*, const char*);

inline int soap_read_tt__TimeZone(struct soap *soap, tt__TimeZone *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__TimeZone(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__TimeZone(struct soap *soap, const char *URL, tt__TimeZone *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__TimeZone(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__TimeZone(struct soap *soap, tt__TimeZone *p)
{
	if (::soap_read_tt__TimeZone(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Time_DEFINED
#define SOAP_TYPE_tt__Time_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Time(struct soap*, const char*, int, const tt__Time *, const char*);
SOAP_FMAC3 tt__Time * SOAP_FMAC4 soap_in_tt__Time(struct soap*, const char*, tt__Time *, const char*);
SOAP_FMAC1 tt__Time * SOAP_FMAC2 soap_instantiate_tt__Time(struct soap*, int, const char*, const char*, size_t*);

inline tt__Time * soap_new_tt__Time(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Time(soap, n, NULL, NULL, NULL);
}

inline tt__Time * soap_new_req_tt__Time(
	struct soap *soap,
	int Hour,
	int Minute,
	int Second)
{
	tt__Time *_p = ::soap_new_tt__Time(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Time::Hour = Hour;
		_p->tt__Time::Minute = Minute;
		_p->tt__Time::Second = Second;
	}
	return _p;
}

inline tt__Time * soap_new_set_tt__Time(
	struct soap *soap,
	int Hour,
	int Minute,
	int Second)
{
	tt__Time *_p = ::soap_new_tt__Time(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Time::Hour = Hour;
		_p->tt__Time::Minute = Minute;
		_p->tt__Time::Second = Second;
	}
	return _p;
}

inline int soap_write_tt__Time(struct soap *soap, tt__Time const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Time", p->soap_type() == SOAP_TYPE_tt__Time ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Time(struct soap *soap, const char *URL, tt__Time const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Time", p->soap_type() == SOAP_TYPE_tt__Time ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Time(struct soap *soap, const char *URL, tt__Time const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Time", p->soap_type() == SOAP_TYPE_tt__Time ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Time(struct soap *soap, const char *URL, tt__Time const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Time", p->soap_type() == SOAP_TYPE_tt__Time ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Time * SOAP_FMAC4 soap_get_tt__Time(struct soap*, tt__Time *, const char*, const char*);

inline int soap_read_tt__Time(struct soap *soap, tt__Time *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Time(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Time(struct soap *soap, const char *URL, tt__Time *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Time(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Time(struct soap *soap, tt__Time *p)
{
	if (::soap_read_tt__Time(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Date_DEFINED
#define SOAP_TYPE_tt__Date_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Date(struct soap*, const char*, int, const tt__Date *, const char*);
SOAP_FMAC3 tt__Date * SOAP_FMAC4 soap_in_tt__Date(struct soap*, const char*, tt__Date *, const char*);
SOAP_FMAC1 tt__Date * SOAP_FMAC2 soap_instantiate_tt__Date(struct soap*, int, const char*, const char*, size_t*);

inline tt__Date * soap_new_tt__Date(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Date(soap, n, NULL, NULL, NULL);
}

inline tt__Date * soap_new_req_tt__Date(
	struct soap *soap,
	int Year,
	int Month,
	int Day)
{
	tt__Date *_p = ::soap_new_tt__Date(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Date::Year = Year;
		_p->tt__Date::Month = Month;
		_p->tt__Date::Day = Day;
	}
	return _p;
}

inline tt__Date * soap_new_set_tt__Date(
	struct soap *soap,
	int Year,
	int Month,
	int Day)
{
	tt__Date *_p = ::soap_new_tt__Date(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Date::Year = Year;
		_p->tt__Date::Month = Month;
		_p->tt__Date::Day = Day;
	}
	return _p;
}

inline int soap_write_tt__Date(struct soap *soap, tt__Date const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Date", p->soap_type() == SOAP_TYPE_tt__Date ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Date(struct soap *soap, const char *URL, tt__Date const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Date", p->soap_type() == SOAP_TYPE_tt__Date ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Date(struct soap *soap, const char *URL, tt__Date const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Date", p->soap_type() == SOAP_TYPE_tt__Date ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Date(struct soap *soap, const char *URL, tt__Date const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Date", p->soap_type() == SOAP_TYPE_tt__Date ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Date * SOAP_FMAC4 soap_get_tt__Date(struct soap*, tt__Date *, const char*, const char*);

inline int soap_read_tt__Date(struct soap *soap, tt__Date *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Date(struct soap *soap, const char *URL, tt__Date *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Date(struct soap *soap, tt__Date *p)
{
	if (::soap_read_tt__Date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DateTime_DEFINED
#define SOAP_TYPE_tt__DateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DateTime(struct soap*, const char*, int, const tt__DateTime *, const char*);
SOAP_FMAC3 tt__DateTime * SOAP_FMAC4 soap_in_tt__DateTime(struct soap*, const char*, tt__DateTime *, const char*);
SOAP_FMAC1 tt__DateTime * SOAP_FMAC2 soap_instantiate_tt__DateTime(struct soap*, int, const char*, const char*, size_t*);

inline tt__DateTime * soap_new_tt__DateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DateTime(soap, n, NULL, NULL, NULL);
}

inline tt__DateTime * soap_new_req_tt__DateTime(
	struct soap *soap,
	tt__Time *Time,
	tt__Date *Date)
{
	tt__DateTime *_p = ::soap_new_tt__DateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTime::Time = Time;
		_p->tt__DateTime::Date = Date;
	}
	return _p;
}

inline tt__DateTime * soap_new_set_tt__DateTime(
	struct soap *soap,
	tt__Time *Time,
	tt__Date *Date)
{
	tt__DateTime *_p = ::soap_new_tt__DateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DateTime::Time = Time;
		_p->tt__DateTime::Date = Date;
	}
	return _p;
}

inline int soap_write_tt__DateTime(struct soap *soap, tt__DateTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTime", p->soap_type() == SOAP_TYPE_tt__DateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DateTime(struct soap *soap, const char *URL, tt__DateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTime", p->soap_type() == SOAP_TYPE_tt__DateTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DateTime(struct soap *soap, const char *URL, tt__DateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTime", p->soap_type() == SOAP_TYPE_tt__DateTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DateTime(struct soap *soap, const char *URL, tt__DateTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DateTime", p->soap_type() == SOAP_TYPE_tt__DateTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DateTime * SOAP_FMAC4 soap_get_tt__DateTime(struct soap*, tt__DateTime *, const char*, const char*);

inline int soap_read_tt__DateTime(struct soap *soap, tt__DateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DateTime(struct soap *soap, const char *URL, tt__DateTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DateTime(struct soap *soap, tt__DateTime *p)
{
	if (::soap_read_tt__DateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemDateTimeExtension_DEFINED
#define SOAP_TYPE_tt__SystemDateTimeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemDateTimeExtension(struct soap*, const char*, int, const tt__SystemDateTimeExtension *, const char*);
SOAP_FMAC3 tt__SystemDateTimeExtension * SOAP_FMAC4 soap_in_tt__SystemDateTimeExtension(struct soap*, const char*, tt__SystemDateTimeExtension *, const char*);
SOAP_FMAC1 tt__SystemDateTimeExtension * SOAP_FMAC2 soap_instantiate_tt__SystemDateTimeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemDateTimeExtension * soap_new_tt__SystemDateTimeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemDateTimeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SystemDateTimeExtension * soap_new_req_tt__SystemDateTimeExtension(
	struct soap *soap)
{
	tt__SystemDateTimeExtension *_p = ::soap_new_tt__SystemDateTimeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemDateTimeExtension * soap_new_set_tt__SystemDateTimeExtension(
	struct soap *soap)
{
	tt__SystemDateTimeExtension *_p = ::soap_new_tt__SystemDateTimeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__SystemDateTimeExtension(struct soap *soap, tt__SystemDateTimeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTimeExtension", p->soap_type() == SOAP_TYPE_tt__SystemDateTimeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemDateTimeExtension(struct soap *soap, const char *URL, tt__SystemDateTimeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTimeExtension", p->soap_type() == SOAP_TYPE_tt__SystemDateTimeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemDateTimeExtension(struct soap *soap, const char *URL, tt__SystemDateTimeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTimeExtension", p->soap_type() == SOAP_TYPE_tt__SystemDateTimeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemDateTimeExtension(struct soap *soap, const char *URL, tt__SystemDateTimeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTimeExtension", p->soap_type() == SOAP_TYPE_tt__SystemDateTimeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemDateTimeExtension * SOAP_FMAC4 soap_get_tt__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *, const char*, const char*);

inline int soap_read_tt__SystemDateTimeExtension(struct soap *soap, tt__SystemDateTimeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemDateTimeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemDateTimeExtension(struct soap *soap, const char *URL, tt__SystemDateTimeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemDateTimeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemDateTimeExtension(struct soap *soap, tt__SystemDateTimeExtension *p)
{
	if (::soap_read_tt__SystemDateTimeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemDateTime_DEFINED
#define SOAP_TYPE_tt__SystemDateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemDateTime(struct soap*, const char*, int, const tt__SystemDateTime *, const char*);
SOAP_FMAC3 tt__SystemDateTime * SOAP_FMAC4 soap_in_tt__SystemDateTime(struct soap*, const char*, tt__SystemDateTime *, const char*);
SOAP_FMAC1 tt__SystemDateTime * SOAP_FMAC2 soap_instantiate_tt__SystemDateTime(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemDateTime * soap_new_tt__SystemDateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemDateTime(soap, n, NULL, NULL, NULL);
}

inline tt__SystemDateTime * soap_new_req_tt__SystemDateTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings)
{
	tt__SystemDateTime *_p = ::soap_new_tt__SystemDateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemDateTime::DateTimeType = DateTimeType;
		_p->tt__SystemDateTime::DaylightSavings = DaylightSavings;
	}
	return _p;
}

inline tt__SystemDateTime * soap_new_set_tt__SystemDateTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings,
	tt__TimeZone *TimeZone,
	tt__DateTime *UTCDateTime,
	tt__DateTime *LocalDateTime,
	tt__SystemDateTimeExtension *Extension)
{
	tt__SystemDateTime *_p = ::soap_new_tt__SystemDateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemDateTime::DateTimeType = DateTimeType;
		_p->tt__SystemDateTime::DaylightSavings = DaylightSavings;
		_p->tt__SystemDateTime::TimeZone = TimeZone;
		_p->tt__SystemDateTime::UTCDateTime = UTCDateTime;
		_p->tt__SystemDateTime::LocalDateTime = LocalDateTime;
		_p->tt__SystemDateTime::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__SystemDateTime(struct soap *soap, tt__SystemDateTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTime", p->soap_type() == SOAP_TYPE_tt__SystemDateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemDateTime(struct soap *soap, const char *URL, tt__SystemDateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTime", p->soap_type() == SOAP_TYPE_tt__SystemDateTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemDateTime(struct soap *soap, const char *URL, tt__SystemDateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTime", p->soap_type() == SOAP_TYPE_tt__SystemDateTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemDateTime(struct soap *soap, const char *URL, tt__SystemDateTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemDateTime", p->soap_type() == SOAP_TYPE_tt__SystemDateTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemDateTime * SOAP_FMAC4 soap_get_tt__SystemDateTime(struct soap*, tt__SystemDateTime *, const char*, const char*);

inline int soap_read_tt__SystemDateTime(struct soap *soap, tt__SystemDateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemDateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemDateTime(struct soap *soap, const char *URL, tt__SystemDateTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemDateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemDateTime(struct soap *soap, tt__SystemDateTime *p)
{
	if (::soap_read_tt__SystemDateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemLogUri_DEFINED
#define SOAP_TYPE_tt__SystemLogUri_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogUri(struct soap*, const char*, int, const tt__SystemLogUri *, const char*);
SOAP_FMAC3 tt__SystemLogUri * SOAP_FMAC4 soap_in_tt__SystemLogUri(struct soap*, const char*, tt__SystemLogUri *, const char*);
SOAP_FMAC1 tt__SystemLogUri * SOAP_FMAC2 soap_instantiate_tt__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogUri * soap_new_tt__SystemLogUri(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemLogUri(soap, n, NULL, NULL, NULL);
}

inline tt__SystemLogUri * soap_new_req_tt__SystemLogUri(
	struct soap *soap,
	enum tt__SystemLogType Type,
	const std::string& Uri)
{
	tt__SystemLogUri *_p = ::soap_new_tt__SystemLogUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogUri::Type = Type;
		_p->tt__SystemLogUri::Uri = Uri;
	}
	return _p;
}

inline tt__SystemLogUri * soap_new_set_tt__SystemLogUri(
	struct soap *soap,
	enum tt__SystemLogType Type,
	const std::string& Uri)
{
	tt__SystemLogUri *_p = ::soap_new_tt__SystemLogUri(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogUri::Type = Type;
		_p->tt__SystemLogUri::Uri = Uri;
	}
	return _p;
}

inline int soap_write_tt__SystemLogUri(struct soap *soap, tt__SystemLogUri const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUri", p->soap_type() == SOAP_TYPE_tt__SystemLogUri ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemLogUri(struct soap *soap, const char *URL, tt__SystemLogUri const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUri", p->soap_type() == SOAP_TYPE_tt__SystemLogUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemLogUri(struct soap *soap, const char *URL, tt__SystemLogUri const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUri", p->soap_type() == SOAP_TYPE_tt__SystemLogUri ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemLogUri(struct soap *soap, const char *URL, tt__SystemLogUri const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUri", p->soap_type() == SOAP_TYPE_tt__SystemLogUri ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemLogUri * SOAP_FMAC4 soap_get_tt__SystemLogUri(struct soap*, tt__SystemLogUri *, const char*, const char*);

inline int soap_read_tt__SystemLogUri(struct soap *soap, tt__SystemLogUri *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemLogUri(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemLogUri(struct soap *soap, const char *URL, tt__SystemLogUri *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemLogUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemLogUri(struct soap *soap, tt__SystemLogUri *p)
{
	if (::soap_read_tt__SystemLogUri(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemLogUriList_DEFINED
#define SOAP_TYPE_tt__SystemLogUriList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogUriList(struct soap*, const char*, int, const tt__SystemLogUriList *, const char*);
SOAP_FMAC3 tt__SystemLogUriList * SOAP_FMAC4 soap_in_tt__SystemLogUriList(struct soap*, const char*, tt__SystemLogUriList *, const char*);
SOAP_FMAC1 tt__SystemLogUriList * SOAP_FMAC2 soap_instantiate_tt__SystemLogUriList(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogUriList * soap_new_tt__SystemLogUriList(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemLogUriList(soap, n, NULL, NULL, NULL);
}

inline tt__SystemLogUriList * soap_new_req_tt__SystemLogUriList(
	struct soap *soap)
{
	tt__SystemLogUriList *_p = ::soap_new_tt__SystemLogUriList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemLogUriList * soap_new_set_tt__SystemLogUriList(
	struct soap *soap,
	const std::vector<tt__SystemLogUri *> & SystemLog)
{
	tt__SystemLogUriList *_p = ::soap_new_tt__SystemLogUriList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLogUriList::SystemLog = SystemLog;
	}
	return _p;
}

inline int soap_write_tt__SystemLogUriList(struct soap *soap, tt__SystemLogUriList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUriList", p->soap_type() == SOAP_TYPE_tt__SystemLogUriList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemLogUriList(struct soap *soap, const char *URL, tt__SystemLogUriList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUriList", p->soap_type() == SOAP_TYPE_tt__SystemLogUriList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemLogUriList(struct soap *soap, const char *URL, tt__SystemLogUriList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUriList", p->soap_type() == SOAP_TYPE_tt__SystemLogUriList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemLogUriList(struct soap *soap, const char *URL, tt__SystemLogUriList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLogUriList", p->soap_type() == SOAP_TYPE_tt__SystemLogUriList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemLogUriList * SOAP_FMAC4 soap_get_tt__SystemLogUriList(struct soap*, tt__SystemLogUriList *, const char*, const char*);

inline int soap_read_tt__SystemLogUriList(struct soap *soap, tt__SystemLogUriList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemLogUriList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemLogUriList(struct soap *soap, const char *URL, tt__SystemLogUriList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemLogUriList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemLogUriList(struct soap *soap, tt__SystemLogUriList *p)
{
	if (::soap_read_tt__SystemLogUriList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__BackupFile_DEFINED
#define SOAP_TYPE_tt__BackupFile_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BackupFile(struct soap*, const char*, int, const tt__BackupFile *, const char*);
SOAP_FMAC3 tt__BackupFile * SOAP_FMAC4 soap_in_tt__BackupFile(struct soap*, const char*, tt__BackupFile *, const char*);
SOAP_FMAC1 tt__BackupFile * SOAP_FMAC2 soap_instantiate_tt__BackupFile(struct soap*, int, const char*, const char*, size_t*);

inline tt__BackupFile * soap_new_tt__BackupFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BackupFile(soap, n, NULL, NULL, NULL);
}

inline tt__BackupFile * soap_new_req_tt__BackupFile(
	struct soap *soap,
	const std::string& Name,
	tt__AttachmentData *Data)
{
	tt__BackupFile *_p = ::soap_new_tt__BackupFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BackupFile::Name = Name;
		_p->tt__BackupFile::Data = Data;
	}
	return _p;
}

inline tt__BackupFile * soap_new_set_tt__BackupFile(
	struct soap *soap,
	const std::string& Name,
	tt__AttachmentData *Data)
{
	tt__BackupFile *_p = ::soap_new_tt__BackupFile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BackupFile::Name = Name;
		_p->tt__BackupFile::Data = Data;
	}
	return _p;
}

inline int soap_write_tt__BackupFile(struct soap *soap, tt__BackupFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BackupFile", p->soap_type() == SOAP_TYPE_tt__BackupFile ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__BackupFile(struct soap *soap, const char *URL, tt__BackupFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BackupFile", p->soap_type() == SOAP_TYPE_tt__BackupFile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__BackupFile(struct soap *soap, const char *URL, tt__BackupFile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BackupFile", p->soap_type() == SOAP_TYPE_tt__BackupFile ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__BackupFile(struct soap *soap, const char *URL, tt__BackupFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BackupFile", p->soap_type() == SOAP_TYPE_tt__BackupFile ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__BackupFile * SOAP_FMAC4 soap_get_tt__BackupFile(struct soap*, tt__BackupFile *, const char*, const char*);

inline int soap_read_tt__BackupFile(struct soap *soap, tt__BackupFile *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__BackupFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__BackupFile(struct soap *soap, const char *URL, tt__BackupFile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__BackupFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__BackupFile(struct soap *soap, tt__BackupFile *p)
{
	if (::soap_read_tt__BackupFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AttachmentData_DEFINED
#define SOAP_TYPE_tt__AttachmentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AttachmentData(struct soap*, const char*, int, const tt__AttachmentData *, const char*);
SOAP_FMAC3 tt__AttachmentData * SOAP_FMAC4 soap_in_tt__AttachmentData(struct soap*, const char*, tt__AttachmentData *, const char*);
SOAP_FMAC1 tt__AttachmentData * SOAP_FMAC2 soap_instantiate_tt__AttachmentData(struct soap*, int, const char*, const char*, size_t*);

inline tt__AttachmentData * soap_new_tt__AttachmentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AttachmentData(soap, n, NULL, NULL, NULL);
}

inline tt__AttachmentData * soap_new_req_tt__AttachmentData(
	struct soap *soap,
	const struct _xop__Include& xop__Include)
{
	tt__AttachmentData *_p = ::soap_new_tt__AttachmentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AttachmentData::xop__Include = xop__Include;
	}
	return _p;
}

inline tt__AttachmentData * soap_new_set_tt__AttachmentData(
	struct soap *soap,
	const struct _xop__Include& xop__Include,
	char *xmime__contentType)
{
	tt__AttachmentData *_p = ::soap_new_tt__AttachmentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AttachmentData::xop__Include = xop__Include;
		_p->tt__AttachmentData::xmime__contentType = xmime__contentType;
	}
	return _p;
}

inline int soap_write_tt__AttachmentData(struct soap *soap, tt__AttachmentData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AttachmentData", p->soap_type() == SOAP_TYPE_tt__AttachmentData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AttachmentData(struct soap *soap, const char *URL, tt__AttachmentData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AttachmentData", p->soap_type() == SOAP_TYPE_tt__AttachmentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AttachmentData(struct soap *soap, const char *URL, tt__AttachmentData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AttachmentData", p->soap_type() == SOAP_TYPE_tt__AttachmentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AttachmentData(struct soap *soap, const char *URL, tt__AttachmentData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AttachmentData", p->soap_type() == SOAP_TYPE_tt__AttachmentData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AttachmentData * SOAP_FMAC4 soap_get_tt__AttachmentData(struct soap*, tt__AttachmentData *, const char*, const char*);

inline int soap_read_tt__AttachmentData(struct soap *soap, tt__AttachmentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AttachmentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AttachmentData(struct soap *soap, const char *URL, tt__AttachmentData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AttachmentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AttachmentData(struct soap *soap, tt__AttachmentData *p)
{
	if (::soap_read_tt__AttachmentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__BinaryData_DEFINED
#define SOAP_TYPE_tt__BinaryData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BinaryData(struct soap*, const char*, int, const tt__BinaryData *, const char*);
SOAP_FMAC3 tt__BinaryData * SOAP_FMAC4 soap_in_tt__BinaryData(struct soap*, const char*, tt__BinaryData *, const char*);
SOAP_FMAC1 tt__BinaryData * SOAP_FMAC2 soap_instantiate_tt__BinaryData(struct soap*, int, const char*, const char*, size_t*);

inline tt__BinaryData * soap_new_tt__BinaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__BinaryData(soap, n, NULL, NULL, NULL);
}

inline tt__BinaryData * soap_new_req_tt__BinaryData(
	struct soap *soap,
	const xsd__base64Binary& Data)
{
	tt__BinaryData *_p = ::soap_new_tt__BinaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BinaryData::Data = Data;
	}
	return _p;
}

inline tt__BinaryData * soap_new_set_tt__BinaryData(
	struct soap *soap,
	const xsd__base64Binary& Data,
	char *xmime__contentType)
{
	tt__BinaryData *_p = ::soap_new_tt__BinaryData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__BinaryData::Data = Data;
		_p->tt__BinaryData::xmime__contentType = xmime__contentType;
	}
	return _p;
}

inline int soap_write_tt__BinaryData(struct soap *soap, tt__BinaryData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BinaryData", p->soap_type() == SOAP_TYPE_tt__BinaryData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__BinaryData(struct soap *soap, const char *URL, tt__BinaryData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BinaryData", p->soap_type() == SOAP_TYPE_tt__BinaryData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__BinaryData(struct soap *soap, const char *URL, tt__BinaryData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BinaryData", p->soap_type() == SOAP_TYPE_tt__BinaryData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__BinaryData(struct soap *soap, const char *URL, tt__BinaryData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:BinaryData", p->soap_type() == SOAP_TYPE_tt__BinaryData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__BinaryData * SOAP_FMAC4 soap_get_tt__BinaryData(struct soap*, tt__BinaryData *, const char*, const char*);

inline int soap_read_tt__BinaryData(struct soap *soap, tt__BinaryData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__BinaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__BinaryData(struct soap *soap, const char *URL, tt__BinaryData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__BinaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__BinaryData(struct soap *soap, tt__BinaryData *p)
{
	if (::soap_read_tt__BinaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SupportInformation_DEFINED
#define SOAP_TYPE_tt__SupportInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportInformation(struct soap*, const char*, int, const tt__SupportInformation *, const char*);
SOAP_FMAC3 tt__SupportInformation * SOAP_FMAC4 soap_in_tt__SupportInformation(struct soap*, const char*, tt__SupportInformation *, const char*);
SOAP_FMAC1 tt__SupportInformation * SOAP_FMAC2 soap_instantiate_tt__SupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportInformation * soap_new_tt__SupportInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SupportInformation(soap, n, NULL, NULL, NULL);
}

inline tt__SupportInformation * soap_new_req_tt__SupportInformation(
	struct soap *soap)
{
	tt__SupportInformation *_p = ::soap_new_tt__SupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SupportInformation * soap_new_set_tt__SupportInformation(
	struct soap *soap,
	tt__AttachmentData *Binary,
	std::string *String)
{
	tt__SupportInformation *_p = ::soap_new_tt__SupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SupportInformation::Binary = Binary;
		_p->tt__SupportInformation::String = String;
	}
	return _p;
}

inline int soap_write_tt__SupportInformation(struct soap *soap, tt__SupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportInformation", p->soap_type() == SOAP_TYPE_tt__SupportInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SupportInformation(struct soap *soap, const char *URL, tt__SupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportInformation", p->soap_type() == SOAP_TYPE_tt__SupportInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SupportInformation(struct soap *soap, const char *URL, tt__SupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportInformation", p->soap_type() == SOAP_TYPE_tt__SupportInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SupportInformation(struct soap *soap, const char *URL, tt__SupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SupportInformation", p->soap_type() == SOAP_TYPE_tt__SupportInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SupportInformation * SOAP_FMAC4 soap_get_tt__SupportInformation(struct soap*, tt__SupportInformation *, const char*, const char*);

inline int soap_read_tt__SupportInformation(struct soap *soap, tt__SupportInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SupportInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SupportInformation(struct soap *soap, const char *URL, tt__SupportInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SupportInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SupportInformation(struct soap *soap, tt__SupportInformation *p)
{
	if (::soap_read_tt__SupportInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemLog_DEFINED
#define SOAP_TYPE_tt__SystemLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLog(struct soap*, const char*, int, const tt__SystemLog *, const char*);
SOAP_FMAC3 tt__SystemLog * SOAP_FMAC4 soap_in_tt__SystemLog(struct soap*, const char*, tt__SystemLog *, const char*);
SOAP_FMAC1 tt__SystemLog * SOAP_FMAC2 soap_instantiate_tt__SystemLog(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLog * soap_new_tt__SystemLog(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemLog(soap, n, NULL, NULL, NULL);
}

inline tt__SystemLog * soap_new_req_tt__SystemLog(
	struct soap *soap)
{
	tt__SystemLog *_p = ::soap_new_tt__SystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemLog * soap_new_set_tt__SystemLog(
	struct soap *soap,
	tt__AttachmentData *Binary,
	std::string *String)
{
	tt__SystemLog *_p = ::soap_new_tt__SystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemLog::Binary = Binary;
		_p->tt__SystemLog::String = String;
	}
	return _p;
}

inline int soap_write_tt__SystemLog(struct soap *soap, tt__SystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLog", p->soap_type() == SOAP_TYPE_tt__SystemLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemLog(struct soap *soap, const char *URL, tt__SystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLog", p->soap_type() == SOAP_TYPE_tt__SystemLog ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemLog(struct soap *soap, const char *URL, tt__SystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLog", p->soap_type() == SOAP_TYPE_tt__SystemLog ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemLog(struct soap *soap, const char *URL, tt__SystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemLog", p->soap_type() == SOAP_TYPE_tt__SystemLog ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemLog * SOAP_FMAC4 soap_get_tt__SystemLog(struct soap*, tt__SystemLog *, const char*, const char*);

inline int soap_read_tt__SystemLog(struct soap *soap, tt__SystemLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemLog(struct soap *soap, const char *URL, tt__SystemLog *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemLog(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemLog(struct soap *soap, tt__SystemLog *p)
{
	if (::soap_read_tt__SystemLog(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension_DEFINED
#define SOAP_TYPE_tt__AnalyticsDeviceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceExtension(struct soap*, const char*, int, const tt__AnalyticsDeviceExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceExtension * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceExtension(struct soap*, const char*, tt__AnalyticsDeviceExtension *, const char*);
SOAP_FMAC1 tt__AnalyticsDeviceExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceExtension * soap_new_tt__AnalyticsDeviceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsDeviceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsDeviceExtension * soap_new_req_tt__AnalyticsDeviceExtension(
	struct soap *soap)
{
	tt__AnalyticsDeviceExtension *_p = ::soap_new_tt__AnalyticsDeviceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__AnalyticsDeviceExtension * soap_new_set_tt__AnalyticsDeviceExtension(
	struct soap *soap)
{
	tt__AnalyticsDeviceExtension *_p = ::soap_new_tt__AnalyticsDeviceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__AnalyticsDeviceExtension(struct soap *soap, tt__AnalyticsDeviceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AnalyticsDeviceExtension(struct soap *soap, const char *URL, tt__AnalyticsDeviceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AnalyticsDeviceExtension(struct soap *soap, const char *URL, tt__AnalyticsDeviceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AnalyticsDeviceExtension(struct soap *soap, const char *URL, tt__AnalyticsDeviceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceExtension", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsDeviceExtension * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *, const char*, const char*);

inline int soap_read_tt__AnalyticsDeviceExtension(struct soap *soap, tt__AnalyticsDeviceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AnalyticsDeviceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AnalyticsDeviceExtension(struct soap *soap, const char *URL, tt__AnalyticsDeviceExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AnalyticsDeviceExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AnalyticsDeviceExtension(struct soap *soap, tt__AnalyticsDeviceExtension *p)
{
	if (::soap_read_tt__AnalyticsDeviceExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities_DEFINED
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceCapabilities(struct soap*, const char*, int, const tt__AnalyticsDeviceCapabilities *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceCapabilities(struct soap*, const char*, tt__AnalyticsDeviceCapabilities *, const char*);
SOAP_FMAC1 tt__AnalyticsDeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceCapabilities * soap_new_tt__AnalyticsDeviceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsDeviceCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsDeviceCapabilities * soap_new_req_tt__AnalyticsDeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__AnalyticsDeviceCapabilities *_p = ::soap_new_tt__AnalyticsDeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__AnalyticsDeviceCapabilities * soap_new_set_tt__AnalyticsDeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool *RuleSupport,
	tt__AnalyticsDeviceExtension *Extension)
{
	tt__AnalyticsDeviceCapabilities *_p = ::soap_new_tt__AnalyticsDeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsDeviceCapabilities::XAddr = XAddr;
		_p->tt__AnalyticsDeviceCapabilities::RuleSupport = RuleSupport;
		_p->tt__AnalyticsDeviceCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsDeviceCapabilities(struct soap *soap, tt__AnalyticsDeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AnalyticsDeviceCapabilities(struct soap *soap, const char *URL, tt__AnalyticsDeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AnalyticsDeviceCapabilities(struct soap *soap, const char *URL, tt__AnalyticsDeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AnalyticsDeviceCapabilities(struct soap *soap, const char *URL, tt__AnalyticsDeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsDeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsDeviceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *, const char*, const char*);

inline int soap_read_tt__AnalyticsDeviceCapabilities(struct soap *soap, tt__AnalyticsDeviceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AnalyticsDeviceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AnalyticsDeviceCapabilities(struct soap *soap, const char *URL, tt__AnalyticsDeviceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AnalyticsDeviceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AnalyticsDeviceCapabilities(struct soap *soap, tt__AnalyticsDeviceCapabilities *p)
{
	if (::soap_read_tt__AnalyticsDeviceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReceiverCapabilities_DEFINED
#define SOAP_TYPE_tt__ReceiverCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverCapabilities(struct soap*, const char*, int, const tt__ReceiverCapabilities *, const char*);
SOAP_FMAC3 tt__ReceiverCapabilities * SOAP_FMAC4 soap_in_tt__ReceiverCapabilities(struct soap*, const char*, tt__ReceiverCapabilities *, const char*);
SOAP_FMAC1 tt__ReceiverCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReceiverCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverCapabilities * soap_new_tt__ReceiverCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReceiverCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ReceiverCapabilities * soap_new_req_tt__ReceiverCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RTP_USCOREMulticast,
	bool RTP_USCORETCP,
	bool RTP_USCORERTSP_USCORETCP,
	int SupportedReceivers,
	int MaximumRTSPURILength)
{
	tt__ReceiverCapabilities *_p = ::soap_new_tt__ReceiverCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverCapabilities::XAddr = XAddr;
		_p->tt__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast;
		_p->tt__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->tt__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->tt__ReceiverCapabilities::SupportedReceivers = SupportedReceivers;
		_p->tt__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength;
	}
	return _p;
}

inline tt__ReceiverCapabilities * soap_new_set_tt__ReceiverCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RTP_USCOREMulticast,
	bool RTP_USCORETCP,
	bool RTP_USCORERTSP_USCORETCP,
	int SupportedReceivers,
	int MaximumRTSPURILength)
{
	tt__ReceiverCapabilities *_p = ::soap_new_tt__ReceiverCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReceiverCapabilities::XAddr = XAddr;
		_p->tt__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast;
		_p->tt__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->tt__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->tt__ReceiverCapabilities::SupportedReceivers = SupportedReceivers;
		_p->tt__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength;
	}
	return _p;
}

inline int soap_write_tt__ReceiverCapabilities(struct soap *soap, tt__ReceiverCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverCapabilities", p->soap_type() == SOAP_TYPE_tt__ReceiverCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReceiverCapabilities(struct soap *soap, const char *URL, tt__ReceiverCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverCapabilities", p->soap_type() == SOAP_TYPE_tt__ReceiverCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReceiverCapabilities(struct soap *soap, const char *URL, tt__ReceiverCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverCapabilities", p->soap_type() == SOAP_TYPE_tt__ReceiverCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReceiverCapabilities(struct soap *soap, const char *URL, tt__ReceiverCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReceiverCapabilities", p->soap_type() == SOAP_TYPE_tt__ReceiverCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReceiverCapabilities * SOAP_FMAC4 soap_get_tt__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *, const char*, const char*);

inline int soap_read_tt__ReceiverCapabilities(struct soap *soap, tt__ReceiverCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReceiverCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReceiverCapabilities(struct soap *soap, const char *URL, tt__ReceiverCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReceiverCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReceiverCapabilities(struct soap *soap, tt__ReceiverCapabilities *p)
{
	if (::soap_read_tt__ReceiverCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReplayCapabilities_DEFINED
#define SOAP_TYPE_tt__ReplayCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReplayCapabilities(struct soap*, const char*, int, const tt__ReplayCapabilities *, const char*);
SOAP_FMAC3 tt__ReplayCapabilities * SOAP_FMAC4 soap_in_tt__ReplayCapabilities(struct soap*, const char*, tt__ReplayCapabilities *, const char*);
SOAP_FMAC1 tt__ReplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReplayCapabilities * soap_new_tt__ReplayCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReplayCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ReplayCapabilities * soap_new_req_tt__ReplayCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__ReplayCapabilities *_p = ::soap_new_tt__ReplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReplayCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__ReplayCapabilities * soap_new_set_tt__ReplayCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__ReplayCapabilities *_p = ::soap_new_tt__ReplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReplayCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline int soap_write_tt__ReplayCapabilities(struct soap *soap, tt__ReplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReplayCapabilities", p->soap_type() == SOAP_TYPE_tt__ReplayCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReplayCapabilities(struct soap *soap, const char *URL, tt__ReplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReplayCapabilities", p->soap_type() == SOAP_TYPE_tt__ReplayCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReplayCapabilities(struct soap *soap, const char *URL, tt__ReplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReplayCapabilities", p->soap_type() == SOAP_TYPE_tt__ReplayCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReplayCapabilities(struct soap *soap, const char *URL, tt__ReplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReplayCapabilities", p->soap_type() == SOAP_TYPE_tt__ReplayCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReplayCapabilities * SOAP_FMAC4 soap_get_tt__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *, const char*, const char*);

inline int soap_read_tt__ReplayCapabilities(struct soap *soap, tt__ReplayCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReplayCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReplayCapabilities(struct soap *soap, const char *URL, tt__ReplayCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReplayCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReplayCapabilities(struct soap *soap, tt__ReplayCapabilities *p)
{
	if (::soap_read_tt__ReplayCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SearchCapabilities_DEFINED
#define SOAP_TYPE_tt__SearchCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchCapabilities(struct soap*, const char*, int, const tt__SearchCapabilities *, const char*);
SOAP_FMAC3 tt__SearchCapabilities * SOAP_FMAC4 soap_in_tt__SearchCapabilities(struct soap*, const char*, tt__SearchCapabilities *, const char*);
SOAP_FMAC1 tt__SearchCapabilities * SOAP_FMAC2 soap_instantiate_tt__SearchCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchCapabilities * soap_new_tt__SearchCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SearchCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__SearchCapabilities * soap_new_req_tt__SearchCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool MetadataSearch)
{
	tt__SearchCapabilities *_p = ::soap_new_tt__SearchCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchCapabilities::XAddr = XAddr;
		_p->tt__SearchCapabilities::MetadataSearch = MetadataSearch;
	}
	return _p;
}

inline tt__SearchCapabilities * soap_new_set_tt__SearchCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool MetadataSearch)
{
	tt__SearchCapabilities *_p = ::soap_new_tt__SearchCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SearchCapabilities::XAddr = XAddr;
		_p->tt__SearchCapabilities::MetadataSearch = MetadataSearch;
	}
	return _p;
}

inline int soap_write_tt__SearchCapabilities(struct soap *soap, tt__SearchCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchCapabilities", p->soap_type() == SOAP_TYPE_tt__SearchCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SearchCapabilities(struct soap *soap, const char *URL, tt__SearchCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchCapabilities", p->soap_type() == SOAP_TYPE_tt__SearchCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SearchCapabilities(struct soap *soap, const char *URL, tt__SearchCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchCapabilities", p->soap_type() == SOAP_TYPE_tt__SearchCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SearchCapabilities(struct soap *soap, const char *URL, tt__SearchCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SearchCapabilities", p->soap_type() == SOAP_TYPE_tt__SearchCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SearchCapabilities * SOAP_FMAC4 soap_get_tt__SearchCapabilities(struct soap*, tt__SearchCapabilities *, const char*, const char*);

inline int soap_read_tt__SearchCapabilities(struct soap *soap, tt__SearchCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SearchCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SearchCapabilities(struct soap *soap, const char *URL, tt__SearchCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SearchCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SearchCapabilities(struct soap *soap, tt__SearchCapabilities *p)
{
	if (::soap_read_tt__SearchCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RecordingCapabilities_DEFINED
#define SOAP_TYPE_tt__RecordingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingCapabilities(struct soap*, const char*, int, const tt__RecordingCapabilities *, const char*);
SOAP_FMAC3 tt__RecordingCapabilities * SOAP_FMAC4 soap_in_tt__RecordingCapabilities(struct soap*, const char*, tt__RecordingCapabilities *, const char*);
SOAP_FMAC1 tt__RecordingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RecordingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingCapabilities * soap_new_tt__RecordingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RecordingCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__RecordingCapabilities * soap_new_req_tt__RecordingCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool ReceiverSource,
	bool MediaProfileSource,
	bool DynamicRecordings,
	bool DynamicTracks,
	int MaxStringLength)
{
	tt__RecordingCapabilities *_p = ::soap_new_tt__RecordingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingCapabilities::XAddr = XAddr;
		_p->tt__RecordingCapabilities::ReceiverSource = ReceiverSource;
		_p->tt__RecordingCapabilities::MediaProfileSource = MediaProfileSource;
		_p->tt__RecordingCapabilities::DynamicRecordings = DynamicRecordings;
		_p->tt__RecordingCapabilities::DynamicTracks = DynamicTracks;
		_p->tt__RecordingCapabilities::MaxStringLength = MaxStringLength;
	}
	return _p;
}

inline tt__RecordingCapabilities * soap_new_set_tt__RecordingCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool ReceiverSource,
	bool MediaProfileSource,
	bool DynamicRecordings,
	bool DynamicTracks,
	int MaxStringLength)
{
	tt__RecordingCapabilities *_p = ::soap_new_tt__RecordingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RecordingCapabilities::XAddr = XAddr;
		_p->tt__RecordingCapabilities::ReceiverSource = ReceiverSource;
		_p->tt__RecordingCapabilities::MediaProfileSource = MediaProfileSource;
		_p->tt__RecordingCapabilities::DynamicRecordings = DynamicRecordings;
		_p->tt__RecordingCapabilities::DynamicTracks = DynamicTracks;
		_p->tt__RecordingCapabilities::MaxStringLength = MaxStringLength;
	}
	return _p;
}

inline int soap_write_tt__RecordingCapabilities(struct soap *soap, tt__RecordingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingCapabilities", p->soap_type() == SOAP_TYPE_tt__RecordingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RecordingCapabilities(struct soap *soap, const char *URL, tt__RecordingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingCapabilities", p->soap_type() == SOAP_TYPE_tt__RecordingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RecordingCapabilities(struct soap *soap, const char *URL, tt__RecordingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingCapabilities", p->soap_type() == SOAP_TYPE_tt__RecordingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RecordingCapabilities(struct soap *soap, const char *URL, tt__RecordingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RecordingCapabilities", p->soap_type() == SOAP_TYPE_tt__RecordingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RecordingCapabilities * SOAP_FMAC4 soap_get_tt__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *, const char*, const char*);

inline int soap_read_tt__RecordingCapabilities(struct soap *soap, tt__RecordingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RecordingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RecordingCapabilities(struct soap *soap, const char *URL, tt__RecordingCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RecordingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RecordingCapabilities(struct soap *soap, tt__RecordingCapabilities *p)
{
	if (::soap_read_tt__RecordingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DisplayCapabilities_DEFINED
#define SOAP_TYPE_tt__DisplayCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DisplayCapabilities(struct soap*, const char*, int, const tt__DisplayCapabilities *, const char*);
SOAP_FMAC3 tt__DisplayCapabilities * SOAP_FMAC4 soap_in_tt__DisplayCapabilities(struct soap*, const char*, tt__DisplayCapabilities *, const char*);
SOAP_FMAC1 tt__DisplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__DisplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DisplayCapabilities * soap_new_tt__DisplayCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DisplayCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__DisplayCapabilities * soap_new_req_tt__DisplayCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool FixedLayout)
{
	tt__DisplayCapabilities *_p = ::soap_new_tt__DisplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DisplayCapabilities::XAddr = XAddr;
		_p->tt__DisplayCapabilities::FixedLayout = FixedLayout;
	}
	return _p;
}

inline tt__DisplayCapabilities * soap_new_set_tt__DisplayCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool FixedLayout)
{
	tt__DisplayCapabilities *_p = ::soap_new_tt__DisplayCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DisplayCapabilities::XAddr = XAddr;
		_p->tt__DisplayCapabilities::FixedLayout = FixedLayout;
	}
	return _p;
}

inline int soap_write_tt__DisplayCapabilities(struct soap *soap, tt__DisplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DisplayCapabilities", p->soap_type() == SOAP_TYPE_tt__DisplayCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DisplayCapabilities(struct soap *soap, const char *URL, tt__DisplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DisplayCapabilities", p->soap_type() == SOAP_TYPE_tt__DisplayCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DisplayCapabilities(struct soap *soap, const char *URL, tt__DisplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DisplayCapabilities", p->soap_type() == SOAP_TYPE_tt__DisplayCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DisplayCapabilities(struct soap *soap, const char *URL, tt__DisplayCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DisplayCapabilities", p->soap_type() == SOAP_TYPE_tt__DisplayCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DisplayCapabilities * SOAP_FMAC4 soap_get_tt__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *, const char*, const char*);

inline int soap_read_tt__DisplayCapabilities(struct soap *soap, tt__DisplayCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DisplayCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DisplayCapabilities(struct soap *soap, const char *URL, tt__DisplayCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DisplayCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DisplayCapabilities(struct soap *soap, tt__DisplayCapabilities *p)
{
	if (::soap_read_tt__DisplayCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DeviceIOCapabilities_DEFINED
#define SOAP_TYPE_tt__DeviceIOCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceIOCapabilities(struct soap*, const char*, int, const tt__DeviceIOCapabilities *, const char*);
SOAP_FMAC3 tt__DeviceIOCapabilities * SOAP_FMAC4 soap_in_tt__DeviceIOCapabilities(struct soap*, const char*, tt__DeviceIOCapabilities *, const char*);
SOAP_FMAC1 tt__DeviceIOCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceIOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceIOCapabilities * soap_new_tt__DeviceIOCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceIOCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceIOCapabilities * soap_new_req_tt__DeviceIOCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	int VideoSources,
	int VideoOutputs,
	int AudioSources,
	int AudioOutputs,
	int RelayOutputs)
{
	tt__DeviceIOCapabilities *_p = ::soap_new_tt__DeviceIOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceIOCapabilities::XAddr = XAddr;
		_p->tt__DeviceIOCapabilities::VideoSources = VideoSources;
		_p->tt__DeviceIOCapabilities::VideoOutputs = VideoOutputs;
		_p->tt__DeviceIOCapabilities::AudioSources = AudioSources;
		_p->tt__DeviceIOCapabilities::AudioOutputs = AudioOutputs;
		_p->tt__DeviceIOCapabilities::RelayOutputs = RelayOutputs;
	}
	return _p;
}

inline tt__DeviceIOCapabilities * soap_new_set_tt__DeviceIOCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	int VideoSources,
	int VideoOutputs,
	int AudioSources,
	int AudioOutputs,
	int RelayOutputs)
{
	tt__DeviceIOCapabilities *_p = ::soap_new_tt__DeviceIOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceIOCapabilities::XAddr = XAddr;
		_p->tt__DeviceIOCapabilities::VideoSources = VideoSources;
		_p->tt__DeviceIOCapabilities::VideoOutputs = VideoOutputs;
		_p->tt__DeviceIOCapabilities::AudioSources = AudioSources;
		_p->tt__DeviceIOCapabilities::AudioOutputs = AudioOutputs;
		_p->tt__DeviceIOCapabilities::RelayOutputs = RelayOutputs;
	}
	return _p;
}

inline int soap_write_tt__DeviceIOCapabilities(struct soap *soap, tt__DeviceIOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceIOCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceIOCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DeviceIOCapabilities(struct soap *soap, const char *URL, tt__DeviceIOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceIOCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceIOCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DeviceIOCapabilities(struct soap *soap, const char *URL, tt__DeviceIOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceIOCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceIOCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DeviceIOCapabilities(struct soap *soap, const char *URL, tt__DeviceIOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceIOCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceIOCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceIOCapabilities * SOAP_FMAC4 soap_get_tt__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *, const char*, const char*);

inline int soap_read_tt__DeviceIOCapabilities(struct soap *soap, tt__DeviceIOCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DeviceIOCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DeviceIOCapabilities(struct soap *soap, const char *URL, tt__DeviceIOCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DeviceIOCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DeviceIOCapabilities(struct soap *soap, tt__DeviceIOCapabilities *p)
{
	if (::soap_read_tt__DeviceIOCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZCapabilities_DEFINED
#define SOAP_TYPE_tt__PTZCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZCapabilities(struct soap*, const char*, int, const tt__PTZCapabilities *, const char*);
SOAP_FMAC3 tt__PTZCapabilities * SOAP_FMAC4 soap_in_tt__PTZCapabilities(struct soap*, const char*, tt__PTZCapabilities *, const char*);
SOAP_FMAC1 tt__PTZCapabilities * SOAP_FMAC2 soap_instantiate_tt__PTZCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZCapabilities * soap_new_tt__PTZCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__PTZCapabilities * soap_new_req_tt__PTZCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__PTZCapabilities *_p = ::soap_new_tt__PTZCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__PTZCapabilities * soap_new_set_tt__PTZCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__PTZCapabilities *_p = ::soap_new_tt__PTZCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline int soap_write_tt__PTZCapabilities(struct soap *soap, tt__PTZCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZCapabilities", p->soap_type() == SOAP_TYPE_tt__PTZCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZCapabilities(struct soap *soap, const char *URL, tt__PTZCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZCapabilities", p->soap_type() == SOAP_TYPE_tt__PTZCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZCapabilities(struct soap *soap, const char *URL, tt__PTZCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZCapabilities", p->soap_type() == SOAP_TYPE_tt__PTZCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZCapabilities(struct soap *soap, const char *URL, tt__PTZCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZCapabilities", p->soap_type() == SOAP_TYPE_tt__PTZCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZCapabilities * SOAP_FMAC4 soap_get_tt__PTZCapabilities(struct soap*, tt__PTZCapabilities *, const char*, const char*);

inline int soap_read_tt__PTZCapabilities(struct soap *soap, tt__PTZCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZCapabilities(struct soap *soap, const char *URL, tt__PTZCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZCapabilities(struct soap *soap, tt__PTZCapabilities *p)
{
	if (::soap_read_tt__PTZCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ImagingCapabilities_DEFINED
#define SOAP_TYPE_tt__ImagingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingCapabilities(struct soap*, const char*, int, const tt__ImagingCapabilities *, const char*);
SOAP_FMAC3 tt__ImagingCapabilities * SOAP_FMAC4 soap_in_tt__ImagingCapabilities(struct soap*, const char*, tt__ImagingCapabilities *, const char*);
SOAP_FMAC1 tt__ImagingCapabilities * SOAP_FMAC2 soap_instantiate_tt__ImagingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingCapabilities * soap_new_tt__ImagingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ImagingCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ImagingCapabilities * soap_new_req_tt__ImagingCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__ImagingCapabilities *_p = ::soap_new_tt__ImagingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__ImagingCapabilities * soap_new_set_tt__ImagingCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__ImagingCapabilities *_p = ::soap_new_tt__ImagingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ImagingCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline int soap_write_tt__ImagingCapabilities(struct soap *soap, tt__ImagingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingCapabilities", p->soap_type() == SOAP_TYPE_tt__ImagingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ImagingCapabilities(struct soap *soap, const char *URL, tt__ImagingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingCapabilities", p->soap_type() == SOAP_TYPE_tt__ImagingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ImagingCapabilities(struct soap *soap, const char *URL, tt__ImagingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingCapabilities", p->soap_type() == SOAP_TYPE_tt__ImagingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ImagingCapabilities(struct soap *soap, const char *URL, tt__ImagingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ImagingCapabilities", p->soap_type() == SOAP_TYPE_tt__ImagingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ImagingCapabilities * SOAP_FMAC4 soap_get_tt__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *, const char*, const char*);

inline int soap_read_tt__ImagingCapabilities(struct soap *soap, tt__ImagingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ImagingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ImagingCapabilities(struct soap *soap, const char *URL, tt__ImagingCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ImagingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ImagingCapabilities(struct soap *soap, tt__ImagingCapabilities *p)
{
	if (::soap_read_tt__ImagingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__OnvifVersion_DEFINED
#define SOAP_TYPE_tt__OnvifVersion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OnvifVersion(struct soap*, const char*, int, const tt__OnvifVersion *, const char*);
SOAP_FMAC3 tt__OnvifVersion * SOAP_FMAC4 soap_in_tt__OnvifVersion(struct soap*, const char*, tt__OnvifVersion *, const char*);
SOAP_FMAC1 tt__OnvifVersion * SOAP_FMAC2 soap_instantiate_tt__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline tt__OnvifVersion * soap_new_tt__OnvifVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__OnvifVersion(soap, n, NULL, NULL, NULL);
}

inline tt__OnvifVersion * soap_new_req_tt__OnvifVersion(
	struct soap *soap,
	int Major,
	int Minor)
{
	tt__OnvifVersion *_p = ::soap_new_tt__OnvifVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OnvifVersion::Major = Major;
		_p->tt__OnvifVersion::Minor = Minor;
	}
	return _p;
}

inline tt__OnvifVersion * soap_new_set_tt__OnvifVersion(
	struct soap *soap,
	int Major,
	int Minor)
{
	tt__OnvifVersion *_p = ::soap_new_tt__OnvifVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__OnvifVersion::Major = Major;
		_p->tt__OnvifVersion::Minor = Minor;
	}
	return _p;
}

inline int soap_write_tt__OnvifVersion(struct soap *soap, tt__OnvifVersion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OnvifVersion", p->soap_type() == SOAP_TYPE_tt__OnvifVersion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__OnvifVersion(struct soap *soap, const char *URL, tt__OnvifVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OnvifVersion", p->soap_type() == SOAP_TYPE_tt__OnvifVersion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__OnvifVersion(struct soap *soap, const char *URL, tt__OnvifVersion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OnvifVersion", p->soap_type() == SOAP_TYPE_tt__OnvifVersion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__OnvifVersion(struct soap *soap, const char *URL, tt__OnvifVersion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:OnvifVersion", p->soap_type() == SOAP_TYPE_tt__OnvifVersion ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__OnvifVersion * SOAP_FMAC4 soap_get_tt__OnvifVersion(struct soap*, tt__OnvifVersion *, const char*, const char*);

inline int soap_read_tt__OnvifVersion(struct soap *soap, tt__OnvifVersion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__OnvifVersion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__OnvifVersion(struct soap *soap, const char *URL, tt__OnvifVersion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__OnvifVersion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__OnvifVersion(struct soap *soap, tt__OnvifVersion *p)
{
	if (::soap_read_tt__OnvifVersion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilitiesExtension2(struct soap*, const char*, int, const tt__SystemCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__SystemCapabilitiesExtension2(struct soap*, const char*, tt__SystemCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__SystemCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilitiesExtension2 * soap_new_tt__SystemCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__SystemCapabilitiesExtension2 * soap_new_req_tt__SystemCapabilitiesExtension2(
	struct soap *soap)
{
	tt__SystemCapabilitiesExtension2 *_p = ::soap_new_tt__SystemCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemCapabilitiesExtension2 * soap_new_set_tt__SystemCapabilitiesExtension2(
	struct soap *soap)
{
	tt__SystemCapabilitiesExtension2 *_p = ::soap_new_tt__SystemCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__SystemCapabilitiesExtension2(struct soap *soap, tt__SystemCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__SystemCapabilitiesExtension2(struct soap *soap, tt__SystemCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemCapabilitiesExtension2(struct soap *soap, tt__SystemCapabilitiesExtension2 *p)
{
	if (::soap_read_tt__SystemCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__SystemCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilitiesExtension(struct soap*, const char*, int, const tt__SystemCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__SystemCapabilitiesExtension(struct soap*, const char*, tt__SystemCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__SystemCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilitiesExtension * soap_new_tt__SystemCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SystemCapabilitiesExtension * soap_new_req_tt__SystemCapabilitiesExtension(
	struct soap *soap)
{
	tt__SystemCapabilitiesExtension *_p = ::soap_new_tt__SystemCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__SystemCapabilitiesExtension * soap_new_set_tt__SystemCapabilitiesExtension(
	struct soap *soap,
	bool *HttpFirmwareUpgrade,
	bool *HttpSystemBackup,
	bool *HttpSystemLogging,
	bool *HttpSupportInformation,
	tt__SystemCapabilitiesExtension2 *Extension)
{
	tt__SystemCapabilitiesExtension *_p = ::soap_new_tt__SystemCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemCapabilitiesExtension::HttpFirmwareUpgrade = HttpFirmwareUpgrade;
		_p->tt__SystemCapabilitiesExtension::HttpSystemBackup = HttpSystemBackup;
		_p->tt__SystemCapabilitiesExtension::HttpSystemLogging = HttpSystemLogging;
		_p->tt__SystemCapabilitiesExtension::HttpSupportInformation = HttpSupportInformation;
		_p->tt__SystemCapabilitiesExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__SystemCapabilitiesExtension(struct soap *soap, tt__SystemCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemCapabilitiesExtension(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemCapabilitiesExtension(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemCapabilitiesExtension(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SystemCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__SystemCapabilitiesExtension(struct soap *soap, tt__SystemCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemCapabilitiesExtension(struct soap *soap, const char *URL, tt__SystemCapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemCapabilitiesExtension(struct soap *soap, tt__SystemCapabilitiesExtension *p)
{
	if (::soap_read_tt__SystemCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilities_DEFINED
#define SOAP_TYPE_tt__SystemCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilities(struct soap*, const char*, int, const tt__SystemCapabilities *, const char*);
SOAP_FMAC3 tt__SystemCapabilities * SOAP_FMAC4 soap_in_tt__SystemCapabilities(struct soap*, const char*, tt__SystemCapabilities *, const char*);
SOAP_FMAC1 tt__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilities * soap_new_tt__SystemCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SystemCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__SystemCapabilities * soap_new_req_tt__SystemCapabilities(
	struct soap *soap,
	bool DiscoveryResolve,
	bool DiscoveryBye,
	bool RemoteDiscovery,
	bool SystemBackup,
	bool SystemLogging,
	bool FirmwareUpgrade,
	const std::vector<tt__OnvifVersion *> & SupportedVersions)
{
	tt__SystemCapabilities *_p = ::soap_new_tt__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemCapabilities::DiscoveryResolve = DiscoveryResolve;
		_p->tt__SystemCapabilities::DiscoveryBye = DiscoveryBye;
		_p->tt__SystemCapabilities::RemoteDiscovery = RemoteDiscovery;
		_p->tt__SystemCapabilities::SystemBackup = SystemBackup;
		_p->tt__SystemCapabilities::SystemLogging = SystemLogging;
		_p->tt__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade;
		_p->tt__SystemCapabilities::SupportedVersions = SupportedVersions;
	}
	return _p;
}

inline tt__SystemCapabilities * soap_new_set_tt__SystemCapabilities(
	struct soap *soap,
	bool DiscoveryResolve,
	bool DiscoveryBye,
	bool RemoteDiscovery,
	bool SystemBackup,
	bool SystemLogging,
	bool FirmwareUpgrade,
	const std::vector<tt__OnvifVersion *> & SupportedVersions,
	tt__SystemCapabilitiesExtension *Extension)
{
	tt__SystemCapabilities *_p = ::soap_new_tt__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SystemCapabilities::DiscoveryResolve = DiscoveryResolve;
		_p->tt__SystemCapabilities::DiscoveryBye = DiscoveryBye;
		_p->tt__SystemCapabilities::RemoteDiscovery = RemoteDiscovery;
		_p->tt__SystemCapabilities::SystemBackup = SystemBackup;
		_p->tt__SystemCapabilities::SystemLogging = SystemLogging;
		_p->tt__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade;
		_p->tt__SystemCapabilities::SupportedVersions = SupportedVersions;
		_p->tt__SystemCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__SystemCapabilities(struct soap *soap, tt__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilities", p->soap_type() == SOAP_TYPE_tt__SystemCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SystemCapabilities(struct soap *soap, const char *URL, tt__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilities", p->soap_type() == SOAP_TYPE_tt__SystemCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SystemCapabilities(struct soap *soap, const char *URL, tt__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilities", p->soap_type() == SOAP_TYPE_tt__SystemCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SystemCapabilities(struct soap *soap, const char *URL, tt__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SystemCapabilities", p->soap_type() == SOAP_TYPE_tt__SystemCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SystemCapabilities * SOAP_FMAC4 soap_get_tt__SystemCapabilities(struct soap*, tt__SystemCapabilities *, const char*, const char*);

inline int soap_read_tt__SystemCapabilities(struct soap *soap, tt__SystemCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SystemCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SystemCapabilities(struct soap *soap, const char *URL, tt__SystemCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SystemCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SystemCapabilities(struct soap *soap, tt__SystemCapabilities *p)
{
	if (::soap_read_tt__SystemCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilitiesExtension2(struct soap*, const char*, int, const tt__SecurityCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__SecurityCapabilitiesExtension2(struct soap*, const char*, tt__SecurityCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilitiesExtension2 * soap_new_tt__SecurityCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SecurityCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__SecurityCapabilitiesExtension2 * soap_new_req_tt__SecurityCapabilitiesExtension2(
	struct soap *soap,
	bool Dot1X,
	bool RemoteUserHandling)
{
	tt__SecurityCapabilitiesExtension2 *_p = ::soap_new_tt__SecurityCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension2::Dot1X = Dot1X;
		_p->tt__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling;
	}
	return _p;
}

inline tt__SecurityCapabilitiesExtension2 * soap_new_set_tt__SecurityCapabilitiesExtension2(
	struct soap *soap,
	bool Dot1X,
	const std::vector<int> & SupportedEAPMethod,
	bool RemoteUserHandling)
{
	tt__SecurityCapabilitiesExtension2 *_p = ::soap_new_tt__SecurityCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension2::Dot1X = Dot1X;
		_p->tt__SecurityCapabilitiesExtension2::SupportedEAPMethod = SupportedEAPMethod;
		_p->tt__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling;
	}
	return _p;
}

inline int soap_write_tt__SecurityCapabilitiesExtension2(struct soap *soap, tt__SecurityCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SecurityCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SecurityCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SecurityCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__SecurityCapabilitiesExtension2(struct soap *soap, tt__SecurityCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SecurityCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SecurityCapabilitiesExtension2(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SecurityCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SecurityCapabilitiesExtension2(struct soap *soap, tt__SecurityCapabilitiesExtension2 *p)
{
	if (::soap_read_tt__SecurityCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilitiesExtension(struct soap*, const char*, int, const tt__SecurityCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__SecurityCapabilitiesExtension(struct soap*, const char*, tt__SecurityCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__SecurityCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilitiesExtension * soap_new_tt__SecurityCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SecurityCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__SecurityCapabilitiesExtension * soap_new_req_tt__SecurityCapabilitiesExtension(
	struct soap *soap,
	bool TLS1_x002e0)
{
	tt__SecurityCapabilitiesExtension *_p = ::soap_new_tt__SecurityCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0;
	}
	return _p;
}

inline tt__SecurityCapabilitiesExtension * soap_new_set_tt__SecurityCapabilitiesExtension(
	struct soap *soap,
	bool TLS1_x002e0,
	tt__SecurityCapabilitiesExtension2 *Extension)
{
	tt__SecurityCapabilitiesExtension *_p = ::soap_new_tt__SecurityCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0;
		_p->tt__SecurityCapabilitiesExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__SecurityCapabilitiesExtension(struct soap *soap, tt__SecurityCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SecurityCapabilitiesExtension(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SecurityCapabilitiesExtension(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SecurityCapabilitiesExtension(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__SecurityCapabilitiesExtension(struct soap *soap, tt__SecurityCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SecurityCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SecurityCapabilitiesExtension(struct soap *soap, const char *URL, tt__SecurityCapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SecurityCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SecurityCapabilitiesExtension(struct soap *soap, tt__SecurityCapabilitiesExtension *p)
{
	if (::soap_read_tt__SecurityCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilities_DEFINED
#define SOAP_TYPE_tt__SecurityCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilities(struct soap*, const char*, int, const tt__SecurityCapabilities *, const char*);
SOAP_FMAC3 tt__SecurityCapabilities * SOAP_FMAC4 soap_in_tt__SecurityCapabilities(struct soap*, const char*, tt__SecurityCapabilities *, const char*);
SOAP_FMAC1 tt__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilities * soap_new_tt__SecurityCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__SecurityCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__SecurityCapabilities * soap_new_req_tt__SecurityCapabilities(
	struct soap *soap,
	bool TLS1_x002e1,
	bool TLS1_x002e2,
	bool OnboardKeyGeneration,
	bool AccessPolicyConfig,
	bool X_x002e509Token,
	bool SAMLToken,
	bool KerberosToken,
	bool RELToken)
{
	tt__SecurityCapabilities *_p = ::soap_new_tt__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1;
		_p->tt__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2;
		_p->tt__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration;
		_p->tt__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig;
		_p->tt__SecurityCapabilities::X_x002e509Token = X_x002e509Token;
		_p->tt__SecurityCapabilities::SAMLToken = SAMLToken;
		_p->tt__SecurityCapabilities::KerberosToken = KerberosToken;
		_p->tt__SecurityCapabilities::RELToken = RELToken;
	}
	return _p;
}

inline tt__SecurityCapabilities * soap_new_set_tt__SecurityCapabilities(
	struct soap *soap,
	bool TLS1_x002e1,
	bool TLS1_x002e2,
	bool OnboardKeyGeneration,
	bool AccessPolicyConfig,
	bool X_x002e509Token,
	bool SAMLToken,
	bool KerberosToken,
	bool RELToken,
	tt__SecurityCapabilitiesExtension *Extension)
{
	tt__SecurityCapabilities *_p = ::soap_new_tt__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1;
		_p->tt__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2;
		_p->tt__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration;
		_p->tt__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig;
		_p->tt__SecurityCapabilities::X_x002e509Token = X_x002e509Token;
		_p->tt__SecurityCapabilities::SAMLToken = SAMLToken;
		_p->tt__SecurityCapabilities::KerberosToken = KerberosToken;
		_p->tt__SecurityCapabilities::RELToken = RELToken;
		_p->tt__SecurityCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__SecurityCapabilities(struct soap *soap, tt__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__SecurityCapabilities(struct soap *soap, const char *URL, tt__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__SecurityCapabilities(struct soap *soap, const char *URL, tt__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__SecurityCapabilities(struct soap *soap, const char *URL, tt__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tt__SecurityCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__SecurityCapabilities * SOAP_FMAC4 soap_get_tt__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *, const char*, const char*);

inline int soap_read_tt__SecurityCapabilities(struct soap *soap, tt__SecurityCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__SecurityCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__SecurityCapabilities(struct soap *soap, const char *URL, tt__SecurityCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__SecurityCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__SecurityCapabilities(struct soap *soap, tt__SecurityCapabilities *p)
{
	if (::soap_read_tt__SecurityCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilitiesExtension2(struct soap*, const char*, int, const tt__NetworkCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__NetworkCapabilitiesExtension2(struct soap*, const char*, tt__NetworkCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilitiesExtension2 * soap_new_tt__NetworkCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkCapabilitiesExtension2 * soap_new_req_tt__NetworkCapabilitiesExtension2(
	struct soap *soap)
{
	tt__NetworkCapabilitiesExtension2 *_p = ::soap_new_tt__NetworkCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkCapabilitiesExtension2 * soap_new_set_tt__NetworkCapabilitiesExtension2(
	struct soap *soap)
{
	tt__NetworkCapabilitiesExtension2 *_p = ::soap_new_tt__NetworkCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__NetworkCapabilitiesExtension2(struct soap *soap, tt__NetworkCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkCapabilitiesExtension2(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkCapabilitiesExtension2(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkCapabilitiesExtension2(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkCapabilitiesExtension2(struct soap *soap, tt__NetworkCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkCapabilitiesExtension2(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkCapabilitiesExtension2(struct soap *soap, tt__NetworkCapabilitiesExtension2 *p)
{
	if (::soap_read_tt__NetworkCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilitiesExtension(struct soap*, const char*, int, const tt__NetworkCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__NetworkCapabilitiesExtension(struct soap*, const char*, tt__NetworkCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__NetworkCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilitiesExtension * soap_new_tt__NetworkCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkCapabilitiesExtension * soap_new_req_tt__NetworkCapabilitiesExtension(
	struct soap *soap)
{
	tt__NetworkCapabilitiesExtension *_p = ::soap_new_tt__NetworkCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkCapabilitiesExtension * soap_new_set_tt__NetworkCapabilitiesExtension(
	struct soap *soap,
	bool *Dot11Configuration,
	tt__NetworkCapabilitiesExtension2 *Extension)
{
	tt__NetworkCapabilitiesExtension *_p = ::soap_new_tt__NetworkCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkCapabilitiesExtension::Dot11Configuration = Dot11Configuration;
		_p->tt__NetworkCapabilitiesExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkCapabilitiesExtension(struct soap *soap, tt__NetworkCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkCapabilitiesExtension(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkCapabilitiesExtension(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkCapabilitiesExtension(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__NetworkCapabilitiesExtension(struct soap *soap, tt__NetworkCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkCapabilitiesExtension(struct soap *soap, const char *URL, tt__NetworkCapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkCapabilitiesExtension(struct soap *soap, tt__NetworkCapabilitiesExtension *p)
{
	if (::soap_read_tt__NetworkCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilities_DEFINED
#define SOAP_TYPE_tt__NetworkCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilities(struct soap*, const char*, int, const tt__NetworkCapabilities *, const char*);
SOAP_FMAC3 tt__NetworkCapabilities * SOAP_FMAC4 soap_in_tt__NetworkCapabilities(struct soap*, const char*, tt__NetworkCapabilities *, const char*);
SOAP_FMAC1 tt__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilities * soap_new_tt__NetworkCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkCapabilities * soap_new_req_tt__NetworkCapabilities(
	struct soap *soap)
{
	tt__NetworkCapabilities *_p = ::soap_new_tt__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkCapabilities * soap_new_set_tt__NetworkCapabilities(
	struct soap *soap,
	bool *IPFilter,
	bool *ZeroConfiguration,
	bool *IPVersion6,
	bool *DynDNS,
	tt__NetworkCapabilitiesExtension *Extension)
{
	tt__NetworkCapabilities *_p = ::soap_new_tt__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkCapabilities::IPFilter = IPFilter;
		_p->tt__NetworkCapabilities::ZeroConfiguration = ZeroConfiguration;
		_p->tt__NetworkCapabilities::IPVersion6 = IPVersion6;
		_p->tt__NetworkCapabilities::DynDNS = DynDNS;
		_p->tt__NetworkCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkCapabilities(struct soap *soap, tt__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkCapabilities(struct soap *soap, const char *URL, tt__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkCapabilities(struct soap *soap, const char *URL, tt__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkCapabilities(struct soap *soap, const char *URL, tt__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tt__NetworkCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkCapabilities * SOAP_FMAC4 soap_get_tt__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *, const char*, const char*);

inline int soap_read_tt__NetworkCapabilities(struct soap *soap, tt__NetworkCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkCapabilities(struct soap *soap, const char *URL, tt__NetworkCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkCapabilities(struct soap *soap, tt__NetworkCapabilities *p)
{
	if (::soap_read_tt__NetworkCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ProfileCapabilities_DEFINED
#define SOAP_TYPE_tt__ProfileCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileCapabilities(struct soap*, const char*, int, const tt__ProfileCapabilities *, const char*);
SOAP_FMAC3 tt__ProfileCapabilities * SOAP_FMAC4 soap_in_tt__ProfileCapabilities(struct soap*, const char*, tt__ProfileCapabilities *, const char*);
SOAP_FMAC1 tt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_tt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileCapabilities * soap_new_tt__ProfileCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ProfileCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__ProfileCapabilities * soap_new_req_tt__ProfileCapabilities(
	struct soap *soap,
	int MaximumNumberOfProfiles)
{
	tt__ProfileCapabilities *_p = ::soap_new_tt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles;
	}
	return _p;
}

inline tt__ProfileCapabilities * soap_new_set_tt__ProfileCapabilities(
	struct soap *soap,
	int MaximumNumberOfProfiles)
{
	tt__ProfileCapabilities *_p = ::soap_new_tt__ProfileCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles;
	}
	return _p;
}

inline int soap_write_tt__ProfileCapabilities(struct soap *soap, tt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_tt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ProfileCapabilities(struct soap *soap, const char *URL, tt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_tt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ProfileCapabilities(struct soap *soap, const char *URL, tt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_tt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ProfileCapabilities(struct soap *soap, const char *URL, tt__ProfileCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ProfileCapabilities", p->soap_type() == SOAP_TYPE_tt__ProfileCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ProfileCapabilities * SOAP_FMAC4 soap_get_tt__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *, const char*, const char*);

inline int soap_read_tt__ProfileCapabilities(struct soap *soap, tt__ProfileCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ProfileCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ProfileCapabilities(struct soap *soap, const char *URL, tt__ProfileCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ProfileCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ProfileCapabilities(struct soap *soap, tt__ProfileCapabilities *p)
{
	if (::soap_read_tt__ProfileCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, int, const tt__RealTimeStreamingCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, tt__RealTimeStreamingCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_req_tt__RealTimeStreamingCapabilitiesExtension(
	struct soap *soap)
{
	tt__RealTimeStreamingCapabilitiesExtension *_p = ::soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_set_tt__RealTimeStreamingCapabilitiesExtension(
	struct soap *soap)
{
	tt__RealTimeStreamingCapabilitiesExtension *_p = ::soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, tt__RealTimeStreamingCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, tt__RealTimeStreamingCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RealTimeStreamingCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RealTimeStreamingCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, tt__RealTimeStreamingCapabilitiesExtension *p)
{
	if (::soap_read_tt__RealTimeStreamingCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities_DEFINED
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RealTimeStreamingCapabilities(struct soap*, const char*, int, const tt__RealTimeStreamingCapabilities *, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_in_tt__RealTimeStreamingCapabilities(struct soap*, const char*, tt__RealTimeStreamingCapabilities *, const char*);
SOAP_FMAC1 tt__RealTimeStreamingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__RealTimeStreamingCapabilities * soap_new_tt__RealTimeStreamingCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__RealTimeStreamingCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__RealTimeStreamingCapabilities * soap_new_req_tt__RealTimeStreamingCapabilities(
	struct soap *soap)
{
	tt__RealTimeStreamingCapabilities *_p = ::soap_new_tt__RealTimeStreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__RealTimeStreamingCapabilities * soap_new_set_tt__RealTimeStreamingCapabilities(
	struct soap *soap,
	bool *RTPMulticast,
	bool *RTP_USCORETCP,
	bool *RTP_USCORERTSP_USCORETCP,
	tt__RealTimeStreamingCapabilitiesExtension *Extension)
{
	tt__RealTimeStreamingCapabilities *_p = ::soap_new_tt__RealTimeStreamingCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__RealTimeStreamingCapabilities::RTPMulticast = RTPMulticast;
		_p->tt__RealTimeStreamingCapabilities::RTP_USCORETCP = RTP_USCORETCP;
		_p->tt__RealTimeStreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP;
		_p->tt__RealTimeStreamingCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__RealTimeStreamingCapabilities(struct soap *soap, tt__RealTimeStreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilities", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__RealTimeStreamingCapabilities(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilities", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__RealTimeStreamingCapabilities(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilities", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__RealTimeStreamingCapabilities(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:RealTimeStreamingCapabilities", p->soap_type() == SOAP_TYPE_tt__RealTimeStreamingCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_get_tt__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *, const char*, const char*);

inline int soap_read_tt__RealTimeStreamingCapabilities(struct soap *soap, tt__RealTimeStreamingCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__RealTimeStreamingCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__RealTimeStreamingCapabilities(struct soap *soap, const char *URL, tt__RealTimeStreamingCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__RealTimeStreamingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__RealTimeStreamingCapabilities(struct soap *soap, tt__RealTimeStreamingCapabilities *p)
{
	if (::soap_read_tt__RealTimeStreamingCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__MediaCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaCapabilitiesExtension(struct soap*, const char*, int, const tt__MediaCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__MediaCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__MediaCapabilitiesExtension(struct soap*, const char*, tt__MediaCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__MediaCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaCapabilitiesExtension * soap_new_tt__MediaCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MediaCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__MediaCapabilitiesExtension * soap_new_req_tt__MediaCapabilitiesExtension(
	struct soap *soap,
	tt__ProfileCapabilities *ProfileCapabilities)
{
	tt__MediaCapabilitiesExtension *_p = ::soap_new_tt__MediaCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities;
	}
	return _p;
}

inline tt__MediaCapabilitiesExtension * soap_new_set_tt__MediaCapabilitiesExtension(
	struct soap *soap,
	tt__ProfileCapabilities *ProfileCapabilities)
{
	tt__MediaCapabilitiesExtension *_p = ::soap_new_tt__MediaCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities;
	}
	return _p;
}

inline int soap_write_tt__MediaCapabilitiesExtension(struct soap *soap, tt__MediaCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__MediaCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MediaCapabilitiesExtension(struct soap *soap, const char *URL, tt__MediaCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__MediaCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MediaCapabilitiesExtension(struct soap *soap, const char *URL, tt__MediaCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__MediaCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MediaCapabilitiesExtension(struct soap *soap, const char *URL, tt__MediaCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__MediaCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MediaCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__MediaCapabilitiesExtension(struct soap *soap, tt__MediaCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MediaCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MediaCapabilitiesExtension(struct soap *soap, const char *URL, tt__MediaCapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MediaCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MediaCapabilitiesExtension(struct soap *soap, tt__MediaCapabilitiesExtension *p)
{
	if (::soap_read_tt__MediaCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilities_DEFINED
#define SOAP_TYPE_tt__MediaCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaCapabilities(struct soap*, const char*, int, const tt__MediaCapabilities *, const char*);
SOAP_FMAC3 tt__MediaCapabilities * SOAP_FMAC4 soap_in_tt__MediaCapabilities(struct soap*, const char*, tt__MediaCapabilities *, const char*);
SOAP_FMAC1 tt__MediaCapabilities * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaCapabilities * soap_new_tt__MediaCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__MediaCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__MediaCapabilities * soap_new_req_tt__MediaCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	tt__RealTimeStreamingCapabilities *StreamingCapabilities)
{
	tt__MediaCapabilities *_p = ::soap_new_tt__MediaCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilities::XAddr = XAddr;
		_p->tt__MediaCapabilities::StreamingCapabilities = StreamingCapabilities;
	}
	return _p;
}

inline tt__MediaCapabilities * soap_new_set_tt__MediaCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	tt__RealTimeStreamingCapabilities *StreamingCapabilities,
	tt__MediaCapabilitiesExtension *Extension)
{
	tt__MediaCapabilities *_p = ::soap_new_tt__MediaCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__MediaCapabilities::XAddr = XAddr;
		_p->tt__MediaCapabilities::StreamingCapabilities = StreamingCapabilities;
		_p->tt__MediaCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__MediaCapabilities(struct soap *soap, tt__MediaCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilities", p->soap_type() == SOAP_TYPE_tt__MediaCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__MediaCapabilities(struct soap *soap, const char *URL, tt__MediaCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilities", p->soap_type() == SOAP_TYPE_tt__MediaCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MediaCapabilities(struct soap *soap, const char *URL, tt__MediaCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilities", p->soap_type() == SOAP_TYPE_tt__MediaCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MediaCapabilities(struct soap *soap, const char *URL, tt__MediaCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:MediaCapabilities", p->soap_type() == SOAP_TYPE_tt__MediaCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__MediaCapabilities * SOAP_FMAC4 soap_get_tt__MediaCapabilities(struct soap*, tt__MediaCapabilities *, const char*, const char*);

inline int soap_read_tt__MediaCapabilities(struct soap *soap, tt__MediaCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__MediaCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MediaCapabilities(struct soap *soap, const char *URL, tt__MediaCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MediaCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MediaCapabilities(struct soap *soap, tt__MediaCapabilities *p)
{
	if (::soap_read_tt__MediaCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__IOCapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilitiesExtension2(struct soap*, const char*, int, const tt__IOCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__IOCapabilitiesExtension2(struct soap*, const char*, tt__IOCapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__IOCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilitiesExtension2 * soap_new_tt__IOCapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IOCapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__IOCapabilitiesExtension2 * soap_new_req_tt__IOCapabilitiesExtension2(
	struct soap *soap)
{
	tt__IOCapabilitiesExtension2 *_p = ::soap_new_tt__IOCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IOCapabilitiesExtension2 * soap_new_set_tt__IOCapabilitiesExtension2(
	struct soap *soap)
{
	tt__IOCapabilitiesExtension2 *_p = ::soap_new_tt__IOCapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__IOCapabilitiesExtension2(struct soap *soap, tt__IOCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IOCapabilitiesExtension2(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IOCapabilitiesExtension2(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IOCapabilitiesExtension2(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__IOCapabilitiesExtension2(struct soap *soap, tt__IOCapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IOCapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IOCapabilitiesExtension2(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IOCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IOCapabilitiesExtension2(struct soap *soap, tt__IOCapabilitiesExtension2 *p)
{
	if (::soap_read_tt__IOCapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__IOCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilitiesExtension(struct soap*, const char*, int, const tt__IOCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__IOCapabilitiesExtension(struct soap*, const char*, tt__IOCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__IOCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilitiesExtension * soap_new_tt__IOCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IOCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IOCapabilitiesExtension * soap_new_req_tt__IOCapabilitiesExtension(
	struct soap *soap,
	tt__IOCapabilitiesExtension2 *Extension)
{
	tt__IOCapabilitiesExtension *_p = ::soap_new_tt__IOCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IOCapabilitiesExtension::Extension = Extension;
	}
	return _p;
}

inline tt__IOCapabilitiesExtension * soap_new_set_tt__IOCapabilitiesExtension(
	struct soap *soap,
	bool *Auxiliary,
	const std::vector<std::string> & AuxiliaryCommands,
	tt__IOCapabilitiesExtension2 *Extension)
{
	tt__IOCapabilitiesExtension *_p = ::soap_new_tt__IOCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IOCapabilitiesExtension::Auxiliary = Auxiliary;
		_p->tt__IOCapabilitiesExtension::AuxiliaryCommands = AuxiliaryCommands;
		_p->tt__IOCapabilitiesExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__IOCapabilitiesExtension(struct soap *soap, tt__IOCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IOCapabilitiesExtension(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IOCapabilitiesExtension(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IOCapabilitiesExtension(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__IOCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IOCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__IOCapabilitiesExtension(struct soap *soap, tt__IOCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IOCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IOCapabilitiesExtension(struct soap *soap, const char *URL, tt__IOCapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IOCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IOCapabilitiesExtension(struct soap *soap, tt__IOCapabilitiesExtension *p)
{
	if (::soap_read_tt__IOCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IOCapabilities_DEFINED
#define SOAP_TYPE_tt__IOCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilities(struct soap*, const char*, int, const tt__IOCapabilities *, const char*);
SOAP_FMAC3 tt__IOCapabilities * SOAP_FMAC4 soap_in_tt__IOCapabilities(struct soap*, const char*, tt__IOCapabilities *, const char*);
SOAP_FMAC1 tt__IOCapabilities * SOAP_FMAC2 soap_instantiate_tt__IOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilities * soap_new_tt__IOCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IOCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__IOCapabilities * soap_new_req_tt__IOCapabilities(
	struct soap *soap)
{
	tt__IOCapabilities *_p = ::soap_new_tt__IOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IOCapabilities * soap_new_set_tt__IOCapabilities(
	struct soap *soap,
	int *InputConnectors,
	int *RelayOutputs,
	tt__IOCapabilitiesExtension *Extension)
{
	tt__IOCapabilities *_p = ::soap_new_tt__IOCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IOCapabilities::InputConnectors = InputConnectors;
		_p->tt__IOCapabilities::RelayOutputs = RelayOutputs;
		_p->tt__IOCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__IOCapabilities(struct soap *soap, tt__IOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilities", p->soap_type() == SOAP_TYPE_tt__IOCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IOCapabilities(struct soap *soap, const char *URL, tt__IOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilities", p->soap_type() == SOAP_TYPE_tt__IOCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IOCapabilities(struct soap *soap, const char *URL, tt__IOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilities", p->soap_type() == SOAP_TYPE_tt__IOCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IOCapabilities(struct soap *soap, const char *URL, tt__IOCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IOCapabilities", p->soap_type() == SOAP_TYPE_tt__IOCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IOCapabilities * SOAP_FMAC4 soap_get_tt__IOCapabilities(struct soap*, tt__IOCapabilities *, const char*, const char*);

inline int soap_read_tt__IOCapabilities(struct soap *soap, tt__IOCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IOCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IOCapabilities(struct soap *soap, const char *URL, tt__IOCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IOCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IOCapabilities(struct soap *soap, tt__IOCapabilities *p)
{
	if (::soap_read_tt__IOCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EventCapabilities_DEFINED
#define SOAP_TYPE_tt__EventCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventCapabilities(struct soap*, const char*, int, const tt__EventCapabilities *, const char*);
SOAP_FMAC3 tt__EventCapabilities * SOAP_FMAC4 soap_in_tt__EventCapabilities(struct soap*, const char*, tt__EventCapabilities *, const char*);
SOAP_FMAC1 tt__EventCapabilities * SOAP_FMAC2 soap_instantiate_tt__EventCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventCapabilities * soap_new_tt__EventCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EventCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__EventCapabilities * soap_new_req_tt__EventCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool WSSubscriptionPolicySupport,
	bool WSPullPointSupport,
	bool WSPausableSubscriptionManagerInterfaceSupport)
{
	tt__EventCapabilities *_p = ::soap_new_tt__EventCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventCapabilities::XAddr = XAddr;
		_p->tt__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport;
		_p->tt__EventCapabilities::WSPullPointSupport = WSPullPointSupport;
		_p->tt__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport;
	}
	return _p;
}

inline tt__EventCapabilities * soap_new_set_tt__EventCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool WSSubscriptionPolicySupport,
	bool WSPullPointSupport,
	bool WSPausableSubscriptionManagerInterfaceSupport)
{
	tt__EventCapabilities *_p = ::soap_new_tt__EventCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EventCapabilities::XAddr = XAddr;
		_p->tt__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport;
		_p->tt__EventCapabilities::WSPullPointSupport = WSPullPointSupport;
		_p->tt__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport;
	}
	return _p;
}

inline int soap_write_tt__EventCapabilities(struct soap *soap, tt__EventCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventCapabilities", p->soap_type() == SOAP_TYPE_tt__EventCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EventCapabilities(struct soap *soap, const char *URL, tt__EventCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventCapabilities", p->soap_type() == SOAP_TYPE_tt__EventCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EventCapabilities(struct soap *soap, const char *URL, tt__EventCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventCapabilities", p->soap_type() == SOAP_TYPE_tt__EventCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EventCapabilities(struct soap *soap, const char *URL, tt__EventCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EventCapabilities", p->soap_type() == SOAP_TYPE_tt__EventCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EventCapabilities * SOAP_FMAC4 soap_get_tt__EventCapabilities(struct soap*, tt__EventCapabilities *, const char*, const char*);

inline int soap_read_tt__EventCapabilities(struct soap *soap, tt__EventCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EventCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EventCapabilities(struct soap *soap, const char *URL, tt__EventCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EventCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EventCapabilities(struct soap *soap, tt__EventCapabilities *p)
{
	if (::soap_read_tt__EventCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceCapabilitiesExtension(struct soap*, const char*, int, const tt__DeviceCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__DeviceCapabilitiesExtension(struct soap*, const char*, tt__DeviceCapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__DeviceCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceCapabilitiesExtension * soap_new_tt__DeviceCapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceCapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceCapabilitiesExtension * soap_new_req_tt__DeviceCapabilitiesExtension(
	struct soap *soap)
{
	tt__DeviceCapabilitiesExtension *_p = ::soap_new_tt__DeviceCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DeviceCapabilitiesExtension * soap_new_set_tt__DeviceCapabilitiesExtension(
	struct soap *soap)
{
	tt__DeviceCapabilitiesExtension *_p = ::soap_new_tt__DeviceCapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__DeviceCapabilitiesExtension(struct soap *soap, tt__DeviceCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DeviceCapabilitiesExtension(struct soap *soap, const char *URL, tt__DeviceCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DeviceCapabilitiesExtension(struct soap *soap, const char *URL, tt__DeviceCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DeviceCapabilitiesExtension(struct soap *soap, const char *URL, tt__DeviceCapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__DeviceCapabilitiesExtension(struct soap *soap, tt__DeviceCapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DeviceCapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DeviceCapabilitiesExtension(struct soap *soap, const char *URL, tt__DeviceCapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DeviceCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DeviceCapabilitiesExtension(struct soap *soap, tt__DeviceCapabilitiesExtension *p)
{
	if (::soap_read_tt__DeviceCapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilities_DEFINED
#define SOAP_TYPE_tt__DeviceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceCapabilities(struct soap*, const char*, int, const tt__DeviceCapabilities *, const char*);
SOAP_FMAC3 tt__DeviceCapabilities * SOAP_FMAC4 soap_in_tt__DeviceCapabilities(struct soap*, const char*, tt__DeviceCapabilities *, const char*);
SOAP_FMAC1 tt__DeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceCapabilities * soap_new_tt__DeviceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceCapabilities * soap_new_req_tt__DeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr)
{
	tt__DeviceCapabilities *_p = ::soap_new_tt__DeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceCapabilities::XAddr = XAddr;
	}
	return _p;
}

inline tt__DeviceCapabilities * soap_new_set_tt__DeviceCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	tt__NetworkCapabilities *Network,
	tt__SystemCapabilities *System,
	tt__IOCapabilities *IO,
	tt__SecurityCapabilities *Security,
	tt__DeviceCapabilitiesExtension *Extension)
{
	tt__DeviceCapabilities *_p = ::soap_new_tt__DeviceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceCapabilities::XAddr = XAddr;
		_p->tt__DeviceCapabilities::Network = Network;
		_p->tt__DeviceCapabilities::System = System;
		_p->tt__DeviceCapabilities::IO = IO;
		_p->tt__DeviceCapabilities::Security = Security;
		_p->tt__DeviceCapabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__DeviceCapabilities(struct soap *soap, tt__DeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DeviceCapabilities(struct soap *soap, const char *URL, tt__DeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DeviceCapabilities(struct soap *soap, const char *URL, tt__DeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DeviceCapabilities(struct soap *soap, const char *URL, tt__DeviceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceCapabilities", p->soap_type() == SOAP_TYPE_tt__DeviceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceCapabilities * SOAP_FMAC4 soap_get_tt__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *, const char*, const char*);

inline int soap_read_tt__DeviceCapabilities(struct soap *soap, tt__DeviceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DeviceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DeviceCapabilities(struct soap *soap, const char *URL, tt__DeviceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DeviceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DeviceCapabilities(struct soap *soap, tt__DeviceCapabilities *p)
{
	if (::soap_read_tt__DeviceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AnalyticsCapabilities_DEFINED
#define SOAP_TYPE_tt__AnalyticsCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsCapabilities(struct soap*, const char*, int, const tt__AnalyticsCapabilities *, const char*);
SOAP_FMAC3 tt__AnalyticsCapabilities * SOAP_FMAC4 soap_in_tt__AnalyticsCapabilities(struct soap*, const char*, tt__AnalyticsCapabilities *, const char*);
SOAP_FMAC1 tt__AnalyticsCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsCapabilities * soap_new_tt__AnalyticsCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__AnalyticsCapabilities(soap, n, NULL, NULL, NULL);
}

inline tt__AnalyticsCapabilities * soap_new_req_tt__AnalyticsCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RuleSupport,
	bool AnalyticsModuleSupport)
{
	tt__AnalyticsCapabilities *_p = ::soap_new_tt__AnalyticsCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsCapabilities::XAddr = XAddr;
		_p->tt__AnalyticsCapabilities::RuleSupport = RuleSupport;
		_p->tt__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport;
	}
	return _p;
}

inline tt__AnalyticsCapabilities * soap_new_set_tt__AnalyticsCapabilities(
	struct soap *soap,
	const std::string& XAddr,
	bool RuleSupport,
	bool AnalyticsModuleSupport)
{
	tt__AnalyticsCapabilities *_p = ::soap_new_tt__AnalyticsCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__AnalyticsCapabilities::XAddr = XAddr;
		_p->tt__AnalyticsCapabilities::RuleSupport = RuleSupport;
		_p->tt__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport;
	}
	return _p;
}

inline int soap_write_tt__AnalyticsCapabilities(struct soap *soap, tt__AnalyticsCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__AnalyticsCapabilities(struct soap *soap, const char *URL, tt__AnalyticsCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AnalyticsCapabilities(struct soap *soap, const char *URL, tt__AnalyticsCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AnalyticsCapabilities(struct soap *soap, const char *URL, tt__AnalyticsCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:AnalyticsCapabilities", p->soap_type() == SOAP_TYPE_tt__AnalyticsCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__AnalyticsCapabilities * SOAP_FMAC4 soap_get_tt__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *, const char*, const char*);

inline int soap_read_tt__AnalyticsCapabilities(struct soap *soap, tt__AnalyticsCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__AnalyticsCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AnalyticsCapabilities(struct soap *soap, const char *URL, tt__AnalyticsCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AnalyticsCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AnalyticsCapabilities(struct soap *soap, tt__AnalyticsCapabilities *p)
{
	if (::soap_read_tt__AnalyticsCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension2_DEFINED
#define SOAP_TYPE_tt__CapabilitiesExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilitiesExtension2(struct soap*, const char*, int, const tt__CapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__CapabilitiesExtension2(struct soap*, const char*, tt__CapabilitiesExtension2 *, const char*);
SOAP_FMAC1 tt__CapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilitiesExtension2 * soap_new_tt__CapabilitiesExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CapabilitiesExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__CapabilitiesExtension2 * soap_new_req_tt__CapabilitiesExtension2(
	struct soap *soap)
{
	tt__CapabilitiesExtension2 *_p = ::soap_new_tt__CapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CapabilitiesExtension2 * soap_new_set_tt__CapabilitiesExtension2(
	struct soap *soap)
{
	tt__CapabilitiesExtension2 *_p = ::soap_new_tt__CapabilitiesExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__CapabilitiesExtension2(struct soap *soap, tt__CapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__CapabilitiesExtension2(struct soap *soap, const char *URL, tt__CapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CapabilitiesExtension2(struct soap *soap, const char *URL, tt__CapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CapabilitiesExtension2(struct soap *soap, const char *URL, tt__CapabilitiesExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension2", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__CapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *, const char*, const char*);

inline int soap_read_tt__CapabilitiesExtension2(struct soap *soap, tt__CapabilitiesExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__CapabilitiesExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CapabilitiesExtension2(struct soap *soap, const char *URL, tt__CapabilitiesExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CapabilitiesExtension2(struct soap *soap, tt__CapabilitiesExtension2 *p)
{
	if (::soap_read_tt__CapabilitiesExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension_DEFINED
#define SOAP_TYPE_tt__CapabilitiesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilitiesExtension(struct soap*, const char*, int, const tt__CapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension * SOAP_FMAC4 soap_in_tt__CapabilitiesExtension(struct soap*, const char*, tt__CapabilitiesExtension *, const char*);
SOAP_FMAC1 tt__CapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilitiesExtension * soap_new_tt__CapabilitiesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__CapabilitiesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__CapabilitiesExtension * soap_new_req_tt__CapabilitiesExtension(
	struct soap *soap)
{
	tt__CapabilitiesExtension *_p = ::soap_new_tt__CapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__CapabilitiesExtension * soap_new_set_tt__CapabilitiesExtension(
	struct soap *soap,
	tt__DeviceIOCapabilities *DeviceIO,
	tt__DisplayCapabilities *Display,
	tt__RecordingCapabilities *Recording,
	tt__SearchCapabilities *Search,
	tt__ReplayCapabilities *Replay,
	tt__ReceiverCapabilities *Receiver,
	tt__AnalyticsDeviceCapabilities *AnalyticsDevice,
	tt__CapabilitiesExtension2 *Extensions)
{
	tt__CapabilitiesExtension *_p = ::soap_new_tt__CapabilitiesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__CapabilitiesExtension::DeviceIO = DeviceIO;
		_p->tt__CapabilitiesExtension::Display = Display;
		_p->tt__CapabilitiesExtension::Recording = Recording;
		_p->tt__CapabilitiesExtension::Search = Search;
		_p->tt__CapabilitiesExtension::Replay = Replay;
		_p->tt__CapabilitiesExtension::Receiver = Receiver;
		_p->tt__CapabilitiesExtension::AnalyticsDevice = AnalyticsDevice;
		_p->tt__CapabilitiesExtension::Extensions = Extensions;
	}
	return _p;
}

inline int soap_write_tt__CapabilitiesExtension(struct soap *soap, tt__CapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__CapabilitiesExtension(struct soap *soap, const char *URL, tt__CapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__CapabilitiesExtension(struct soap *soap, const char *URL, tt__CapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__CapabilitiesExtension(struct soap *soap, const char *URL, tt__CapabilitiesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:CapabilitiesExtension", p->soap_type() == SOAP_TYPE_tt__CapabilitiesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__CapabilitiesExtension * SOAP_FMAC4 soap_get_tt__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *, const char*, const char*);

inline int soap_read_tt__CapabilitiesExtension(struct soap *soap, tt__CapabilitiesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__CapabilitiesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__CapabilitiesExtension(struct soap *soap, const char *URL, tt__CapabilitiesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__CapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__CapabilitiesExtension(struct soap *soap, tt__CapabilitiesExtension *p)
{
	if (::soap_read_tt__CapabilitiesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Capabilities_DEFINED
#define SOAP_TYPE_tt__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Capabilities(struct soap*, const char*, int, const tt__Capabilities *, const char*);
SOAP_FMAC3 tt__Capabilities * SOAP_FMAC4 soap_in_tt__Capabilities(struct soap*, const char*, tt__Capabilities *, const char*);
SOAP_FMAC1 tt__Capabilities * SOAP_FMAC2 soap_instantiate_tt__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__Capabilities * soap_new_tt__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Capabilities(soap, n, NULL, NULL, NULL);
}

inline tt__Capabilities * soap_new_req_tt__Capabilities(
	struct soap *soap)
{
	tt__Capabilities *_p = ::soap_new_tt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Capabilities * soap_new_set_tt__Capabilities(
	struct soap *soap,
	tt__AnalyticsCapabilities *Analytics,
	tt__DeviceCapabilities *Device,
	tt__EventCapabilities *Events,
	tt__ImagingCapabilities *Imaging,
	tt__MediaCapabilities *Media,
	tt__PTZCapabilities *PTZ,
	tt__CapabilitiesExtension *Extension)
{
	tt__Capabilities *_p = ::soap_new_tt__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Capabilities::Analytics = Analytics;
		_p->tt__Capabilities::Device = Device;
		_p->tt__Capabilities::Events = Events;
		_p->tt__Capabilities::Imaging = Imaging;
		_p->tt__Capabilities::Media = Media;
		_p->tt__Capabilities::PTZ = PTZ;
		_p->tt__Capabilities::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__Capabilities(struct soap *soap, tt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Capabilities", p->soap_type() == SOAP_TYPE_tt__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Capabilities(struct soap *soap, const char *URL, tt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Capabilities", p->soap_type() == SOAP_TYPE_tt__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Capabilities(struct soap *soap, const char *URL, tt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Capabilities", p->soap_type() == SOAP_TYPE_tt__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Capabilities(struct soap *soap, const char *URL, tt__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Capabilities", p->soap_type() == SOAP_TYPE_tt__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Capabilities * SOAP_FMAC4 soap_get_tt__Capabilities(struct soap*, tt__Capabilities *, const char*, const char*);

inline int soap_read_tt__Capabilities(struct soap *soap, tt__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Capabilities(struct soap *soap, const char *URL, tt__Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Capabilities(struct soap *soap, tt__Capabilities *p)
{
	if (::soap_read_tt__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension_DEFINED
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AvailableNetworksExtension(struct soap*, const char*, int, const tt__Dot11AvailableNetworksExtension *, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_in_tt__Dot11AvailableNetworksExtension(struct soap*, const char*, tt__Dot11AvailableNetworksExtension *, const char*);
SOAP_FMAC1 tt__Dot11AvailableNetworksExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworksExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AvailableNetworksExtension * soap_new_tt__Dot11AvailableNetworksExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11AvailableNetworksExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11AvailableNetworksExtension * soap_new_req_tt__Dot11AvailableNetworksExtension(
	struct soap *soap)
{
	tt__Dot11AvailableNetworksExtension *_p = ::soap_new_tt__Dot11AvailableNetworksExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11AvailableNetworksExtension * soap_new_set_tt__Dot11AvailableNetworksExtension(
	struct soap *soap)
{
	tt__Dot11AvailableNetworksExtension *_p = ::soap_new_tt__Dot11AvailableNetworksExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__Dot11AvailableNetworksExtension(struct soap *soap, tt__Dot11AvailableNetworksExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworksExtension", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworksExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11AvailableNetworksExtension(struct soap *soap, const char *URL, tt__Dot11AvailableNetworksExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworksExtension", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworksExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11AvailableNetworksExtension(struct soap *soap, const char *URL, tt__Dot11AvailableNetworksExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworksExtension", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworksExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11AvailableNetworksExtension(struct soap *soap, const char *URL, tt__Dot11AvailableNetworksExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworksExtension", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworksExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_get_tt__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *, const char*, const char*);

inline int soap_read_tt__Dot11AvailableNetworksExtension(struct soap *soap, tt__Dot11AvailableNetworksExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11AvailableNetworksExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11AvailableNetworksExtension(struct soap *soap, const char *URL, tt__Dot11AvailableNetworksExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11AvailableNetworksExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11AvailableNetworksExtension(struct soap *soap, tt__Dot11AvailableNetworksExtension *p)
{
	if (::soap_read_tt__Dot11AvailableNetworksExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks_DEFINED
#define SOAP_TYPE_tt__Dot11AvailableNetworks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AvailableNetworks(struct soap*, const char*, int, const tt__Dot11AvailableNetworks *, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworks * SOAP_FMAC4 soap_in_tt__Dot11AvailableNetworks(struct soap*, const char*, tt__Dot11AvailableNetworks *, const char*);
SOAP_FMAC1 tt__Dot11AvailableNetworks * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AvailableNetworks * soap_new_tt__Dot11AvailableNetworks(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11AvailableNetworks(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11AvailableNetworks * soap_new_req_tt__Dot11AvailableNetworks(
	struct soap *soap,
	const xsd__hexBinary& SSID)
{
	tt__Dot11AvailableNetworks *_p = ::soap_new_tt__Dot11AvailableNetworks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11AvailableNetworks::SSID = SSID;
	}
	return _p;
}

inline tt__Dot11AvailableNetworks * soap_new_set_tt__Dot11AvailableNetworks(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	std::string *BSSID,
	const std::vector<enum tt__Dot11AuthAndMangementSuite> & AuthAndMangementSuite,
	const std::vector<enum tt__Dot11Cipher> & PairCipher,
	const std::vector<enum tt__Dot11Cipher> & GroupCipher,
	enum tt__Dot11SignalStrength *SignalStrength,
	tt__Dot11AvailableNetworksExtension *Extension)
{
	tt__Dot11AvailableNetworks *_p = ::soap_new_tt__Dot11AvailableNetworks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11AvailableNetworks::SSID = SSID;
		_p->tt__Dot11AvailableNetworks::BSSID = BSSID;
		_p->tt__Dot11AvailableNetworks::AuthAndMangementSuite = AuthAndMangementSuite;
		_p->tt__Dot11AvailableNetworks::PairCipher = PairCipher;
		_p->tt__Dot11AvailableNetworks::GroupCipher = GroupCipher;
		_p->tt__Dot11AvailableNetworks::SignalStrength = SignalStrength;
		_p->tt__Dot11AvailableNetworks::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__Dot11AvailableNetworks(struct soap *soap, tt__Dot11AvailableNetworks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworks", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11AvailableNetworks(struct soap *soap, const char *URL, tt__Dot11AvailableNetworks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworks", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11AvailableNetworks(struct soap *soap, const char *URL, tt__Dot11AvailableNetworks const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworks", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11AvailableNetworks(struct soap *soap, const char *URL, tt__Dot11AvailableNetworks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11AvailableNetworks", p->soap_type() == SOAP_TYPE_tt__Dot11AvailableNetworks ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11AvailableNetworks * SOAP_FMAC4 soap_get_tt__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks *, const char*, const char*);

inline int soap_read_tt__Dot11AvailableNetworks(struct soap *soap, tt__Dot11AvailableNetworks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11AvailableNetworks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11AvailableNetworks(struct soap *soap, const char *URL, tt__Dot11AvailableNetworks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11AvailableNetworks(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11AvailableNetworks(struct soap *soap, tt__Dot11AvailableNetworks *p)
{
	if (::soap_read_tt__Dot11AvailableNetworks(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Status_DEFINED
#define SOAP_TYPE_tt__Dot11Status_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Status(struct soap*, const char*, int, const tt__Dot11Status *, const char*);
SOAP_FMAC3 tt__Dot11Status * SOAP_FMAC4 soap_in_tt__Dot11Status(struct soap*, const char*, tt__Dot11Status *, const char*);
SOAP_FMAC1 tt__Dot11Status * SOAP_FMAC2 soap_instantiate_tt__Dot11Status(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Status * soap_new_tt__Dot11Status(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11Status(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11Status * soap_new_req_tt__Dot11Status(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	const std::string& ActiveConfigAlias)
{
	tt__Dot11Status *_p = ::soap_new_tt__Dot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Status::SSID = SSID;
		_p->tt__Dot11Status::ActiveConfigAlias = ActiveConfigAlias;
	}
	return _p;
}

inline tt__Dot11Status * soap_new_set_tt__Dot11Status(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	std::string *BSSID,
	enum tt__Dot11Cipher *PairCipher,
	enum tt__Dot11Cipher *GroupCipher,
	enum tt__Dot11SignalStrength *SignalStrength,
	const std::string& ActiveConfigAlias)
{
	tt__Dot11Status *_p = ::soap_new_tt__Dot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Status::SSID = SSID;
		_p->tt__Dot11Status::BSSID = BSSID;
		_p->tt__Dot11Status::PairCipher = PairCipher;
		_p->tt__Dot11Status::GroupCipher = GroupCipher;
		_p->tt__Dot11Status::SignalStrength = SignalStrength;
		_p->tt__Dot11Status::ActiveConfigAlias = ActiveConfigAlias;
	}
	return _p;
}

inline int soap_write_tt__Dot11Status(struct soap *soap, tt__Dot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Status", p->soap_type() == SOAP_TYPE_tt__Dot11Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11Status(struct soap *soap, const char *URL, tt__Dot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Status", p->soap_type() == SOAP_TYPE_tt__Dot11Status ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11Status(struct soap *soap, const char *URL, tt__Dot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Status", p->soap_type() == SOAP_TYPE_tt__Dot11Status ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11Status(struct soap *soap, const char *URL, tt__Dot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Status", p->soap_type() == SOAP_TYPE_tt__Dot11Status ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11Status * SOAP_FMAC4 soap_get_tt__Dot11Status(struct soap*, tt__Dot11Status *, const char*, const char*);

inline int soap_read_tt__Dot11Status(struct soap *soap, tt__Dot11Status *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11Status(struct soap *soap, const char *URL, tt__Dot11Status *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11Status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11Status(struct soap *soap, tt__Dot11Status *p)
{
	if (::soap_read_tt__Dot11Status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Capabilities_DEFINED
#define SOAP_TYPE_tt__Dot11Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Capabilities(struct soap*, const char*, int, const tt__Dot11Capabilities *, const char*);
SOAP_FMAC3 tt__Dot11Capabilities * SOAP_FMAC4 soap_in_tt__Dot11Capabilities(struct soap*, const char*, tt__Dot11Capabilities *, const char*);
SOAP_FMAC1 tt__Dot11Capabilities * SOAP_FMAC2 soap_instantiate_tt__Dot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Capabilities * soap_new_tt__Dot11Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11Capabilities(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11Capabilities * soap_new_req_tt__Dot11Capabilities(
	struct soap *soap,
	bool TKIP,
	bool ScanAvailableNetworks,
	bool MultipleConfiguration,
	bool AdHocStationMode,
	bool WEP)
{
	tt__Dot11Capabilities *_p = ::soap_new_tt__Dot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Capabilities::TKIP = TKIP;
		_p->tt__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks;
		_p->tt__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration;
		_p->tt__Dot11Capabilities::AdHocStationMode = AdHocStationMode;
		_p->tt__Dot11Capabilities::WEP = WEP;
	}
	return _p;
}

inline tt__Dot11Capabilities * soap_new_set_tt__Dot11Capabilities(
	struct soap *soap,
	bool TKIP,
	bool ScanAvailableNetworks,
	bool MultipleConfiguration,
	bool AdHocStationMode,
	bool WEP)
{
	tt__Dot11Capabilities *_p = ::soap_new_tt__Dot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Capabilities::TKIP = TKIP;
		_p->tt__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks;
		_p->tt__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration;
		_p->tt__Dot11Capabilities::AdHocStationMode = AdHocStationMode;
		_p->tt__Dot11Capabilities::WEP = WEP;
	}
	return _p;
}

inline int soap_write_tt__Dot11Capabilities(struct soap *soap, tt__Dot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Capabilities", p->soap_type() == SOAP_TYPE_tt__Dot11Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11Capabilities(struct soap *soap, const char *URL, tt__Dot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Capabilities", p->soap_type() == SOAP_TYPE_tt__Dot11Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11Capabilities(struct soap *soap, const char *URL, tt__Dot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Capabilities", p->soap_type() == SOAP_TYPE_tt__Dot11Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11Capabilities(struct soap *soap, const char *URL, tt__Dot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Capabilities", p->soap_type() == SOAP_TYPE_tt__Dot11Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11Capabilities * SOAP_FMAC4 soap_get_tt__Dot11Capabilities(struct soap*, tt__Dot11Capabilities *, const char*, const char*);

inline int soap_read_tt__Dot11Capabilities(struct soap *soap, tt__Dot11Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11Capabilities(struct soap *soap, const char *URL, tt__Dot11Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11Capabilities(struct soap *soap, tt__Dot11Capabilities *p)
{
	if (::soap_read_tt__Dot11Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_req_tt__NetworkInterfaceSetConfigurationExtension2(
	struct soap *soap)
{
	tt__NetworkInterfaceSetConfigurationExtension2 *_p = ::soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_set_tt__NetworkInterfaceSetConfigurationExtension2(
	struct soap *soap)
{
	tt__NetworkInterfaceSetConfigurationExtension2 *_p = ::soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceSetConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceSetConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension2 *p)
{
	if (::soap_read_tt__NetworkInterfaceSetConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension_DEFINED
#define SOAP_TYPE_tt__Dot11PSKSetExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKSetExtension(struct soap*, const char*, int, const tt__Dot11PSKSetExtension *, const char*);
SOAP_FMAC3 tt__Dot11PSKSetExtension * SOAP_FMAC4 soap_in_tt__Dot11PSKSetExtension(struct soap*, const char*, tt__Dot11PSKSetExtension *, const char*);
SOAP_FMAC1 tt__Dot11PSKSetExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSetExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKSetExtension * soap_new_tt__Dot11PSKSetExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11PSKSetExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11PSKSetExtension * soap_new_req_tt__Dot11PSKSetExtension(
	struct soap *soap)
{
	tt__Dot11PSKSetExtension *_p = ::soap_new_tt__Dot11PSKSetExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11PSKSetExtension * soap_new_set_tt__Dot11PSKSetExtension(
	struct soap *soap)
{
	tt__Dot11PSKSetExtension *_p = ::soap_new_tt__Dot11PSKSetExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__Dot11PSKSetExtension(struct soap *soap, tt__Dot11PSKSetExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSetExtension", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSetExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11PSKSetExtension(struct soap *soap, const char *URL, tt__Dot11PSKSetExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSetExtension", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSetExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11PSKSetExtension(struct soap *soap, const char *URL, tt__Dot11PSKSetExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSetExtension", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSetExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11PSKSetExtension(struct soap *soap, const char *URL, tt__Dot11PSKSetExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSetExtension", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSetExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11PSKSetExtension * SOAP_FMAC4 soap_get_tt__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *, const char*, const char*);

inline int soap_read_tt__Dot11PSKSetExtension(struct soap *soap, tt__Dot11PSKSetExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11PSKSetExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11PSKSetExtension(struct soap *soap, const char *URL, tt__Dot11PSKSetExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11PSKSetExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11PSKSetExtension(struct soap *soap, tt__Dot11PSKSetExtension *p)
{
	if (::soap_read_tt__Dot11PSKSetExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSet_DEFINED
#define SOAP_TYPE_tt__Dot11PSKSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKSet(struct soap*, const char*, int, const tt__Dot11PSKSet *, const char*);
SOAP_FMAC3 tt__Dot11PSKSet * SOAP_FMAC4 soap_in_tt__Dot11PSKSet(struct soap*, const char*, tt__Dot11PSKSet *, const char*);
SOAP_FMAC1 tt__Dot11PSKSet * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSet(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKSet * soap_new_tt__Dot11PSKSet(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11PSKSet(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11PSKSet * soap_new_req_tt__Dot11PSKSet(
	struct soap *soap)
{
	tt__Dot11PSKSet *_p = ::soap_new_tt__Dot11PSKSet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11PSKSet * soap_new_set_tt__Dot11PSKSet(
	struct soap *soap,
	xsd__hexBinary *Key,
	std::string *Passphrase,
	tt__Dot11PSKSetExtension *Extension)
{
	tt__Dot11PSKSet *_p = ::soap_new_tt__Dot11PSKSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11PSKSet::Key = Key;
		_p->tt__Dot11PSKSet::Passphrase = Passphrase;
		_p->tt__Dot11PSKSet::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__Dot11PSKSet(struct soap *soap, tt__Dot11PSKSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSet", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11PSKSet(struct soap *soap, const char *URL, tt__Dot11PSKSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSet", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11PSKSet(struct soap *soap, const char *URL, tt__Dot11PSKSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSet", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11PSKSet(struct soap *soap, const char *URL, tt__Dot11PSKSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11PSKSet", p->soap_type() == SOAP_TYPE_tt__Dot11PSKSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11PSKSet * SOAP_FMAC4 soap_get_tt__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *, const char*, const char*);

inline int soap_read_tt__Dot11PSKSet(struct soap *soap, tt__Dot11PSKSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11PSKSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11PSKSet(struct soap *soap, const char *URL, tt__Dot11PSKSet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11PSKSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11PSKSet(struct soap *soap, tt__Dot11PSKSet *p)
{
	if (::soap_read_tt__Dot11PSKSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityConfigurationExtension(struct soap*, const char*, int, const tt__Dot11SecurityConfigurationExtension *, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_in_tt__Dot11SecurityConfigurationExtension(struct soap*, const char*, tt__Dot11SecurityConfigurationExtension *, const char*);
SOAP_FMAC1 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityConfigurationExtension * soap_new_tt__Dot11SecurityConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11SecurityConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11SecurityConfigurationExtension * soap_new_req_tt__Dot11SecurityConfigurationExtension(
	struct soap *soap)
{
	tt__Dot11SecurityConfigurationExtension *_p = ::soap_new_tt__Dot11SecurityConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot11SecurityConfigurationExtension * soap_new_set_tt__Dot11SecurityConfigurationExtension(
	struct soap *soap)
{
	tt__Dot11SecurityConfigurationExtension *_p = ::soap_new_tt__Dot11SecurityConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__Dot11SecurityConfigurationExtension(struct soap *soap, tt__Dot11SecurityConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11SecurityConfigurationExtension(struct soap *soap, const char *URL, tt__Dot11SecurityConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11SecurityConfigurationExtension(struct soap *soap, const char *URL, tt__Dot11SecurityConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11SecurityConfigurationExtension(struct soap *soap, const char *URL, tt__Dot11SecurityConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_get_tt__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__Dot11SecurityConfigurationExtension(struct soap *soap, tt__Dot11SecurityConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11SecurityConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11SecurityConfigurationExtension(struct soap *soap, const char *URL, tt__Dot11SecurityConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11SecurityConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11SecurityConfigurationExtension(struct soap *soap, tt__Dot11SecurityConfigurationExtension *p)
{
	if (::soap_read_tt__Dot11SecurityConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration_DEFINED
#define SOAP_TYPE_tt__Dot11SecurityConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityConfiguration(struct soap*, const char*, int, const tt__Dot11SecurityConfiguration *, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfiguration * SOAP_FMAC4 soap_in_tt__Dot11SecurityConfiguration(struct soap*, const char*, tt__Dot11SecurityConfiguration *, const char*);
SOAP_FMAC1 tt__Dot11SecurityConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityConfiguration * soap_new_tt__Dot11SecurityConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11SecurityConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11SecurityConfiguration * soap_new_req_tt__Dot11SecurityConfiguration(
	struct soap *soap,
	enum tt__Dot11SecurityMode Mode)
{
	tt__Dot11SecurityConfiguration *_p = ::soap_new_tt__Dot11SecurityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SecurityConfiguration::Mode = Mode;
	}
	return _p;
}

inline tt__Dot11SecurityConfiguration * soap_new_set_tt__Dot11SecurityConfiguration(
	struct soap *soap,
	enum tt__Dot11SecurityMode Mode,
	enum tt__Dot11Cipher *Algorithm,
	tt__Dot11PSKSet *PSK,
	std::string *Dot1X,
	tt__Dot11SecurityConfigurationExtension *Extension)
{
	tt__Dot11SecurityConfiguration *_p = ::soap_new_tt__Dot11SecurityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11SecurityConfiguration::Mode = Mode;
		_p->tt__Dot11SecurityConfiguration::Algorithm = Algorithm;
		_p->tt__Dot11SecurityConfiguration::PSK = PSK;
		_p->tt__Dot11SecurityConfiguration::Dot1X = Dot1X;
		_p->tt__Dot11SecurityConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__Dot11SecurityConfiguration(struct soap *soap, tt__Dot11SecurityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11SecurityConfiguration(struct soap *soap, const char *URL, tt__Dot11SecurityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11SecurityConfiguration(struct soap *soap, const char *URL, tt__Dot11SecurityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11SecurityConfiguration(struct soap *soap, const char *URL, tt__Dot11SecurityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11SecurityConfiguration", p->soap_type() == SOAP_TYPE_tt__Dot11SecurityConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11SecurityConfiguration * SOAP_FMAC4 soap_get_tt__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *, const char*, const char*);

inline int soap_read_tt__Dot11SecurityConfiguration(struct soap *soap, tt__Dot11SecurityConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11SecurityConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11SecurityConfiguration(struct soap *soap, const char *URL, tt__Dot11SecurityConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11SecurityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11SecurityConfiguration(struct soap *soap, tt__Dot11SecurityConfiguration *p)
{
	if (::soap_read_tt__Dot11SecurityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot11Configuration_DEFINED
#define SOAP_TYPE_tt__Dot11Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Configuration(struct soap*, const char*, int, const tt__Dot11Configuration *, const char*);
SOAP_FMAC3 tt__Dot11Configuration * SOAP_FMAC4 soap_in_tt__Dot11Configuration(struct soap*, const char*, tt__Dot11Configuration *, const char*);
SOAP_FMAC1 tt__Dot11Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Configuration * soap_new_tt__Dot11Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot11Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot11Configuration * soap_new_req_tt__Dot11Configuration(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	enum tt__Dot11StationMode Mode,
	const std::string& Alias,
	const std::string& Priority,
	tt__Dot11SecurityConfiguration *Security)
{
	tt__Dot11Configuration *_p = ::soap_new_tt__Dot11Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Configuration::SSID = SSID;
		_p->tt__Dot11Configuration::Mode = Mode;
		_p->tt__Dot11Configuration::Alias = Alias;
		_p->tt__Dot11Configuration::Priority = Priority;
		_p->tt__Dot11Configuration::Security = Security;
	}
	return _p;
}

inline tt__Dot11Configuration * soap_new_set_tt__Dot11Configuration(
	struct soap *soap,
	const xsd__hexBinary& SSID,
	enum tt__Dot11StationMode Mode,
	const std::string& Alias,
	const std::string& Priority,
	tt__Dot11SecurityConfiguration *Security)
{
	tt__Dot11Configuration *_p = ::soap_new_tt__Dot11Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Dot11Configuration::SSID = SSID;
		_p->tt__Dot11Configuration::Mode = Mode;
		_p->tt__Dot11Configuration::Alias = Alias;
		_p->tt__Dot11Configuration::Priority = Priority;
		_p->tt__Dot11Configuration::Security = Security;
	}
	return _p;
}

inline int soap_write_tt__Dot11Configuration(struct soap *soap, tt__Dot11Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Configuration", p->soap_type() == SOAP_TYPE_tt__Dot11Configuration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot11Configuration(struct soap *soap, const char *URL, tt__Dot11Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Configuration", p->soap_type() == SOAP_TYPE_tt__Dot11Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot11Configuration(struct soap *soap, const char *URL, tt__Dot11Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Configuration", p->soap_type() == SOAP_TYPE_tt__Dot11Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot11Configuration(struct soap *soap, const char *URL, tt__Dot11Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot11Configuration", p->soap_type() == SOAP_TYPE_tt__Dot11Configuration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot11Configuration * SOAP_FMAC4 soap_get_tt__Dot11Configuration(struct soap*, tt__Dot11Configuration *, const char*, const char*);

inline int soap_read_tt__Dot11Configuration(struct soap *soap, tt__Dot11Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot11Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot11Configuration(struct soap *soap, const char *URL, tt__Dot11Configuration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot11Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot11Configuration(struct soap *soap, tt__Dot11Configuration *p)
{
	if (::soap_read_tt__Dot11Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterExtension_DEFINED
#define SOAP_TYPE_tt__IPAddressFilterExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterExtension(struct soap*, const char*, int, const tt__IPAddressFilterExtension *, const char*);
SOAP_FMAC3 tt__IPAddressFilterExtension * SOAP_FMAC4 soap_in_tt__IPAddressFilterExtension(struct soap*, const char*, tt__IPAddressFilterExtension *, const char*);
SOAP_FMAC1 tt__IPAddressFilterExtension * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilterExtension * soap_new_tt__IPAddressFilterExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddressFilterExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddressFilterExtension * soap_new_req_tt__IPAddressFilterExtension(
	struct soap *soap)
{
	tt__IPAddressFilterExtension *_p = ::soap_new_tt__IPAddressFilterExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPAddressFilterExtension * soap_new_set_tt__IPAddressFilterExtension(
	struct soap *soap)
{
	tt__IPAddressFilterExtension *_p = ::soap_new_tt__IPAddressFilterExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__IPAddressFilterExtension(struct soap *soap, tt__IPAddressFilterExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilterExtension", p->soap_type() == SOAP_TYPE_tt__IPAddressFilterExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPAddressFilterExtension(struct soap *soap, const char *URL, tt__IPAddressFilterExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilterExtension", p->soap_type() == SOAP_TYPE_tt__IPAddressFilterExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPAddressFilterExtension(struct soap *soap, const char *URL, tt__IPAddressFilterExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilterExtension", p->soap_type() == SOAP_TYPE_tt__IPAddressFilterExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPAddressFilterExtension(struct soap *soap, const char *URL, tt__IPAddressFilterExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilterExtension", p->soap_type() == SOAP_TYPE_tt__IPAddressFilterExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddressFilterExtension * SOAP_FMAC4 soap_get_tt__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *, const char*, const char*);

inline int soap_read_tt__IPAddressFilterExtension(struct soap *soap, tt__IPAddressFilterExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPAddressFilterExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPAddressFilterExtension(struct soap *soap, const char *URL, tt__IPAddressFilterExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPAddressFilterExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPAddressFilterExtension(struct soap *soap, tt__IPAddressFilterExtension *p)
{
	if (::soap_read_tt__IPAddressFilterExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilter_DEFINED
#define SOAP_TYPE_tt__IPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilter(struct soap*, const char*, int, const tt__IPAddressFilter *, const char*);
SOAP_FMAC3 tt__IPAddressFilter * SOAP_FMAC4 soap_in_tt__IPAddressFilter(struct soap*, const char*, tt__IPAddressFilter *, const char*);
SOAP_FMAC1 tt__IPAddressFilter * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilter * soap_new_tt__IPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddressFilter * soap_new_req_tt__IPAddressFilter(
	struct soap *soap,
	enum tt__IPAddressFilterType Type)
{
	tt__IPAddressFilter *_p = ::soap_new_tt__IPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddressFilter::Type = Type;
	}
	return _p;
}

inline tt__IPAddressFilter * soap_new_set_tt__IPAddressFilter(
	struct soap *soap,
	enum tt__IPAddressFilterType Type,
	const std::vector<tt__PrefixedIPv4Address *> & IPv4Address,
	const std::vector<tt__PrefixedIPv6Address *> & IPv6Address,
	tt__IPAddressFilterExtension *Extension)
{
	tt__IPAddressFilter *_p = ::soap_new_tt__IPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddressFilter::Type = Type;
		_p->tt__IPAddressFilter::IPv4Address = IPv4Address;
		_p->tt__IPAddressFilter::IPv6Address = IPv6Address;
		_p->tt__IPAddressFilter::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__IPAddressFilter(struct soap *soap, tt__IPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilter", p->soap_type() == SOAP_TYPE_tt__IPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPAddressFilter(struct soap *soap, const char *URL, tt__IPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilter", p->soap_type() == SOAP_TYPE_tt__IPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPAddressFilter(struct soap *soap, const char *URL, tt__IPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilter", p->soap_type() == SOAP_TYPE_tt__IPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPAddressFilter(struct soap *soap, const char *URL, tt__IPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddressFilter", p->soap_type() == SOAP_TYPE_tt__IPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddressFilter * SOAP_FMAC4 soap_get_tt__IPAddressFilter(struct soap*, tt__IPAddressFilter *, const char*, const char*);

inline int soap_read_tt__IPAddressFilter(struct soap *soap, tt__IPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPAddressFilter(struct soap *soap, const char *URL, tt__IPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPAddressFilter(struct soap *soap, tt__IPAddressFilter *p)
{
	if (::soap_read_tt__IPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfigurationExtension2(struct soap*, const char*, int, const tt__NetworkZeroConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__NetworkZeroConfigurationExtension2(struct soap*, const char*, tt__NetworkZeroConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfigurationExtension2 * soap_new_tt__NetworkZeroConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkZeroConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkZeroConfigurationExtension2 * soap_new_req_tt__NetworkZeroConfigurationExtension2(
	struct soap *soap)
{
	tt__NetworkZeroConfigurationExtension2 *_p = ::soap_new_tt__NetworkZeroConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkZeroConfigurationExtension2 * soap_new_set_tt__NetworkZeroConfigurationExtension2(
	struct soap *soap)
{
	tt__NetworkZeroConfigurationExtension2 *_p = ::soap_new_tt__NetworkZeroConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__NetworkZeroConfigurationExtension2(struct soap *soap, tt__NetworkZeroConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkZeroConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkZeroConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkZeroConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkZeroConfigurationExtension2(struct soap *soap, tt__NetworkZeroConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkZeroConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkZeroConfigurationExtension2(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkZeroConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkZeroConfigurationExtension2(struct soap *soap, tt__NetworkZeroConfigurationExtension2 *p)
{
	if (::soap_read_tt__NetworkZeroConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfigurationExtension(struct soap*, const char*, int, const tt__NetworkZeroConfigurationExtension *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_in_tt__NetworkZeroConfigurationExtension(struct soap*, const char*, tt__NetworkZeroConfigurationExtension *, const char*);
SOAP_FMAC1 tt__NetworkZeroConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfigurationExtension * soap_new_tt__NetworkZeroConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkZeroConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkZeroConfigurationExtension * soap_new_req_tt__NetworkZeroConfigurationExtension(
	struct soap *soap)
{
	tt__NetworkZeroConfigurationExtension *_p = ::soap_new_tt__NetworkZeroConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkZeroConfigurationExtension * soap_new_set_tt__NetworkZeroConfigurationExtension(
	struct soap *soap,
	const std::vector<tt__NetworkZeroConfiguration *> & Additional,
	tt__NetworkZeroConfigurationExtension2 *Extension)
{
	tt__NetworkZeroConfigurationExtension *_p = ::soap_new_tt__NetworkZeroConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkZeroConfigurationExtension::Additional = Additional;
		_p->tt__NetworkZeroConfigurationExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkZeroConfigurationExtension(struct soap *soap, tt__NetworkZeroConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkZeroConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkZeroConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkZeroConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_get_tt__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__NetworkZeroConfigurationExtension(struct soap *soap, tt__NetworkZeroConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkZeroConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkZeroConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkZeroConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkZeroConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkZeroConfigurationExtension(struct soap *soap, tt__NetworkZeroConfigurationExtension *p)
{
	if (::soap_read_tt__NetworkZeroConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration_DEFINED
#define SOAP_TYPE_tt__NetworkZeroConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfiguration(struct soap*, const char*, int, const tt__NetworkZeroConfiguration *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfiguration * SOAP_FMAC4 soap_in_tt__NetworkZeroConfiguration(struct soap*, const char*, tt__NetworkZeroConfiguration *, const char*);
SOAP_FMAC1 tt__NetworkZeroConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfiguration * soap_new_tt__NetworkZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkZeroConfiguration * soap_new_req_tt__NetworkZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled)
{
	tt__NetworkZeroConfiguration *_p = ::soap_new_tt__NetworkZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->tt__NetworkZeroConfiguration::Enabled = Enabled;
	}
	return _p;
}

inline tt__NetworkZeroConfiguration * soap_new_set_tt__NetworkZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled,
	const std::vector<std::string> & Addresses,
	tt__NetworkZeroConfigurationExtension *Extension)
{
	tt__NetworkZeroConfiguration *_p = ::soap_new_tt__NetworkZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->tt__NetworkZeroConfiguration::Enabled = Enabled;
		_p->tt__NetworkZeroConfiguration::Addresses = Addresses;
		_p->tt__NetworkZeroConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkZeroConfiguration(struct soap *soap, tt__NetworkZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkZeroConfiguration(struct soap *soap, const char *URL, tt__NetworkZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkZeroConfiguration(struct soap *soap, const char *URL, tt__NetworkZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkZeroConfiguration(struct soap *soap, const char *URL, tt__NetworkZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkZeroConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkZeroConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkZeroConfiguration * SOAP_FMAC4 soap_get_tt__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *, const char*, const char*);

inline int soap_read_tt__NetworkZeroConfiguration(struct soap *soap, tt__NetworkZeroConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkZeroConfiguration(struct soap *soap, const char *URL, tt__NetworkZeroConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkZeroConfiguration(struct soap *soap, tt__NetworkZeroConfiguration *p)
{
	if (::soap_read_tt__NetworkZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkGateway_DEFINED
#define SOAP_TYPE_tt__NetworkGateway_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkGateway(struct soap*, const char*, int, const tt__NetworkGateway *, const char*);
SOAP_FMAC3 tt__NetworkGateway * SOAP_FMAC4 soap_in_tt__NetworkGateway(struct soap*, const char*, tt__NetworkGateway *, const char*);
SOAP_FMAC1 tt__NetworkGateway * SOAP_FMAC2 soap_instantiate_tt__NetworkGateway(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkGateway * soap_new_tt__NetworkGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkGateway(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkGateway * soap_new_req_tt__NetworkGateway(
	struct soap *soap)
{
	tt__NetworkGateway *_p = ::soap_new_tt__NetworkGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkGateway * soap_new_set_tt__NetworkGateway(
	struct soap *soap,
	const std::vector<std::string> & IPv4Address,
	const std::vector<std::string> & IPv6Address)
{
	tt__NetworkGateway *_p = ::soap_new_tt__NetworkGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkGateway::IPv4Address = IPv4Address;
		_p->tt__NetworkGateway::IPv6Address = IPv6Address;
	}
	return _p;
}

inline int soap_write_tt__NetworkGateway(struct soap *soap, tt__NetworkGateway const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkGateway", p->soap_type() == SOAP_TYPE_tt__NetworkGateway ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkGateway(struct soap *soap, const char *URL, tt__NetworkGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkGateway", p->soap_type() == SOAP_TYPE_tt__NetworkGateway ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkGateway(struct soap *soap, const char *URL, tt__NetworkGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkGateway", p->soap_type() == SOAP_TYPE_tt__NetworkGateway ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkGateway(struct soap *soap, const char *URL, tt__NetworkGateway const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkGateway", p->soap_type() == SOAP_TYPE_tt__NetworkGateway ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkGateway * SOAP_FMAC4 soap_get_tt__NetworkGateway(struct soap*, tt__NetworkGateway *, const char*, const char*);

inline int soap_read_tt__NetworkGateway(struct soap *soap, tt__NetworkGateway *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkGateway(struct soap *soap, const char *URL, tt__NetworkGateway *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkGateway(struct soap *soap, tt__NetworkGateway *p)
{
	if (::soap_read_tt__NetworkGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__IPv4NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv4NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC1 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_req_tt__IPv4NetworkInterfaceSetConfiguration(
	struct soap *soap)
{
	tt__IPv4NetworkInterfaceSetConfiguration *_p = ::soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_set_tt__IPv4NetworkInterfaceSetConfiguration(
	struct soap *soap,
	bool *Enabled,
	const std::vector<tt__PrefixedIPv4Address *> & Manual,
	bool *DHCP)
{
	tt__IPv4NetworkInterfaceSetConfiguration *_p = ::soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4NetworkInterfaceSetConfiguration::Enabled = Enabled;
		_p->tt__IPv4NetworkInterfaceSetConfiguration::Manual = Manual;
		_p->tt__IPv4NetworkInterfaceSetConfiguration::DHCP = DHCP;
	}
	return _p;
}

inline int soap_write_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv4NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv4NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv4NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv4NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *, const char*, const char*);

inline int soap_read_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv4NetworkInterfaceSetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPv4NetworkInterfaceSetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv4NetworkInterfaceSetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv4NetworkInterfaceSetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv4NetworkInterfaceSetConfiguration *p)
{
	if (::soap_read_tt__IPv4NetworkInterfaceSetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__IPv6NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv6NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC1 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_req_tt__IPv6NetworkInterfaceSetConfiguration(
	struct soap *soap)
{
	tt__IPv6NetworkInterfaceSetConfiguration *_p = ::soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_set_tt__IPv6NetworkInterfaceSetConfiguration(
	struct soap *soap,
	bool *Enabled,
	bool *AcceptRouterAdvert,
	const std::vector<tt__PrefixedIPv6Address *> & Manual,
	enum tt__IPv6DHCPConfiguration *DHCP)
{
	tt__IPv6NetworkInterfaceSetConfiguration *_p = ::soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6NetworkInterfaceSetConfiguration::Enabled = Enabled;
		_p->tt__IPv6NetworkInterfaceSetConfiguration::AcceptRouterAdvert = AcceptRouterAdvert;
		_p->tt__IPv6NetworkInterfaceSetConfiguration::Manual = Manual;
		_p->tt__IPv6NetworkInterfaceSetConfiguration::DHCP = DHCP;
	}
	return _p;
}

inline int soap_write_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv6NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv6NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv6NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv6NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *, const char*, const char*);

inline int soap_read_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv6NetworkInterfaceSetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPv6NetworkInterfaceSetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__IPv6NetworkInterfaceSetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv6NetworkInterfaceSetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv6NetworkInterfaceSetConfiguration *p)
{
	if (::soap_read_tt__IPv6NetworkInterfaceSetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfigurationExtension *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_req_tt__NetworkInterfaceSetConfigurationExtension(
	struct soap *soap)
{
	tt__NetworkInterfaceSetConfigurationExtension *_p = ::soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_set_tt__NetworkInterfaceSetConfigurationExtension(
	struct soap *soap,
	const std::vector<tt__Dot3Configuration *> & Dot3,
	const std::vector<tt__Dot11Configuration *> & Dot11,
	tt__NetworkInterfaceSetConfigurationExtension2 *Extension)
{
	tt__NetworkInterfaceSetConfigurationExtension *_p = ::soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceSetConfigurationExtension::Dot3 = Dot3;
		_p->tt__NetworkInterfaceSetConfigurationExtension::Dot11 = Dot11;
		_p->tt__NetworkInterfaceSetConfigurationExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceSetConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceSetConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension *p)
{
	if (::soap_read_tt__NetworkInterfaceSetConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfiguration * soap_new_tt__NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceSetConfiguration * soap_new_req_tt__NetworkInterfaceSetConfiguration(
	struct soap *soap)
{
	tt__NetworkInterfaceSetConfiguration *_p = ::soap_new_tt__NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceSetConfiguration * soap_new_set_tt__NetworkInterfaceSetConfiguration(
	struct soap *soap,
	bool *Enabled,
	tt__NetworkInterfaceConnectionSetting *Link,
	int *MTU,
	tt__IPv4NetworkInterfaceSetConfiguration *IPv4,
	tt__IPv6NetworkInterfaceSetConfiguration *IPv6,
	tt__NetworkInterfaceSetConfigurationExtension *Extension)
{
	tt__NetworkInterfaceSetConfiguration *_p = ::soap_new_tt__NetworkInterfaceSetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceSetConfiguration::Enabled = Enabled;
		_p->tt__NetworkInterfaceSetConfiguration::Link = Link;
		_p->tt__NetworkInterfaceSetConfiguration::MTU = MTU;
		_p->tt__NetworkInterfaceSetConfiguration::IPv4 = IPv4;
		_p->tt__NetworkInterfaceSetConfiguration::IPv6 = IPv6;
		_p->tt__NetworkInterfaceSetConfiguration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceSetConfiguration(struct soap *soap, tt__NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceSetConfiguration", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceSetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceSetConfiguration(struct soap *soap, tt__NetworkInterfaceSetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceSetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceSetConfiguration(struct soap *soap, const char *URL, tt__NetworkInterfaceSetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceSetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceSetConfiguration(struct soap *soap, tt__NetworkInterfaceSetConfiguration *p)
{
	if (::soap_read_tt__NetworkInterfaceSetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension_DEFINED
#define SOAP_TYPE_tt__DynamicDNSInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSInformationExtension(struct soap*, const char*, int, const tt__DynamicDNSInformationExtension *, const char*);
SOAP_FMAC3 tt__DynamicDNSInformationExtension * SOAP_FMAC4 soap_in_tt__DynamicDNSInformationExtension(struct soap*, const char*, tt__DynamicDNSInformationExtension *, const char*);
SOAP_FMAC1 tt__DynamicDNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSInformationExtension * soap_new_tt__DynamicDNSInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DynamicDNSInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DynamicDNSInformationExtension * soap_new_req_tt__DynamicDNSInformationExtension(
	struct soap *soap)
{
	tt__DynamicDNSInformationExtension *_p = ::soap_new_tt__DynamicDNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DynamicDNSInformationExtension * soap_new_set_tt__DynamicDNSInformationExtension(
	struct soap *soap)
{
	tt__DynamicDNSInformationExtension *_p = ::soap_new_tt__DynamicDNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__DynamicDNSInformationExtension(struct soap *soap, tt__DynamicDNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DynamicDNSInformationExtension(struct soap *soap, const char *URL, tt__DynamicDNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DynamicDNSInformationExtension(struct soap *soap, const char *URL, tt__DynamicDNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DynamicDNSInformationExtension(struct soap *soap, const char *URL, tt__DynamicDNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DynamicDNSInformationExtension * SOAP_FMAC4 soap_get_tt__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *, const char*, const char*);

inline int soap_read_tt__DynamicDNSInformationExtension(struct soap *soap, tt__DynamicDNSInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DynamicDNSInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DynamicDNSInformationExtension(struct soap *soap, const char *URL, tt__DynamicDNSInformationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DynamicDNSInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DynamicDNSInformationExtension(struct soap *soap, tt__DynamicDNSInformationExtension *p)
{
	if (::soap_read_tt__DynamicDNSInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformation_DEFINED
#define SOAP_TYPE_tt__DynamicDNSInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSInformation(struct soap*, const char*, int, const tt__DynamicDNSInformation *, const char*);
SOAP_FMAC3 tt__DynamicDNSInformation * SOAP_FMAC4 soap_in_tt__DynamicDNSInformation(struct soap*, const char*, tt__DynamicDNSInformation *, const char*);
SOAP_FMAC1 tt__DynamicDNSInformation * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSInformation * soap_new_tt__DynamicDNSInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DynamicDNSInformation(soap, n, NULL, NULL, NULL);
}

inline tt__DynamicDNSInformation * soap_new_req_tt__DynamicDNSInformation(
	struct soap *soap,
	enum tt__DynamicDNSType Type)
{
	tt__DynamicDNSInformation *_p = ::soap_new_tt__DynamicDNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DynamicDNSInformation::Type = Type;
	}
	return _p;
}

inline tt__DynamicDNSInformation * soap_new_set_tt__DynamicDNSInformation(
	struct soap *soap,
	enum tt__DynamicDNSType Type,
	std::string *Name,
	std::string *TTL,
	tt__DynamicDNSInformationExtension *Extension)
{
	tt__DynamicDNSInformation *_p = ::soap_new_tt__DynamicDNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DynamicDNSInformation::Type = Type;
		_p->tt__DynamicDNSInformation::Name = Name;
		_p->tt__DynamicDNSInformation::TTL = TTL;
		_p->tt__DynamicDNSInformation::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__DynamicDNSInformation(struct soap *soap, tt__DynamicDNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformation", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DynamicDNSInformation(struct soap *soap, const char *URL, tt__DynamicDNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformation", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DynamicDNSInformation(struct soap *soap, const char *URL, tt__DynamicDNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformation", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DynamicDNSInformation(struct soap *soap, const char *URL, tt__DynamicDNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DynamicDNSInformation", p->soap_type() == SOAP_TYPE_tt__DynamicDNSInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DynamicDNSInformation * SOAP_FMAC4 soap_get_tt__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation *, const char*, const char*);

inline int soap_read_tt__DynamicDNSInformation(struct soap *soap, tt__DynamicDNSInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DynamicDNSInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DynamicDNSInformation(struct soap *soap, const char *URL, tt__DynamicDNSInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DynamicDNSInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DynamicDNSInformation(struct soap *soap, tt__DynamicDNSInformation *p)
{
	if (::soap_read_tt__DynamicDNSInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NTPInformationExtension_DEFINED
#define SOAP_TYPE_tt__NTPInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NTPInformationExtension(struct soap*, const char*, int, const tt__NTPInformationExtension *, const char*);
SOAP_FMAC3 tt__NTPInformationExtension * SOAP_FMAC4 soap_in_tt__NTPInformationExtension(struct soap*, const char*, tt__NTPInformationExtension *, const char*);
SOAP_FMAC1 tt__NTPInformationExtension * SOAP_FMAC2 soap_instantiate_tt__NTPInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NTPInformationExtension * soap_new_tt__NTPInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NTPInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NTPInformationExtension * soap_new_req_tt__NTPInformationExtension(
	struct soap *soap)
{
	tt__NTPInformationExtension *_p = ::soap_new_tt__NTPInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NTPInformationExtension * soap_new_set_tt__NTPInformationExtension(
	struct soap *soap)
{
	tt__NTPInformationExtension *_p = ::soap_new_tt__NTPInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__NTPInformationExtension(struct soap *soap, tt__NTPInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformationExtension", p->soap_type() == SOAP_TYPE_tt__NTPInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NTPInformationExtension(struct soap *soap, const char *URL, tt__NTPInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformationExtension", p->soap_type() == SOAP_TYPE_tt__NTPInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NTPInformationExtension(struct soap *soap, const char *URL, tt__NTPInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformationExtension", p->soap_type() == SOAP_TYPE_tt__NTPInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NTPInformationExtension(struct soap *soap, const char *URL, tt__NTPInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformationExtension", p->soap_type() == SOAP_TYPE_tt__NTPInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NTPInformationExtension * SOAP_FMAC4 soap_get_tt__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *, const char*, const char*);

inline int soap_read_tt__NTPInformationExtension(struct soap *soap, tt__NTPInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NTPInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NTPInformationExtension(struct soap *soap, const char *URL, tt__NTPInformationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NTPInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NTPInformationExtension(struct soap *soap, tt__NTPInformationExtension *p)
{
	if (::soap_read_tt__NTPInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NTPInformation_DEFINED
#define SOAP_TYPE_tt__NTPInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NTPInformation(struct soap*, const char*, int, const tt__NTPInformation *, const char*);
SOAP_FMAC3 tt__NTPInformation * SOAP_FMAC4 soap_in_tt__NTPInformation(struct soap*, const char*, tt__NTPInformation *, const char*);
SOAP_FMAC1 tt__NTPInformation * SOAP_FMAC2 soap_instantiate_tt__NTPInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__NTPInformation * soap_new_tt__NTPInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NTPInformation(soap, n, NULL, NULL, NULL);
}

inline tt__NTPInformation * soap_new_req_tt__NTPInformation(
	struct soap *soap,
	bool FromDHCP)
{
	tt__NTPInformation *_p = ::soap_new_tt__NTPInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NTPInformation::FromDHCP = FromDHCP;
	}
	return _p;
}

inline tt__NTPInformation * soap_new_set_tt__NTPInformation(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<tt__NetworkHost *> & NTPFromDHCP,
	const std::vector<tt__NetworkHost *> & NTPManual,
	tt__NTPInformationExtension *Extension)
{
	tt__NTPInformation *_p = ::soap_new_tt__NTPInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NTPInformation::FromDHCP = FromDHCP;
		_p->tt__NTPInformation::NTPFromDHCP = NTPFromDHCP;
		_p->tt__NTPInformation::NTPManual = NTPManual;
		_p->tt__NTPInformation::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NTPInformation(struct soap *soap, tt__NTPInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformation", p->soap_type() == SOAP_TYPE_tt__NTPInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NTPInformation(struct soap *soap, const char *URL, tt__NTPInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformation", p->soap_type() == SOAP_TYPE_tt__NTPInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NTPInformation(struct soap *soap, const char *URL, tt__NTPInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformation", p->soap_type() == SOAP_TYPE_tt__NTPInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NTPInformation(struct soap *soap, const char *URL, tt__NTPInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NTPInformation", p->soap_type() == SOAP_TYPE_tt__NTPInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NTPInformation * SOAP_FMAC4 soap_get_tt__NTPInformation(struct soap*, tt__NTPInformation *, const char*, const char*);

inline int soap_read_tt__NTPInformation(struct soap *soap, tt__NTPInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NTPInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NTPInformation(struct soap *soap, const char *URL, tt__NTPInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NTPInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NTPInformation(struct soap *soap, tt__NTPInformation *p)
{
	if (::soap_read_tt__NTPInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DNSInformationExtension_DEFINED
#define SOAP_TYPE_tt__DNSInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSInformationExtension(struct soap*, const char*, int, const tt__DNSInformationExtension *, const char*);
SOAP_FMAC3 tt__DNSInformationExtension * SOAP_FMAC4 soap_in_tt__DNSInformationExtension(struct soap*, const char*, tt__DNSInformationExtension *, const char*);
SOAP_FMAC1 tt__DNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSInformationExtension * soap_new_tt__DNSInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DNSInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__DNSInformationExtension * soap_new_req_tt__DNSInformationExtension(
	struct soap *soap)
{
	tt__DNSInformationExtension *_p = ::soap_new_tt__DNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__DNSInformationExtension * soap_new_set_tt__DNSInformationExtension(
	struct soap *soap)
{
	tt__DNSInformationExtension *_p = ::soap_new_tt__DNSInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__DNSInformationExtension(struct soap *soap, tt__DNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DNSInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DNSInformationExtension(struct soap *soap, const char *URL, tt__DNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DNSInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DNSInformationExtension(struct soap *soap, const char *URL, tt__DNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DNSInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DNSInformationExtension(struct soap *soap, const char *URL, tt__DNSInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformationExtension", p->soap_type() == SOAP_TYPE_tt__DNSInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DNSInformationExtension * SOAP_FMAC4 soap_get_tt__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *, const char*, const char*);

inline int soap_read_tt__DNSInformationExtension(struct soap *soap, tt__DNSInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DNSInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DNSInformationExtension(struct soap *soap, const char *URL, tt__DNSInformationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DNSInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DNSInformationExtension(struct soap *soap, tt__DNSInformationExtension *p)
{
	if (::soap_read_tt__DNSInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DNSInformation_DEFINED
#define SOAP_TYPE_tt__DNSInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSInformation(struct soap*, const char*, int, const tt__DNSInformation *, const char*);
SOAP_FMAC3 tt__DNSInformation * SOAP_FMAC4 soap_in_tt__DNSInformation(struct soap*, const char*, tt__DNSInformation *, const char*);
SOAP_FMAC1 tt__DNSInformation * SOAP_FMAC2 soap_instantiate_tt__DNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSInformation * soap_new_tt__DNSInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DNSInformation(soap, n, NULL, NULL, NULL);
}

inline tt__DNSInformation * soap_new_req_tt__DNSInformation(
	struct soap *soap,
	bool FromDHCP)
{
	tt__DNSInformation *_p = ::soap_new_tt__DNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DNSInformation::FromDHCP = FromDHCP;
	}
	return _p;
}

inline tt__DNSInformation * soap_new_set_tt__DNSInformation(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<std::string> & SearchDomain,
	const std::vector<tt__IPAddress *> & DNSFromDHCP,
	const std::vector<tt__IPAddress *> & DNSManual,
	tt__DNSInformationExtension *Extension)
{
	tt__DNSInformation *_p = ::soap_new_tt__DNSInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DNSInformation::FromDHCP = FromDHCP;
		_p->tt__DNSInformation::SearchDomain = SearchDomain;
		_p->tt__DNSInformation::DNSFromDHCP = DNSFromDHCP;
		_p->tt__DNSInformation::DNSManual = DNSManual;
		_p->tt__DNSInformation::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__DNSInformation(struct soap *soap, tt__DNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformation", p->soap_type() == SOAP_TYPE_tt__DNSInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DNSInformation(struct soap *soap, const char *URL, tt__DNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformation", p->soap_type() == SOAP_TYPE_tt__DNSInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DNSInformation(struct soap *soap, const char *URL, tt__DNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformation", p->soap_type() == SOAP_TYPE_tt__DNSInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DNSInformation(struct soap *soap, const char *URL, tt__DNSInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DNSInformation", p->soap_type() == SOAP_TYPE_tt__DNSInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DNSInformation * SOAP_FMAC4 soap_get_tt__DNSInformation(struct soap*, tt__DNSInformation *, const char*, const char*);

inline int soap_read_tt__DNSInformation(struct soap *soap, tt__DNSInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DNSInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DNSInformation(struct soap *soap, const char *URL, tt__DNSInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DNSInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DNSInformation(struct soap *soap, tt__DNSInformation *p)
{
	if (::soap_read_tt__DNSInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__HostnameInformationExtension_DEFINED
#define SOAP_TYPE_tt__HostnameInformationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HostnameInformationExtension(struct soap*, const char*, int, const tt__HostnameInformationExtension *, const char*);
SOAP_FMAC3 tt__HostnameInformationExtension * SOAP_FMAC4 soap_in_tt__HostnameInformationExtension(struct soap*, const char*, tt__HostnameInformationExtension *, const char*);
SOAP_FMAC1 tt__HostnameInformationExtension * SOAP_FMAC2 soap_instantiate_tt__HostnameInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__HostnameInformationExtension * soap_new_tt__HostnameInformationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__HostnameInformationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__HostnameInformationExtension * soap_new_req_tt__HostnameInformationExtension(
	struct soap *soap)
{
	tt__HostnameInformationExtension *_p = ::soap_new_tt__HostnameInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__HostnameInformationExtension * soap_new_set_tt__HostnameInformationExtension(
	struct soap *soap)
{
	tt__HostnameInformationExtension *_p = ::soap_new_tt__HostnameInformationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__HostnameInformationExtension(struct soap *soap, tt__HostnameInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformationExtension", p->soap_type() == SOAP_TYPE_tt__HostnameInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__HostnameInformationExtension(struct soap *soap, const char *URL, tt__HostnameInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformationExtension", p->soap_type() == SOAP_TYPE_tt__HostnameInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__HostnameInformationExtension(struct soap *soap, const char *URL, tt__HostnameInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformationExtension", p->soap_type() == SOAP_TYPE_tt__HostnameInformationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__HostnameInformationExtension(struct soap *soap, const char *URL, tt__HostnameInformationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformationExtension", p->soap_type() == SOAP_TYPE_tt__HostnameInformationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__HostnameInformationExtension * SOAP_FMAC4 soap_get_tt__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *, const char*, const char*);

inline int soap_read_tt__HostnameInformationExtension(struct soap *soap, tt__HostnameInformationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__HostnameInformationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__HostnameInformationExtension(struct soap *soap, const char *URL, tt__HostnameInformationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__HostnameInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__HostnameInformationExtension(struct soap *soap, tt__HostnameInformationExtension *p)
{
	if (::soap_read_tt__HostnameInformationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__HostnameInformation_DEFINED
#define SOAP_TYPE_tt__HostnameInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HostnameInformation(struct soap*, const char*, int, const tt__HostnameInformation *, const char*);
SOAP_FMAC3 tt__HostnameInformation * SOAP_FMAC4 soap_in_tt__HostnameInformation(struct soap*, const char*, tt__HostnameInformation *, const char*);
SOAP_FMAC1 tt__HostnameInformation * SOAP_FMAC2 soap_instantiate_tt__HostnameInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__HostnameInformation * soap_new_tt__HostnameInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__HostnameInformation(soap, n, NULL, NULL, NULL);
}

inline tt__HostnameInformation * soap_new_req_tt__HostnameInformation(
	struct soap *soap,
	bool FromDHCP)
{
	tt__HostnameInformation *_p = ::soap_new_tt__HostnameInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__HostnameInformation::FromDHCP = FromDHCP;
	}
	return _p;
}

inline tt__HostnameInformation * soap_new_set_tt__HostnameInformation(
	struct soap *soap,
	bool FromDHCP,
	std::string *Name,
	tt__HostnameInformationExtension *Extension)
{
	tt__HostnameInformation *_p = ::soap_new_tt__HostnameInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__HostnameInformation::FromDHCP = FromDHCP;
		_p->tt__HostnameInformation::Name = Name;
		_p->tt__HostnameInformation::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__HostnameInformation(struct soap *soap, tt__HostnameInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformation", p->soap_type() == SOAP_TYPE_tt__HostnameInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__HostnameInformation(struct soap *soap, const char *URL, tt__HostnameInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformation", p->soap_type() == SOAP_TYPE_tt__HostnameInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__HostnameInformation(struct soap *soap, const char *URL, tt__HostnameInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformation", p->soap_type() == SOAP_TYPE_tt__HostnameInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__HostnameInformation(struct soap *soap, const char *URL, tt__HostnameInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:HostnameInformation", p->soap_type() == SOAP_TYPE_tt__HostnameInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__HostnameInformation * SOAP_FMAC4 soap_get_tt__HostnameInformation(struct soap*, tt__HostnameInformation *, const char*, const char*);

inline int soap_read_tt__HostnameInformation(struct soap *soap, tt__HostnameInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__HostnameInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__HostnameInformation(struct soap *soap, const char *URL, tt__HostnameInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__HostnameInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__HostnameInformation(struct soap *soap, tt__HostnameInformation *p)
{
	if (::soap_read_tt__HostnameInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv6Address_DEFINED
#define SOAP_TYPE_tt__PrefixedIPv6Address_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PrefixedIPv6Address(struct soap*, const char*, int, const tt__PrefixedIPv6Address *, const char*);
SOAP_FMAC3 tt__PrefixedIPv6Address * SOAP_FMAC4 soap_in_tt__PrefixedIPv6Address(struct soap*, const char*, tt__PrefixedIPv6Address *, const char*);
SOAP_FMAC1 tt__PrefixedIPv6Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline tt__PrefixedIPv6Address * soap_new_tt__PrefixedIPv6Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PrefixedIPv6Address(soap, n, NULL, NULL, NULL);
}

inline tt__PrefixedIPv6Address * soap_new_req_tt__PrefixedIPv6Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength)
{
	tt__PrefixedIPv6Address *_p = ::soap_new_tt__PrefixedIPv6Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv6Address::Address = Address;
		_p->tt__PrefixedIPv6Address::PrefixLength = PrefixLength;
	}
	return _p;
}

inline tt__PrefixedIPv6Address * soap_new_set_tt__PrefixedIPv6Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength)
{
	tt__PrefixedIPv6Address *_p = ::soap_new_tt__PrefixedIPv6Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv6Address::Address = Address;
		_p->tt__PrefixedIPv6Address::PrefixLength = PrefixLength;
	}
	return _p;
}

inline int soap_write_tt__PrefixedIPv6Address(struct soap *soap, tt__PrefixedIPv6Address const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv6Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv6Address ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PrefixedIPv6Address(struct soap *soap, const char *URL, tt__PrefixedIPv6Address const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv6Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv6Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PrefixedIPv6Address(struct soap *soap, const char *URL, tt__PrefixedIPv6Address const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv6Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv6Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PrefixedIPv6Address(struct soap *soap, const char *URL, tt__PrefixedIPv6Address const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv6Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv6Address ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PrefixedIPv6Address * SOAP_FMAC4 soap_get_tt__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *, const char*, const char*);

inline int soap_read_tt__PrefixedIPv6Address(struct soap *soap, tt__PrefixedIPv6Address *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PrefixedIPv6Address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PrefixedIPv6Address(struct soap *soap, const char *URL, tt__PrefixedIPv6Address *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PrefixedIPv6Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PrefixedIPv6Address(struct soap *soap, tt__PrefixedIPv6Address *p)
{
	if (::soap_read_tt__PrefixedIPv6Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv4Address_DEFINED
#define SOAP_TYPE_tt__PrefixedIPv4Address_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PrefixedIPv4Address(struct soap*, const char*, int, const tt__PrefixedIPv4Address *, const char*);
SOAP_FMAC3 tt__PrefixedIPv4Address * SOAP_FMAC4 soap_in_tt__PrefixedIPv4Address(struct soap*, const char*, tt__PrefixedIPv4Address *, const char*);
SOAP_FMAC1 tt__PrefixedIPv4Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline tt__PrefixedIPv4Address * soap_new_tt__PrefixedIPv4Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PrefixedIPv4Address(soap, n, NULL, NULL, NULL);
}

inline tt__PrefixedIPv4Address * soap_new_req_tt__PrefixedIPv4Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength)
{
	tt__PrefixedIPv4Address *_p = ::soap_new_tt__PrefixedIPv4Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv4Address::Address = Address;
		_p->tt__PrefixedIPv4Address::PrefixLength = PrefixLength;
	}
	return _p;
}

inline tt__PrefixedIPv4Address * soap_new_set_tt__PrefixedIPv4Address(
	struct soap *soap,
	const std::string& Address,
	int PrefixLength)
{
	tt__PrefixedIPv4Address *_p = ::soap_new_tt__PrefixedIPv4Address(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PrefixedIPv4Address::Address = Address;
		_p->tt__PrefixedIPv4Address::PrefixLength = PrefixLength;
	}
	return _p;
}

inline int soap_write_tt__PrefixedIPv4Address(struct soap *soap, tt__PrefixedIPv4Address const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv4Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv4Address ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PrefixedIPv4Address(struct soap *soap, const char *URL, tt__PrefixedIPv4Address const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv4Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv4Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PrefixedIPv4Address(struct soap *soap, const char *URL, tt__PrefixedIPv4Address const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv4Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv4Address ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PrefixedIPv4Address(struct soap *soap, const char *URL, tt__PrefixedIPv4Address const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PrefixedIPv4Address", p->soap_type() == SOAP_TYPE_tt__PrefixedIPv4Address ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PrefixedIPv4Address * SOAP_FMAC4 soap_get_tt__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *, const char*, const char*);

inline int soap_read_tt__PrefixedIPv4Address(struct soap *soap, tt__PrefixedIPv4Address *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PrefixedIPv4Address(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PrefixedIPv4Address(struct soap *soap, const char *URL, tt__PrefixedIPv4Address *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PrefixedIPv4Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PrefixedIPv4Address(struct soap *soap, tt__PrefixedIPv4Address *p)
{
	if (::soap_read_tt__PrefixedIPv4Address(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPAddress_DEFINED
#define SOAP_TYPE_tt__IPAddress_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddress(struct soap*, const char*, int, const tt__IPAddress *, const char*);
SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_in_tt__IPAddress(struct soap*, const char*, tt__IPAddress *, const char*);
SOAP_FMAC1 tt__IPAddress * SOAP_FMAC2 soap_instantiate_tt__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddress * soap_new_tt__IPAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPAddress(soap, n, NULL, NULL, NULL);
}

inline tt__IPAddress * soap_new_req_tt__IPAddress(
	struct soap *soap,
	enum tt__IPType Type)
{
	tt__IPAddress *_p = ::soap_new_tt__IPAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddress::Type = Type;
	}
	return _p;
}

inline tt__IPAddress * soap_new_set_tt__IPAddress(
	struct soap *soap,
	enum tt__IPType Type,
	std::string *IPv4Address,
	std::string *IPv6Address)
{
	tt__IPAddress *_p = ::soap_new_tt__IPAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPAddress::Type = Type;
		_p->tt__IPAddress::IPv4Address = IPv4Address;
		_p->tt__IPAddress::IPv6Address = IPv6Address;
	}
	return _p;
}

inline int soap_write_tt__IPAddress(struct soap *soap, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPAddress", p->soap_type() == SOAP_TYPE_tt__IPAddress ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_get_tt__IPAddress(struct soap*, tt__IPAddress *, const char*, const char*);

inline int soap_read_tt__IPAddress(struct soap *soap, tt__IPAddress *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPAddress(struct soap *soap, const char *URL, tt__IPAddress *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPAddress(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPAddress(struct soap *soap, tt__IPAddress *p)
{
	if (::soap_read_tt__IPAddress(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkHostExtension_DEFINED
#define SOAP_TYPE_tt__NetworkHostExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostExtension(struct soap*, const char*, int, const tt__NetworkHostExtension *, const char*);
SOAP_FMAC3 tt__NetworkHostExtension * SOAP_FMAC4 soap_in_tt__NetworkHostExtension(struct soap*, const char*, tt__NetworkHostExtension *, const char*);
SOAP_FMAC1 tt__NetworkHostExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkHostExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHostExtension * soap_new_tt__NetworkHostExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkHostExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkHostExtension * soap_new_req_tt__NetworkHostExtension(
	struct soap *soap)
{
	tt__NetworkHostExtension *_p = ::soap_new_tt__NetworkHostExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkHostExtension * soap_new_set_tt__NetworkHostExtension(
	struct soap *soap)
{
	tt__NetworkHostExtension *_p = ::soap_new_tt__NetworkHostExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__NetworkHostExtension(struct soap *soap, tt__NetworkHostExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHostExtension", p->soap_type() == SOAP_TYPE_tt__NetworkHostExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkHostExtension(struct soap *soap, const char *URL, tt__NetworkHostExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHostExtension", p->soap_type() == SOAP_TYPE_tt__NetworkHostExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkHostExtension(struct soap *soap, const char *URL, tt__NetworkHostExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHostExtension", p->soap_type() == SOAP_TYPE_tt__NetworkHostExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkHostExtension(struct soap *soap, const char *URL, tt__NetworkHostExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHostExtension", p->soap_type() == SOAP_TYPE_tt__NetworkHostExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkHostExtension * SOAP_FMAC4 soap_get_tt__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *, const char*, const char*);

inline int soap_read_tt__NetworkHostExtension(struct soap *soap, tt__NetworkHostExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkHostExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkHostExtension(struct soap *soap, const char *URL, tt__NetworkHostExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkHostExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkHostExtension(struct soap *soap, tt__NetworkHostExtension *p)
{
	if (::soap_read_tt__NetworkHostExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkHost_DEFINED
#define SOAP_TYPE_tt__NetworkHost_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHost(struct soap*, const char*, int, const tt__NetworkHost *, const char*);
SOAP_FMAC3 tt__NetworkHost * SOAP_FMAC4 soap_in_tt__NetworkHost(struct soap*, const char*, tt__NetworkHost *, const char*);
SOAP_FMAC1 tt__NetworkHost * SOAP_FMAC2 soap_instantiate_tt__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHost * soap_new_tt__NetworkHost(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkHost(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkHost * soap_new_req_tt__NetworkHost(
	struct soap *soap,
	enum tt__NetworkHostType Type)
{
	tt__NetworkHost *_p = ::soap_new_tt__NetworkHost(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkHost::Type = Type;
	}
	return _p;
}

inline tt__NetworkHost * soap_new_set_tt__NetworkHost(
	struct soap *soap,
	enum tt__NetworkHostType Type,
	std::string *IPv4Address,
	std::string *IPv6Address,
	std::string *DNSname,
	tt__NetworkHostExtension *Extension)
{
	tt__NetworkHost *_p = ::soap_new_tt__NetworkHost(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkHost::Type = Type;
		_p->tt__NetworkHost::IPv4Address = IPv4Address;
		_p->tt__NetworkHost::IPv6Address = IPv6Address;
		_p->tt__NetworkHost::DNSname = DNSname;
		_p->tt__NetworkHost::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkHost(struct soap *soap, tt__NetworkHost const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHost", p->soap_type() == SOAP_TYPE_tt__NetworkHost ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkHost(struct soap *soap, const char *URL, tt__NetworkHost const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHost", p->soap_type() == SOAP_TYPE_tt__NetworkHost ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkHost(struct soap *soap, const char *URL, tt__NetworkHost const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHost", p->soap_type() == SOAP_TYPE_tt__NetworkHost ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkHost(struct soap *soap, const char *URL, tt__NetworkHost const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkHost", p->soap_type() == SOAP_TYPE_tt__NetworkHost ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkHost * SOAP_FMAC4 soap_get_tt__NetworkHost(struct soap*, tt__NetworkHost *, const char*, const char*);

inline int soap_read_tt__NetworkHost(struct soap *soap, tt__NetworkHost *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkHost(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkHost(struct soap *soap, const char *URL, tt__NetworkHost *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkHost(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkHost(struct soap *soap, tt__NetworkHost *p)
{
	if (::soap_read_tt__NetworkHost(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolExtension_DEFINED
#define SOAP_TYPE_tt__NetworkProtocolExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolExtension(struct soap*, const char*, int, const tt__NetworkProtocolExtension *, const char*);
SOAP_FMAC3 tt__NetworkProtocolExtension * SOAP_FMAC4 soap_in_tt__NetworkProtocolExtension(struct soap*, const char*, tt__NetworkProtocolExtension *, const char*);
SOAP_FMAC1 tt__NetworkProtocolExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocolExtension * soap_new_tt__NetworkProtocolExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkProtocolExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkProtocolExtension * soap_new_req_tt__NetworkProtocolExtension(
	struct soap *soap)
{
	tt__NetworkProtocolExtension *_p = ::soap_new_tt__NetworkProtocolExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkProtocolExtension * soap_new_set_tt__NetworkProtocolExtension(
	struct soap *soap)
{
	tt__NetworkProtocolExtension *_p = ::soap_new_tt__NetworkProtocolExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__NetworkProtocolExtension(struct soap *soap, tt__NetworkProtocolExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocolExtension", p->soap_type() == SOAP_TYPE_tt__NetworkProtocolExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkProtocolExtension(struct soap *soap, const char *URL, tt__NetworkProtocolExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocolExtension", p->soap_type() == SOAP_TYPE_tt__NetworkProtocolExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkProtocolExtension(struct soap *soap, const char *URL, tt__NetworkProtocolExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocolExtension", p->soap_type() == SOAP_TYPE_tt__NetworkProtocolExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkProtocolExtension(struct soap *soap, const char *URL, tt__NetworkProtocolExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocolExtension", p->soap_type() == SOAP_TYPE_tt__NetworkProtocolExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkProtocolExtension * SOAP_FMAC4 soap_get_tt__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *, const char*, const char*);

inline int soap_read_tt__NetworkProtocolExtension(struct soap *soap, tt__NetworkProtocolExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkProtocolExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkProtocolExtension(struct soap *soap, const char *URL, tt__NetworkProtocolExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkProtocolExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkProtocolExtension(struct soap *soap, tt__NetworkProtocolExtension *p)
{
	if (::soap_read_tt__NetworkProtocolExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocol_DEFINED
#define SOAP_TYPE_tt__NetworkProtocol_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocol(struct soap*, const char*, int, const tt__NetworkProtocol *, const char*);
SOAP_FMAC3 tt__NetworkProtocol * SOAP_FMAC4 soap_in_tt__NetworkProtocol(struct soap*, const char*, tt__NetworkProtocol *, const char*);
SOAP_FMAC1 tt__NetworkProtocol * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocol * soap_new_tt__NetworkProtocol(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkProtocol(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkProtocol * soap_new_req_tt__NetworkProtocol(
	struct soap *soap,
	enum tt__NetworkProtocolType Name,
	bool Enabled,
	const std::vector<int> & Port)
{
	tt__NetworkProtocol *_p = ::soap_new_tt__NetworkProtocol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkProtocol::Name = Name;
		_p->tt__NetworkProtocol::Enabled = Enabled;
		_p->tt__NetworkProtocol::Port = Port;
	}
	return _p;
}

inline tt__NetworkProtocol * soap_new_set_tt__NetworkProtocol(
	struct soap *soap,
	enum tt__NetworkProtocolType Name,
	bool Enabled,
	const std::vector<int> & Port,
	tt__NetworkProtocolExtension *Extension)
{
	tt__NetworkProtocol *_p = ::soap_new_tt__NetworkProtocol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkProtocol::Name = Name;
		_p->tt__NetworkProtocol::Enabled = Enabled;
		_p->tt__NetworkProtocol::Port = Port;
		_p->tt__NetworkProtocol::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkProtocol(struct soap *soap, tt__NetworkProtocol const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocol", p->soap_type() == SOAP_TYPE_tt__NetworkProtocol ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkProtocol(struct soap *soap, const char *URL, tt__NetworkProtocol const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocol", p->soap_type() == SOAP_TYPE_tt__NetworkProtocol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkProtocol(struct soap *soap, const char *URL, tt__NetworkProtocol const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocol", p->soap_type() == SOAP_TYPE_tt__NetworkProtocol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkProtocol(struct soap *soap, const char *URL, tt__NetworkProtocol const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkProtocol", p->soap_type() == SOAP_TYPE_tt__NetworkProtocol ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkProtocol * SOAP_FMAC4 soap_get_tt__NetworkProtocol(struct soap*, tt__NetworkProtocol *, const char*, const char*);

inline int soap_read_tt__NetworkProtocol(struct soap *soap, tt__NetworkProtocol *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkProtocol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkProtocol(struct soap *soap, const char *URL, tt__NetworkProtocol *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkProtocol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkProtocol(struct soap *soap, tt__NetworkProtocol *p)
{
	if (::soap_read_tt__NetworkProtocol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__IPv6ConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6ConfigurationExtension(struct soap*, const char*, int, const tt__IPv6ConfigurationExtension *, const char*);
SOAP_FMAC3 tt__IPv6ConfigurationExtension * SOAP_FMAC4 soap_in_tt__IPv6ConfigurationExtension(struct soap*, const char*, tt__IPv6ConfigurationExtension *, const char*);
SOAP_FMAC1 tt__IPv6ConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__IPv6ConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6ConfigurationExtension * soap_new_tt__IPv6ConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6ConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6ConfigurationExtension * soap_new_req_tt__IPv6ConfigurationExtension(
	struct soap *soap)
{
	tt__IPv6ConfigurationExtension *_p = ::soap_new_tt__IPv6ConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__IPv6ConfigurationExtension * soap_new_set_tt__IPv6ConfigurationExtension(
	struct soap *soap)
{
	tt__IPv6ConfigurationExtension *_p = ::soap_new_tt__IPv6ConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__IPv6ConfigurationExtension(struct soap *soap, tt__IPv6ConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6ConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__IPv6ConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv6ConfigurationExtension(struct soap *soap, const char *URL, tt__IPv6ConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6ConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__IPv6ConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv6ConfigurationExtension(struct soap *soap, const char *URL, tt__IPv6ConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6ConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__IPv6ConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv6ConfigurationExtension(struct soap *soap, const char *URL, tt__IPv6ConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6ConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__IPv6ConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6ConfigurationExtension * SOAP_FMAC4 soap_get_tt__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__IPv6ConfigurationExtension(struct soap *soap, tt__IPv6ConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPv6ConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv6ConfigurationExtension(struct soap *soap, const char *URL, tt__IPv6ConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv6ConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv6ConfigurationExtension(struct soap *soap, tt__IPv6ConfigurationExtension *p)
{
	if (::soap_read_tt__IPv6ConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv6Configuration_DEFINED
#define SOAP_TYPE_tt__IPv6Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6Configuration(struct soap*, const char*, int, const tt__IPv6Configuration *, const char*);
SOAP_FMAC3 tt__IPv6Configuration * SOAP_FMAC4 soap_in_tt__IPv6Configuration(struct soap*, const char*, tt__IPv6Configuration *, const char*);
SOAP_FMAC1 tt__IPv6Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv6Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6Configuration * soap_new_tt__IPv6Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6Configuration * soap_new_req_tt__IPv6Configuration(
	struct soap *soap,
	enum tt__IPv6DHCPConfiguration DHCP)
{
	tt__IPv6Configuration *_p = ::soap_new_tt__IPv6Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6Configuration::DHCP = DHCP;
	}
	return _p;
}

inline tt__IPv6Configuration * soap_new_set_tt__IPv6Configuration(
	struct soap *soap,
	bool *AcceptRouterAdvert,
	enum tt__IPv6DHCPConfiguration DHCP,
	const std::vector<tt__PrefixedIPv6Address *> & Manual,
	const std::vector<tt__PrefixedIPv6Address *> & LinkLocal,
	const std::vector<tt__PrefixedIPv6Address *> & FromDHCP,
	const std::vector<tt__PrefixedIPv6Address *> & FromRA,
	tt__IPv6ConfigurationExtension *Extension)
{
	tt__IPv6Configuration *_p = ::soap_new_tt__IPv6Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6Configuration::AcceptRouterAdvert = AcceptRouterAdvert;
		_p->tt__IPv6Configuration::DHCP = DHCP;
		_p->tt__IPv6Configuration::Manual = Manual;
		_p->tt__IPv6Configuration::LinkLocal = LinkLocal;
		_p->tt__IPv6Configuration::FromDHCP = FromDHCP;
		_p->tt__IPv6Configuration::FromRA = FromRA;
		_p->tt__IPv6Configuration::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__IPv6Configuration(struct soap *soap, tt__IPv6Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6Configuration", p->soap_type() == SOAP_TYPE_tt__IPv6Configuration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv6Configuration(struct soap *soap, const char *URL, tt__IPv6Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6Configuration", p->soap_type() == SOAP_TYPE_tt__IPv6Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv6Configuration(struct soap *soap, const char *URL, tt__IPv6Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6Configuration", p->soap_type() == SOAP_TYPE_tt__IPv6Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv6Configuration(struct soap *soap, const char *URL, tt__IPv6Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6Configuration", p->soap_type() == SOAP_TYPE_tt__IPv6Configuration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6Configuration * SOAP_FMAC4 soap_get_tt__IPv6Configuration(struct soap*, tt__IPv6Configuration *, const char*, const char*);

inline int soap_read_tt__IPv6Configuration(struct soap *soap, tt__IPv6Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPv6Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv6Configuration(struct soap *soap, const char *URL, tt__IPv6Configuration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv6Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv6Configuration(struct soap *soap, tt__IPv6Configuration *p)
{
	if (::soap_read_tt__IPv6Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv4Configuration_DEFINED
#define SOAP_TYPE_tt__IPv4Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4Configuration(struct soap*, const char*, int, const tt__IPv4Configuration *, const char*);
SOAP_FMAC3 tt__IPv4Configuration * SOAP_FMAC4 soap_in_tt__IPv4Configuration(struct soap*, const char*, tt__IPv4Configuration *, const char*);
SOAP_FMAC1 tt__IPv4Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4Configuration * soap_new_tt__IPv4Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv4Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__IPv4Configuration * soap_new_req_tt__IPv4Configuration(
	struct soap *soap,
	bool DHCP)
{
	tt__IPv4Configuration *_p = ::soap_new_tt__IPv4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4Configuration::DHCP = DHCP;
	}
	return _p;
}

inline tt__IPv4Configuration * soap_new_set_tt__IPv4Configuration(
	struct soap *soap,
	const std::vector<tt__PrefixedIPv4Address *> & Manual,
	tt__PrefixedIPv4Address *LinkLocal,
	tt__PrefixedIPv4Address *FromDHCP,
	bool DHCP)
{
	tt__IPv4Configuration *_p = ::soap_new_tt__IPv4Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4Configuration::Manual = Manual;
		_p->tt__IPv4Configuration::LinkLocal = LinkLocal;
		_p->tt__IPv4Configuration::FromDHCP = FromDHCP;
		_p->tt__IPv4Configuration::DHCP = DHCP;
	}
	return _p;
}

inline int soap_write_tt__IPv4Configuration(struct soap *soap, tt__IPv4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4Configuration", p->soap_type() == SOAP_TYPE_tt__IPv4Configuration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv4Configuration(struct soap *soap, const char *URL, tt__IPv4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4Configuration", p->soap_type() == SOAP_TYPE_tt__IPv4Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv4Configuration(struct soap *soap, const char *URL, tt__IPv4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4Configuration", p->soap_type() == SOAP_TYPE_tt__IPv4Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv4Configuration(struct soap *soap, const char *URL, tt__IPv4Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4Configuration", p->soap_type() == SOAP_TYPE_tt__IPv4Configuration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv4Configuration * SOAP_FMAC4 soap_get_tt__IPv4Configuration(struct soap*, tt__IPv4Configuration *, const char*, const char*);

inline int soap_read_tt__IPv4Configuration(struct soap *soap, tt__IPv4Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPv4Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv4Configuration(struct soap *soap, const char *URL, tt__IPv4Configuration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv4Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv4Configuration(struct soap *soap, tt__IPv4Configuration *p)
{
	if (::soap_read_tt__IPv4Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterface_DEFINED
#define SOAP_TYPE_tt__IPv4NetworkInterface_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4NetworkInterface(struct soap*, const char*, int, const tt__IPv4NetworkInterface *, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterface * SOAP_FMAC4 soap_in_tt__IPv4NetworkInterface(struct soap*, const char*, tt__IPv4NetworkInterface *, const char*);
SOAP_FMAC1 tt__IPv4NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4NetworkInterface * soap_new_tt__IPv4NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv4NetworkInterface(soap, n, NULL, NULL, NULL);
}

inline tt__IPv4NetworkInterface * soap_new_req_tt__IPv4NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__IPv4Configuration *Config)
{
	tt__IPv4NetworkInterface *_p = ::soap_new_tt__IPv4NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4NetworkInterface::Enabled = Enabled;
		_p->tt__IPv4NetworkInterface::Config = Config;
	}
	return _p;
}

inline tt__IPv4NetworkInterface * soap_new_set_tt__IPv4NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__IPv4Configuration *Config)
{
	tt__IPv4NetworkInterface *_p = ::soap_new_tt__IPv4NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv4NetworkInterface::Enabled = Enabled;
		_p->tt__IPv4NetworkInterface::Config = Config;
	}
	return _p;
}

inline int soap_write_tt__IPv4NetworkInterface(struct soap *soap, tt__IPv4NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterface ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv4NetworkInterface(struct soap *soap, const char *URL, tt__IPv4NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterface ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv4NetworkInterface(struct soap *soap, const char *URL, tt__IPv4NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterface ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv4NetworkInterface(struct soap *soap, const char *URL, tt__IPv4NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv4NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv4NetworkInterface ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv4NetworkInterface * SOAP_FMAC4 soap_get_tt__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *, const char*, const char*);

inline int soap_read_tt__IPv4NetworkInterface(struct soap *soap, tt__IPv4NetworkInterface *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPv4NetworkInterface(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv4NetworkInterface(struct soap *soap, const char *URL, tt__IPv4NetworkInterface *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv4NetworkInterface(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv4NetworkInterface(struct soap *soap, tt__IPv4NetworkInterface *p)
{
	if (::soap_read_tt__IPv4NetworkInterface(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterface_DEFINED
#define SOAP_TYPE_tt__IPv6NetworkInterface_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6NetworkInterface(struct soap*, const char*, int, const tt__IPv6NetworkInterface *, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterface * SOAP_FMAC4 soap_in_tt__IPv6NetworkInterface(struct soap*, const char*, tt__IPv6NetworkInterface *, const char*);
SOAP_FMAC1 tt__IPv6NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6NetworkInterface * soap_new_tt__IPv6NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IPv6NetworkInterface(soap, n, NULL, NULL, NULL);
}

inline tt__IPv6NetworkInterface * soap_new_req_tt__IPv6NetworkInterface(
	struct soap *soap,
	bool Enabled)
{
	tt__IPv6NetworkInterface *_p = ::soap_new_tt__IPv6NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6NetworkInterface::Enabled = Enabled;
	}
	return _p;
}

inline tt__IPv6NetworkInterface * soap_new_set_tt__IPv6NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__IPv6Configuration *Config)
{
	tt__IPv6NetworkInterface *_p = ::soap_new_tt__IPv6NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IPv6NetworkInterface::Enabled = Enabled;
		_p->tt__IPv6NetworkInterface::Config = Config;
	}
	return _p;
}

inline int soap_write_tt__IPv6NetworkInterface(struct soap *soap, tt__IPv6NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterface ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IPv6NetworkInterface(struct soap *soap, const char *URL, tt__IPv6NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterface ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IPv6NetworkInterface(struct soap *soap, const char *URL, tt__IPv6NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterface ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IPv6NetworkInterface(struct soap *soap, const char *URL, tt__IPv6NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IPv6NetworkInterface", p->soap_type() == SOAP_TYPE_tt__IPv6NetworkInterface ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IPv6NetworkInterface * SOAP_FMAC4 soap_get_tt__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *, const char*, const char*);

inline int soap_read_tt__IPv6NetworkInterface(struct soap *soap, tt__IPv6NetworkInterface *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IPv6NetworkInterface(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IPv6NetworkInterface(struct soap *soap, const char *URL, tt__IPv6NetworkInterface *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IPv6NetworkInterface(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IPv6NetworkInterface(struct soap *soap, tt__IPv6NetworkInterface *p)
{
	if (::soap_read_tt__IPv6NetworkInterface(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceInfo(struct soap*, const char*, int, const tt__NetworkInterfaceInfo *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceInfo * SOAP_FMAC4 soap_in_tt__NetworkInterfaceInfo(struct soap*, const char*, tt__NetworkInterfaceInfo *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceInfo * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceInfo(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceInfo * soap_new_tt__NetworkInterfaceInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceInfo(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceInfo * soap_new_req_tt__NetworkInterfaceInfo(
	struct soap *soap,
	const std::string& HwAddress)
{
	tt__NetworkInterfaceInfo *_p = ::soap_new_tt__NetworkInterfaceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceInfo::HwAddress = HwAddress;
	}
	return _p;
}

inline tt__NetworkInterfaceInfo * soap_new_set_tt__NetworkInterfaceInfo(
	struct soap *soap,
	std::string *Name,
	const std::string& HwAddress,
	int *MTU)
{
	tt__NetworkInterfaceInfo *_p = ::soap_new_tt__NetworkInterfaceInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceInfo::Name = Name;
		_p->tt__NetworkInterfaceInfo::HwAddress = HwAddress;
		_p->tt__NetworkInterfaceInfo::MTU = MTU;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceInfo(struct soap *soap, tt__NetworkInterfaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceInfo", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceInfo(struct soap *soap, const char *URL, tt__NetworkInterfaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceInfo", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceInfo(struct soap *soap, const char *URL, tt__NetworkInterfaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceInfo", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceInfo(struct soap *soap, const char *URL, tt__NetworkInterfaceInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceInfo", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceInfo * SOAP_FMAC4 soap_get_tt__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceInfo(struct soap *soap, tt__NetworkInterfaceInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceInfo(struct soap *soap, const char *URL, tt__NetworkInterfaceInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceInfo(struct soap *soap, tt__NetworkInterfaceInfo *p)
{
	if (::soap_read_tt__NetworkInterfaceInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceConnectionSetting(struct soap*, const char*, int, const tt__NetworkInterfaceConnectionSetting *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_in_tt__NetworkInterfaceConnectionSetting(struct soap*, const char*, tt__NetworkInterfaceConnectionSetting *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConnectionSetting(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceConnectionSetting * soap_new_tt__NetworkInterfaceConnectionSetting(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceConnectionSetting(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceConnectionSetting * soap_new_req_tt__NetworkInterfaceConnectionSetting(
	struct soap *soap,
	bool AutoNegotiation,
	int Speed,
	enum tt__Duplex Duplex)
{
	tt__NetworkInterfaceConnectionSetting *_p = ::soap_new_tt__NetworkInterfaceConnectionSetting(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation;
		_p->tt__NetworkInterfaceConnectionSetting::Speed = Speed;
		_p->tt__NetworkInterfaceConnectionSetting::Duplex = Duplex;
	}
	return _p;
}

inline tt__NetworkInterfaceConnectionSetting * soap_new_set_tt__NetworkInterfaceConnectionSetting(
	struct soap *soap,
	bool AutoNegotiation,
	int Speed,
	enum tt__Duplex Duplex)
{
	tt__NetworkInterfaceConnectionSetting *_p = ::soap_new_tt__NetworkInterfaceConnectionSetting(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation;
		_p->tt__NetworkInterfaceConnectionSetting::Speed = Speed;
		_p->tt__NetworkInterfaceConnectionSetting::Duplex = Duplex;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceConnectionSetting(struct soap *soap, tt__NetworkInterfaceConnectionSetting const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceConnectionSetting", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceConnectionSetting ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceConnectionSetting(struct soap *soap, const char *URL, tt__NetworkInterfaceConnectionSetting const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceConnectionSetting", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceConnectionSetting ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceConnectionSetting(struct soap *soap, const char *URL, tt__NetworkInterfaceConnectionSetting const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceConnectionSetting", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceConnectionSetting ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceConnectionSetting(struct soap *soap, const char *URL, tt__NetworkInterfaceConnectionSetting const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceConnectionSetting", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceConnectionSetting ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_get_tt__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceConnectionSetting(struct soap *soap, tt__NetworkInterfaceConnectionSetting *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceConnectionSetting(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceConnectionSetting(struct soap *soap, const char *URL, tt__NetworkInterfaceConnectionSetting *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceConnectionSetting(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceConnectionSetting(struct soap *soap, tt__NetworkInterfaceConnectionSetting *p)
{
	if (::soap_read_tt__NetworkInterfaceConnectionSetting(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceLink_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceLink_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceLink(struct soap*, const char*, int, const tt__NetworkInterfaceLink *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceLink * SOAP_FMAC4 soap_in_tt__NetworkInterfaceLink(struct soap*, const char*, tt__NetworkInterfaceLink *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceLink * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceLink(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceLink * soap_new_tt__NetworkInterfaceLink(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceLink(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceLink * soap_new_req_tt__NetworkInterfaceLink(
	struct soap *soap,
	tt__NetworkInterfaceConnectionSetting *AdminSettings,
	tt__NetworkInterfaceConnectionSetting *OperSettings,
	int InterfaceType)
{
	tt__NetworkInterfaceLink *_p = ::soap_new_tt__NetworkInterfaceLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceLink::AdminSettings = AdminSettings;
		_p->tt__NetworkInterfaceLink::OperSettings = OperSettings;
		_p->tt__NetworkInterfaceLink::InterfaceType = InterfaceType;
	}
	return _p;
}

inline tt__NetworkInterfaceLink * soap_new_set_tt__NetworkInterfaceLink(
	struct soap *soap,
	tt__NetworkInterfaceConnectionSetting *AdminSettings,
	tt__NetworkInterfaceConnectionSetting *OperSettings,
	int InterfaceType)
{
	tt__NetworkInterfaceLink *_p = ::soap_new_tt__NetworkInterfaceLink(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceLink::AdminSettings = AdminSettings;
		_p->tt__NetworkInterfaceLink::OperSettings = OperSettings;
		_p->tt__NetworkInterfaceLink::InterfaceType = InterfaceType;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceLink const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceLink", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceLink ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceLink(struct soap *soap, const char *URL, tt__NetworkInterfaceLink const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceLink", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceLink ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceLink(struct soap *soap, const char *URL, tt__NetworkInterfaceLink const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceLink", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceLink ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceLink(struct soap *soap, const char *URL, tt__NetworkInterfaceLink const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceLink", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceLink ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceLink * SOAP_FMAC4 soap_get_tt__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceLink *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceLink(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceLink(struct soap *soap, const char *URL, tt__NetworkInterfaceLink *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceLink *p)
{
	if (::soap_read_tt__NetworkInterfaceLink(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceExtension2(struct soap*, const char*, int, const tt__NetworkInterfaceExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_in_tt__NetworkInterfaceExtension2(struct soap*, const char*, tt__NetworkInterfaceExtension2 *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceExtension2 * soap_new_tt__NetworkInterfaceExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceExtension2 * soap_new_req_tt__NetworkInterfaceExtension2(
	struct soap *soap)
{
	tt__NetworkInterfaceExtension2 *_p = ::soap_new_tt__NetworkInterfaceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__NetworkInterfaceExtension2 * soap_new_set_tt__NetworkInterfaceExtension2(
	struct soap *soap)
{
	tt__NetworkInterfaceExtension2 *_p = ::soap_new_tt__NetworkInterfaceExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceExtension2(struct soap *soap, tt__NetworkInterfaceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension2", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_get_tt__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceExtension2(struct soap *soap, tt__NetworkInterfaceExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceExtension2(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceExtension2(struct soap *soap, tt__NetworkInterfaceExtension2 *p)
{
	if (::soap_read_tt__NetworkInterfaceExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Dot3Configuration_DEFINED
#define SOAP_TYPE_tt__Dot3Configuration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot3Configuration(struct soap*, const char*, int, const tt__Dot3Configuration *, const char*);
SOAP_FMAC3 tt__Dot3Configuration * SOAP_FMAC4 soap_in_tt__Dot3Configuration(struct soap*, const char*, tt__Dot3Configuration *, const char*);
SOAP_FMAC1 tt__Dot3Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot3Configuration * soap_new_tt__Dot3Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Dot3Configuration(soap, n, NULL, NULL, NULL);
}

inline tt__Dot3Configuration * soap_new_req_tt__Dot3Configuration(
	struct soap *soap)
{
	tt__Dot3Configuration *_p = ::soap_new_tt__Dot3Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__Dot3Configuration * soap_new_set_tt__Dot3Configuration(
	struct soap *soap)
{
	tt__Dot3Configuration *_p = ::soap_new_tt__Dot3Configuration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__Dot3Configuration(struct soap *soap, tt__Dot3Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot3Configuration", p->soap_type() == SOAP_TYPE_tt__Dot3Configuration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Dot3Configuration(struct soap *soap, const char *URL, tt__Dot3Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot3Configuration", p->soap_type() == SOAP_TYPE_tt__Dot3Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Dot3Configuration(struct soap *soap, const char *URL, tt__Dot3Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot3Configuration", p->soap_type() == SOAP_TYPE_tt__Dot3Configuration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Dot3Configuration(struct soap *soap, const char *URL, tt__Dot3Configuration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Dot3Configuration", p->soap_type() == SOAP_TYPE_tt__Dot3Configuration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Dot3Configuration * SOAP_FMAC4 soap_get_tt__Dot3Configuration(struct soap*, tt__Dot3Configuration *, const char*, const char*);

inline int soap_read_tt__Dot3Configuration(struct soap *soap, tt__Dot3Configuration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Dot3Configuration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Dot3Configuration(struct soap *soap, const char *URL, tt__Dot3Configuration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Dot3Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Dot3Configuration(struct soap *soap, tt__Dot3Configuration *p)
{
	if (::soap_read_tt__Dot3Configuration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension_DEFINED
#define SOAP_TYPE_tt__NetworkInterfaceExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceExtension(struct soap*, const char*, int, const tt__NetworkInterfaceExtension *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension * SOAP_FMAC4 soap_in_tt__NetworkInterfaceExtension(struct soap*, const char*, tt__NetworkInterfaceExtension *, const char*);
SOAP_FMAC1 tt__NetworkInterfaceExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceExtension * soap_new_tt__NetworkInterfaceExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterfaceExtension(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterfaceExtension * soap_new_req_tt__NetworkInterfaceExtension(
	struct soap *soap,
	int InterfaceType)
{
	tt__NetworkInterfaceExtension *_p = ::soap_new_tt__NetworkInterfaceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceExtension::InterfaceType = InterfaceType;
	}
	return _p;
}

inline tt__NetworkInterfaceExtension * soap_new_set_tt__NetworkInterfaceExtension(
	struct soap *soap,
	int InterfaceType,
	const std::vector<tt__Dot3Configuration *> & Dot3,
	const std::vector<tt__Dot11Configuration *> & Dot11,
	tt__NetworkInterfaceExtension2 *Extension)
{
	tt__NetworkInterfaceExtension *_p = ::soap_new_tt__NetworkInterfaceExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterfaceExtension::InterfaceType = InterfaceType;
		_p->tt__NetworkInterfaceExtension::Dot3 = Dot3;
		_p->tt__NetworkInterfaceExtension::Dot11 = Dot11;
		_p->tt__NetworkInterfaceExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterfaceExtension(struct soap *soap, tt__NetworkInterfaceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterfaceExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterfaceExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterfaceExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterfaceExtension", p->soap_type() == SOAP_TYPE_tt__NetworkInterfaceExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterfaceExtension * SOAP_FMAC4 soap_get_tt__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *, const char*, const char*);

inline int soap_read_tt__NetworkInterfaceExtension(struct soap *soap, tt__NetworkInterfaceExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterfaceExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterfaceExtension(struct soap *soap, const char *URL, tt__NetworkInterfaceExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterfaceExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterfaceExtension(struct soap *soap, tt__NetworkInterfaceExtension *p)
{
	if (::soap_read_tt__NetworkInterfaceExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__NetworkInterface_DEFINED
#define SOAP_TYPE_tt__NetworkInterface_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterface(struct soap*, const char*, int, const tt__NetworkInterface *, const char*);
SOAP_FMAC3 tt__NetworkInterface * SOAP_FMAC4 soap_in_tt__NetworkInterface(struct soap*, const char*, tt__NetworkInterface *, const char*);
SOAP_FMAC1 tt__NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterface * soap_new_tt__NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__NetworkInterface(soap, n, NULL, NULL, NULL);
}

inline tt__NetworkInterface * soap_new_req_tt__NetworkInterface(
	struct soap *soap,
	bool Enabled,
	const std::string& token__1)
{
	tt__NetworkInterface *_p = ::soap_new_tt__NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterface::Enabled = Enabled;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__NetworkInterface * soap_new_set_tt__NetworkInterface(
	struct soap *soap,
	bool Enabled,
	tt__NetworkInterfaceInfo *Info,
	tt__NetworkInterfaceLink *Link,
	tt__IPv4NetworkInterface *IPv4,
	tt__IPv6NetworkInterface *IPv6,
	tt__NetworkInterfaceExtension *Extension,
	const std::string& token__1)
{
	tt__NetworkInterface *_p = ::soap_new_tt__NetworkInterface(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__NetworkInterface::Enabled = Enabled;
		_p->tt__NetworkInterface::Info = Info;
		_p->tt__NetworkInterface::Link = Link;
		_p->tt__NetworkInterface::IPv4 = IPv4;
		_p->tt__NetworkInterface::IPv6 = IPv6;
		_p->tt__NetworkInterface::Extension = Extension;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__NetworkInterface(struct soap *soap, tt__NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterface", p->soap_type() == SOAP_TYPE_tt__NetworkInterface ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__NetworkInterface(struct soap *soap, const char *URL, tt__NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterface", p->soap_type() == SOAP_TYPE_tt__NetworkInterface ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__NetworkInterface(struct soap *soap, const char *URL, tt__NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterface", p->soap_type() == SOAP_TYPE_tt__NetworkInterface ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__NetworkInterface(struct soap *soap, const char *URL, tt__NetworkInterface const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:NetworkInterface", p->soap_type() == SOAP_TYPE_tt__NetworkInterface ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__NetworkInterface * SOAP_FMAC4 soap_get_tt__NetworkInterface(struct soap*, tt__NetworkInterface *, const char*, const char*);

inline int soap_read_tt__NetworkInterface(struct soap *soap, tt__NetworkInterface *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__NetworkInterface(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__NetworkInterface(struct soap *soap, const char *URL, tt__NetworkInterface *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__NetworkInterface(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__NetworkInterface(struct soap *soap, tt__NetworkInterface *p)
{
	if (::soap_read_tt__NetworkInterface(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Scope_DEFINED
#define SOAP_TYPE_tt__Scope_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Scope(struct soap*, const char*, int, const tt__Scope *, const char*);
SOAP_FMAC3 tt__Scope * SOAP_FMAC4 soap_in_tt__Scope(struct soap*, const char*, tt__Scope *, const char*);
SOAP_FMAC1 tt__Scope * SOAP_FMAC2 soap_instantiate_tt__Scope(struct soap*, int, const char*, const char*, size_t*);

inline tt__Scope * soap_new_tt__Scope(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Scope(soap, n, NULL, NULL, NULL);
}

inline tt__Scope * soap_new_req_tt__Scope(
	struct soap *soap,
	enum tt__ScopeDefinition ScopeDef,
	const std::string& ScopeItem)
{
	tt__Scope *_p = ::soap_new_tt__Scope(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Scope::ScopeDef = ScopeDef;
		_p->tt__Scope::ScopeItem = ScopeItem;
	}
	return _p;
}

inline tt__Scope * soap_new_set_tt__Scope(
	struct soap *soap,
	enum tt__ScopeDefinition ScopeDef,
	const std::string& ScopeItem)
{
	tt__Scope *_p = ::soap_new_tt__Scope(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Scope::ScopeDef = ScopeDef;
		_p->tt__Scope::ScopeItem = ScopeItem;
	}
	return _p;
}

inline int soap_write_tt__Scope(struct soap *soap, tt__Scope const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Scope", p->soap_type() == SOAP_TYPE_tt__Scope ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Scope(struct soap *soap, const char *URL, tt__Scope const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Scope", p->soap_type() == SOAP_TYPE_tt__Scope ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Scope(struct soap *soap, const char *URL, tt__Scope const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Scope", p->soap_type() == SOAP_TYPE_tt__Scope ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Scope(struct soap *soap, const char *URL, tt__Scope const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Scope", p->soap_type() == SOAP_TYPE_tt__Scope ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Scope * SOAP_FMAC4 soap_get_tt__Scope(struct soap*, tt__Scope *, const char*, const char*);

inline int soap_read_tt__Scope(struct soap *soap, tt__Scope *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Scope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Scope(struct soap *soap, const char *URL, tt__Scope *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Scope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Scope(struct soap *soap, tt__Scope *p)
{
	if (::soap_read_tt__Scope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity_DEFINED
#define SOAP_TYPE_tt__DeviceEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceEntity(struct soap*, const char*, int, const tt__DeviceEntity *, const char*);
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_in_tt__DeviceEntity(struct soap*, const char*, tt__DeviceEntity *, const char*);
SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceEntity * soap_new_tt__DeviceEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceEntity(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceEntity * soap_new_req_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline tt__DeviceEntity * soap_new_set_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline int soap_write_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_get_tt__DeviceEntity(struct soap*, tt__DeviceEntity *, const char*, const char*);

inline int soap_read_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DeviceEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteGeoLocationResponse_DEFINED
#define SOAP_TYPE__tds__DeleteGeoLocationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteGeoLocationResponse(struct soap*, const char*, int, const _tds__DeleteGeoLocationResponse *, const char*);
SOAP_FMAC3 _tds__DeleteGeoLocationResponse * SOAP_FMAC4 soap_in__tds__DeleteGeoLocationResponse(struct soap*, const char*, _tds__DeleteGeoLocationResponse *, const char*);
SOAP_FMAC1 _tds__DeleteGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteGeoLocationResponse * soap_new__tds__DeleteGeoLocationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteGeoLocationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteGeoLocationResponse * soap_new_req__tds__DeleteGeoLocationResponse(
	struct soap *soap)
{
	_tds__DeleteGeoLocationResponse *_p = ::soap_new__tds__DeleteGeoLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteGeoLocationResponse * soap_new_set__tds__DeleteGeoLocationResponse(
	struct soap *soap)
{
	_tds__DeleteGeoLocationResponse *_p = ::soap_new__tds__DeleteGeoLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteGeoLocationResponse(struct soap *soap, _tds__DeleteGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteGeoLocationResponse(struct soap *soap, const char *URL, _tds__DeleteGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteGeoLocationResponse(struct soap *soap, const char *URL, _tds__DeleteGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteGeoLocationResponse(struct soap *soap, const char *URL, _tds__DeleteGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteGeoLocationResponse * SOAP_FMAC4 soap_get__tds__DeleteGeoLocationResponse(struct soap*, _tds__DeleteGeoLocationResponse *, const char*, const char*);

inline int soap_read__tds__DeleteGeoLocationResponse(struct soap *soap, _tds__DeleteGeoLocationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteGeoLocationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteGeoLocationResponse(struct soap *soap, const char *URL, _tds__DeleteGeoLocationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteGeoLocationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteGeoLocationResponse(struct soap *soap, _tds__DeleteGeoLocationResponse *p)
{
	if (::soap_read__tds__DeleteGeoLocationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteGeoLocation_DEFINED
#define SOAP_TYPE__tds__DeleteGeoLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteGeoLocation(struct soap*, const char*, int, const _tds__DeleteGeoLocation *, const char*);
SOAP_FMAC3 _tds__DeleteGeoLocation * SOAP_FMAC4 soap_in__tds__DeleteGeoLocation(struct soap*, const char*, _tds__DeleteGeoLocation *, const char*);
SOAP_FMAC1 _tds__DeleteGeoLocation * SOAP_FMAC2 soap_instantiate__tds__DeleteGeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteGeoLocation * soap_new__tds__DeleteGeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteGeoLocation(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteGeoLocation * soap_new_req__tds__DeleteGeoLocation(
	struct soap *soap,
	const std::vector<tt__LocationEntity *> & Location)
{
	_tds__DeleteGeoLocation *_p = ::soap_new__tds__DeleteGeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteGeoLocation::Location = Location;
	}
	return _p;
}

inline _tds__DeleteGeoLocation * soap_new_set__tds__DeleteGeoLocation(
	struct soap *soap,
	const std::vector<tt__LocationEntity *> & Location)
{
	_tds__DeleteGeoLocation *_p = ::soap_new__tds__DeleteGeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteGeoLocation::Location = Location;
	}
	return _p;
}

inline int soap_write__tds__DeleteGeoLocation(struct soap *soap, _tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocation", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteGeoLocation(struct soap *soap, const char *URL, _tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocation", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteGeoLocation(struct soap *soap, const char *URL, _tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocation", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteGeoLocation(struct soap *soap, const char *URL, _tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteGeoLocation", p->soap_type() == SOAP_TYPE__tds__DeleteGeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteGeoLocation * SOAP_FMAC4 soap_get__tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation *, const char*, const char*);

inline int soap_read__tds__DeleteGeoLocation(struct soap *soap, _tds__DeleteGeoLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteGeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteGeoLocation(struct soap *soap, const char *URL, _tds__DeleteGeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteGeoLocation(struct soap *soap, _tds__DeleteGeoLocation *p)
{
	if (::soap_read__tds__DeleteGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetGeoLocationResponse_DEFINED
#define SOAP_TYPE__tds__SetGeoLocationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetGeoLocationResponse(struct soap*, const char*, int, const _tds__SetGeoLocationResponse *, const char*);
SOAP_FMAC3 _tds__SetGeoLocationResponse * SOAP_FMAC4 soap_in__tds__SetGeoLocationResponse(struct soap*, const char*, _tds__SetGeoLocationResponse *, const char*);
SOAP_FMAC1 _tds__SetGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__SetGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetGeoLocationResponse * soap_new__tds__SetGeoLocationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetGeoLocationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetGeoLocationResponse * soap_new_req__tds__SetGeoLocationResponse(
	struct soap *soap)
{
	_tds__SetGeoLocationResponse *_p = ::soap_new__tds__SetGeoLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetGeoLocationResponse * soap_new_set__tds__SetGeoLocationResponse(
	struct soap *soap)
{
	_tds__SetGeoLocationResponse *_p = ::soap_new__tds__SetGeoLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetGeoLocationResponse(struct soap *soap, _tds__SetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__SetGeoLocationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetGeoLocationResponse(struct soap *soap, const char *URL, _tds__SetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__SetGeoLocationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetGeoLocationResponse(struct soap *soap, const char *URL, _tds__SetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__SetGeoLocationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetGeoLocationResponse(struct soap *soap, const char *URL, _tds__SetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__SetGeoLocationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetGeoLocationResponse * SOAP_FMAC4 soap_get__tds__SetGeoLocationResponse(struct soap*, _tds__SetGeoLocationResponse *, const char*, const char*);

inline int soap_read__tds__SetGeoLocationResponse(struct soap *soap, _tds__SetGeoLocationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetGeoLocationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetGeoLocationResponse(struct soap *soap, const char *URL, _tds__SetGeoLocationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetGeoLocationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetGeoLocationResponse(struct soap *soap, _tds__SetGeoLocationResponse *p)
{
	if (::soap_read__tds__SetGeoLocationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetGeoLocation_DEFINED
#define SOAP_TYPE__tds__SetGeoLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetGeoLocation(struct soap*, const char*, int, const _tds__SetGeoLocation *, const char*);
SOAP_FMAC3 _tds__SetGeoLocation * SOAP_FMAC4 soap_in__tds__SetGeoLocation(struct soap*, const char*, _tds__SetGeoLocation *, const char*);
SOAP_FMAC1 _tds__SetGeoLocation * SOAP_FMAC2 soap_instantiate__tds__SetGeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetGeoLocation * soap_new__tds__SetGeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetGeoLocation(soap, n, NULL, NULL, NULL);
}

inline _tds__SetGeoLocation * soap_new_req__tds__SetGeoLocation(
	struct soap *soap,
	const std::vector<tt__LocationEntity *> & Location)
{
	_tds__SetGeoLocation *_p = ::soap_new__tds__SetGeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetGeoLocation::Location = Location;
	}
	return _p;
}

inline _tds__SetGeoLocation * soap_new_set__tds__SetGeoLocation(
	struct soap *soap,
	const std::vector<tt__LocationEntity *> & Location)
{
	_tds__SetGeoLocation *_p = ::soap_new__tds__SetGeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetGeoLocation::Location = Location;
	}
	return _p;
}

inline int soap_write__tds__SetGeoLocation(struct soap *soap, _tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocation", p->soap_type() == SOAP_TYPE__tds__SetGeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetGeoLocation(struct soap *soap, const char *URL, _tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocation", p->soap_type() == SOAP_TYPE__tds__SetGeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetGeoLocation(struct soap *soap, const char *URL, _tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocation", p->soap_type() == SOAP_TYPE__tds__SetGeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetGeoLocation(struct soap *soap, const char *URL, _tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetGeoLocation", p->soap_type() == SOAP_TYPE__tds__SetGeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetGeoLocation * SOAP_FMAC4 soap_get__tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation *, const char*, const char*);

inline int soap_read__tds__SetGeoLocation(struct soap *soap, _tds__SetGeoLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetGeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetGeoLocation(struct soap *soap, const char *URL, _tds__SetGeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetGeoLocation(struct soap *soap, _tds__SetGeoLocation *p)
{
	if (::soap_read__tds__SetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetGeoLocationResponse_DEFINED
#define SOAP_TYPE__tds__GetGeoLocationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetGeoLocationResponse(struct soap*, const char*, int, const _tds__GetGeoLocationResponse *, const char*);
SOAP_FMAC3 _tds__GetGeoLocationResponse * SOAP_FMAC4 soap_in__tds__GetGeoLocationResponse(struct soap*, const char*, _tds__GetGeoLocationResponse *, const char*);
SOAP_FMAC1 _tds__GetGeoLocationResponse * SOAP_FMAC2 soap_instantiate__tds__GetGeoLocationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetGeoLocationResponse * soap_new__tds__GetGeoLocationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetGeoLocationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetGeoLocationResponse * soap_new_req__tds__GetGeoLocationResponse(
	struct soap *soap)
{
	_tds__GetGeoLocationResponse *_p = ::soap_new__tds__GetGeoLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetGeoLocationResponse * soap_new_set__tds__GetGeoLocationResponse(
	struct soap *soap,
	const std::vector<tt__LocationEntity *> & Location)
{
	_tds__GetGeoLocationResponse *_p = ::soap_new__tds__GetGeoLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetGeoLocationResponse::Location = Location;
	}
	return _p;
}

inline int soap_write__tds__GetGeoLocationResponse(struct soap *soap, _tds__GetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__GetGeoLocationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetGeoLocationResponse(struct soap *soap, const char *URL, _tds__GetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__GetGeoLocationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetGeoLocationResponse(struct soap *soap, const char *URL, _tds__GetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__GetGeoLocationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetGeoLocationResponse(struct soap *soap, const char *URL, _tds__GetGeoLocationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocationResponse", p->soap_type() == SOAP_TYPE__tds__GetGeoLocationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetGeoLocationResponse * SOAP_FMAC4 soap_get__tds__GetGeoLocationResponse(struct soap*, _tds__GetGeoLocationResponse *, const char*, const char*);

inline int soap_read__tds__GetGeoLocationResponse(struct soap *soap, _tds__GetGeoLocationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetGeoLocationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetGeoLocationResponse(struct soap *soap, const char *URL, _tds__GetGeoLocationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetGeoLocationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetGeoLocationResponse(struct soap *soap, _tds__GetGeoLocationResponse *p)
{
	if (::soap_read__tds__GetGeoLocationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetGeoLocation_DEFINED
#define SOAP_TYPE__tds__GetGeoLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetGeoLocation(struct soap*, const char*, int, const _tds__GetGeoLocation *, const char*);
SOAP_FMAC3 _tds__GetGeoLocation * SOAP_FMAC4 soap_in__tds__GetGeoLocation(struct soap*, const char*, _tds__GetGeoLocation *, const char*);
SOAP_FMAC1 _tds__GetGeoLocation * SOAP_FMAC2 soap_instantiate__tds__GetGeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetGeoLocation * soap_new__tds__GetGeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetGeoLocation(soap, n, NULL, NULL, NULL);
}

inline _tds__GetGeoLocation * soap_new_req__tds__GetGeoLocation(
	struct soap *soap)
{
	_tds__GetGeoLocation *_p = ::soap_new__tds__GetGeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetGeoLocation * soap_new_set__tds__GetGeoLocation(
	struct soap *soap)
{
	_tds__GetGeoLocation *_p = ::soap_new__tds__GetGeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetGeoLocation(struct soap *soap, _tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocation", p->soap_type() == SOAP_TYPE__tds__GetGeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetGeoLocation(struct soap *soap, const char *URL, _tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocation", p->soap_type() == SOAP_TYPE__tds__GetGeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetGeoLocation(struct soap *soap, const char *URL, _tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocation", p->soap_type() == SOAP_TYPE__tds__GetGeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetGeoLocation(struct soap *soap, const char *URL, _tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetGeoLocation", p->soap_type() == SOAP_TYPE__tds__GetGeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetGeoLocation * SOAP_FMAC4 soap_get__tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation *, const char*, const char*);

inline int soap_read__tds__GetGeoLocation(struct soap *soap, _tds__GetGeoLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetGeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetGeoLocation(struct soap *soap, const char *URL, _tds__GetGeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetGeoLocation(struct soap *soap, _tds__GetGeoLocation *p)
{
	if (::soap_read__tds__GetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteStorageConfigurationResponse(struct soap*, const char*, int, const _tds__DeleteStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__DeleteStorageConfigurationResponse(struct soap*, const char*, _tds__DeleteStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteStorageConfigurationResponse * soap_new__tds__DeleteStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteStorageConfigurationResponse * soap_new_req__tds__DeleteStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteStorageConfigurationResponse *_p = ::soap_new__tds__DeleteStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteStorageConfigurationResponse * soap_new_set__tds__DeleteStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteStorageConfigurationResponse *_p = ::soap_new__tds__DeleteStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteStorageConfigurationResponse(struct soap *soap, _tds__DeleteStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__DeleteStorageConfigurationResponse(struct soap*, _tds__DeleteStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__DeleteStorageConfigurationResponse(struct soap *soap, _tds__DeleteStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteStorageConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteStorageConfigurationResponse(struct soap *soap, _tds__DeleteStorageConfigurationResponse *p)
{
	if (::soap_read__tds__DeleteStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__DeleteStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteStorageConfiguration(struct soap*, const char*, int, const _tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_in__tds__DeleteStorageConfiguration(struct soap*, const char*, _tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteStorageConfiguration * soap_new__tds__DeleteStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteStorageConfiguration * soap_new_req__tds__DeleteStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__DeleteStorageConfiguration *_p = ::soap_new__tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteStorageConfiguration::Token = Token;
	}
	return _p;
}

inline _tds__DeleteStorageConfiguration * soap_new_set__tds__DeleteStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__DeleteStorageConfiguration *_p = ::soap_new__tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteStorageConfiguration::Token = Token;
	}
	return _p;
}

inline int soap_write__tds__DeleteStorageConfiguration(struct soap *soap, _tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, _tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, _tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, _tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_get__tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__DeleteStorageConfiguration(struct soap *soap, _tds__DeleteStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, _tds__DeleteStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteStorageConfiguration(struct soap *soap, _tds__DeleteStorageConfiguration *p)
{
	if (::soap_read__tds__DeleteStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetStorageConfigurationResponse(struct soap*, const char*, int, const _tds__SetStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetStorageConfigurationResponse(struct soap*, const char*, _tds__SetStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetStorageConfigurationResponse * soap_new__tds__SetStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetStorageConfigurationResponse * soap_new_req__tds__SetStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__SetStorageConfigurationResponse *_p = ::soap_new__tds__SetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetStorageConfigurationResponse * soap_new_set__tds__SetStorageConfigurationResponse(
	struct soap *soap)
{
	_tds__SetStorageConfigurationResponse *_p = ::soap_new__tds__SetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetStorageConfigurationResponse(struct soap *soap, _tds__SetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__SetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__SetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__SetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetStorageConfigurationResponse(struct soap*, _tds__SetStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetStorageConfigurationResponse(struct soap *soap, _tds__SetStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__SetStorageConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetStorageConfigurationResponse(struct soap *soap, _tds__SetStorageConfigurationResponse *p)
{
	if (::soap_read__tds__SetStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__SetStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetStorageConfiguration(struct soap*, const char*, int, const _tds__SetStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__SetStorageConfiguration * SOAP_FMAC4 soap_in__tds__SetStorageConfiguration(struct soap*, const char*, _tds__SetStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetStorageConfiguration * soap_new__tds__SetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetStorageConfiguration * soap_new_req__tds__SetStorageConfiguration(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__SetStorageConfiguration *_p = ::soap_new__tds__SetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline _tds__SetStorageConfiguration * soap_new_set__tds__SetStorageConfiguration(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__SetStorageConfiguration *_p = ::soap_new__tds__SetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline int soap_write__tds__SetStorageConfiguration(struct soap *soap, _tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__SetStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetStorageConfiguration(struct soap *soap, const char *URL, _tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__SetStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetStorageConfiguration(struct soap *soap, const char *URL, _tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__SetStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetStorageConfiguration(struct soap *soap, const char *URL, _tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__SetStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetStorageConfiguration * SOAP_FMAC4 soap_get__tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__SetStorageConfiguration(struct soap *soap, _tds__SetStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetStorageConfiguration(struct soap *soap, const char *URL, _tds__SetStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetStorageConfiguration(struct soap *soap, _tds__SetStorageConfiguration *p)
{
	if (::soap_read__tds__SetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfigurationResponse(struct soap*, const char*, int, const _tds__GetStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetStorageConfigurationResponse(struct soap*, const char*, _tds__GetStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfigurationResponse * soap_new__tds__GetStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfigurationResponse * soap_new_req__tds__GetStorageConfigurationResponse(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__GetStorageConfigurationResponse *_p = ::soap_new__tds__GetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfigurationResponse::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline _tds__GetStorageConfigurationResponse * soap_new_set__tds__GetStorageConfigurationResponse(
	struct soap *soap,
	tds__StorageConfiguration *StorageConfiguration)
{
	_tds__GetStorageConfigurationResponse *_p = ::soap_new__tds__GetStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfigurationResponse::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfigurationResponse(struct soap *soap, _tds__GetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetStorageConfigurationResponse(struct soap*, _tds__GetStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetStorageConfigurationResponse(struct soap *soap, _tds__GetStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetStorageConfigurationResponse(struct soap *soap, _tds__GetStorageConfigurationResponse *p)
{
	if (::soap_read__tds__GetStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__GetStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfiguration(struct soap*, const char*, int, const _tds__GetStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__GetStorageConfiguration * SOAP_FMAC4 soap_in__tds__GetStorageConfiguration(struct soap*, const char*, _tds__GetStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfiguration * soap_new__tds__GetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfiguration * soap_new_req__tds__GetStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__GetStorageConfiguration *_p = ::soap_new__tds__GetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfiguration::Token = Token;
	}
	return _p;
}

inline _tds__GetStorageConfiguration * soap_new_set__tds__GetStorageConfiguration(
	struct soap *soap,
	const std::string& Token)
{
	_tds__GetStorageConfiguration *_p = ::soap_new__tds__GetStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfiguration::Token = Token;
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfiguration(struct soap *soap, _tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__GetStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetStorageConfiguration(struct soap *soap, const char *URL, _tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__GetStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetStorageConfiguration(struct soap *soap, const char *URL, _tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__GetStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetStorageConfiguration(struct soap *soap, const char *URL, _tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__GetStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfiguration * SOAP_FMAC4 soap_get__tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__GetStorageConfiguration(struct soap *soap, _tds__GetStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetStorageConfiguration(struct soap *soap, const char *URL, _tds__GetStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetStorageConfiguration(struct soap *soap, _tds__GetStorageConfiguration *p)
{
	if (::soap_read__tds__GetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateStorageConfigurationResponse(struct soap*, const char*, int, const _tds__CreateStorageConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__CreateStorageConfigurationResponse * SOAP_FMAC4 soap_in__tds__CreateStorageConfigurationResponse(struct soap*, const char*, _tds__CreateStorageConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__CreateStorageConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateStorageConfigurationResponse * soap_new__tds__CreateStorageConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateStorageConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateStorageConfigurationResponse * soap_new_req__tds__CreateStorageConfigurationResponse(
	struct soap *soap,
	const std::string& Token)
{
	_tds__CreateStorageConfigurationResponse *_p = ::soap_new__tds__CreateStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfigurationResponse::Token = Token;
	}
	return _p;
}

inline _tds__CreateStorageConfigurationResponse * soap_new_set__tds__CreateStorageConfigurationResponse(
	struct soap *soap,
	const std::string& Token)
{
	_tds__CreateStorageConfigurationResponse *_p = ::soap_new__tds__CreateStorageConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfigurationResponse::Token = Token;
	}
	return _p;
}

inline int soap_write__tds__CreateStorageConfigurationResponse(struct soap *soap, _tds__CreateStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateStorageConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateStorageConfigurationResponse * SOAP_FMAC4 soap_get__tds__CreateStorageConfigurationResponse(struct soap*, _tds__CreateStorageConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__CreateStorageConfigurationResponse(struct soap *soap, _tds__CreateStorageConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateStorageConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateStorageConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateStorageConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateStorageConfigurationResponse(struct soap *soap, _tds__CreateStorageConfigurationResponse *p)
{
	if (::soap_read__tds__CreateStorageConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfiguration_DEFINED
#define SOAP_TYPE__tds__CreateStorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateStorageConfiguration(struct soap*, const char*, int, const _tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC3 _tds__CreateStorageConfiguration * SOAP_FMAC4 soap_in__tds__CreateStorageConfiguration(struct soap*, const char*, _tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC1 _tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateStorageConfiguration * soap_new__tds__CreateStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateStorageConfiguration * soap_new_req__tds__CreateStorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *StorageConfiguration)
{
	_tds__CreateStorageConfiguration *_p = ::soap_new__tds__CreateStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline _tds__CreateStorageConfiguration * soap_new_set__tds__CreateStorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *StorageConfiguration)
{
	_tds__CreateStorageConfiguration *_p = ::soap_new__tds__CreateStorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateStorageConfiguration::StorageConfiguration = StorageConfiguration;
	}
	return _p;
}

inline int soap_write__tds__CreateStorageConfiguration(struct soap *soap, _tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateStorageConfiguration(struct soap *soap, const char *URL, _tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateStorageConfiguration(struct soap *soap, const char *URL, _tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateStorageConfiguration(struct soap *soap, const char *URL, _tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateStorageConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateStorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateStorageConfiguration * SOAP_FMAC4 soap_get__tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration *, const char*, const char*);

inline int soap_read__tds__CreateStorageConfiguration(struct soap *soap, _tds__CreateStorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateStorageConfiguration(struct soap *soap, const char *URL, _tds__CreateStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateStorageConfiguration(struct soap *soap, _tds__CreateStorageConfiguration *p)
{
	if (::soap_read__tds__CreateStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse_DEFINED
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfigurationsResponse(struct soap*, const char*, int, const _tds__GetStorageConfigurationsResponse *, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurationsResponse * SOAP_FMAC4 soap_in__tds__GetStorageConfigurationsResponse(struct soap*, const char*, _tds__GetStorageConfigurationsResponse *, const char*);
SOAP_FMAC1 _tds__GetStorageConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfigurationsResponse * soap_new__tds__GetStorageConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfigurationsResponse * soap_new_req__tds__GetStorageConfigurationsResponse(
	struct soap *soap)
{
	_tds__GetStorageConfigurationsResponse *_p = ::soap_new__tds__GetStorageConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetStorageConfigurationsResponse * soap_new_set__tds__GetStorageConfigurationsResponse(
	struct soap *soap,
	const std::vector<tds__StorageConfiguration *> & StorageConfigurations)
{
	_tds__GetStorageConfigurationsResponse *_p = ::soap_new__tds__GetStorageConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetStorageConfigurationsResponse::StorageConfigurations = StorageConfigurations;
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfigurationsResponse(struct soap *soap, _tds__GetStorageConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetStorageConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetStorageConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetStorageConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfigurationsResponse * SOAP_FMAC4 soap_get__tds__GetStorageConfigurationsResponse(struct soap*, _tds__GetStorageConfigurationsResponse *, const char*, const char*);

inline int soap_read__tds__GetStorageConfigurationsResponse(struct soap *soap, _tds__GetStorageConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetStorageConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetStorageConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetStorageConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetStorageConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetStorageConfigurationsResponse(struct soap *soap, _tds__GetStorageConfigurationsResponse *p)
{
	if (::soap_read__tds__GetStorageConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurations_DEFINED
#define SOAP_TYPE__tds__GetStorageConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetStorageConfigurations(struct soap*, const char*, int, const _tds__GetStorageConfigurations *, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurations * SOAP_FMAC4 soap_in__tds__GetStorageConfigurations(struct soap*, const char*, _tds__GetStorageConfigurations *, const char*);
SOAP_FMAC1 _tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetStorageConfigurations * soap_new__tds__GetStorageConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetStorageConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tds__GetStorageConfigurations * soap_new_req__tds__GetStorageConfigurations(
	struct soap *soap)
{
	_tds__GetStorageConfigurations *_p = ::soap_new__tds__GetStorageConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetStorageConfigurations * soap_new_set__tds__GetStorageConfigurations(
	struct soap *soap)
{
	_tds__GetStorageConfigurations *_p = ::soap_new__tds__GetStorageConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetStorageConfigurations(struct soap *soap, _tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurations", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetStorageConfigurations(struct soap *soap, const char *URL, _tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurations", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetStorageConfigurations(struct soap *soap, const char *URL, _tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurations", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetStorageConfigurations(struct soap *soap, const char *URL, _tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetStorageConfigurations", p->soap_type() == SOAP_TYPE__tds__GetStorageConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetStorageConfigurations * SOAP_FMAC4 soap_get__tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations *, const char*, const char*);

inline int soap_read__tds__GetStorageConfigurations(struct soap *soap, _tds__GetStorageConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetStorageConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetStorageConfigurations(struct soap *soap, const char *URL, _tds__GetStorageConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetStorageConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetStorageConfigurations(struct soap *soap, _tds__GetStorageConfigurations *p)
{
	if (::soap_read__tds__GetStorageConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetHashingAlgorithmResponse_DEFINED
#define SOAP_TYPE__tds__SetHashingAlgorithmResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHashingAlgorithmResponse(struct soap*, const char*, int, const _tds__SetHashingAlgorithmResponse *, const char*);
SOAP_FMAC3 _tds__SetHashingAlgorithmResponse * SOAP_FMAC4 soap_in__tds__SetHashingAlgorithmResponse(struct soap*, const char*, _tds__SetHashingAlgorithmResponse *, const char*);
SOAP_FMAC1 _tds__SetHashingAlgorithmResponse * SOAP_FMAC2 soap_instantiate__tds__SetHashingAlgorithmResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHashingAlgorithmResponse * soap_new__tds__SetHashingAlgorithmResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHashingAlgorithmResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHashingAlgorithmResponse * soap_new_req__tds__SetHashingAlgorithmResponse(
	struct soap *soap)
{
	_tds__SetHashingAlgorithmResponse *_p = ::soap_new__tds__SetHashingAlgorithmResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetHashingAlgorithmResponse * soap_new_set__tds__SetHashingAlgorithmResponse(
	struct soap *soap)
{
	_tds__SetHashingAlgorithmResponse *_p = ::soap_new__tds__SetHashingAlgorithmResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetHashingAlgorithmResponse(struct soap *soap, _tds__SetHashingAlgorithmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithmResponse", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithmResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetHashingAlgorithmResponse(struct soap *soap, const char *URL, _tds__SetHashingAlgorithmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithmResponse", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithmResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetHashingAlgorithmResponse(struct soap *soap, const char *URL, _tds__SetHashingAlgorithmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithmResponse", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithmResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetHashingAlgorithmResponse(struct soap *soap, const char *URL, _tds__SetHashingAlgorithmResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithmResponse", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithmResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHashingAlgorithmResponse * SOAP_FMAC4 soap_get__tds__SetHashingAlgorithmResponse(struct soap*, _tds__SetHashingAlgorithmResponse *, const char*, const char*);

inline int soap_read__tds__SetHashingAlgorithmResponse(struct soap *soap, _tds__SetHashingAlgorithmResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetHashingAlgorithmResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetHashingAlgorithmResponse(struct soap *soap, const char *URL, _tds__SetHashingAlgorithmResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetHashingAlgorithmResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetHashingAlgorithmResponse(struct soap *soap, _tds__SetHashingAlgorithmResponse *p)
{
	if (::soap_read__tds__SetHashingAlgorithmResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetHashingAlgorithm_DEFINED
#define SOAP_TYPE__tds__SetHashingAlgorithm_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHashingAlgorithm(struct soap*, const char*, int, const _tds__SetHashingAlgorithm *, const char*);
SOAP_FMAC3 _tds__SetHashingAlgorithm * SOAP_FMAC4 soap_in__tds__SetHashingAlgorithm(struct soap*, const char*, _tds__SetHashingAlgorithm *, const char*);
SOAP_FMAC1 _tds__SetHashingAlgorithm * SOAP_FMAC2 soap_instantiate__tds__SetHashingAlgorithm(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHashingAlgorithm * soap_new__tds__SetHashingAlgorithm(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHashingAlgorithm(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHashingAlgorithm * soap_new_req__tds__SetHashingAlgorithm(
	struct soap *soap,
	const std::string& Algorithm)
{
	_tds__SetHashingAlgorithm *_p = ::soap_new__tds__SetHashingAlgorithm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHashingAlgorithm::Algorithm = Algorithm;
	}
	return _p;
}

inline _tds__SetHashingAlgorithm * soap_new_set__tds__SetHashingAlgorithm(
	struct soap *soap,
	const std::string& Algorithm)
{
	_tds__SetHashingAlgorithm *_p = ::soap_new__tds__SetHashingAlgorithm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHashingAlgorithm::Algorithm = Algorithm;
	}
	return _p;
}

inline int soap_write__tds__SetHashingAlgorithm(struct soap *soap, _tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithm", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithm ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetHashingAlgorithm(struct soap *soap, const char *URL, _tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithm", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetHashingAlgorithm(struct soap *soap, const char *URL, _tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithm", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithm ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetHashingAlgorithm(struct soap *soap, const char *URL, _tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHashingAlgorithm", p->soap_type() == SOAP_TYPE__tds__SetHashingAlgorithm ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHashingAlgorithm * SOAP_FMAC4 soap_get__tds__SetHashingAlgorithm(struct soap*, _tds__SetHashingAlgorithm *, const char*, const char*);

inline int soap_read__tds__SetHashingAlgorithm(struct soap *soap, _tds__SetHashingAlgorithm *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetHashingAlgorithm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetHashingAlgorithm(struct soap *soap, const char *URL, _tds__SetHashingAlgorithm *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetHashingAlgorithm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetHashingAlgorithm(struct soap *soap, _tds__SetHashingAlgorithm *p)
{
	if (::soap_read__tds__SetHashingAlgorithm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse_DEFINED
#define SOAP_TYPE__tds__StartSystemRestoreResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartSystemRestoreResponse(struct soap*, const char*, int, const _tds__StartSystemRestoreResponse *, const char*);
SOAP_FMAC3 _tds__StartSystemRestoreResponse * SOAP_FMAC4 soap_in__tds__StartSystemRestoreResponse(struct soap*, const char*, _tds__StartSystemRestoreResponse *, const char*);
SOAP_FMAC1 _tds__StartSystemRestoreResponse * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestoreResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartSystemRestoreResponse * soap_new__tds__StartSystemRestoreResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartSystemRestoreResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__StartSystemRestoreResponse * soap_new_req__tds__StartSystemRestoreResponse(
	struct soap *soap,
	const std::string& UploadUri,
	const std::string& ExpectedDownTime)
{
	_tds__StartSystemRestoreResponse *_p = ::soap_new__tds__StartSystemRestoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartSystemRestoreResponse::UploadUri = UploadUri;
		_p->_tds__StartSystemRestoreResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline _tds__StartSystemRestoreResponse * soap_new_set__tds__StartSystemRestoreResponse(
	struct soap *soap,
	const std::string& UploadUri,
	const std::string& ExpectedDownTime)
{
	_tds__StartSystemRestoreResponse *_p = ::soap_new__tds__StartSystemRestoreResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartSystemRestoreResponse::UploadUri = UploadUri;
		_p->_tds__StartSystemRestoreResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline int soap_write__tds__StartSystemRestoreResponse(struct soap *soap, _tds__StartSystemRestoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestoreResponse", p->soap_type() == SOAP_TYPE__tds__StartSystemRestoreResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__StartSystemRestoreResponse(struct soap *soap, const char *URL, _tds__StartSystemRestoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestoreResponse", p->soap_type() == SOAP_TYPE__tds__StartSystemRestoreResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__StartSystemRestoreResponse(struct soap *soap, const char *URL, _tds__StartSystemRestoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestoreResponse", p->soap_type() == SOAP_TYPE__tds__StartSystemRestoreResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__StartSystemRestoreResponse(struct soap *soap, const char *URL, _tds__StartSystemRestoreResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestoreResponse", p->soap_type() == SOAP_TYPE__tds__StartSystemRestoreResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartSystemRestoreResponse * SOAP_FMAC4 soap_get__tds__StartSystemRestoreResponse(struct soap*, _tds__StartSystemRestoreResponse *, const char*, const char*);

inline int soap_read__tds__StartSystemRestoreResponse(struct soap *soap, _tds__StartSystemRestoreResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__StartSystemRestoreResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__StartSystemRestoreResponse(struct soap *soap, const char *URL, _tds__StartSystemRestoreResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__StartSystemRestoreResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__StartSystemRestoreResponse(struct soap *soap, _tds__StartSystemRestoreResponse *p)
{
	if (::soap_read__tds__StartSystemRestoreResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestore_DEFINED
#define SOAP_TYPE__tds__StartSystemRestore_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartSystemRestore(struct soap*, const char*, int, const _tds__StartSystemRestore *, const char*);
SOAP_FMAC3 _tds__StartSystemRestore * SOAP_FMAC4 soap_in__tds__StartSystemRestore(struct soap*, const char*, _tds__StartSystemRestore *, const char*);
SOAP_FMAC1 _tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate__tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartSystemRestore * soap_new__tds__StartSystemRestore(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartSystemRestore(soap, n, NULL, NULL, NULL);
}

inline _tds__StartSystemRestore * soap_new_req__tds__StartSystemRestore(
	struct soap *soap)
{
	_tds__StartSystemRestore *_p = ::soap_new__tds__StartSystemRestore(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__StartSystemRestore * soap_new_set__tds__StartSystemRestore(
	struct soap *soap)
{
	_tds__StartSystemRestore *_p = ::soap_new__tds__StartSystemRestore(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__StartSystemRestore(struct soap *soap, _tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestore", p->soap_type() == SOAP_TYPE__tds__StartSystemRestore ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__StartSystemRestore(struct soap *soap, const char *URL, _tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestore", p->soap_type() == SOAP_TYPE__tds__StartSystemRestore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__StartSystemRestore(struct soap *soap, const char *URL, _tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestore", p->soap_type() == SOAP_TYPE__tds__StartSystemRestore ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__StartSystemRestore(struct soap *soap, const char *URL, _tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartSystemRestore", p->soap_type() == SOAP_TYPE__tds__StartSystemRestore ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartSystemRestore * SOAP_FMAC4 soap_get__tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore *, const char*, const char*);

inline int soap_read__tds__StartSystemRestore(struct soap *soap, _tds__StartSystemRestore *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__StartSystemRestore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__StartSystemRestore(struct soap *soap, const char *URL, _tds__StartSystemRestore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__StartSystemRestore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__StartSystemRestore(struct soap *soap, _tds__StartSystemRestore *p)
{
	if (::soap_read__tds__StartSystemRestore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse_DEFINED
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartFirmwareUpgradeResponse(struct soap*, const char*, int, const _tds__StartFirmwareUpgradeResponse *, const char*);
SOAP_FMAC3 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC4 soap_in__tds__StartFirmwareUpgradeResponse(struct soap*, const char*, _tds__StartFirmwareUpgradeResponse *, const char*);
SOAP_FMAC1 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgradeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartFirmwareUpgradeResponse * soap_new__tds__StartFirmwareUpgradeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartFirmwareUpgradeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__StartFirmwareUpgradeResponse * soap_new_req__tds__StartFirmwareUpgradeResponse(
	struct soap *soap,
	const std::string& UploadUri,
	const std::string& UploadDelay,
	const std::string& ExpectedDownTime)
{
	_tds__StartFirmwareUpgradeResponse *_p = ::soap_new__tds__StartFirmwareUpgradeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartFirmwareUpgradeResponse::UploadUri = UploadUri;
		_p->_tds__StartFirmwareUpgradeResponse::UploadDelay = UploadDelay;
		_p->_tds__StartFirmwareUpgradeResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline _tds__StartFirmwareUpgradeResponse * soap_new_set__tds__StartFirmwareUpgradeResponse(
	struct soap *soap,
	const std::string& UploadUri,
	const std::string& UploadDelay,
	const std::string& ExpectedDownTime)
{
	_tds__StartFirmwareUpgradeResponse *_p = ::soap_new__tds__StartFirmwareUpgradeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__StartFirmwareUpgradeResponse::UploadUri = UploadUri;
		_p->_tds__StartFirmwareUpgradeResponse::UploadDelay = UploadDelay;
		_p->_tds__StartFirmwareUpgradeResponse::ExpectedDownTime = ExpectedDownTime;
	}
	return _p;
}

inline int soap_write__tds__StartFirmwareUpgradeResponse(struct soap *soap, _tds__StartFirmwareUpgradeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgradeResponse", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgradeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__StartFirmwareUpgradeResponse(struct soap *soap, const char *URL, _tds__StartFirmwareUpgradeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgradeResponse", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgradeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__StartFirmwareUpgradeResponse(struct soap *soap, const char *URL, _tds__StartFirmwareUpgradeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgradeResponse", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgradeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__StartFirmwareUpgradeResponse(struct soap *soap, const char *URL, _tds__StartFirmwareUpgradeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgradeResponse", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgradeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartFirmwareUpgradeResponse * SOAP_FMAC4 soap_get__tds__StartFirmwareUpgradeResponse(struct soap*, _tds__StartFirmwareUpgradeResponse *, const char*, const char*);

inline int soap_read__tds__StartFirmwareUpgradeResponse(struct soap *soap, _tds__StartFirmwareUpgradeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__StartFirmwareUpgradeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__StartFirmwareUpgradeResponse(struct soap *soap, const char *URL, _tds__StartFirmwareUpgradeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__StartFirmwareUpgradeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__StartFirmwareUpgradeResponse(struct soap *soap, _tds__StartFirmwareUpgradeResponse *p)
{
	if (::soap_read__tds__StartFirmwareUpgradeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade_DEFINED
#define SOAP_TYPE__tds__StartFirmwareUpgrade_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__StartFirmwareUpgrade(struct soap*, const char*, int, const _tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC3 _tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_in__tds__StartFirmwareUpgrade(struct soap*, const char*, _tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC1 _tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate__tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);

inline _tds__StartFirmwareUpgrade * soap_new__tds__StartFirmwareUpgrade(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__StartFirmwareUpgrade(soap, n, NULL, NULL, NULL);
}

inline _tds__StartFirmwareUpgrade * soap_new_req__tds__StartFirmwareUpgrade(
	struct soap *soap)
{
	_tds__StartFirmwareUpgrade *_p = ::soap_new__tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__StartFirmwareUpgrade * soap_new_set__tds__StartFirmwareUpgrade(
	struct soap *soap)
{
	_tds__StartFirmwareUpgrade *_p = ::soap_new__tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__StartFirmwareUpgrade(struct soap *soap, _tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgrade", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgrade ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, _tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgrade", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgrade ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, _tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgrade", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgrade ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, _tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StartFirmwareUpgrade", p->soap_type() == SOAP_TYPE__tds__StartFirmwareUpgrade ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_get__tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade *, const char*, const char*);

inline int soap_read__tds__StartFirmwareUpgrade(struct soap *soap, _tds__StartFirmwareUpgrade *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__StartFirmwareUpgrade(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, _tds__StartFirmwareUpgrade *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__StartFirmwareUpgrade(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__StartFirmwareUpgrade(struct soap *soap, _tds__StartFirmwareUpgrade *p)
{
	if (::soap_read__tds__StartFirmwareUpgrade(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemUrisResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemUrisResponse(struct soap*, const char*, int, const _tds__GetSystemUrisResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemUrisResponse * SOAP_FMAC4 soap_in__tds__GetSystemUrisResponse(struct soap*, const char*, _tds__GetSystemUrisResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemUrisResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemUrisResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemUrisResponse * soap_new__tds__GetSystemUrisResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemUrisResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemUrisResponse * soap_new_req__tds__GetSystemUrisResponse(
	struct soap *soap)
{
	_tds__GetSystemUrisResponse *_p = ::soap_new__tds__GetSystemUrisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemUrisResponse * soap_new_set__tds__GetSystemUrisResponse(
	struct soap *soap,
	tt__SystemLogUriList *SystemLogUris,
	std::string *SupportInfoUri,
	std::string *SystemBackupUri,
	_tds__GetSystemUrisResponse_Extension *Extension)
{
	_tds__GetSystemUrisResponse *_p = ::soap_new__tds__GetSystemUrisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemUrisResponse::SystemLogUris = SystemLogUris;
		_p->_tds__GetSystemUrisResponse::SupportInfoUri = SupportInfoUri;
		_p->_tds__GetSystemUrisResponse::SystemBackupUri = SystemBackupUri;
		_p->_tds__GetSystemUrisResponse::Extension = Extension;
	}
	return _p;
}

inline int soap_write__tds__GetSystemUrisResponse(struct soap *soap, _tds__GetSystemUrisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemUrisResponse(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemUrisResponse(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemUrisResponse(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUrisResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemUrisResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemUrisResponse * SOAP_FMAC4 soap_get__tds__GetSystemUrisResponse(struct soap*, _tds__GetSystemUrisResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemUrisResponse(struct soap *soap, _tds__GetSystemUrisResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemUrisResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemUrisResponse(struct soap *soap, const char *URL, _tds__GetSystemUrisResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemUrisResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemUrisResponse(struct soap *soap, _tds__GetSystemUrisResponse *p)
{
	if (::soap_read__tds__GetSystemUrisResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemUris_DEFINED
#define SOAP_TYPE__tds__GetSystemUris_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemUris(struct soap*, const char*, int, const _tds__GetSystemUris *, const char*);
SOAP_FMAC3 _tds__GetSystemUris * SOAP_FMAC4 soap_in__tds__GetSystemUris(struct soap*, const char*, _tds__GetSystemUris *, const char*);
SOAP_FMAC1 _tds__GetSystemUris * SOAP_FMAC2 soap_instantiate__tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemUris * soap_new__tds__GetSystemUris(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemUris(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemUris * soap_new_req__tds__GetSystemUris(
	struct soap *soap)
{
	_tds__GetSystemUris *_p = ::soap_new__tds__GetSystemUris(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemUris * soap_new_set__tds__GetSystemUris(
	struct soap *soap)
{
	_tds__GetSystemUris *_p = ::soap_new__tds__GetSystemUris(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemUris(struct soap *soap, _tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUris", p->soap_type() == SOAP_TYPE__tds__GetSystemUris ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemUris(struct soap *soap, const char *URL, _tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUris", p->soap_type() == SOAP_TYPE__tds__GetSystemUris ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemUris(struct soap *soap, const char *URL, _tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUris", p->soap_type() == SOAP_TYPE__tds__GetSystemUris ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemUris(struct soap *soap, const char *URL, _tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemUris", p->soap_type() == SOAP_TYPE__tds__GetSystemUris ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemUris * SOAP_FMAC4 soap_get__tds__GetSystemUris(struct soap*, _tds__GetSystemUris *, const char*, const char*);

inline int soap_read__tds__GetSystemUris(struct soap *soap, _tds__GetSystemUris *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemUris(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemUris(struct soap *soap, const char *URL, _tds__GetSystemUris *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemUris(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemUris(struct soap *soap, _tds__GetSystemUris *p)
{
	if (::soap_read__tds__GetSystemUris(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse_DEFINED
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__ScanAvailableDot11NetworksResponse(struct soap*, const char*, int, const _tds__ScanAvailableDot11NetworksResponse *, const char*);
SOAP_FMAC3 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC4 soap_in__tds__ScanAvailableDot11NetworksResponse(struct soap*, const char*, _tds__ScanAvailableDot11NetworksResponse *, const char*);
SOAP_FMAC1 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11NetworksResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__ScanAvailableDot11NetworksResponse * soap_new__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__ScanAvailableDot11NetworksResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__ScanAvailableDot11NetworksResponse * soap_new_req__tds__ScanAvailableDot11NetworksResponse(
	struct soap *soap)
{
	_tds__ScanAvailableDot11NetworksResponse *_p = ::soap_new__tds__ScanAvailableDot11NetworksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__ScanAvailableDot11NetworksResponse * soap_new_set__tds__ScanAvailableDot11NetworksResponse(
	struct soap *soap,
	const std::vector<tt__Dot11AvailableNetworks *> & Networks)
{
	_tds__ScanAvailableDot11NetworksResponse *_p = ::soap_new__tds__ScanAvailableDot11NetworksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__ScanAvailableDot11NetworksResponse::Networks = Networks;
	}
	return _p;
}

inline int soap_write__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, _tds__ScanAvailableDot11NetworksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11NetworksResponse", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, const char *URL, _tds__ScanAvailableDot11NetworksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11NetworksResponse", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, const char *URL, _tds__ScanAvailableDot11NetworksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11NetworksResponse", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, const char *URL, _tds__ScanAvailableDot11NetworksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11NetworksResponse", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__ScanAvailableDot11NetworksResponse * SOAP_FMAC4 soap_get__tds__ScanAvailableDot11NetworksResponse(struct soap*, _tds__ScanAvailableDot11NetworksResponse *, const char*, const char*);

inline int soap_read__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, _tds__ScanAvailableDot11NetworksResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__ScanAvailableDot11NetworksResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, const char *URL, _tds__ScanAvailableDot11NetworksResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__ScanAvailableDot11NetworksResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__ScanAvailableDot11NetworksResponse(struct soap *soap, _tds__ScanAvailableDot11NetworksResponse *p)
{
	if (::soap_read__tds__ScanAvailableDot11NetworksResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks_DEFINED
#define SOAP_TYPE__tds__ScanAvailableDot11Networks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__ScanAvailableDot11Networks(struct soap*, const char*, int, const _tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC3 _tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_in__tds__ScanAvailableDot11Networks(struct soap*, const char*, _tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC1 _tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate__tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);

inline _tds__ScanAvailableDot11Networks * soap_new__tds__ScanAvailableDot11Networks(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__ScanAvailableDot11Networks(soap, n, NULL, NULL, NULL);
}

inline _tds__ScanAvailableDot11Networks * soap_new_req__tds__ScanAvailableDot11Networks(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__ScanAvailableDot11Networks *_p = ::soap_new__tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__ScanAvailableDot11Networks::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline _tds__ScanAvailableDot11Networks * soap_new_set__tds__ScanAvailableDot11Networks(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__ScanAvailableDot11Networks *_p = ::soap_new__tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__ScanAvailableDot11Networks::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline int soap_write__tds__ScanAvailableDot11Networks(struct soap *soap, _tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11Networks", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11Networks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, _tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11Networks", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11Networks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, _tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11Networks", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11Networks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, _tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:ScanAvailableDot11Networks", p->soap_type() == SOAP_TYPE__tds__ScanAvailableDot11Networks ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_get__tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks *, const char*, const char*);

inline int soap_read__tds__ScanAvailableDot11Networks(struct soap *soap, _tds__ScanAvailableDot11Networks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__ScanAvailableDot11Networks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, _tds__ScanAvailableDot11Networks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__ScanAvailableDot11Networks(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__ScanAvailableDot11Networks(struct soap *soap, _tds__ScanAvailableDot11Networks *p)
{
	if (::soap_read__tds__ScanAvailableDot11Networks(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11StatusResponse_DEFINED
#define SOAP_TYPE__tds__GetDot11StatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11StatusResponse(struct soap*, const char*, int, const _tds__GetDot11StatusResponse *, const char*);
SOAP_FMAC3 _tds__GetDot11StatusResponse * SOAP_FMAC4 soap_in__tds__GetDot11StatusResponse(struct soap*, const char*, _tds__GetDot11StatusResponse *, const char*);
SOAP_FMAC1 _tds__GetDot11StatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11StatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11StatusResponse * soap_new__tds__GetDot11StatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11StatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11StatusResponse * soap_new_req__tds__GetDot11StatusResponse(
	struct soap *soap,
	tt__Dot11Status *Status)
{
	_tds__GetDot11StatusResponse *_p = ::soap_new__tds__GetDot11StatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11StatusResponse::Status = Status;
	}
	return _p;
}

inline _tds__GetDot11StatusResponse * soap_new_set__tds__GetDot11StatusResponse(
	struct soap *soap,
	tt__Dot11Status *Status)
{
	_tds__GetDot11StatusResponse *_p = ::soap_new__tds__GetDot11StatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11StatusResponse::Status = Status;
	}
	return _p;
}

inline int soap_write__tds__GetDot11StatusResponse(struct soap *soap, _tds__GetDot11StatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11StatusResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11StatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot11StatusResponse(struct soap *soap, const char *URL, _tds__GetDot11StatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11StatusResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11StatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot11StatusResponse(struct soap *soap, const char *URL, _tds__GetDot11StatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11StatusResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11StatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot11StatusResponse(struct soap *soap, const char *URL, _tds__GetDot11StatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11StatusResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11StatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11StatusResponse * SOAP_FMAC4 soap_get__tds__GetDot11StatusResponse(struct soap*, _tds__GetDot11StatusResponse *, const char*, const char*);

inline int soap_read__tds__GetDot11StatusResponse(struct soap *soap, _tds__GetDot11StatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot11StatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot11StatusResponse(struct soap *soap, const char *URL, _tds__GetDot11StatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot11StatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot11StatusResponse(struct soap *soap, _tds__GetDot11StatusResponse *p)
{
	if (::soap_read__tds__GetDot11StatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11Status_DEFINED
#define SOAP_TYPE__tds__GetDot11Status_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11Status(struct soap*, const char*, int, const _tds__GetDot11Status *, const char*);
SOAP_FMAC3 _tds__GetDot11Status * SOAP_FMAC4 soap_in__tds__GetDot11Status(struct soap*, const char*, _tds__GetDot11Status *, const char*);
SOAP_FMAC1 _tds__GetDot11Status * SOAP_FMAC2 soap_instantiate__tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11Status * soap_new__tds__GetDot11Status(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11Status(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11Status * soap_new_req__tds__GetDot11Status(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__GetDot11Status *_p = ::soap_new__tds__GetDot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11Status::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline _tds__GetDot11Status * soap_new_set__tds__GetDot11Status(
	struct soap *soap,
	const std::string& InterfaceToken)
{
	_tds__GetDot11Status *_p = ::soap_new__tds__GetDot11Status(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11Status::InterfaceToken = InterfaceToken;
	}
	return _p;
}

inline int soap_write__tds__GetDot11Status(struct soap *soap, _tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Status", p->soap_type() == SOAP_TYPE__tds__GetDot11Status ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot11Status(struct soap *soap, const char *URL, _tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Status", p->soap_type() == SOAP_TYPE__tds__GetDot11Status ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot11Status(struct soap *soap, const char *URL, _tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Status", p->soap_type() == SOAP_TYPE__tds__GetDot11Status ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot11Status(struct soap *soap, const char *URL, _tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Status", p->soap_type() == SOAP_TYPE__tds__GetDot11Status ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11Status * SOAP_FMAC4 soap_get__tds__GetDot11Status(struct soap*, _tds__GetDot11Status *, const char*, const char*);

inline int soap_read__tds__GetDot11Status(struct soap *soap, _tds__GetDot11Status *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot11Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot11Status(struct soap *soap, const char *URL, _tds__GetDot11Status *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot11Status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot11Status(struct soap *soap, _tds__GetDot11Status *p)
{
	if (::soap_read__tds__GetDot11Status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse_DEFINED
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11CapabilitiesResponse(struct soap*, const char*, int, const _tds__GetDot11CapabilitiesResponse *, const char*);
SOAP_FMAC3 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC4 soap_in__tds__GetDot11CapabilitiesResponse(struct soap*, const char*, _tds__GetDot11CapabilitiesResponse *, const char*);
SOAP_FMAC1 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot11CapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11CapabilitiesResponse * soap_new__tds__GetDot11CapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11CapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11CapabilitiesResponse * soap_new_req__tds__GetDot11CapabilitiesResponse(
	struct soap *soap,
	tt__Dot11Capabilities *Capabilities)
{
	_tds__GetDot11CapabilitiesResponse *_p = ::soap_new__tds__GetDot11CapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11CapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tds__GetDot11CapabilitiesResponse * soap_new_set__tds__GetDot11CapabilitiesResponse(
	struct soap *soap,
	tt__Dot11Capabilities *Capabilities)
{
	_tds__GetDot11CapabilitiesResponse *_p = ::soap_new__tds__GetDot11CapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot11CapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tds__GetDot11CapabilitiesResponse(struct soap *soap, _tds__GetDot11CapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11CapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11CapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot11CapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetDot11CapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11CapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11CapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot11CapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetDot11CapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11CapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11CapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot11CapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetDot11CapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11CapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetDot11CapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11CapabilitiesResponse * SOAP_FMAC4 soap_get__tds__GetDot11CapabilitiesResponse(struct soap*, _tds__GetDot11CapabilitiesResponse *, const char*, const char*);

inline int soap_read__tds__GetDot11CapabilitiesResponse(struct soap *soap, _tds__GetDot11CapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot11CapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot11CapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetDot11CapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot11CapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot11CapabilitiesResponse(struct soap *soap, _tds__GetDot11CapabilitiesResponse *p)
{
	if (::soap_read__tds__GetDot11CapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot11Capabilities_DEFINED
#define SOAP_TYPE__tds__GetDot11Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot11Capabilities(struct soap*, const char*, int, const _tds__GetDot11Capabilities *, const char*);
SOAP_FMAC3 _tds__GetDot11Capabilities * SOAP_FMAC4 soap_in__tds__GetDot11Capabilities(struct soap*, const char*, _tds__GetDot11Capabilities *, const char*);
SOAP_FMAC1 _tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate__tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot11Capabilities * soap_new__tds__GetDot11Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot11Capabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot11Capabilities * soap_new_req__tds__GetDot11Capabilities(
	struct soap *soap)
{
	_tds__GetDot11Capabilities *_p = ::soap_new__tds__GetDot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDot11Capabilities * soap_new_set__tds__GetDot11Capabilities(
	struct soap *soap)
{
	_tds__GetDot11Capabilities *_p = ::soap_new__tds__GetDot11Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDot11Capabilities(struct soap *soap, _tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Capabilities", p->soap_type() == SOAP_TYPE__tds__GetDot11Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot11Capabilities(struct soap *soap, const char *URL, _tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Capabilities", p->soap_type() == SOAP_TYPE__tds__GetDot11Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot11Capabilities(struct soap *soap, const char *URL, _tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Capabilities", p->soap_type() == SOAP_TYPE__tds__GetDot11Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot11Capabilities(struct soap *soap, const char *URL, _tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot11Capabilities", p->soap_type() == SOAP_TYPE__tds__GetDot11Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot11Capabilities * SOAP_FMAC4 soap_get__tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities *, const char*, const char*);

inline int soap_read__tds__GetDot11Capabilities(struct soap *soap, _tds__GetDot11Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot11Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot11Capabilities(struct soap *soap, const char *URL, _tds__GetDot11Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot11Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot11Capabilities(struct soap *soap, _tds__GetDot11Capabilities *p)
{
	if (::soap_read__tds__GetDot11Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse_DEFINED
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SendAuxiliaryCommandResponse(struct soap*, const char*, int, const _tds__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC3 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_in__tds__SendAuxiliaryCommandResponse(struct soap*, const char*, _tds__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC1 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SendAuxiliaryCommandResponse * soap_new__tds__SendAuxiliaryCommandResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SendAuxiliaryCommandResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SendAuxiliaryCommandResponse * soap_new_req__tds__SendAuxiliaryCommandResponse(
	struct soap *soap)
{
	_tds__SendAuxiliaryCommandResponse *_p = ::soap_new__tds__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SendAuxiliaryCommandResponse * soap_new_set__tds__SendAuxiliaryCommandResponse(
	struct soap *soap,
	std::string *AuxiliaryCommandResponse)
{
	_tds__SendAuxiliaryCommandResponse *_p = ::soap_new__tds__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SendAuxiliaryCommandResponse::AuxiliaryCommandResponse = AuxiliaryCommandResponse;
	}
	return _p;
}

inline int soap_write__tds__SendAuxiliaryCommandResponse(struct soap *soap, _tds__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_get__tds__SendAuxiliaryCommandResponse(struct soap*, _tds__SendAuxiliaryCommandResponse *, const char*, const char*);

inline int soap_read__tds__SendAuxiliaryCommandResponse(struct soap *soap, _tds__SendAuxiliaryCommandResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SendAuxiliaryCommandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommandResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SendAuxiliaryCommandResponse(struct soap *soap, _tds__SendAuxiliaryCommandResponse *p)
{
	if (::soap_read__tds__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE__tds__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SendAuxiliaryCommand(struct soap*, const char*, int, const _tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 _tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_in__tds__SendAuxiliaryCommand(struct soap*, const char*, _tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 _tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SendAuxiliaryCommand * soap_new__tds__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline _tds__SendAuxiliaryCommand * soap_new_req__tds__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& AuxiliaryCommand)
{
	_tds__SendAuxiliaryCommand *_p = ::soap_new__tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SendAuxiliaryCommand::AuxiliaryCommand = AuxiliaryCommand;
	}
	return _p;
}

inline _tds__SendAuxiliaryCommand * soap_new_set__tds__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& AuxiliaryCommand)
{
	_tds__SendAuxiliaryCommand *_p = ::soap_new__tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SendAuxiliaryCommand::AuxiliaryCommand = AuxiliaryCommand;
	}
	return _p;
}

inline int soap_write__tds__SendAuxiliaryCommand(struct soap *soap, _tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tds__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_get__tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read__tds__SendAuxiliaryCommand(struct soap *soap, _tds__SendAuxiliaryCommand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tds__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SendAuxiliaryCommand(struct soap *soap, _tds__SendAuxiliaryCommand *p)
{
	if (::soap_read__tds__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputStateResponse(struct soap*, const char*, int, const _tds__SetRelayOutputStateResponse *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputStateResponse * SOAP_FMAC4 soap_in__tds__SetRelayOutputStateResponse(struct soap*, const char*, _tds__SetRelayOutputStateResponse *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputStateResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputStateResponse * soap_new__tds__SetRelayOutputStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputStateResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputStateResponse * soap_new_req__tds__SetRelayOutputStateResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputStateResponse *_p = ::soap_new__tds__SetRelayOutputStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRelayOutputStateResponse * soap_new_set__tds__SetRelayOutputStateResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputStateResponse *_p = ::soap_new__tds__SetRelayOutputStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputStateResponse(struct soap *soap, _tds__SetRelayOutputStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputStateResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRelayOutputStateResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputStateResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputStateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRelayOutputStateResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputStateResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputStateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRelayOutputStateResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputStateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputStateResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputStateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputStateResponse * SOAP_FMAC4 soap_get__tds__SetRelayOutputStateResponse(struct soap*, _tds__SetRelayOutputStateResponse *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputStateResponse(struct soap *soap, _tds__SetRelayOutputStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRelayOutputStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRelayOutputStateResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputStateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRelayOutputStateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRelayOutputStateResponse(struct soap *soap, _tds__SetRelayOutputStateResponse *p)
{
	if (::soap_read__tds__SetRelayOutputStateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputState_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputState(struct soap*, const char*, int, const _tds__SetRelayOutputState *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputState * SOAP_FMAC4 soap_in__tds__SetRelayOutputState(struct soap*, const char*, _tds__SetRelayOutputState *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputState * soap_new__tds__SetRelayOutputState(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputState(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputState * soap_new_req__tds__SetRelayOutputState(
	struct soap *soap,
	const std::string& RelayOutputToken,
	enum tt__RelayLogicalState LogicalState)
{
	_tds__SetRelayOutputState *_p = ::soap_new__tds__SetRelayOutputState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputState::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputState::LogicalState = LogicalState;
	}
	return _p;
}

inline _tds__SetRelayOutputState * soap_new_set__tds__SetRelayOutputState(
	struct soap *soap,
	const std::string& RelayOutputToken,
	enum tt__RelayLogicalState LogicalState)
{
	_tds__SetRelayOutputState *_p = ::soap_new__tds__SetRelayOutputState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputState::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputState::LogicalState = LogicalState;
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputState", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRelayOutputState(struct soap *soap, const char *URL, _tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputState", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRelayOutputState(struct soap *soap, const char *URL, _tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputState", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRelayOutputState(struct soap *soap, const char *URL, _tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputState", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputState ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputState * SOAP_FMAC4 soap_get__tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRelayOutputState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRelayOutputState(struct soap *soap, const char *URL, _tds__SetRelayOutputState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRelayOutputState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRelayOutputState(struct soap *soap, _tds__SetRelayOutputState *p)
{
	if (::soap_read__tds__SetRelayOutputState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputSettingsResponse(struct soap*, const char*, int, const _tds__SetRelayOutputSettingsResponse *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC4 soap_in__tds__SetRelayOutputSettingsResponse(struct soap*, const char*, _tds__SetRelayOutputSettingsResponse *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettingsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputSettingsResponse * soap_new__tds__SetRelayOutputSettingsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputSettingsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputSettingsResponse * soap_new_req__tds__SetRelayOutputSettingsResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputSettingsResponse *_p = ::soap_new__tds__SetRelayOutputSettingsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRelayOutputSettingsResponse * soap_new_set__tds__SetRelayOutputSettingsResponse(
	struct soap *soap)
{
	_tds__SetRelayOutputSettingsResponse *_p = ::soap_new__tds__SetRelayOutputSettingsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputSettingsResponse(struct soap *soap, _tds__SetRelayOutputSettingsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettingsResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettingsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRelayOutputSettingsResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputSettingsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettingsResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettingsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRelayOutputSettingsResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputSettingsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettingsResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettingsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRelayOutputSettingsResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputSettingsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettingsResponse", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettingsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputSettingsResponse * SOAP_FMAC4 soap_get__tds__SetRelayOutputSettingsResponse(struct soap*, _tds__SetRelayOutputSettingsResponse *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputSettingsResponse(struct soap *soap, _tds__SetRelayOutputSettingsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRelayOutputSettingsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRelayOutputSettingsResponse(struct soap *soap, const char *URL, _tds__SetRelayOutputSettingsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRelayOutputSettingsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRelayOutputSettingsResponse(struct soap *soap, _tds__SetRelayOutputSettingsResponse *p)
{
	if (::soap_read__tds__SetRelayOutputSettingsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettings_DEFINED
#define SOAP_TYPE__tds__SetRelayOutputSettings_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRelayOutputSettings(struct soap*, const char*, int, const _tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC3 _tds__SetRelayOutputSettings * SOAP_FMAC4 soap_in__tds__SetRelayOutputSettings(struct soap*, const char*, _tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC1 _tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate__tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRelayOutputSettings * soap_new__tds__SetRelayOutputSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRelayOutputSettings(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRelayOutputSettings * soap_new_req__tds__SetRelayOutputSettings(
	struct soap *soap,
	const std::string& RelayOutputToken,
	tt__RelayOutputSettings *Properties)
{
	_tds__SetRelayOutputSettings *_p = ::soap_new__tds__SetRelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputSettings::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputSettings::Properties = Properties;
	}
	return _p;
}

inline _tds__SetRelayOutputSettings * soap_new_set__tds__SetRelayOutputSettings(
	struct soap *soap,
	const std::string& RelayOutputToken,
	tt__RelayOutputSettings *Properties)
{
	_tds__SetRelayOutputSettings *_p = ::soap_new__tds__SetRelayOutputSettings(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRelayOutputSettings::RelayOutputToken = RelayOutputToken;
		_p->_tds__SetRelayOutputSettings::Properties = Properties;
	}
	return _p;
}

inline int soap_write__tds__SetRelayOutputSettings(struct soap *soap, _tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettings", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettings ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRelayOutputSettings(struct soap *soap, const char *URL, _tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettings", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRelayOutputSettings(struct soap *soap, const char *URL, _tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettings", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettings ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRelayOutputSettings(struct soap *soap, const char *URL, _tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRelayOutputSettings", p->soap_type() == SOAP_TYPE__tds__SetRelayOutputSettings ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRelayOutputSettings * SOAP_FMAC4 soap_get__tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings *, const char*, const char*);

inline int soap_read__tds__SetRelayOutputSettings(struct soap *soap, _tds__SetRelayOutputSettings *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRelayOutputSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRelayOutputSettings(struct soap *soap, const char *URL, _tds__SetRelayOutputSettings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRelayOutputSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRelayOutputSettings(struct soap *soap, _tds__SetRelayOutputSettings *p)
{
	if (::soap_read__tds__SetRelayOutputSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse_DEFINED
#define SOAP_TYPE__tds__GetRelayOutputsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRelayOutputsResponse(struct soap*, const char*, int, const _tds__GetRelayOutputsResponse *, const char*);
SOAP_FMAC3 _tds__GetRelayOutputsResponse * SOAP_FMAC4 soap_in__tds__GetRelayOutputsResponse(struct soap*, const char*, _tds__GetRelayOutputsResponse *, const char*);
SOAP_FMAC1 _tds__GetRelayOutputsResponse * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRelayOutputsResponse * soap_new__tds__GetRelayOutputsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRelayOutputsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRelayOutputsResponse * soap_new_req__tds__GetRelayOutputsResponse(
	struct soap *soap)
{
	_tds__GetRelayOutputsResponse *_p = ::soap_new__tds__GetRelayOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRelayOutputsResponse * soap_new_set__tds__GetRelayOutputsResponse(
	struct soap *soap,
	const std::vector<tt__RelayOutput *> & RelayOutputs)
{
	_tds__GetRelayOutputsResponse *_p = ::soap_new__tds__GetRelayOutputsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRelayOutputsResponse::RelayOutputs = RelayOutputs;
	}
	return _p;
}

inline int soap_write__tds__GetRelayOutputsResponse(struct soap *soap, _tds__GetRelayOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputsResponse", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetRelayOutputsResponse(struct soap *soap, const char *URL, _tds__GetRelayOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputsResponse", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetRelayOutputsResponse(struct soap *soap, const char *URL, _tds__GetRelayOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputsResponse", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetRelayOutputsResponse(struct soap *soap, const char *URL, _tds__GetRelayOutputsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputsResponse", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRelayOutputsResponse * SOAP_FMAC4 soap_get__tds__GetRelayOutputsResponse(struct soap*, _tds__GetRelayOutputsResponse *, const char*, const char*);

inline int soap_read__tds__GetRelayOutputsResponse(struct soap *soap, _tds__GetRelayOutputsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetRelayOutputsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetRelayOutputsResponse(struct soap *soap, const char *URL, _tds__GetRelayOutputsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetRelayOutputsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetRelayOutputsResponse(struct soap *soap, _tds__GetRelayOutputsResponse *p)
{
	if (::soap_read__tds__GetRelayOutputsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputs_DEFINED
#define SOAP_TYPE__tds__GetRelayOutputs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRelayOutputs(struct soap*, const char*, int, const _tds__GetRelayOutputs *, const char*);
SOAP_FMAC3 _tds__GetRelayOutputs * SOAP_FMAC4 soap_in__tds__GetRelayOutputs(struct soap*, const char*, _tds__GetRelayOutputs *, const char*);
SOAP_FMAC1 _tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate__tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRelayOutputs * soap_new__tds__GetRelayOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRelayOutputs(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRelayOutputs * soap_new_req__tds__GetRelayOutputs(
	struct soap *soap)
{
	_tds__GetRelayOutputs *_p = ::soap_new__tds__GetRelayOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRelayOutputs * soap_new_set__tds__GetRelayOutputs(
	struct soap *soap)
{
	_tds__GetRelayOutputs *_p = ::soap_new__tds__GetRelayOutputs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputs", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetRelayOutputs(struct soap *soap, const char *URL, _tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputs", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetRelayOutputs(struct soap *soap, const char *URL, _tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputs", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetRelayOutputs(struct soap *soap, const char *URL, _tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRelayOutputs", p->soap_type() == SOAP_TYPE__tds__GetRelayOutputs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRelayOutputs * SOAP_FMAC4 soap_get__tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs *, const char*, const char*);

inline int soap_read__tds__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetRelayOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetRelayOutputs(struct soap *soap, const char *URL, _tds__GetRelayOutputs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetRelayOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetRelayOutputs(struct soap *soap, _tds__GetRelayOutputs *p)
{
	if (::soap_read__tds__GetRelayOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__DeleteDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__DeleteDot1XConfigurationResponse(struct soap*, const char*, _tds__DeleteDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteDot1XConfigurationResponse * soap_new__tds__DeleteDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteDot1XConfigurationResponse * soap_new_req__tds__DeleteDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteDot1XConfigurationResponse *_p = ::soap_new__tds__DeleteDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteDot1XConfigurationResponse * soap_new_set__tds__DeleteDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__DeleteDot1XConfigurationResponse *_p = ::soap_new__tds__DeleteDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteDot1XConfigurationResponse(struct soap *soap, _tds__DeleteDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__DeleteDot1XConfigurationResponse(struct soap*, _tds__DeleteDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__DeleteDot1XConfigurationResponse(struct soap *soap, _tds__DeleteDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__DeleteDot1XConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteDot1XConfigurationResponse(struct soap *soap, _tds__DeleteDot1XConfigurationResponse *p)
{
	if (::soap_read__tds__DeleteDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__DeleteDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteDot1XConfiguration(struct soap*, const char*, int, const _tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_in__tds__DeleteDot1XConfiguration(struct soap*, const char*, _tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteDot1XConfiguration * soap_new__tds__DeleteDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteDot1XConfiguration * soap_new_req__tds__DeleteDot1XConfiguration(
	struct soap *soap)
{
	_tds__DeleteDot1XConfiguration *_p = ::soap_new__tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteDot1XConfiguration * soap_new_set__tds__DeleteDot1XConfiguration(
	struct soap *soap,
	const std::vector<std::string> & Dot1XConfigurationToken)
{
	_tds__DeleteDot1XConfiguration *_p = ::soap_new__tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteDot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
	}
	return _p;
}

inline int soap_write__tds__DeleteDot1XConfiguration(struct soap *soap, _tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, _tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, _tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, _tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__DeleteDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_get__tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__DeleteDot1XConfiguration(struct soap *soap, _tds__DeleteDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, _tds__DeleteDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteDot1XConfiguration(struct soap *soap, _tds__DeleteDot1XConfiguration *p)
{
	if (::soap_read__tds__DeleteDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfigurationsResponse(struct soap*, const char*, int, const _tds__GetDot1XConfigurationsResponse *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC4 soap_in__tds__GetDot1XConfigurationsResponse(struct soap*, const char*, _tds__GetDot1XConfigurationsResponse *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfigurationsResponse * soap_new__tds__GetDot1XConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfigurationsResponse * soap_new_req__tds__GetDot1XConfigurationsResponse(
	struct soap *soap)
{
	_tds__GetDot1XConfigurationsResponse *_p = ::soap_new__tds__GetDot1XConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDot1XConfigurationsResponse * soap_new_set__tds__GetDot1XConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__Dot1XConfiguration *> & Dot1XConfiguration)
{
	_tds__GetDot1XConfigurationsResponse *_p = ::soap_new__tds__GetDot1XConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfigurationsResponse::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfigurationsResponse(struct soap *soap, _tds__GetDot1XConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot1XConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot1XConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot1XConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationsResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfigurationsResponse * SOAP_FMAC4 soap_get__tds__GetDot1XConfigurationsResponse(struct soap*, _tds__GetDot1XConfigurationsResponse *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfigurationsResponse(struct soap *soap, _tds__GetDot1XConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot1XConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot1XConfigurationsResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot1XConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot1XConfigurationsResponse(struct soap *soap, _tds__GetDot1XConfigurationsResponse *p)
{
	if (::soap_read__tds__GetDot1XConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurations_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfigurations(struct soap*, const char*, int, const _tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurations * SOAP_FMAC4 soap_in__tds__GetDot1XConfigurations(struct soap*, const char*, _tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfigurations * soap_new__tds__GetDot1XConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfigurations * soap_new_req__tds__GetDot1XConfigurations(
	struct soap *soap)
{
	_tds__GetDot1XConfigurations *_p = ::soap_new__tds__GetDot1XConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDot1XConfigurations * soap_new_set__tds__GetDot1XConfigurations(
	struct soap *soap)
{
	_tds__GetDot1XConfigurations *_p = ::soap_new__tds__GetDot1XConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfigurations(struct soap *soap, _tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurations", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot1XConfigurations(struct soap *soap, const char *URL, _tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurations", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot1XConfigurations(struct soap *soap, const char *URL, _tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurations", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot1XConfigurations(struct soap *soap, const char *URL, _tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurations", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfigurations * SOAP_FMAC4 soap_get__tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfigurations(struct soap *soap, _tds__GetDot1XConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot1XConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot1XConfigurations(struct soap *soap, const char *URL, _tds__GetDot1XConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot1XConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot1XConfigurations(struct soap *soap, _tds__GetDot1XConfigurations *p)
{
	if (::soap_read__tds__GetDot1XConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__GetDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetDot1XConfigurationResponse(struct soap*, const char*, _tds__GetDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfigurationResponse * soap_new__tds__GetDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfigurationResponse * soap_new_req__tds__GetDot1XConfigurationResponse(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__GetDot1XConfigurationResponse *_p = ::soap_new__tds__GetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfigurationResponse::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline _tds__GetDot1XConfigurationResponse * soap_new_set__tds__GetDot1XConfigurationResponse(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__GetDot1XConfigurationResponse *_p = ::soap_new__tds__GetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfigurationResponse::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfigurationResponse(struct soap *soap, _tds__GetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetDot1XConfigurationResponse(struct soap*, _tds__GetDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfigurationResponse(struct soap *soap, _tds__GetDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__GetDot1XConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot1XConfigurationResponse(struct soap *soap, _tds__GetDot1XConfigurationResponse *p)
{
	if (::soap_read__tds__GetDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__GetDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDot1XConfiguration(struct soap*, const char*, int, const _tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__GetDot1XConfiguration * SOAP_FMAC4 soap_in__tds__GetDot1XConfiguration(struct soap*, const char*, _tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDot1XConfiguration * soap_new__tds__GetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDot1XConfiguration * soap_new_req__tds__GetDot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken)
{
	_tds__GetDot1XConfiguration *_p = ::soap_new__tds__GetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
	}
	return _p;
}

inline _tds__GetDot1XConfiguration * soap_new_set__tds__GetDot1XConfiguration(
	struct soap *soap,
	const std::string& Dot1XConfigurationToken)
{
	_tds__GetDot1XConfiguration *_p = ::soap_new__tds__GetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken;
	}
	return _p;
}

inline int soap_write__tds__GetDot1XConfiguration(struct soap *soap, _tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDot1XConfiguration(struct soap *soap, const char *URL, _tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDot1XConfiguration(struct soap *soap, const char *URL, _tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDot1XConfiguration(struct soap *soap, const char *URL, _tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__GetDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDot1XConfiguration * SOAP_FMAC4 soap_get__tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__GetDot1XConfiguration(struct soap *soap, _tds__GetDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDot1XConfiguration(struct soap *soap, const char *URL, _tds__GetDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDot1XConfiguration(struct soap *soap, _tds__GetDot1XConfiguration *p)
{
	if (::soap_read__tds__GetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__SetDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetDot1XConfigurationResponse(struct soap*, const char*, _tds__SetDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDot1XConfigurationResponse * soap_new__tds__SetDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDot1XConfigurationResponse * soap_new_req__tds__SetDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__SetDot1XConfigurationResponse *_p = ::soap_new__tds__SetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDot1XConfigurationResponse * soap_new_set__tds__SetDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__SetDot1XConfigurationResponse *_p = ::soap_new__tds__SetDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDot1XConfigurationResponse(struct soap *soap, _tds__SetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__SetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__SetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__SetDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetDot1XConfigurationResponse(struct soap*, _tds__SetDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetDot1XConfigurationResponse(struct soap *soap, _tds__SetDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__SetDot1XConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDot1XConfigurationResponse(struct soap *soap, _tds__SetDot1XConfigurationResponse *p)
{
	if (::soap_read__tds__SetDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__SetDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDot1XConfiguration(struct soap*, const char*, int, const _tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__SetDot1XConfiguration * SOAP_FMAC4 soap_in__tds__SetDot1XConfiguration(struct soap*, const char*, _tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDot1XConfiguration * soap_new__tds__SetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDot1XConfiguration * soap_new_req__tds__SetDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__SetDot1XConfiguration *_p = ::soap_new__tds__SetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline _tds__SetDot1XConfiguration * soap_new_set__tds__SetDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__SetDot1XConfiguration *_p = ::soap_new__tds__SetDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__SetDot1XConfiguration(struct soap *soap, _tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDot1XConfiguration(struct soap *soap, const char *URL, _tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDot1XConfiguration(struct soap *soap, const char *URL, _tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDot1XConfiguration(struct soap *soap, const char *URL, _tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__SetDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDot1XConfiguration * SOAP_FMAC4 soap_get__tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__SetDot1XConfiguration(struct soap *soap, _tds__SetDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDot1XConfiguration(struct soap *soap, const char *URL, _tds__SetDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDot1XConfiguration(struct soap *soap, _tds__SetDot1XConfiguration *p)
{
	if (::soap_read__tds__SetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateDot1XConfigurationResponse(struct soap*, const char*, int, const _tds__CreateDot1XConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC4 soap_in__tds__CreateDot1XConfigurationResponse(struct soap*, const char*, _tds__CreateDot1XConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateDot1XConfigurationResponse * soap_new__tds__CreateDot1XConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateDot1XConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateDot1XConfigurationResponse * soap_new_req__tds__CreateDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__CreateDot1XConfigurationResponse *_p = ::soap_new__tds__CreateDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__CreateDot1XConfigurationResponse * soap_new_set__tds__CreateDot1XConfigurationResponse(
	struct soap *soap)
{
	_tds__CreateDot1XConfigurationResponse *_p = ::soap_new__tds__CreateDot1XConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__CreateDot1XConfigurationResponse(struct soap *soap, _tds__CreateDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateDot1XConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateDot1XConfigurationResponse * SOAP_FMAC4 soap_get__tds__CreateDot1XConfigurationResponse(struct soap*, _tds__CreateDot1XConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__CreateDot1XConfigurationResponse(struct soap *soap, _tds__CreateDot1XConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateDot1XConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateDot1XConfigurationResponse(struct soap *soap, const char *URL, _tds__CreateDot1XConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateDot1XConfigurationResponse(struct soap *soap, _tds__CreateDot1XConfigurationResponse *p)
{
	if (::soap_read__tds__CreateDot1XConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration_DEFINED
#define SOAP_TYPE__tds__CreateDot1XConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateDot1XConfiguration(struct soap*, const char*, int, const _tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC3 _tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_in__tds__CreateDot1XConfiguration(struct soap*, const char*, _tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC1 _tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate__tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateDot1XConfiguration * soap_new__tds__CreateDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateDot1XConfiguration * soap_new_req__tds__CreateDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__CreateDot1XConfiguration *_p = ::soap_new__tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline _tds__CreateDot1XConfiguration * soap_new_set__tds__CreateDot1XConfiguration(
	struct soap *soap,
	tt__Dot1XConfiguration *Dot1XConfiguration)
{
	_tds__CreateDot1XConfiguration *_p = ::soap_new__tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateDot1XConfiguration::Dot1XConfiguration = Dot1XConfiguration;
	}
	return _p;
}

inline int soap_write__tds__CreateDot1XConfiguration(struct soap *soap, _tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, _tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, _tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, _tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateDot1XConfiguration", p->soap_type() == SOAP_TYPE__tds__CreateDot1XConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_get__tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration *, const char*, const char*);

inline int soap_read__tds__CreateDot1XConfiguration(struct soap *soap, _tds__CreateDot1XConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, _tds__CreateDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateDot1XConfiguration(struct soap *soap, _tds__CreateDot1XConfiguration *p)
{
	if (::soap_read__tds__CreateDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse_DEFINED
#define SOAP_TYPE__tds__LoadCACertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCACertificatesResponse(struct soap*, const char*, int, const _tds__LoadCACertificatesResponse *, const char*);
SOAP_FMAC3 _tds__LoadCACertificatesResponse * SOAP_FMAC4 soap_in__tds__LoadCACertificatesResponse(struct soap*, const char*, _tds__LoadCACertificatesResponse *, const char*);
SOAP_FMAC1 _tds__LoadCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCACertificatesResponse * soap_new__tds__LoadCACertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCACertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCACertificatesResponse * soap_new_req__tds__LoadCACertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCACertificatesResponse *_p = ::soap_new__tds__LoadCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__LoadCACertificatesResponse * soap_new_set__tds__LoadCACertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCACertificatesResponse *_p = ::soap_new__tds__LoadCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__LoadCACertificatesResponse(struct soap *soap, _tds__LoadCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCACertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__LoadCACertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCACertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__LoadCACertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCACertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__LoadCACertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCACertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCACertificatesResponse * SOAP_FMAC4 soap_get__tds__LoadCACertificatesResponse(struct soap*, _tds__LoadCACertificatesResponse *, const char*, const char*);

inline int soap_read__tds__LoadCACertificatesResponse(struct soap *soap, _tds__LoadCACertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__LoadCACertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__LoadCACertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCACertificatesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__LoadCACertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__LoadCACertificatesResponse(struct soap *soap, _tds__LoadCACertificatesResponse *p)
{
	if (::soap_read__tds__LoadCACertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificates_DEFINED
#define SOAP_TYPE__tds__LoadCACertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCACertificates(struct soap*, const char*, int, const _tds__LoadCACertificates *, const char*);
SOAP_FMAC3 _tds__LoadCACertificates * SOAP_FMAC4 soap_in__tds__LoadCACertificates(struct soap*, const char*, _tds__LoadCACertificates *, const char*);
SOAP_FMAC1 _tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCACertificates * soap_new__tds__LoadCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCACertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCACertificates * soap_new_req__tds__LoadCACertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & CACertificate)
{
	_tds__LoadCACertificates *_p = ::soap_new__tds__LoadCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCACertificates::CACertificate = CACertificate;
	}
	return _p;
}

inline _tds__LoadCACertificates * soap_new_set__tds__LoadCACertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & CACertificate)
{
	_tds__LoadCACertificates *_p = ::soap_new__tds__LoadCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCACertificates::CACertificate = CACertificate;
	}
	return _p;
}

inline int soap_write__tds__LoadCACertificates(struct soap *soap, _tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificates", p->soap_type() == SOAP_TYPE__tds__LoadCACertificates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__LoadCACertificates(struct soap *soap, const char *URL, _tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificates", p->soap_type() == SOAP_TYPE__tds__LoadCACertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__LoadCACertificates(struct soap *soap, const char *URL, _tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificates", p->soap_type() == SOAP_TYPE__tds__LoadCACertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__LoadCACertificates(struct soap *soap, const char *URL, _tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCACertificates", p->soap_type() == SOAP_TYPE__tds__LoadCACertificates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCACertificates * SOAP_FMAC4 soap_get__tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates *, const char*, const char*);

inline int soap_read__tds__LoadCACertificates(struct soap *soap, _tds__LoadCACertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__LoadCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__LoadCACertificates(struct soap *soap, const char *URL, _tds__LoadCACertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__LoadCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__LoadCACertificates(struct soap *soap, _tds__LoadCACertificates *p)
{
	if (::soap_read__tds__LoadCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse_DEFINED
#define SOAP_TYPE__tds__GetCertificateInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificateInformationResponse(struct soap*, const char*, int, const _tds__GetCertificateInformationResponse *, const char*);
SOAP_FMAC3 _tds__GetCertificateInformationResponse * SOAP_FMAC4 soap_in__tds__GetCertificateInformationResponse(struct soap*, const char*, _tds__GetCertificateInformationResponse *, const char*);
SOAP_FMAC1 _tds__GetCertificateInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificateInformationResponse * soap_new__tds__GetCertificateInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificateInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificateInformationResponse * soap_new_req__tds__GetCertificateInformationResponse(
	struct soap *soap,
	tt__CertificateInformation *CertificateInformation)
{
	_tds__GetCertificateInformationResponse *_p = ::soap_new__tds__GetCertificateInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformationResponse::CertificateInformation = CertificateInformation;
	}
	return _p;
}

inline _tds__GetCertificateInformationResponse * soap_new_set__tds__GetCertificateInformationResponse(
	struct soap *soap,
	tt__CertificateInformation *CertificateInformation)
{
	_tds__GetCertificateInformationResponse *_p = ::soap_new__tds__GetCertificateInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformationResponse::CertificateInformation = CertificateInformation;
	}
	return _p;
}

inline int soap_write__tds__GetCertificateInformationResponse(struct soap *soap, _tds__GetCertificateInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCertificateInformationResponse(struct soap *soap, const char *URL, _tds__GetCertificateInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCertificateInformationResponse(struct soap *soap, const char *URL, _tds__GetCertificateInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCertificateInformationResponse(struct soap *soap, const char *URL, _tds__GetCertificateInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificateInformationResponse * SOAP_FMAC4 soap_get__tds__GetCertificateInformationResponse(struct soap*, _tds__GetCertificateInformationResponse *, const char*, const char*);

inline int soap_read__tds__GetCertificateInformationResponse(struct soap *soap, _tds__GetCertificateInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCertificateInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCertificateInformationResponse(struct soap *soap, const char *URL, _tds__GetCertificateInformationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCertificateInformationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCertificateInformationResponse(struct soap *soap, _tds__GetCertificateInformationResponse *p)
{
	if (::soap_read__tds__GetCertificateInformationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformation_DEFINED
#define SOAP_TYPE__tds__GetCertificateInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificateInformation(struct soap*, const char*, int, const _tds__GetCertificateInformation *, const char*);
SOAP_FMAC3 _tds__GetCertificateInformation * SOAP_FMAC4 soap_in__tds__GetCertificateInformation(struct soap*, const char*, _tds__GetCertificateInformation *, const char*);
SOAP_FMAC1 _tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate__tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificateInformation * soap_new__tds__GetCertificateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificateInformation(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificateInformation * soap_new_req__tds__GetCertificateInformation(
	struct soap *soap,
	const std::string& CertificateID)
{
	_tds__GetCertificateInformation *_p = ::soap_new__tds__GetCertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformation::CertificateID = CertificateID;
	}
	return _p;
}

inline _tds__GetCertificateInformation * soap_new_set__tds__GetCertificateInformation(
	struct soap *soap,
	const std::string& CertificateID)
{
	_tds__GetCertificateInformation *_p = ::soap_new__tds__GetCertificateInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificateInformation::CertificateID = CertificateID;
	}
	return _p;
}

inline int soap_write__tds__GetCertificateInformation(struct soap *soap, _tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformation", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCertificateInformation(struct soap *soap, const char *URL, _tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformation", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCertificateInformation(struct soap *soap, const char *URL, _tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformation", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCertificateInformation(struct soap *soap, const char *URL, _tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificateInformation", p->soap_type() == SOAP_TYPE__tds__GetCertificateInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificateInformation * SOAP_FMAC4 soap_get__tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation *, const char*, const char*);

inline int soap_read__tds__GetCertificateInformation(struct soap *soap, _tds__GetCertificateInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCertificateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCertificateInformation(struct soap *soap, const char *URL, _tds__GetCertificateInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCertificateInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCertificateInformation(struct soap *soap, _tds__GetCertificateInformation *p)
{
	if (::soap_read__tds__GetCertificateInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse_DEFINED
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, const char*, int, const _tds__LoadCertificateWithPrivateKeyResponse *, const char*);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC4 soap_in__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, const char*, _tds__LoadCertificateWithPrivateKeyResponse *, const char*);
SOAP_FMAC1 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificateWithPrivateKeyResponse * soap_new__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificateWithPrivateKeyResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificateWithPrivateKeyResponse * soap_new_req__tds__LoadCertificateWithPrivateKeyResponse(
	struct soap *soap)
{
	_tds__LoadCertificateWithPrivateKeyResponse *_p = ::soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__LoadCertificateWithPrivateKeyResponse * soap_new_set__tds__LoadCertificateWithPrivateKeyResponse(
	struct soap *soap)
{
	_tds__LoadCertificateWithPrivateKeyResponse *_p = ::soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, _tds__LoadCertificateWithPrivateKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKeyResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKeyResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKeyResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKeyResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKeyResponse * SOAP_FMAC4 soap_get__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, _tds__LoadCertificateWithPrivateKeyResponse *, const char*, const char*);

inline int soap_read__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, _tds__LoadCertificateWithPrivateKeyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__LoadCertificateWithPrivateKeyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKeyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__LoadCertificateWithPrivateKeyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__LoadCertificateWithPrivateKeyResponse(struct soap *soap, _tds__LoadCertificateWithPrivateKeyResponse *p)
{
	if (::soap_read__tds__LoadCertificateWithPrivateKeyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey_DEFINED
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificateWithPrivateKey(struct soap*, const char*, int, const _tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_in__tds__LoadCertificateWithPrivateKey(struct soap*, const char*, _tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC1 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate__tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificateWithPrivateKey * soap_new__tds__LoadCertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificateWithPrivateKey * soap_new_req__tds__LoadCertificateWithPrivateKey(
	struct soap *soap,
	const std::vector<tt__CertificateWithPrivateKey *> & CertificateWithPrivateKey)
{
	_tds__LoadCertificateWithPrivateKey *_p = ::soap_new__tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificateWithPrivateKey::CertificateWithPrivateKey = CertificateWithPrivateKey;
	}
	return _p;
}

inline _tds__LoadCertificateWithPrivateKey * soap_new_set__tds__LoadCertificateWithPrivateKey(
	struct soap *soap,
	const std::vector<tt__CertificateWithPrivateKey *> & CertificateWithPrivateKey)
{
	_tds__LoadCertificateWithPrivateKey *_p = ::soap_new__tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificateWithPrivateKey::CertificateWithPrivateKey = CertificateWithPrivateKey;
	}
	return _p;
}

inline int soap_write__tds__LoadCertificateWithPrivateKey(struct soap *soap, _tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKey", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKey", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKey", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificateWithPrivateKey", p->soap_type() == SOAP_TYPE__tds__LoadCertificateWithPrivateKey ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_get__tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey *, const char*, const char*);

inline int soap_read__tds__LoadCertificateWithPrivateKey(struct soap *soap, _tds__LoadCertificateWithPrivateKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__LoadCertificateWithPrivateKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, _tds__LoadCertificateWithPrivateKey *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__LoadCertificateWithPrivateKey(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__LoadCertificateWithPrivateKey(struct soap *soap, _tds__LoadCertificateWithPrivateKey *p)
{
	if (::soap_read__tds__LoadCertificateWithPrivateKey(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCACertificatesResponse_DEFINED
#define SOAP_TYPE__tds__GetCACertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCACertificatesResponse(struct soap*, const char*, int, const _tds__GetCACertificatesResponse *, const char*);
SOAP_FMAC3 _tds__GetCACertificatesResponse * SOAP_FMAC4 soap_in__tds__GetCACertificatesResponse(struct soap*, const char*, _tds__GetCACertificatesResponse *, const char*);
SOAP_FMAC1 _tds__GetCACertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCACertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCACertificatesResponse * soap_new__tds__GetCACertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCACertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCACertificatesResponse * soap_new_req__tds__GetCACertificatesResponse(
	struct soap *soap)
{
	_tds__GetCACertificatesResponse *_p = ::soap_new__tds__GetCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCACertificatesResponse * soap_new_set__tds__GetCACertificatesResponse(
	struct soap *soap,
	const std::vector<tt__Certificate *> & CACertificate)
{
	_tds__GetCACertificatesResponse *_p = ::soap_new__tds__GetCACertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCACertificatesResponse::CACertificate = CACertificate;
	}
	return _p;
}

inline int soap_write__tds__GetCACertificatesResponse(struct soap *soap, _tds__GetCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCACertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCACertificatesResponse(struct soap *soap, const char *URL, _tds__GetCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCACertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCACertificatesResponse(struct soap *soap, const char *URL, _tds__GetCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCACertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCACertificatesResponse(struct soap *soap, const char *URL, _tds__GetCACertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCACertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCACertificatesResponse * SOAP_FMAC4 soap_get__tds__GetCACertificatesResponse(struct soap*, _tds__GetCACertificatesResponse *, const char*, const char*);

inline int soap_read__tds__GetCACertificatesResponse(struct soap *soap, _tds__GetCACertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCACertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCACertificatesResponse(struct soap *soap, const char *URL, _tds__GetCACertificatesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCACertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCACertificatesResponse(struct soap *soap, _tds__GetCACertificatesResponse *p)
{
	if (::soap_read__tds__GetCACertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCACertificates_DEFINED
#define SOAP_TYPE__tds__GetCACertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCACertificates(struct soap*, const char*, int, const _tds__GetCACertificates *, const char*);
SOAP_FMAC3 _tds__GetCACertificates * SOAP_FMAC4 soap_in__tds__GetCACertificates(struct soap*, const char*, _tds__GetCACertificates *, const char*);
SOAP_FMAC1 _tds__GetCACertificates * SOAP_FMAC2 soap_instantiate__tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCACertificates * soap_new__tds__GetCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCACertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCACertificates * soap_new_req__tds__GetCACertificates(
	struct soap *soap)
{
	_tds__GetCACertificates *_p = ::soap_new__tds__GetCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCACertificates * soap_new_set__tds__GetCACertificates(
	struct soap *soap)
{
	_tds__GetCACertificates *_p = ::soap_new__tds__GetCACertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetCACertificates(struct soap *soap, _tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificates", p->soap_type() == SOAP_TYPE__tds__GetCACertificates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCACertificates(struct soap *soap, const char *URL, _tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificates", p->soap_type() == SOAP_TYPE__tds__GetCACertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCACertificates(struct soap *soap, const char *URL, _tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificates", p->soap_type() == SOAP_TYPE__tds__GetCACertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCACertificates(struct soap *soap, const char *URL, _tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCACertificates", p->soap_type() == SOAP_TYPE__tds__GetCACertificates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCACertificates * SOAP_FMAC4 soap_get__tds__GetCACertificates(struct soap*, _tds__GetCACertificates *, const char*, const char*);

inline int soap_read__tds__GetCACertificates(struct soap *soap, _tds__GetCACertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCACertificates(struct soap *soap, const char *URL, _tds__GetCACertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCACertificates(struct soap *soap, _tds__GetCACertificates *p)
{
	if (::soap_read__tds__GetCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse_DEFINED
#define SOAP_TYPE__tds__SetClientCertificateModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetClientCertificateModeResponse(struct soap*, const char*, int, const _tds__SetClientCertificateModeResponse *, const char*);
SOAP_FMAC3 _tds__SetClientCertificateModeResponse * SOAP_FMAC4 soap_in__tds__SetClientCertificateModeResponse(struct soap*, const char*, _tds__SetClientCertificateModeResponse *, const char*);
SOAP_FMAC1 _tds__SetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetClientCertificateModeResponse * soap_new__tds__SetClientCertificateModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetClientCertificateModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetClientCertificateModeResponse * soap_new_req__tds__SetClientCertificateModeResponse(
	struct soap *soap)
{
	_tds__SetClientCertificateModeResponse *_p = ::soap_new__tds__SetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetClientCertificateModeResponse * soap_new_set__tds__SetClientCertificateModeResponse(
	struct soap *soap)
{
	_tds__SetClientCertificateModeResponse *_p = ::soap_new__tds__SetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetClientCertificateModeResponse(struct soap *soap, _tds__SetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__SetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__SetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__SetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetClientCertificateModeResponse * SOAP_FMAC4 soap_get__tds__SetClientCertificateModeResponse(struct soap*, _tds__SetClientCertificateModeResponse *, const char*, const char*);

inline int soap_read__tds__SetClientCertificateModeResponse(struct soap *soap, _tds__SetClientCertificateModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetClientCertificateModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__SetClientCertificateModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetClientCertificateModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetClientCertificateModeResponse(struct soap *soap, _tds__SetClientCertificateModeResponse *p)
{
	if (::soap_read__tds__SetClientCertificateModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateMode_DEFINED
#define SOAP_TYPE__tds__SetClientCertificateMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetClientCertificateMode(struct soap*, const char*, int, const _tds__SetClientCertificateMode *, const char*);
SOAP_FMAC3 _tds__SetClientCertificateMode * SOAP_FMAC4 soap_in__tds__SetClientCertificateMode(struct soap*, const char*, _tds__SetClientCertificateMode *, const char*);
SOAP_FMAC1 _tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetClientCertificateMode * soap_new__tds__SetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline _tds__SetClientCertificateMode * soap_new_req__tds__SetClientCertificateMode(
	struct soap *soap,
	bool Enabled)
{
	_tds__SetClientCertificateMode *_p = ::soap_new__tds__SetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetClientCertificateMode::Enabled = Enabled;
	}
	return _p;
}

inline _tds__SetClientCertificateMode * soap_new_set__tds__SetClientCertificateMode(
	struct soap *soap,
	bool Enabled)
{
	_tds__SetClientCertificateMode *_p = ::soap_new__tds__SetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetClientCertificateMode::Enabled = Enabled;
	}
	return _p;
}

inline int soap_write__tds__SetClientCertificateMode(struct soap *soap, _tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetClientCertificateMode(struct soap *soap, const char *URL, _tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetClientCertificateMode(struct soap *soap, const char *URL, _tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetClientCertificateMode(struct soap *soap, const char *URL, _tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__SetClientCertificateMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetClientCertificateMode * SOAP_FMAC4 soap_get__tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode *, const char*, const char*);

inline int soap_read__tds__SetClientCertificateMode(struct soap *soap, _tds__SetClientCertificateMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetClientCertificateMode(struct soap *soap, const char *URL, _tds__SetClientCertificateMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetClientCertificateMode(struct soap *soap, _tds__SetClientCertificateMode *p)
{
	if (::soap_read__tds__SetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse_DEFINED
#define SOAP_TYPE__tds__GetClientCertificateModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetClientCertificateModeResponse(struct soap*, const char*, int, const _tds__GetClientCertificateModeResponse *, const char*);
SOAP_FMAC3 _tds__GetClientCertificateModeResponse * SOAP_FMAC4 soap_in__tds__GetClientCertificateModeResponse(struct soap*, const char*, _tds__GetClientCertificateModeResponse *, const char*);
SOAP_FMAC1 _tds__GetClientCertificateModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetClientCertificateModeResponse * soap_new__tds__GetClientCertificateModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetClientCertificateModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetClientCertificateModeResponse * soap_new_req__tds__GetClientCertificateModeResponse(
	struct soap *soap,
	bool Enabled)
{
	_tds__GetClientCertificateModeResponse *_p = ::soap_new__tds__GetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetClientCertificateModeResponse::Enabled = Enabled;
	}
	return _p;
}

inline _tds__GetClientCertificateModeResponse * soap_new_set__tds__GetClientCertificateModeResponse(
	struct soap *soap,
	bool Enabled)
{
	_tds__GetClientCertificateModeResponse *_p = ::soap_new__tds__GetClientCertificateModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetClientCertificateModeResponse::Enabled = Enabled;
	}
	return _p;
}

inline int soap_write__tds__GetClientCertificateModeResponse(struct soap *soap, _tds__GetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__GetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__GetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__GetClientCertificateModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateModeResponse", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetClientCertificateModeResponse * SOAP_FMAC4 soap_get__tds__GetClientCertificateModeResponse(struct soap*, _tds__GetClientCertificateModeResponse *, const char*, const char*);

inline int soap_read__tds__GetClientCertificateModeResponse(struct soap *soap, _tds__GetClientCertificateModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetClientCertificateModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetClientCertificateModeResponse(struct soap *soap, const char *URL, _tds__GetClientCertificateModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetClientCertificateModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetClientCertificateModeResponse(struct soap *soap, _tds__GetClientCertificateModeResponse *p)
{
	if (::soap_read__tds__GetClientCertificateModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateMode_DEFINED
#define SOAP_TYPE__tds__GetClientCertificateMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetClientCertificateMode(struct soap*, const char*, int, const _tds__GetClientCertificateMode *, const char*);
SOAP_FMAC3 _tds__GetClientCertificateMode * SOAP_FMAC4 soap_in__tds__GetClientCertificateMode(struct soap*, const char*, _tds__GetClientCertificateMode *, const char*);
SOAP_FMAC1 _tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate__tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetClientCertificateMode * soap_new__tds__GetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline _tds__GetClientCertificateMode * soap_new_req__tds__GetClientCertificateMode(
	struct soap *soap)
{
	_tds__GetClientCertificateMode *_p = ::soap_new__tds__GetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetClientCertificateMode * soap_new_set__tds__GetClientCertificateMode(
	struct soap *soap)
{
	_tds__GetClientCertificateMode *_p = ::soap_new__tds__GetClientCertificateMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetClientCertificateMode(struct soap *soap, _tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetClientCertificateMode(struct soap *soap, const char *URL, _tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetClientCertificateMode(struct soap *soap, const char *URL, _tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetClientCertificateMode(struct soap *soap, const char *URL, _tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetClientCertificateMode", p->soap_type() == SOAP_TYPE__tds__GetClientCertificateMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetClientCertificateMode * SOAP_FMAC4 soap_get__tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode *, const char*, const char*);

inline int soap_read__tds__GetClientCertificateMode(struct soap *soap, _tds__GetClientCertificateMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetClientCertificateMode(struct soap *soap, const char *URL, _tds__GetClientCertificateMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetClientCertificateMode(struct soap *soap, _tds__GetClientCertificateMode *p)
{
	if (::soap_read__tds__GetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificatesResponse_DEFINED
#define SOAP_TYPE__tds__LoadCertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificatesResponse(struct soap*, const char*, int, const _tds__LoadCertificatesResponse *, const char*);
SOAP_FMAC3 _tds__LoadCertificatesResponse * SOAP_FMAC4 soap_in__tds__LoadCertificatesResponse(struct soap*, const char*, _tds__LoadCertificatesResponse *, const char*);
SOAP_FMAC1 _tds__LoadCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__LoadCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificatesResponse * soap_new__tds__LoadCertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificatesResponse * soap_new_req__tds__LoadCertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCertificatesResponse *_p = ::soap_new__tds__LoadCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__LoadCertificatesResponse * soap_new_set__tds__LoadCertificatesResponse(
	struct soap *soap)
{
	_tds__LoadCertificatesResponse *_p = ::soap_new__tds__LoadCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__LoadCertificatesResponse(struct soap *soap, _tds__LoadCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__LoadCertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__LoadCertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__LoadCertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__LoadCertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificatesResponse * SOAP_FMAC4 soap_get__tds__LoadCertificatesResponse(struct soap*, _tds__LoadCertificatesResponse *, const char*, const char*);

inline int soap_read__tds__LoadCertificatesResponse(struct soap *soap, _tds__LoadCertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__LoadCertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__LoadCertificatesResponse(struct soap *soap, const char *URL, _tds__LoadCertificatesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__LoadCertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__LoadCertificatesResponse(struct soap *soap, _tds__LoadCertificatesResponse *p)
{
	if (::soap_read__tds__LoadCertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__LoadCertificates_DEFINED
#define SOAP_TYPE__tds__LoadCertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__LoadCertificates(struct soap*, const char*, int, const _tds__LoadCertificates *, const char*);
SOAP_FMAC3 _tds__LoadCertificates * SOAP_FMAC4 soap_in__tds__LoadCertificates(struct soap*, const char*, _tds__LoadCertificates *, const char*);
SOAP_FMAC1 _tds__LoadCertificates * SOAP_FMAC2 soap_instantiate__tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__LoadCertificates * soap_new__tds__LoadCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__LoadCertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__LoadCertificates * soap_new_req__tds__LoadCertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & NVTCertificate)
{
	_tds__LoadCertificates *_p = ::soap_new__tds__LoadCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificates::NVTCertificate = NVTCertificate;
	}
	return _p;
}

inline _tds__LoadCertificates * soap_new_set__tds__LoadCertificates(
	struct soap *soap,
	const std::vector<tt__Certificate *> & NVTCertificate)
{
	_tds__LoadCertificates *_p = ::soap_new__tds__LoadCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__LoadCertificates::NVTCertificate = NVTCertificate;
	}
	return _p;
}

inline int soap_write__tds__LoadCertificates(struct soap *soap, _tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificates", p->soap_type() == SOAP_TYPE__tds__LoadCertificates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__LoadCertificates(struct soap *soap, const char *URL, _tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificates", p->soap_type() == SOAP_TYPE__tds__LoadCertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__LoadCertificates(struct soap *soap, const char *URL, _tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificates", p->soap_type() == SOAP_TYPE__tds__LoadCertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__LoadCertificates(struct soap *soap, const char *URL, _tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:LoadCertificates", p->soap_type() == SOAP_TYPE__tds__LoadCertificates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__LoadCertificates * SOAP_FMAC4 soap_get__tds__LoadCertificates(struct soap*, _tds__LoadCertificates *, const char*, const char*);

inline int soap_read__tds__LoadCertificates(struct soap *soap, _tds__LoadCertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__LoadCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__LoadCertificates(struct soap *soap, const char *URL, _tds__LoadCertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__LoadCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__LoadCertificates(struct soap *soap, _tds__LoadCertificates *p)
{
	if (::soap_read__tds__LoadCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse_DEFINED
#define SOAP_TYPE__tds__GetPkcs10RequestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPkcs10RequestResponse(struct soap*, const char*, int, const _tds__GetPkcs10RequestResponse *, const char*);
SOAP_FMAC3 _tds__GetPkcs10RequestResponse * SOAP_FMAC4 soap_in__tds__GetPkcs10RequestResponse(struct soap*, const char*, _tds__GetPkcs10RequestResponse *, const char*);
SOAP_FMAC1 _tds__GetPkcs10RequestResponse * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10RequestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPkcs10RequestResponse * soap_new__tds__GetPkcs10RequestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPkcs10RequestResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPkcs10RequestResponse * soap_new_req__tds__GetPkcs10RequestResponse(
	struct soap *soap,
	tt__BinaryData *Pkcs10Request)
{
	_tds__GetPkcs10RequestResponse *_p = ::soap_new__tds__GetPkcs10RequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10RequestResponse::Pkcs10Request = Pkcs10Request;
	}
	return _p;
}

inline _tds__GetPkcs10RequestResponse * soap_new_set__tds__GetPkcs10RequestResponse(
	struct soap *soap,
	tt__BinaryData *Pkcs10Request)
{
	_tds__GetPkcs10RequestResponse *_p = ::soap_new__tds__GetPkcs10RequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10RequestResponse::Pkcs10Request = Pkcs10Request;
	}
	return _p;
}

inline int soap_write__tds__GetPkcs10RequestResponse(struct soap *soap, _tds__GetPkcs10RequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10RequestResponse", p->soap_type() == SOAP_TYPE__tds__GetPkcs10RequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPkcs10RequestResponse(struct soap *soap, const char *URL, _tds__GetPkcs10RequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10RequestResponse", p->soap_type() == SOAP_TYPE__tds__GetPkcs10RequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPkcs10RequestResponse(struct soap *soap, const char *URL, _tds__GetPkcs10RequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10RequestResponse", p->soap_type() == SOAP_TYPE__tds__GetPkcs10RequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPkcs10RequestResponse(struct soap *soap, const char *URL, _tds__GetPkcs10RequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10RequestResponse", p->soap_type() == SOAP_TYPE__tds__GetPkcs10RequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPkcs10RequestResponse * SOAP_FMAC4 soap_get__tds__GetPkcs10RequestResponse(struct soap*, _tds__GetPkcs10RequestResponse *, const char*, const char*);

inline int soap_read__tds__GetPkcs10RequestResponse(struct soap *soap, _tds__GetPkcs10RequestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPkcs10RequestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPkcs10RequestResponse(struct soap *soap, const char *URL, _tds__GetPkcs10RequestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPkcs10RequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPkcs10RequestResponse(struct soap *soap, _tds__GetPkcs10RequestResponse *p)
{
	if (::soap_read__tds__GetPkcs10RequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10Request_DEFINED
#define SOAP_TYPE__tds__GetPkcs10Request_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPkcs10Request(struct soap*, const char*, int, const _tds__GetPkcs10Request *, const char*);
SOAP_FMAC3 _tds__GetPkcs10Request * SOAP_FMAC4 soap_in__tds__GetPkcs10Request(struct soap*, const char*, _tds__GetPkcs10Request *, const char*);
SOAP_FMAC1 _tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate__tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPkcs10Request * soap_new__tds__GetPkcs10Request(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPkcs10Request(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPkcs10Request * soap_new_req__tds__GetPkcs10Request(
	struct soap *soap,
	const std::string& CertificateID)
{
	_tds__GetPkcs10Request *_p = ::soap_new__tds__GetPkcs10Request(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10Request::CertificateID = CertificateID;
	}
	return _p;
}

inline _tds__GetPkcs10Request * soap_new_set__tds__GetPkcs10Request(
	struct soap *soap,
	const std::string& CertificateID,
	std::string *Subject,
	tt__BinaryData *Attributes)
{
	_tds__GetPkcs10Request *_p = ::soap_new__tds__GetPkcs10Request(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPkcs10Request::CertificateID = CertificateID;
		_p->_tds__GetPkcs10Request::Subject = Subject;
		_p->_tds__GetPkcs10Request::Attributes = Attributes;
	}
	return _p;
}

inline int soap_write__tds__GetPkcs10Request(struct soap *soap, _tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10Request", p->soap_type() == SOAP_TYPE__tds__GetPkcs10Request ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPkcs10Request(struct soap *soap, const char *URL, _tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10Request", p->soap_type() == SOAP_TYPE__tds__GetPkcs10Request ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPkcs10Request(struct soap *soap, const char *URL, _tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10Request", p->soap_type() == SOAP_TYPE__tds__GetPkcs10Request ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPkcs10Request(struct soap *soap, const char *URL, _tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPkcs10Request", p->soap_type() == SOAP_TYPE__tds__GetPkcs10Request ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPkcs10Request * SOAP_FMAC4 soap_get__tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request *, const char*, const char*);

inline int soap_read__tds__GetPkcs10Request(struct soap *soap, _tds__GetPkcs10Request *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPkcs10Request(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPkcs10Request(struct soap *soap, const char *URL, _tds__GetPkcs10Request *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPkcs10Request(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPkcs10Request(struct soap *soap, _tds__GetPkcs10Request *p)
{
	if (::soap_read__tds__GetPkcs10Request(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse_DEFINED
#define SOAP_TYPE__tds__DeleteCertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteCertificatesResponse(struct soap*, const char*, int, const _tds__DeleteCertificatesResponse *, const char*);
SOAP_FMAC3 _tds__DeleteCertificatesResponse * SOAP_FMAC4 soap_in__tds__DeleteCertificatesResponse(struct soap*, const char*, _tds__DeleteCertificatesResponse *, const char*);
SOAP_FMAC1 _tds__DeleteCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteCertificatesResponse * soap_new__tds__DeleteCertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteCertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteCertificatesResponse * soap_new_req__tds__DeleteCertificatesResponse(
	struct soap *soap)
{
	_tds__DeleteCertificatesResponse *_p = ::soap_new__tds__DeleteCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteCertificatesResponse * soap_new_set__tds__DeleteCertificatesResponse(
	struct soap *soap)
{
	_tds__DeleteCertificatesResponse *_p = ::soap_new__tds__DeleteCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteCertificatesResponse(struct soap *soap, _tds__DeleteCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__DeleteCertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteCertificatesResponse(struct soap *soap, const char *URL, _tds__DeleteCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__DeleteCertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteCertificatesResponse(struct soap *soap, const char *URL, _tds__DeleteCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__DeleteCertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteCertificatesResponse(struct soap *soap, const char *URL, _tds__DeleteCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__DeleteCertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteCertificatesResponse * SOAP_FMAC4 soap_get__tds__DeleteCertificatesResponse(struct soap*, _tds__DeleteCertificatesResponse *, const char*, const char*);

inline int soap_read__tds__DeleteCertificatesResponse(struct soap *soap, _tds__DeleteCertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteCertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteCertificatesResponse(struct soap *soap, const char *URL, _tds__DeleteCertificatesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteCertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteCertificatesResponse(struct soap *soap, _tds__DeleteCertificatesResponse *p)
{
	if (::soap_read__tds__DeleteCertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificates_DEFINED
#define SOAP_TYPE__tds__DeleteCertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteCertificates(struct soap*, const char*, int, const _tds__DeleteCertificates *, const char*);
SOAP_FMAC3 _tds__DeleteCertificates * SOAP_FMAC4 soap_in__tds__DeleteCertificates(struct soap*, const char*, _tds__DeleteCertificates *, const char*);
SOAP_FMAC1 _tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate__tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteCertificates * soap_new__tds__DeleteCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteCertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteCertificates * soap_new_req__tds__DeleteCertificates(
	struct soap *soap,
	const std::vector<std::string> & CertificateID)
{
	_tds__DeleteCertificates *_p = ::soap_new__tds__DeleteCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteCertificates::CertificateID = CertificateID;
	}
	return _p;
}

inline _tds__DeleteCertificates * soap_new_set__tds__DeleteCertificates(
	struct soap *soap,
	const std::vector<std::string> & CertificateID)
{
	_tds__DeleteCertificates *_p = ::soap_new__tds__DeleteCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteCertificates::CertificateID = CertificateID;
	}
	return _p;
}

inline int soap_write__tds__DeleteCertificates(struct soap *soap, _tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificates", p->soap_type() == SOAP_TYPE__tds__DeleteCertificates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteCertificates(struct soap *soap, const char *URL, _tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificates", p->soap_type() == SOAP_TYPE__tds__DeleteCertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteCertificates(struct soap *soap, const char *URL, _tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificates", p->soap_type() == SOAP_TYPE__tds__DeleteCertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteCertificates(struct soap *soap, const char *URL, _tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteCertificates", p->soap_type() == SOAP_TYPE__tds__DeleteCertificates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteCertificates * SOAP_FMAC4 soap_get__tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates *, const char*, const char*);

inline int soap_read__tds__DeleteCertificates(struct soap *soap, _tds__DeleteCertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteCertificates(struct soap *soap, const char *URL, _tds__DeleteCertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteCertificates(struct soap *soap, _tds__DeleteCertificates *p)
{
	if (::soap_read__tds__DeleteCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse_DEFINED
#define SOAP_TYPE__tds__SetCertificatesStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetCertificatesStatusResponse(struct soap*, const char*, int, const _tds__SetCertificatesStatusResponse *, const char*);
SOAP_FMAC3 _tds__SetCertificatesStatusResponse * SOAP_FMAC4 soap_in__tds__SetCertificatesStatusResponse(struct soap*, const char*, _tds__SetCertificatesStatusResponse *, const char*);
SOAP_FMAC1 _tds__SetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetCertificatesStatusResponse * soap_new__tds__SetCertificatesStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetCertificatesStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetCertificatesStatusResponse * soap_new_req__tds__SetCertificatesStatusResponse(
	struct soap *soap)
{
	_tds__SetCertificatesStatusResponse *_p = ::soap_new__tds__SetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetCertificatesStatusResponse * soap_new_set__tds__SetCertificatesStatusResponse(
	struct soap *soap)
{
	_tds__SetCertificatesStatusResponse *_p = ::soap_new__tds__SetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetCertificatesStatusResponse(struct soap *soap, _tds__SetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__SetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__SetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__SetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetCertificatesStatusResponse * SOAP_FMAC4 soap_get__tds__SetCertificatesStatusResponse(struct soap*, _tds__SetCertificatesStatusResponse *, const char*, const char*);

inline int soap_read__tds__SetCertificatesStatusResponse(struct soap *soap, _tds__SetCertificatesStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetCertificatesStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__SetCertificatesStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetCertificatesStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetCertificatesStatusResponse(struct soap *soap, _tds__SetCertificatesStatusResponse *p)
{
	if (::soap_read__tds__SetCertificatesStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatus_DEFINED
#define SOAP_TYPE__tds__SetCertificatesStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetCertificatesStatus(struct soap*, const char*, int, const _tds__SetCertificatesStatus *, const char*);
SOAP_FMAC3 _tds__SetCertificatesStatus * SOAP_FMAC4 soap_in__tds__SetCertificatesStatus(struct soap*, const char*, _tds__SetCertificatesStatus *, const char*);
SOAP_FMAC1 _tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetCertificatesStatus * soap_new__tds__SetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline _tds__SetCertificatesStatus * soap_new_req__tds__SetCertificatesStatus(
	struct soap *soap)
{
	_tds__SetCertificatesStatus *_p = ::soap_new__tds__SetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetCertificatesStatus * soap_new_set__tds__SetCertificatesStatus(
	struct soap *soap,
	const std::vector<tt__CertificateStatus *> & CertificateStatus)
{
	_tds__SetCertificatesStatus *_p = ::soap_new__tds__SetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetCertificatesStatus::CertificateStatus = CertificateStatus;
	}
	return _p;
}

inline int soap_write__tds__SetCertificatesStatus(struct soap *soap, _tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetCertificatesStatus(struct soap *soap, const char *URL, _tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetCertificatesStatus(struct soap *soap, const char *URL, _tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetCertificatesStatus(struct soap *soap, const char *URL, _tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__SetCertificatesStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetCertificatesStatus * SOAP_FMAC4 soap_get__tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus *, const char*, const char*);

inline int soap_read__tds__SetCertificatesStatus(struct soap *soap, _tds__SetCertificatesStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetCertificatesStatus(struct soap *soap, const char *URL, _tds__SetCertificatesStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetCertificatesStatus(struct soap *soap, _tds__SetCertificatesStatus *p)
{
	if (::soap_read__tds__SetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse_DEFINED
#define SOAP_TYPE__tds__GetCertificatesStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificatesStatusResponse(struct soap*, const char*, int, const _tds__GetCertificatesStatusResponse *, const char*);
SOAP_FMAC3 _tds__GetCertificatesStatusResponse * SOAP_FMAC4 soap_in__tds__GetCertificatesStatusResponse(struct soap*, const char*, _tds__GetCertificatesStatusResponse *, const char*);
SOAP_FMAC1 _tds__GetCertificatesStatusResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificatesStatusResponse * soap_new__tds__GetCertificatesStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificatesStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificatesStatusResponse * soap_new_req__tds__GetCertificatesStatusResponse(
	struct soap *soap)
{
	_tds__GetCertificatesStatusResponse *_p = ::soap_new__tds__GetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificatesStatusResponse * soap_new_set__tds__GetCertificatesStatusResponse(
	struct soap *soap,
	const std::vector<tt__CertificateStatus *> & CertificateStatus)
{
	_tds__GetCertificatesStatusResponse *_p = ::soap_new__tds__GetCertificatesStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificatesStatusResponse::CertificateStatus = CertificateStatus;
	}
	return _p;
}

inline int soap_write__tds__GetCertificatesStatusResponse(struct soap *soap, _tds__GetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__GetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__GetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__GetCertificatesStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatusResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificatesStatusResponse * SOAP_FMAC4 soap_get__tds__GetCertificatesStatusResponse(struct soap*, _tds__GetCertificatesStatusResponse *, const char*, const char*);

inline int soap_read__tds__GetCertificatesStatusResponse(struct soap *soap, _tds__GetCertificatesStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCertificatesStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCertificatesStatusResponse(struct soap *soap, const char *URL, _tds__GetCertificatesStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCertificatesStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCertificatesStatusResponse(struct soap *soap, _tds__GetCertificatesStatusResponse *p)
{
	if (::soap_read__tds__GetCertificatesStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatus_DEFINED
#define SOAP_TYPE__tds__GetCertificatesStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificatesStatus(struct soap*, const char*, int, const _tds__GetCertificatesStatus *, const char*);
SOAP_FMAC3 _tds__GetCertificatesStatus * SOAP_FMAC4 soap_in__tds__GetCertificatesStatus(struct soap*, const char*, _tds__GetCertificatesStatus *, const char*);
SOAP_FMAC1 _tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificatesStatus * soap_new__tds__GetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificatesStatus * soap_new_req__tds__GetCertificatesStatus(
	struct soap *soap)
{
	_tds__GetCertificatesStatus *_p = ::soap_new__tds__GetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificatesStatus * soap_new_set__tds__GetCertificatesStatus(
	struct soap *soap)
{
	_tds__GetCertificatesStatus *_p = ::soap_new__tds__GetCertificatesStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetCertificatesStatus(struct soap *soap, _tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCertificatesStatus(struct soap *soap, const char *URL, _tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCertificatesStatus(struct soap *soap, const char *URL, _tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCertificatesStatus(struct soap *soap, const char *URL, _tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesStatus", p->soap_type() == SOAP_TYPE__tds__GetCertificatesStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificatesStatus * SOAP_FMAC4 soap_get__tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus *, const char*, const char*);

inline int soap_read__tds__GetCertificatesStatus(struct soap *soap, _tds__GetCertificatesStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCertificatesStatus(struct soap *soap, const char *URL, _tds__GetCertificatesStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCertificatesStatus(struct soap *soap, _tds__GetCertificatesStatus *p)
{
	if (::soap_read__tds__GetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesResponse_DEFINED
#define SOAP_TYPE__tds__GetCertificatesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificatesResponse(struct soap*, const char*, int, const _tds__GetCertificatesResponse *, const char*);
SOAP_FMAC3 _tds__GetCertificatesResponse * SOAP_FMAC4 soap_in__tds__GetCertificatesResponse(struct soap*, const char*, _tds__GetCertificatesResponse *, const char*);
SOAP_FMAC1 _tds__GetCertificatesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCertificatesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificatesResponse * soap_new__tds__GetCertificatesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificatesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificatesResponse * soap_new_req__tds__GetCertificatesResponse(
	struct soap *soap)
{
	_tds__GetCertificatesResponse *_p = ::soap_new__tds__GetCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificatesResponse * soap_new_set__tds__GetCertificatesResponse(
	struct soap *soap,
	const std::vector<tt__Certificate *> & NvtCertificate)
{
	_tds__GetCertificatesResponse *_p = ::soap_new__tds__GetCertificatesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCertificatesResponse::NvtCertificate = NvtCertificate;
	}
	return _p;
}

inline int soap_write__tds__GetCertificatesResponse(struct soap *soap, _tds__GetCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCertificatesResponse(struct soap *soap, const char *URL, _tds__GetCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCertificatesResponse(struct soap *soap, const char *URL, _tds__GetCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCertificatesResponse(struct soap *soap, const char *URL, _tds__GetCertificatesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificatesResponse", p->soap_type() == SOAP_TYPE__tds__GetCertificatesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificatesResponse * SOAP_FMAC4 soap_get__tds__GetCertificatesResponse(struct soap*, _tds__GetCertificatesResponse *, const char*, const char*);

inline int soap_read__tds__GetCertificatesResponse(struct soap *soap, _tds__GetCertificatesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCertificatesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCertificatesResponse(struct soap *soap, const char *URL, _tds__GetCertificatesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCertificatesResponse(struct soap *soap, _tds__GetCertificatesResponse *p)
{
	if (::soap_read__tds__GetCertificatesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCertificates_DEFINED
#define SOAP_TYPE__tds__GetCertificates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCertificates(struct soap*, const char*, int, const _tds__GetCertificates *, const char*);
SOAP_FMAC3 _tds__GetCertificates * SOAP_FMAC4 soap_in__tds__GetCertificates(struct soap*, const char*, _tds__GetCertificates *, const char*);
SOAP_FMAC1 _tds__GetCertificates * SOAP_FMAC2 soap_instantiate__tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCertificates * soap_new__tds__GetCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCertificates(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCertificates * soap_new_req__tds__GetCertificates(
	struct soap *soap)
{
	_tds__GetCertificates *_p = ::soap_new__tds__GetCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCertificates * soap_new_set__tds__GetCertificates(
	struct soap *soap)
{
	_tds__GetCertificates *_p = ::soap_new__tds__GetCertificates(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetCertificates(struct soap *soap, _tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificates", p->soap_type() == SOAP_TYPE__tds__GetCertificates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCertificates(struct soap *soap, const char *URL, _tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificates", p->soap_type() == SOAP_TYPE__tds__GetCertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCertificates(struct soap *soap, const char *URL, _tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificates", p->soap_type() == SOAP_TYPE__tds__GetCertificates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCertificates(struct soap *soap, const char *URL, _tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCertificates", p->soap_type() == SOAP_TYPE__tds__GetCertificates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCertificates * SOAP_FMAC4 soap_get__tds__GetCertificates(struct soap*, _tds__GetCertificates *, const char*, const char*);

inline int soap_read__tds__GetCertificates(struct soap *soap, _tds__GetCertificates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCertificates(struct soap *soap, const char *URL, _tds__GetCertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCertificates(struct soap *soap, _tds__GetCertificates *p)
{
	if (::soap_read__tds__GetCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateCertificateResponse_DEFINED
#define SOAP_TYPE__tds__CreateCertificateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateCertificateResponse(struct soap*, const char*, int, const _tds__CreateCertificateResponse *, const char*);
SOAP_FMAC3 _tds__CreateCertificateResponse * SOAP_FMAC4 soap_in__tds__CreateCertificateResponse(struct soap*, const char*, _tds__CreateCertificateResponse *, const char*);
SOAP_FMAC1 _tds__CreateCertificateResponse * SOAP_FMAC2 soap_instantiate__tds__CreateCertificateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateCertificateResponse * soap_new__tds__CreateCertificateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateCertificateResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateCertificateResponse * soap_new_req__tds__CreateCertificateResponse(
	struct soap *soap,
	tt__Certificate *NvtCertificate)
{
	_tds__CreateCertificateResponse *_p = ::soap_new__tds__CreateCertificateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateCertificateResponse::NvtCertificate = NvtCertificate;
	}
	return _p;
}

inline _tds__CreateCertificateResponse * soap_new_set__tds__CreateCertificateResponse(
	struct soap *soap,
	tt__Certificate *NvtCertificate)
{
	_tds__CreateCertificateResponse *_p = ::soap_new__tds__CreateCertificateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateCertificateResponse::NvtCertificate = NvtCertificate;
	}
	return _p;
}

inline int soap_write__tds__CreateCertificateResponse(struct soap *soap, _tds__CreateCertificateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificateResponse", p->soap_type() == SOAP_TYPE__tds__CreateCertificateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateCertificateResponse(struct soap *soap, const char *URL, _tds__CreateCertificateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificateResponse", p->soap_type() == SOAP_TYPE__tds__CreateCertificateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateCertificateResponse(struct soap *soap, const char *URL, _tds__CreateCertificateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificateResponse", p->soap_type() == SOAP_TYPE__tds__CreateCertificateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateCertificateResponse(struct soap *soap, const char *URL, _tds__CreateCertificateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificateResponse", p->soap_type() == SOAP_TYPE__tds__CreateCertificateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateCertificateResponse * SOAP_FMAC4 soap_get__tds__CreateCertificateResponse(struct soap*, _tds__CreateCertificateResponse *, const char*, const char*);

inline int soap_read__tds__CreateCertificateResponse(struct soap *soap, _tds__CreateCertificateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateCertificateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateCertificateResponse(struct soap *soap, const char *URL, _tds__CreateCertificateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateCertificateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateCertificateResponse(struct soap *soap, _tds__CreateCertificateResponse *p)
{
	if (::soap_read__tds__CreateCertificateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateCertificate_DEFINED
#define SOAP_TYPE__tds__CreateCertificate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateCertificate(struct soap*, const char*, int, const _tds__CreateCertificate *, const char*);
SOAP_FMAC3 _tds__CreateCertificate * SOAP_FMAC4 soap_in__tds__CreateCertificate(struct soap*, const char*, _tds__CreateCertificate *, const char*);
SOAP_FMAC1 _tds__CreateCertificate * SOAP_FMAC2 soap_instantiate__tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateCertificate * soap_new__tds__CreateCertificate(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateCertificate(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateCertificate * soap_new_req__tds__CreateCertificate(
	struct soap *soap)
{
	_tds__CreateCertificate *_p = ::soap_new__tds__CreateCertificate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__CreateCertificate * soap_new_set__tds__CreateCertificate(
	struct soap *soap,
	std::string *CertificateID,
	std::string *Subject,
	time_t *ValidNotBefore,
	time_t *ValidNotAfter)
{
	_tds__CreateCertificate *_p = ::soap_new__tds__CreateCertificate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateCertificate::CertificateID = CertificateID;
		_p->_tds__CreateCertificate::Subject = Subject;
		_p->_tds__CreateCertificate::ValidNotBefore = ValidNotBefore;
		_p->_tds__CreateCertificate::ValidNotAfter = ValidNotAfter;
	}
	return _p;
}

inline int soap_write__tds__CreateCertificate(struct soap *soap, _tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificate", p->soap_type() == SOAP_TYPE__tds__CreateCertificate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateCertificate(struct soap *soap, const char *URL, _tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificate", p->soap_type() == SOAP_TYPE__tds__CreateCertificate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateCertificate(struct soap *soap, const char *URL, _tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificate", p->soap_type() == SOAP_TYPE__tds__CreateCertificate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateCertificate(struct soap *soap, const char *URL, _tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateCertificate", p->soap_type() == SOAP_TYPE__tds__CreateCertificate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateCertificate * SOAP_FMAC4 soap_get__tds__CreateCertificate(struct soap*, _tds__CreateCertificate *, const char*, const char*);

inline int soap_read__tds__CreateCertificate(struct soap *soap, _tds__CreateCertificate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateCertificate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateCertificate(struct soap *soap, const char *URL, _tds__CreateCertificate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateCertificate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateCertificate(struct soap *soap, _tds__CreateCertificate *p)
{
	if (::soap_read__tds__CreateCertificate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse_DEFINED
#define SOAP_TYPE__tds__SetAccessPolicyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetAccessPolicyResponse(struct soap*, const char*, int, const _tds__SetAccessPolicyResponse *, const char*);
SOAP_FMAC3 _tds__SetAccessPolicyResponse * SOAP_FMAC4 soap_in__tds__SetAccessPolicyResponse(struct soap*, const char*, _tds__SetAccessPolicyResponse *, const char*);
SOAP_FMAC1 _tds__SetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetAccessPolicyResponse * soap_new__tds__SetAccessPolicyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetAccessPolicyResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetAccessPolicyResponse * soap_new_req__tds__SetAccessPolicyResponse(
	struct soap *soap)
{
	_tds__SetAccessPolicyResponse *_p = ::soap_new__tds__SetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetAccessPolicyResponse * soap_new_set__tds__SetAccessPolicyResponse(
	struct soap *soap)
{
	_tds__SetAccessPolicyResponse *_p = ::soap_new__tds__SetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetAccessPolicyResponse(struct soap *soap, _tds__SetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__SetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__SetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__SetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetAccessPolicyResponse * SOAP_FMAC4 soap_get__tds__SetAccessPolicyResponse(struct soap*, _tds__SetAccessPolicyResponse *, const char*, const char*);

inline int soap_read__tds__SetAccessPolicyResponse(struct soap *soap, _tds__SetAccessPolicyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetAccessPolicyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__SetAccessPolicyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetAccessPolicyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetAccessPolicyResponse(struct soap *soap, _tds__SetAccessPolicyResponse *p)
{
	if (::soap_read__tds__SetAccessPolicyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicy_DEFINED
#define SOAP_TYPE__tds__SetAccessPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetAccessPolicy(struct soap*, const char*, int, const _tds__SetAccessPolicy *, const char*);
SOAP_FMAC3 _tds__SetAccessPolicy * SOAP_FMAC4 soap_in__tds__SetAccessPolicy(struct soap*, const char*, _tds__SetAccessPolicy *, const char*);
SOAP_FMAC1 _tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetAccessPolicy * soap_new__tds__SetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline _tds__SetAccessPolicy * soap_new_req__tds__SetAccessPolicy(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__SetAccessPolicy *_p = ::soap_new__tds__SetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetAccessPolicy::PolicyFile = PolicyFile;
	}
	return _p;
}

inline _tds__SetAccessPolicy * soap_new_set__tds__SetAccessPolicy(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__SetAccessPolicy *_p = ::soap_new__tds__SetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetAccessPolicy::PolicyFile = PolicyFile;
	}
	return _p;
}

inline int soap_write__tds__SetAccessPolicy(struct soap *soap, _tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetAccessPolicy(struct soap *soap, const char *URL, _tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetAccessPolicy(struct soap *soap, const char *URL, _tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetAccessPolicy(struct soap *soap, const char *URL, _tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__SetAccessPolicy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetAccessPolicy * SOAP_FMAC4 soap_get__tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy *, const char*, const char*);

inline int soap_read__tds__SetAccessPolicy(struct soap *soap, _tds__SetAccessPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetAccessPolicy(struct soap *soap, const char *URL, _tds__SetAccessPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetAccessPolicy(struct soap *soap, _tds__SetAccessPolicy *p)
{
	if (::soap_read__tds__SetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse_DEFINED
#define SOAP_TYPE__tds__GetAccessPolicyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAccessPolicyResponse(struct soap*, const char*, int, const _tds__GetAccessPolicyResponse *, const char*);
SOAP_FMAC3 _tds__GetAccessPolicyResponse * SOAP_FMAC4 soap_in__tds__GetAccessPolicyResponse(struct soap*, const char*, _tds__GetAccessPolicyResponse *, const char*);
SOAP_FMAC1 _tds__GetAccessPolicyResponse * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAccessPolicyResponse * soap_new__tds__GetAccessPolicyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAccessPolicyResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAccessPolicyResponse * soap_new_req__tds__GetAccessPolicyResponse(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__GetAccessPolicyResponse *_p = ::soap_new__tds__GetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAccessPolicyResponse::PolicyFile = PolicyFile;
	}
	return _p;
}

inline _tds__GetAccessPolicyResponse * soap_new_set__tds__GetAccessPolicyResponse(
	struct soap *soap,
	tt__BinaryData *PolicyFile)
{
	_tds__GetAccessPolicyResponse *_p = ::soap_new__tds__GetAccessPolicyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAccessPolicyResponse::PolicyFile = PolicyFile;
	}
	return _p;
}

inline int soap_write__tds__GetAccessPolicyResponse(struct soap *soap, _tds__GetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__GetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__GetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__GetAccessPolicyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicyResponse", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAccessPolicyResponse * SOAP_FMAC4 soap_get__tds__GetAccessPolicyResponse(struct soap*, _tds__GetAccessPolicyResponse *, const char*, const char*);

inline int soap_read__tds__GetAccessPolicyResponse(struct soap *soap, _tds__GetAccessPolicyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetAccessPolicyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetAccessPolicyResponse(struct soap *soap, const char *URL, _tds__GetAccessPolicyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetAccessPolicyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetAccessPolicyResponse(struct soap *soap, _tds__GetAccessPolicyResponse *p)
{
	if (::soap_read__tds__GetAccessPolicyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicy_DEFINED
#define SOAP_TYPE__tds__GetAccessPolicy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAccessPolicy(struct soap*, const char*, int, const _tds__GetAccessPolicy *, const char*);
SOAP_FMAC3 _tds__GetAccessPolicy * SOAP_FMAC4 soap_in__tds__GetAccessPolicy(struct soap*, const char*, _tds__GetAccessPolicy *, const char*);
SOAP_FMAC1 _tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate__tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAccessPolicy * soap_new__tds__GetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAccessPolicy * soap_new_req__tds__GetAccessPolicy(
	struct soap *soap)
{
	_tds__GetAccessPolicy *_p = ::soap_new__tds__GetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetAccessPolicy * soap_new_set__tds__GetAccessPolicy(
	struct soap *soap)
{
	_tds__GetAccessPolicy *_p = ::soap_new__tds__GetAccessPolicy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetAccessPolicy(struct soap *soap, _tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetAccessPolicy(struct soap *soap, const char *URL, _tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetAccessPolicy(struct soap *soap, const char *URL, _tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetAccessPolicy(struct soap *soap, const char *URL, _tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAccessPolicy", p->soap_type() == SOAP_TYPE__tds__GetAccessPolicy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAccessPolicy * SOAP_FMAC4 soap_get__tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy *, const char*, const char*);

inline int soap_read__tds__GetAccessPolicy(struct soap *soap, _tds__GetAccessPolicy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetAccessPolicy(struct soap *soap, const char *URL, _tds__GetAccessPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetAccessPolicy(struct soap *soap, _tds__GetAccessPolicy *p)
{
	if (::soap_read__tds__GetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveIPAddressFilterResponse(struct soap*, const char*, int, const _tds__RemoveIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__RemoveIPAddressFilterResponse(struct soap*, const char*, _tds__RemoveIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveIPAddressFilterResponse * soap_new__tds__RemoveIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveIPAddressFilterResponse * soap_new_req__tds__RemoveIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__RemoveIPAddressFilterResponse *_p = ::soap_new__tds__RemoveIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__RemoveIPAddressFilterResponse * soap_new_set__tds__RemoveIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__RemoveIPAddressFilterResponse *_p = ::soap_new__tds__RemoveIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__RemoveIPAddressFilterResponse(struct soap *soap, _tds__RemoveIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__RemoveIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__RemoveIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__RemoveIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__RemoveIPAddressFilterResponse(struct soap*, _tds__RemoveIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__RemoveIPAddressFilterResponse(struct soap *soap, _tds__RemoveIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__RemoveIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__RemoveIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__RemoveIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__RemoveIPAddressFilterResponse(struct soap *soap, _tds__RemoveIPAddressFilterResponse *p)
{
	if (::soap_read__tds__RemoveIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__RemoveIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveIPAddressFilter(struct soap*, const char*, int, const _tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_in__tds__RemoveIPAddressFilter(struct soap*, const char*, _tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveIPAddressFilter * soap_new__tds__RemoveIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveIPAddressFilter * soap_new_req__tds__RemoveIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__RemoveIPAddressFilter *_p = ::soap_new__tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__RemoveIPAddressFilter * soap_new_set__tds__RemoveIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__RemoveIPAddressFilter *_p = ::soap_new__tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__RemoveIPAddressFilter(struct soap *soap, _tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__RemoveIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_get__tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__RemoveIPAddressFilter(struct soap *soap, _tds__RemoveIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__RemoveIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, _tds__RemoveIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__RemoveIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__RemoveIPAddressFilter(struct soap *soap, _tds__RemoveIPAddressFilter *p)
{
	if (::soap_read__tds__RemoveIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__AddIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddIPAddressFilterResponse(struct soap*, const char*, int, const _tds__AddIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__AddIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__AddIPAddressFilterResponse(struct soap*, const char*, _tds__AddIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__AddIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddIPAddressFilterResponse * soap_new__tds__AddIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__AddIPAddressFilterResponse * soap_new_req__tds__AddIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__AddIPAddressFilterResponse *_p = ::soap_new__tds__AddIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__AddIPAddressFilterResponse * soap_new_set__tds__AddIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__AddIPAddressFilterResponse *_p = ::soap_new__tds__AddIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__AddIPAddressFilterResponse(struct soap *soap, _tds__AddIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__AddIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__AddIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__AddIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__AddIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__AddIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__AddIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__AddIPAddressFilterResponse(struct soap*, _tds__AddIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__AddIPAddressFilterResponse(struct soap *soap, _tds__AddIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__AddIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__AddIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__AddIPAddressFilterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__AddIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__AddIPAddressFilterResponse(struct soap *soap, _tds__AddIPAddressFilterResponse *p)
{
	if (::soap_read__tds__AddIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__AddIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddIPAddressFilter(struct soap*, const char*, int, const _tds__AddIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__AddIPAddressFilter * SOAP_FMAC4 soap_in__tds__AddIPAddressFilter(struct soap*, const char*, _tds__AddIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddIPAddressFilter * soap_new__tds__AddIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__AddIPAddressFilter * soap_new_req__tds__AddIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__AddIPAddressFilter *_p = ::soap_new__tds__AddIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__AddIPAddressFilter * soap_new_set__tds__AddIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__AddIPAddressFilter *_p = ::soap_new__tds__AddIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__AddIPAddressFilter(struct soap *soap, _tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__AddIPAddressFilter(struct soap *soap, const char *URL, _tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__AddIPAddressFilter(struct soap *soap, const char *URL, _tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__AddIPAddressFilter(struct soap *soap, const char *URL, _tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__AddIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddIPAddressFilter * SOAP_FMAC4 soap_get__tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__AddIPAddressFilter(struct soap *soap, _tds__AddIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__AddIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__AddIPAddressFilter(struct soap *soap, const char *URL, _tds__AddIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__AddIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__AddIPAddressFilter(struct soap *soap, _tds__AddIPAddressFilter *p)
{
	if (::soap_read__tds__AddIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__SetIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetIPAddressFilterResponse(struct soap*, const char*, int, const _tds__SetIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__SetIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__SetIPAddressFilterResponse(struct soap*, const char*, _tds__SetIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__SetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetIPAddressFilterResponse * soap_new__tds__SetIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetIPAddressFilterResponse * soap_new_req__tds__SetIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__SetIPAddressFilterResponse *_p = ::soap_new__tds__SetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetIPAddressFilterResponse * soap_new_set__tds__SetIPAddressFilterResponse(
	struct soap *soap)
{
	_tds__SetIPAddressFilterResponse *_p = ::soap_new__tds__SetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetIPAddressFilterResponse(struct soap *soap, _tds__SetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__SetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__SetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__SetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__SetIPAddressFilterResponse(struct soap*, _tds__SetIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__SetIPAddressFilterResponse(struct soap *soap, _tds__SetIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__SetIPAddressFilterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetIPAddressFilterResponse(struct soap *soap, _tds__SetIPAddressFilterResponse *p)
{
	if (::soap_read__tds__SetIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__SetIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetIPAddressFilter(struct soap*, const char*, int, const _tds__SetIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__SetIPAddressFilter * SOAP_FMAC4 soap_in__tds__SetIPAddressFilter(struct soap*, const char*, _tds__SetIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetIPAddressFilter * soap_new__tds__SetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__SetIPAddressFilter * soap_new_req__tds__SetIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__SetIPAddressFilter *_p = ::soap_new__tds__SetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__SetIPAddressFilter * soap_new_set__tds__SetIPAddressFilter(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__SetIPAddressFilter *_p = ::soap_new__tds__SetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetIPAddressFilter::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__SetIPAddressFilter(struct soap *soap, _tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetIPAddressFilter(struct soap *soap, const char *URL, _tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetIPAddressFilter(struct soap *soap, const char *URL, _tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetIPAddressFilter(struct soap *soap, const char *URL, _tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__SetIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetIPAddressFilter * SOAP_FMAC4 soap_get__tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__SetIPAddressFilter(struct soap *soap, _tds__SetIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetIPAddressFilter(struct soap *soap, const char *URL, _tds__SetIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetIPAddressFilter(struct soap *soap, _tds__SetIPAddressFilter *p)
{
	if (::soap_read__tds__SetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse_DEFINED
#define SOAP_TYPE__tds__GetIPAddressFilterResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetIPAddressFilterResponse(struct soap*, const char*, int, const _tds__GetIPAddressFilterResponse *, const char*);
SOAP_FMAC3 _tds__GetIPAddressFilterResponse * SOAP_FMAC4 soap_in__tds__GetIPAddressFilterResponse(struct soap*, const char*, _tds__GetIPAddressFilterResponse *, const char*);
SOAP_FMAC1 _tds__GetIPAddressFilterResponse * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilterResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetIPAddressFilterResponse * soap_new__tds__GetIPAddressFilterResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetIPAddressFilterResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetIPAddressFilterResponse * soap_new_req__tds__GetIPAddressFilterResponse(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__GetIPAddressFilterResponse *_p = ::soap_new__tds__GetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetIPAddressFilterResponse::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline _tds__GetIPAddressFilterResponse * soap_new_set__tds__GetIPAddressFilterResponse(
	struct soap *soap,
	tt__IPAddressFilter *IPAddressFilter)
{
	_tds__GetIPAddressFilterResponse *_p = ::soap_new__tds__GetIPAddressFilterResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetIPAddressFilterResponse::IPAddressFilter = IPAddressFilter;
	}
	return _p;
}

inline int soap_write__tds__GetIPAddressFilterResponse(struct soap *soap, _tds__GetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__GetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__GetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__GetIPAddressFilterResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilterResponse", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilterResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetIPAddressFilterResponse * SOAP_FMAC4 soap_get__tds__GetIPAddressFilterResponse(struct soap*, _tds__GetIPAddressFilterResponse *, const char*, const char*);

inline int soap_read__tds__GetIPAddressFilterResponse(struct soap *soap, _tds__GetIPAddressFilterResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetIPAddressFilterResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetIPAddressFilterResponse(struct soap *soap, const char *URL, _tds__GetIPAddressFilterResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetIPAddressFilterResponse(struct soap *soap, _tds__GetIPAddressFilterResponse *p)
{
	if (::soap_read__tds__GetIPAddressFilterResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilter_DEFINED
#define SOAP_TYPE__tds__GetIPAddressFilter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetIPAddressFilter(struct soap*, const char*, int, const _tds__GetIPAddressFilter *, const char*);
SOAP_FMAC3 _tds__GetIPAddressFilter * SOAP_FMAC4 soap_in__tds__GetIPAddressFilter(struct soap*, const char*, _tds__GetIPAddressFilter *, const char*);
SOAP_FMAC1 _tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate__tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetIPAddressFilter * soap_new__tds__GetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline _tds__GetIPAddressFilter * soap_new_req__tds__GetIPAddressFilter(
	struct soap *soap)
{
	_tds__GetIPAddressFilter *_p = ::soap_new__tds__GetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetIPAddressFilter * soap_new_set__tds__GetIPAddressFilter(
	struct soap *soap)
{
	_tds__GetIPAddressFilter *_p = ::soap_new__tds__GetIPAddressFilter(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetIPAddressFilter(struct soap *soap, _tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetIPAddressFilter(struct soap *soap, const char *URL, _tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetIPAddressFilter(struct soap *soap, const char *URL, _tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetIPAddressFilter(struct soap *soap, const char *URL, _tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetIPAddressFilter", p->soap_type() == SOAP_TYPE__tds__GetIPAddressFilter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetIPAddressFilter * SOAP_FMAC4 soap_get__tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter *, const char*, const char*);

inline int soap_read__tds__GetIPAddressFilter(struct soap *soap, _tds__GetIPAddressFilter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetIPAddressFilter(struct soap *soap, const char *URL, _tds__GetIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetIPAddressFilter(struct soap *soap, _tds__GetIPAddressFilter *p)
{
	if (::soap_read__tds__GetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetZeroConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetZeroConfigurationResponse(struct soap*, const char*, int, const _tds__SetZeroConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetZeroConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetZeroConfigurationResponse(struct soap*, const char*, _tds__SetZeroConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetZeroConfigurationResponse * soap_new__tds__SetZeroConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetZeroConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetZeroConfigurationResponse * soap_new_req__tds__SetZeroConfigurationResponse(
	struct soap *soap)
{
	_tds__SetZeroConfigurationResponse *_p = ::soap_new__tds__SetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetZeroConfigurationResponse * soap_new_set__tds__SetZeroConfigurationResponse(
	struct soap *soap)
{
	_tds__SetZeroConfigurationResponse *_p = ::soap_new__tds__SetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetZeroConfigurationResponse(struct soap *soap, _tds__SetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__SetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__SetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__SetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetZeroConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetZeroConfigurationResponse(struct soap*, _tds__SetZeroConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetZeroConfigurationResponse(struct soap *soap, _tds__SetZeroConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetZeroConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__SetZeroConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetZeroConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetZeroConfigurationResponse(struct soap *soap, _tds__SetZeroConfigurationResponse *p)
{
	if (::soap_read__tds__SetZeroConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfiguration_DEFINED
#define SOAP_TYPE__tds__SetZeroConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetZeroConfiguration(struct soap*, const char*, int, const _tds__SetZeroConfiguration *, const char*);
SOAP_FMAC3 _tds__SetZeroConfiguration * SOAP_FMAC4 soap_in__tds__SetZeroConfiguration(struct soap*, const char*, _tds__SetZeroConfiguration *, const char*);
SOAP_FMAC1 _tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetZeroConfiguration * soap_new__tds__SetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetZeroConfiguration * soap_new_req__tds__SetZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled)
{
	_tds__SetZeroConfiguration *_p = ::soap_new__tds__SetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->_tds__SetZeroConfiguration::Enabled = Enabled;
	}
	return _p;
}

inline _tds__SetZeroConfiguration * soap_new_set__tds__SetZeroConfiguration(
	struct soap *soap,
	const std::string& InterfaceToken,
	bool Enabled)
{
	_tds__SetZeroConfiguration *_p = ::soap_new__tds__SetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetZeroConfiguration::InterfaceToken = InterfaceToken;
		_p->_tds__SetZeroConfiguration::Enabled = Enabled;
	}
	return _p;
}

inline int soap_write__tds__SetZeroConfiguration(struct soap *soap, _tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__SetZeroConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetZeroConfiguration(struct soap *soap, const char *URL, _tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__SetZeroConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetZeroConfiguration(struct soap *soap, const char *URL, _tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__SetZeroConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetZeroConfiguration(struct soap *soap, const char *URL, _tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__SetZeroConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetZeroConfiguration * SOAP_FMAC4 soap_get__tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration *, const char*, const char*);

inline int soap_read__tds__SetZeroConfiguration(struct soap *soap, _tds__SetZeroConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetZeroConfiguration(struct soap *soap, const char *URL, _tds__SetZeroConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetZeroConfiguration(struct soap *soap, _tds__SetZeroConfiguration *p)
{
	if (::soap_read__tds__SetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetZeroConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetZeroConfigurationResponse(struct soap*, const char*, int, const _tds__GetZeroConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetZeroConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetZeroConfigurationResponse(struct soap*, const char*, _tds__GetZeroConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetZeroConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetZeroConfigurationResponse * soap_new__tds__GetZeroConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetZeroConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetZeroConfigurationResponse * soap_new_req__tds__GetZeroConfigurationResponse(
	struct soap *soap,
	tt__NetworkZeroConfiguration *ZeroConfiguration)
{
	_tds__GetZeroConfigurationResponse *_p = ::soap_new__tds__GetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetZeroConfigurationResponse::ZeroConfiguration = ZeroConfiguration;
	}
	return _p;
}

inline _tds__GetZeroConfigurationResponse * soap_new_set__tds__GetZeroConfigurationResponse(
	struct soap *soap,
	tt__NetworkZeroConfiguration *ZeroConfiguration)
{
	_tds__GetZeroConfigurationResponse *_p = ::soap_new__tds__GetZeroConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetZeroConfigurationResponse::ZeroConfiguration = ZeroConfiguration;
	}
	return _p;
}

inline int soap_write__tds__GetZeroConfigurationResponse(struct soap *soap, _tds__GetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__GetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__GetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__GetZeroConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetZeroConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetZeroConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetZeroConfigurationResponse(struct soap*, _tds__GetZeroConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetZeroConfigurationResponse(struct soap *soap, _tds__GetZeroConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetZeroConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetZeroConfigurationResponse(struct soap *soap, const char *URL, _tds__GetZeroConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetZeroConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetZeroConfigurationResponse(struct soap *soap, _tds__GetZeroConfigurationResponse *p)
{
	if (::soap_read__tds__GetZeroConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfiguration_DEFINED
#define SOAP_TYPE__tds__GetZeroConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetZeroConfiguration(struct soap*, const char*, int, const _tds__GetZeroConfiguration *, const char*);
SOAP_FMAC3 _tds__GetZeroConfiguration * SOAP_FMAC4 soap_in__tds__GetZeroConfiguration(struct soap*, const char*, _tds__GetZeroConfiguration *, const char*);
SOAP_FMAC1 _tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetZeroConfiguration * soap_new__tds__GetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetZeroConfiguration * soap_new_req__tds__GetZeroConfiguration(
	struct soap *soap)
{
	_tds__GetZeroConfiguration *_p = ::soap_new__tds__GetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetZeroConfiguration * soap_new_set__tds__GetZeroConfiguration(
	struct soap *soap)
{
	_tds__GetZeroConfiguration *_p = ::soap_new__tds__GetZeroConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetZeroConfiguration(struct soap *soap, _tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__GetZeroConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetZeroConfiguration(struct soap *soap, const char *URL, _tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__GetZeroConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetZeroConfiguration(struct soap *soap, const char *URL, _tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__GetZeroConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetZeroConfiguration(struct soap *soap, const char *URL, _tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetZeroConfiguration", p->soap_type() == SOAP_TYPE__tds__GetZeroConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetZeroConfiguration * SOAP_FMAC4 soap_get__tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration *, const char*, const char*);

inline int soap_read__tds__GetZeroConfiguration(struct soap *soap, _tds__GetZeroConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetZeroConfiguration(struct soap *soap, const char *URL, _tds__GetZeroConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetZeroConfiguration(struct soap *soap, _tds__GetZeroConfiguration *p)
{
	if (::soap_read__tds__GetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse_DEFINED
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkDefaultGatewayResponse(struct soap*, const char*, int, const _tds__SetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC3 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_in__tds__SetNetworkDefaultGatewayResponse(struct soap*, const char*, _tds__SetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC1 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkDefaultGatewayResponse * soap_new__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkDefaultGatewayResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkDefaultGatewayResponse * soap_new_req__tds__SetNetworkDefaultGatewayResponse(
	struct soap *soap)
{
	_tds__SetNetworkDefaultGatewayResponse *_p = ::soap_new__tds__SetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNetworkDefaultGatewayResponse * soap_new_set__tds__SetNetworkDefaultGatewayResponse(
	struct soap *soap)
{
	_tds__SetNetworkDefaultGatewayResponse *_p = ::soap_new__tds__SetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, _tds__SetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_get__tds__SetNetworkDefaultGatewayResponse(struct soap*, _tds__SetNetworkDefaultGatewayResponse *, const char*, const char*);

inline int soap_read__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, _tds__SetNetworkDefaultGatewayResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNetworkDefaultGatewayResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGatewayResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNetworkDefaultGatewayResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNetworkDefaultGatewayResponse(struct soap *soap, _tds__SetNetworkDefaultGatewayResponse *p)
{
	if (::soap_read__tds__SetNetworkDefaultGatewayResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE__tds__SetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkDefaultGateway(struct soap*, const char*, int, const _tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 _tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_in__tds__SetNetworkDefaultGateway(struct soap*, const char*, _tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 _tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkDefaultGateway * soap_new__tds__SetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkDefaultGateway * soap_new_req__tds__SetNetworkDefaultGateway(
	struct soap *soap)
{
	_tds__SetNetworkDefaultGateway *_p = ::soap_new__tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNetworkDefaultGateway * soap_new_set__tds__SetNetworkDefaultGateway(
	struct soap *soap,
	const std::vector<std::string> & IPv4Address,
	const std::vector<std::string> & IPv6Address)
{
	_tds__SetNetworkDefaultGateway *_p = ::soap_new__tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkDefaultGateway::IPv4Address = IPv4Address;
		_p->_tds__SetNetworkDefaultGateway::IPv6Address = IPv6Address;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkDefaultGateway(struct soap *soap, _tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__SetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_get__tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read__tds__SetNetworkDefaultGateway(struct soap *soap, _tds__SetNetworkDefaultGateway *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__SetNetworkDefaultGateway *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNetworkDefaultGateway(struct soap *soap, _tds__SetNetworkDefaultGateway *p)
{
	if (::soap_read__tds__SetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse_DEFINED
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkDefaultGatewayResponse(struct soap*, const char*, int, const _tds__GetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC3 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_in__tds__GetNetworkDefaultGatewayResponse(struct soap*, const char*, _tds__GetNetworkDefaultGatewayResponse *, const char*);
SOAP_FMAC1 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGatewayResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkDefaultGatewayResponse * soap_new__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkDefaultGatewayResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkDefaultGatewayResponse * soap_new_req__tds__GetNetworkDefaultGatewayResponse(
	struct soap *soap,
	tt__NetworkGateway *NetworkGateway)
{
	_tds__GetNetworkDefaultGatewayResponse *_p = ::soap_new__tds__GetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkDefaultGatewayResponse::NetworkGateway = NetworkGateway;
	}
	return _p;
}

inline _tds__GetNetworkDefaultGatewayResponse * soap_new_set__tds__GetNetworkDefaultGatewayResponse(
	struct soap *soap,
	tt__NetworkGateway *NetworkGateway)
{
	_tds__GetNetworkDefaultGatewayResponse *_p = ::soap_new__tds__GetNetworkDefaultGatewayResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkDefaultGatewayResponse::NetworkGateway = NetworkGateway;
	}
	return _p;
}

inline int soap_write__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, _tds__GetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGatewayResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGatewayResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkDefaultGatewayResponse * SOAP_FMAC4 soap_get__tds__GetNetworkDefaultGatewayResponse(struct soap*, _tds__GetNetworkDefaultGatewayResponse *, const char*, const char*);

inline int soap_read__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, _tds__GetNetworkDefaultGatewayResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNetworkDefaultGatewayResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGatewayResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNetworkDefaultGatewayResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNetworkDefaultGatewayResponse(struct soap *soap, _tds__GetNetworkDefaultGatewayResponse *p)
{
	if (::soap_read__tds__GetNetworkDefaultGatewayResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE__tds__GetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkDefaultGateway(struct soap*, const char*, int, const _tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 _tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_in__tds__GetNetworkDefaultGateway(struct soap*, const char*, _tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 _tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate__tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkDefaultGateway * soap_new__tds__GetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkDefaultGateway * soap_new_req__tds__GetNetworkDefaultGateway(
	struct soap *soap)
{
	_tds__GetNetworkDefaultGateway *_p = ::soap_new__tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkDefaultGateway * soap_new_set__tds__GetNetworkDefaultGateway(
	struct soap *soap)
{
	_tds__GetNetworkDefaultGateway *_p = ::soap_new__tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNetworkDefaultGateway(struct soap *soap, _tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkDefaultGateway", p->soap_type() == SOAP_TYPE__tds__GetNetworkDefaultGateway ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_get__tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read__tds__GetNetworkDefaultGateway(struct soap *soap, _tds__GetNetworkDefaultGateway *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, _tds__GetNetworkDefaultGateway *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNetworkDefaultGateway(struct soap *soap, _tds__GetNetworkDefaultGateway *p)
{
	if (::soap_read__tds__GetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse_DEFINED
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkProtocolsResponse(struct soap*, const char*, int, const _tds__SetNetworkProtocolsResponse *, const char*);
SOAP_FMAC3 _tds__SetNetworkProtocolsResponse * SOAP_FMAC4 soap_in__tds__SetNetworkProtocolsResponse(struct soap*, const char*, _tds__SetNetworkProtocolsResponse *, const char*);
SOAP_FMAC1 _tds__SetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkProtocolsResponse * soap_new__tds__SetNetworkProtocolsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkProtocolsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkProtocolsResponse * soap_new_req__tds__SetNetworkProtocolsResponse(
	struct soap *soap)
{
	_tds__SetNetworkProtocolsResponse *_p = ::soap_new__tds__SetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNetworkProtocolsResponse * soap_new_set__tds__SetNetworkProtocolsResponse(
	struct soap *soap)
{
	_tds__SetNetworkProtocolsResponse *_p = ::soap_new__tds__SetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetNetworkProtocolsResponse(struct soap *soap, _tds__SetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__SetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__SetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__SetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkProtocolsResponse * SOAP_FMAC4 soap_get__tds__SetNetworkProtocolsResponse(struct soap*, _tds__SetNetworkProtocolsResponse *, const char*, const char*);

inline int soap_read__tds__SetNetworkProtocolsResponse(struct soap *soap, _tds__SetNetworkProtocolsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNetworkProtocolsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__SetNetworkProtocolsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNetworkProtocolsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNetworkProtocolsResponse(struct soap *soap, _tds__SetNetworkProtocolsResponse *p)
{
	if (::soap_read__tds__SetNetworkProtocolsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocols_DEFINED
#define SOAP_TYPE__tds__SetNetworkProtocols_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkProtocols(struct soap*, const char*, int, const _tds__SetNetworkProtocols *, const char*);
SOAP_FMAC3 _tds__SetNetworkProtocols * SOAP_FMAC4 soap_in__tds__SetNetworkProtocols(struct soap*, const char*, _tds__SetNetworkProtocols *, const char*);
SOAP_FMAC1 _tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkProtocols * soap_new__tds__SetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkProtocols * soap_new_req__tds__SetNetworkProtocols(
	struct soap *soap,
	const std::vector<tt__NetworkProtocol *> & NetworkProtocols)
{
	_tds__SetNetworkProtocols *_p = ::soap_new__tds__SetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkProtocols::NetworkProtocols = NetworkProtocols;
	}
	return _p;
}

inline _tds__SetNetworkProtocols * soap_new_set__tds__SetNetworkProtocols(
	struct soap *soap,
	const std::vector<tt__NetworkProtocol *> & NetworkProtocols)
{
	_tds__SetNetworkProtocols *_p = ::soap_new__tds__SetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkProtocols::NetworkProtocols = NetworkProtocols;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkProtocols(struct soap *soap, _tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocols ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNetworkProtocols(struct soap *soap, const char *URL, _tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocols ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNetworkProtocols(struct soap *soap, const char *URL, _tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocols ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNetworkProtocols(struct soap *soap, const char *URL, _tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__SetNetworkProtocols ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkProtocols * SOAP_FMAC4 soap_get__tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols *, const char*, const char*);

inline int soap_read__tds__SetNetworkProtocols(struct soap *soap, _tds__SetNetworkProtocols *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNetworkProtocols(struct soap *soap, const char *URL, _tds__SetNetworkProtocols *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNetworkProtocols(struct soap *soap, _tds__SetNetworkProtocols *p)
{
	if (::soap_read__tds__SetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse_DEFINED
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkProtocolsResponse(struct soap*, const char*, int, const _tds__GetNetworkProtocolsResponse *, const char*);
SOAP_FMAC3 _tds__GetNetworkProtocolsResponse * SOAP_FMAC4 soap_in__tds__GetNetworkProtocolsResponse(struct soap*, const char*, _tds__GetNetworkProtocolsResponse *, const char*);
SOAP_FMAC1 _tds__GetNetworkProtocolsResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocolsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkProtocolsResponse * soap_new__tds__GetNetworkProtocolsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkProtocolsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkProtocolsResponse * soap_new_req__tds__GetNetworkProtocolsResponse(
	struct soap *soap)
{
	_tds__GetNetworkProtocolsResponse *_p = ::soap_new__tds__GetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkProtocolsResponse * soap_new_set__tds__GetNetworkProtocolsResponse(
	struct soap *soap,
	const std::vector<tt__NetworkProtocol *> & NetworkProtocols)
{
	_tds__GetNetworkProtocolsResponse *_p = ::soap_new__tds__GetNetworkProtocolsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkProtocolsResponse::NetworkProtocols = NetworkProtocols;
	}
	return _p;
}

inline int soap_write__tds__GetNetworkProtocolsResponse(struct soap *soap, _tds__GetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__GetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__GetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__GetNetworkProtocolsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocolsResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocolsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkProtocolsResponse * SOAP_FMAC4 soap_get__tds__GetNetworkProtocolsResponse(struct soap*, _tds__GetNetworkProtocolsResponse *, const char*, const char*);

inline int soap_read__tds__GetNetworkProtocolsResponse(struct soap *soap, _tds__GetNetworkProtocolsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNetworkProtocolsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNetworkProtocolsResponse(struct soap *soap, const char *URL, _tds__GetNetworkProtocolsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNetworkProtocolsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNetworkProtocolsResponse(struct soap *soap, _tds__GetNetworkProtocolsResponse *p)
{
	if (::soap_read__tds__GetNetworkProtocolsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocols_DEFINED
#define SOAP_TYPE__tds__GetNetworkProtocols_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkProtocols(struct soap*, const char*, int, const _tds__GetNetworkProtocols *, const char*);
SOAP_FMAC3 _tds__GetNetworkProtocols * SOAP_FMAC4 soap_in__tds__GetNetworkProtocols(struct soap*, const char*, _tds__GetNetworkProtocols *, const char*);
SOAP_FMAC1 _tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate__tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkProtocols * soap_new__tds__GetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkProtocols * soap_new_req__tds__GetNetworkProtocols(
	struct soap *soap)
{
	_tds__GetNetworkProtocols *_p = ::soap_new__tds__GetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkProtocols * soap_new_set__tds__GetNetworkProtocols(
	struct soap *soap)
{
	_tds__GetNetworkProtocols *_p = ::soap_new__tds__GetNetworkProtocols(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNetworkProtocols(struct soap *soap, _tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocols ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNetworkProtocols(struct soap *soap, const char *URL, _tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocols ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNetworkProtocols(struct soap *soap, const char *URL, _tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocols ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNetworkProtocols(struct soap *soap, const char *URL, _tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkProtocols", p->soap_type() == SOAP_TYPE__tds__GetNetworkProtocols ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkProtocols * SOAP_FMAC4 soap_get__tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols *, const char*, const char*);

inline int soap_read__tds__GetNetworkProtocols(struct soap *soap, _tds__GetNetworkProtocols *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNetworkProtocols(struct soap *soap, const char *URL, _tds__GetNetworkProtocols *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNetworkProtocols(struct soap *soap, _tds__GetNetworkProtocols *p)
{
	if (::soap_read__tds__GetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse_DEFINED
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkInterfacesResponse(struct soap*, const char*, int, const _tds__SetNetworkInterfacesResponse *, const char*);
SOAP_FMAC3 _tds__SetNetworkInterfacesResponse * SOAP_FMAC4 soap_in__tds__SetNetworkInterfacesResponse(struct soap*, const char*, _tds__SetNetworkInterfacesResponse *, const char*);
SOAP_FMAC1 _tds__SetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkInterfacesResponse * soap_new__tds__SetNetworkInterfacesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkInterfacesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkInterfacesResponse * soap_new_req__tds__SetNetworkInterfacesResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetNetworkInterfacesResponse *_p = ::soap_new__tds__SetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfacesResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline _tds__SetNetworkInterfacesResponse * soap_new_set__tds__SetNetworkInterfacesResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetNetworkInterfacesResponse *_p = ::soap_new__tds__SetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfacesResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkInterfacesResponse(struct soap *soap, _tds__SetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__SetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__SetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__SetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkInterfacesResponse * SOAP_FMAC4 soap_get__tds__SetNetworkInterfacesResponse(struct soap*, _tds__SetNetworkInterfacesResponse *, const char*, const char*);

inline int soap_read__tds__SetNetworkInterfacesResponse(struct soap *soap, _tds__SetNetworkInterfacesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNetworkInterfacesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__SetNetworkInterfacesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNetworkInterfacesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNetworkInterfacesResponse(struct soap *soap, _tds__SetNetworkInterfacesResponse *p)
{
	if (::soap_read__tds__SetNetworkInterfacesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfaces_DEFINED
#define SOAP_TYPE__tds__SetNetworkInterfaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNetworkInterfaces(struct soap*, const char*, int, const _tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC3 _tds__SetNetworkInterfaces * SOAP_FMAC4 soap_in__tds__SetNetworkInterfaces(struct soap*, const char*, _tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC1 _tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNetworkInterfaces * soap_new__tds__SetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNetworkInterfaces * soap_new_req__tds__SetNetworkInterfaces(
	struct soap *soap,
	const std::string& InterfaceToken,
	tt__NetworkInterfaceSetConfiguration *NetworkInterface)
{
	_tds__SetNetworkInterfaces *_p = ::soap_new__tds__SetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfaces::InterfaceToken = InterfaceToken;
		_p->_tds__SetNetworkInterfaces::NetworkInterface = NetworkInterface;
	}
	return _p;
}

inline _tds__SetNetworkInterfaces * soap_new_set__tds__SetNetworkInterfaces(
	struct soap *soap,
	const std::string& InterfaceToken,
	tt__NetworkInterfaceSetConfiguration *NetworkInterface)
{
	_tds__SetNetworkInterfaces *_p = ::soap_new__tds__SetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNetworkInterfaces::InterfaceToken = InterfaceToken;
		_p->_tds__SetNetworkInterfaces::NetworkInterface = NetworkInterface;
	}
	return _p;
}

inline int soap_write__tds__SetNetworkInterfaces(struct soap *soap, _tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfaces ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNetworkInterfaces(struct soap *soap, const char *URL, _tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNetworkInterfaces(struct soap *soap, const char *URL, _tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNetworkInterfaces(struct soap *soap, const char *URL, _tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__SetNetworkInterfaces ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNetworkInterfaces * SOAP_FMAC4 soap_get__tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces *, const char*, const char*);

inline int soap_read__tds__SetNetworkInterfaces(struct soap *soap, _tds__SetNetworkInterfaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNetworkInterfaces(struct soap *soap, const char *URL, _tds__SetNetworkInterfaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNetworkInterfaces(struct soap *soap, _tds__SetNetworkInterfaces *p)
{
	if (::soap_read__tds__SetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse_DEFINED
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkInterfacesResponse(struct soap*, const char*, int, const _tds__GetNetworkInterfacesResponse *, const char*);
SOAP_FMAC3 _tds__GetNetworkInterfacesResponse * SOAP_FMAC4 soap_in__tds__GetNetworkInterfacesResponse(struct soap*, const char*, _tds__GetNetworkInterfacesResponse *, const char*);
SOAP_FMAC1 _tds__GetNetworkInterfacesResponse * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfacesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkInterfacesResponse * soap_new__tds__GetNetworkInterfacesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkInterfacesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkInterfacesResponse * soap_new_req__tds__GetNetworkInterfacesResponse(
	struct soap *soap,
	const std::vector<tt__NetworkInterface *> & NetworkInterfaces)
{
	_tds__GetNetworkInterfacesResponse *_p = ::soap_new__tds__GetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkInterfacesResponse::NetworkInterfaces = NetworkInterfaces;
	}
	return _p;
}

inline _tds__GetNetworkInterfacesResponse * soap_new_set__tds__GetNetworkInterfacesResponse(
	struct soap *soap,
	const std::vector<tt__NetworkInterface *> & NetworkInterfaces)
{
	_tds__GetNetworkInterfacesResponse *_p = ::soap_new__tds__GetNetworkInterfacesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNetworkInterfacesResponse::NetworkInterfaces = NetworkInterfaces;
	}
	return _p;
}

inline int soap_write__tds__GetNetworkInterfacesResponse(struct soap *soap, _tds__GetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__GetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__GetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__GetNetworkInterfacesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfacesResponse", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfacesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkInterfacesResponse * SOAP_FMAC4 soap_get__tds__GetNetworkInterfacesResponse(struct soap*, _tds__GetNetworkInterfacesResponse *, const char*, const char*);

inline int soap_read__tds__GetNetworkInterfacesResponse(struct soap *soap, _tds__GetNetworkInterfacesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNetworkInterfacesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNetworkInterfacesResponse(struct soap *soap, const char *URL, _tds__GetNetworkInterfacesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNetworkInterfacesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNetworkInterfacesResponse(struct soap *soap, _tds__GetNetworkInterfacesResponse *p)
{
	if (::soap_read__tds__GetNetworkInterfacesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfaces_DEFINED
#define SOAP_TYPE__tds__GetNetworkInterfaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNetworkInterfaces(struct soap*, const char*, int, const _tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC3 _tds__GetNetworkInterfaces * SOAP_FMAC4 soap_in__tds__GetNetworkInterfaces(struct soap*, const char*, _tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC1 _tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate__tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNetworkInterfaces * soap_new__tds__GetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNetworkInterfaces * soap_new_req__tds__GetNetworkInterfaces(
	struct soap *soap)
{
	_tds__GetNetworkInterfaces *_p = ::soap_new__tds__GetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNetworkInterfaces * soap_new_set__tds__GetNetworkInterfaces(
	struct soap *soap)
{
	_tds__GetNetworkInterfaces *_p = ::soap_new__tds__GetNetworkInterfaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNetworkInterfaces(struct soap *soap, _tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfaces ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNetworkInterfaces(struct soap *soap, const char *URL, _tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNetworkInterfaces(struct soap *soap, const char *URL, _tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNetworkInterfaces(struct soap *soap, const char *URL, _tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNetworkInterfaces", p->soap_type() == SOAP_TYPE__tds__GetNetworkInterfaces ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNetworkInterfaces * SOAP_FMAC4 soap_get__tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces *, const char*, const char*);

inline int soap_read__tds__GetNetworkInterfaces(struct soap *soap, _tds__GetNetworkInterfaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNetworkInterfaces(struct soap *soap, const char *URL, _tds__GetNetworkInterfaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNetworkInterfaces(struct soap *soap, _tds__GetNetworkInterfaces *p)
{
	if (::soap_read__tds__GetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse_DEFINED
#define SOAP_TYPE__tds__SetDynamicDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDynamicDNSResponse(struct soap*, const char*, int, const _tds__SetDynamicDNSResponse *, const char*);
SOAP_FMAC3 _tds__SetDynamicDNSResponse * SOAP_FMAC4 soap_in__tds__SetDynamicDNSResponse(struct soap*, const char*, _tds__SetDynamicDNSResponse *, const char*);
SOAP_FMAC1 _tds__SetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDynamicDNSResponse * soap_new__tds__SetDynamicDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDynamicDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDynamicDNSResponse * soap_new_req__tds__SetDynamicDNSResponse(
	struct soap *soap)
{
	_tds__SetDynamicDNSResponse *_p = ::soap_new__tds__SetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDynamicDNSResponse * soap_new_set__tds__SetDynamicDNSResponse(
	struct soap *soap)
{
	_tds__SetDynamicDNSResponse *_p = ::soap_new__tds__SetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDynamicDNSResponse(struct soap *soap, _tds__SetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__SetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__SetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__SetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDynamicDNSResponse * SOAP_FMAC4 soap_get__tds__SetDynamicDNSResponse(struct soap*, _tds__SetDynamicDNSResponse *, const char*, const char*);

inline int soap_read__tds__SetDynamicDNSResponse(struct soap *soap, _tds__SetDynamicDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDynamicDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__SetDynamicDNSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDynamicDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDynamicDNSResponse(struct soap *soap, _tds__SetDynamicDNSResponse *p)
{
	if (::soap_read__tds__SetDynamicDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNS_DEFINED
#define SOAP_TYPE__tds__SetDynamicDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDynamicDNS(struct soap*, const char*, int, const _tds__SetDynamicDNS *, const char*);
SOAP_FMAC3 _tds__SetDynamicDNS * SOAP_FMAC4 soap_in__tds__SetDynamicDNS(struct soap*, const char*, _tds__SetDynamicDNS *, const char*);
SOAP_FMAC1 _tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDynamicDNS * soap_new__tds__SetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDynamicDNS * soap_new_req__tds__SetDynamicDNS(
	struct soap *soap,
	enum tt__DynamicDNSType Type)
{
	_tds__SetDynamicDNS *_p = ::soap_new__tds__SetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDynamicDNS::Type = Type;
	}
	return _p;
}

inline _tds__SetDynamicDNS * soap_new_set__tds__SetDynamicDNS(
	struct soap *soap,
	enum tt__DynamicDNSType Type,
	std::string *Name,
	std::string *TTL)
{
	_tds__SetDynamicDNS *_p = ::soap_new__tds__SetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDynamicDNS::Type = Type;
		_p->_tds__SetDynamicDNS::Name = Name;
		_p->_tds__SetDynamicDNS::TTL = TTL;
	}
	return _p;
}

inline int soap_write__tds__SetDynamicDNS(struct soap *soap, _tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDynamicDNS(struct soap *soap, const char *URL, _tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDynamicDNS(struct soap *soap, const char *URL, _tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDynamicDNS(struct soap *soap, const char *URL, _tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__SetDynamicDNS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDynamicDNS * SOAP_FMAC4 soap_get__tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS *, const char*, const char*);

inline int soap_read__tds__SetDynamicDNS(struct soap *soap, _tds__SetDynamicDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDynamicDNS(struct soap *soap, const char *URL, _tds__SetDynamicDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDynamicDNS(struct soap *soap, _tds__SetDynamicDNS *p)
{
	if (::soap_read__tds__SetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse_DEFINED
#define SOAP_TYPE__tds__GetDynamicDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDynamicDNSResponse(struct soap*, const char*, int, const _tds__GetDynamicDNSResponse *, const char*);
SOAP_FMAC3 _tds__GetDynamicDNSResponse * SOAP_FMAC4 soap_in__tds__GetDynamicDNSResponse(struct soap*, const char*, _tds__GetDynamicDNSResponse *, const char*);
SOAP_FMAC1 _tds__GetDynamicDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDynamicDNSResponse * soap_new__tds__GetDynamicDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDynamicDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDynamicDNSResponse * soap_new_req__tds__GetDynamicDNSResponse(
	struct soap *soap,
	tt__DynamicDNSInformation *DynamicDNSInformation)
{
	_tds__GetDynamicDNSResponse *_p = ::soap_new__tds__GetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDynamicDNSResponse::DynamicDNSInformation = DynamicDNSInformation;
	}
	return _p;
}

inline _tds__GetDynamicDNSResponse * soap_new_set__tds__GetDynamicDNSResponse(
	struct soap *soap,
	tt__DynamicDNSInformation *DynamicDNSInformation)
{
	_tds__GetDynamicDNSResponse *_p = ::soap_new__tds__GetDynamicDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDynamicDNSResponse::DynamicDNSInformation = DynamicDNSInformation;
	}
	return _p;
}

inline int soap_write__tds__GetDynamicDNSResponse(struct soap *soap, _tds__GetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__GetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__GetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__GetDynamicDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDynamicDNSResponse * SOAP_FMAC4 soap_get__tds__GetDynamicDNSResponse(struct soap*, _tds__GetDynamicDNSResponse *, const char*, const char*);

inline int soap_read__tds__GetDynamicDNSResponse(struct soap *soap, _tds__GetDynamicDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDynamicDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDynamicDNSResponse(struct soap *soap, const char *URL, _tds__GetDynamicDNSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDynamicDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDynamicDNSResponse(struct soap *soap, _tds__GetDynamicDNSResponse *p)
{
	if (::soap_read__tds__GetDynamicDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNS_DEFINED
#define SOAP_TYPE__tds__GetDynamicDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDynamicDNS(struct soap*, const char*, int, const _tds__GetDynamicDNS *, const char*);
SOAP_FMAC3 _tds__GetDynamicDNS * SOAP_FMAC4 soap_in__tds__GetDynamicDNS(struct soap*, const char*, _tds__GetDynamicDNS *, const char*);
SOAP_FMAC1 _tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate__tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDynamicDNS * soap_new__tds__GetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDynamicDNS * soap_new_req__tds__GetDynamicDNS(
	struct soap *soap)
{
	_tds__GetDynamicDNS *_p = ::soap_new__tds__GetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDynamicDNS * soap_new_set__tds__GetDynamicDNS(
	struct soap *soap)
{
	_tds__GetDynamicDNS *_p = ::soap_new__tds__GetDynamicDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDynamicDNS(struct soap *soap, _tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDynamicDNS(struct soap *soap, const char *URL, _tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDynamicDNS(struct soap *soap, const char *URL, _tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDynamicDNS(struct soap *soap, const char *URL, _tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDynamicDNS", p->soap_type() == SOAP_TYPE__tds__GetDynamicDNS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDynamicDNS * SOAP_FMAC4 soap_get__tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS *, const char*, const char*);

inline int soap_read__tds__GetDynamicDNS(struct soap *soap, _tds__GetDynamicDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDynamicDNS(struct soap *soap, const char *URL, _tds__GetDynamicDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDynamicDNS(struct soap *soap, _tds__GetDynamicDNS *p)
{
	if (::soap_read__tds__GetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNTPResponse_DEFINED
#define SOAP_TYPE__tds__SetNTPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNTPResponse(struct soap*, const char*, int, const _tds__SetNTPResponse *, const char*);
SOAP_FMAC3 _tds__SetNTPResponse * SOAP_FMAC4 soap_in__tds__SetNTPResponse(struct soap*, const char*, _tds__SetNTPResponse *, const char*);
SOAP_FMAC1 _tds__SetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__SetNTPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNTPResponse * soap_new__tds__SetNTPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNTPResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNTPResponse * soap_new_req__tds__SetNTPResponse(
	struct soap *soap)
{
	_tds__SetNTPResponse *_p = ::soap_new__tds__SetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetNTPResponse * soap_new_set__tds__SetNTPResponse(
	struct soap *soap)
{
	_tds__SetNTPResponse *_p = ::soap_new__tds__SetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetNTPResponse(struct soap *soap, _tds__SetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTPResponse", p->soap_type() == SOAP_TYPE__tds__SetNTPResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNTPResponse(struct soap *soap, const char *URL, _tds__SetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTPResponse", p->soap_type() == SOAP_TYPE__tds__SetNTPResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNTPResponse(struct soap *soap, const char *URL, _tds__SetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTPResponse", p->soap_type() == SOAP_TYPE__tds__SetNTPResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNTPResponse(struct soap *soap, const char *URL, _tds__SetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTPResponse", p->soap_type() == SOAP_TYPE__tds__SetNTPResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNTPResponse * SOAP_FMAC4 soap_get__tds__SetNTPResponse(struct soap*, _tds__SetNTPResponse *, const char*, const char*);

inline int soap_read__tds__SetNTPResponse(struct soap *soap, _tds__SetNTPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNTPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNTPResponse(struct soap *soap, const char *URL, _tds__SetNTPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNTPResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNTPResponse(struct soap *soap, _tds__SetNTPResponse *p)
{
	if (::soap_read__tds__SetNTPResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetNTP_DEFINED
#define SOAP_TYPE__tds__SetNTP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetNTP(struct soap*, const char*, int, const _tds__SetNTP *, const char*);
SOAP_FMAC3 _tds__SetNTP * SOAP_FMAC4 soap_in__tds__SetNTP(struct soap*, const char*, _tds__SetNTP *, const char*);
SOAP_FMAC1 _tds__SetNTP * SOAP_FMAC2 soap_instantiate__tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetNTP * soap_new__tds__SetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetNTP(soap, n, NULL, NULL, NULL);
}

inline _tds__SetNTP * soap_new_req__tds__SetNTP(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetNTP *_p = ::soap_new__tds__SetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNTP::FromDHCP = FromDHCP;
	}
	return _p;
}

inline _tds__SetNTP * soap_new_set__tds__SetNTP(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<tt__NetworkHost *> & NTPManual)
{
	_tds__SetNTP *_p = ::soap_new__tds__SetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetNTP::FromDHCP = FromDHCP;
		_p->_tds__SetNTP::NTPManual = NTPManual;
	}
	return _p;
}

inline int soap_write__tds__SetNTP(struct soap *soap, _tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTP", p->soap_type() == SOAP_TYPE__tds__SetNTP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetNTP(struct soap *soap, const char *URL, _tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTP", p->soap_type() == SOAP_TYPE__tds__SetNTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetNTP(struct soap *soap, const char *URL, _tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTP", p->soap_type() == SOAP_TYPE__tds__SetNTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetNTP(struct soap *soap, const char *URL, _tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetNTP", p->soap_type() == SOAP_TYPE__tds__SetNTP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetNTP * SOAP_FMAC4 soap_get__tds__SetNTP(struct soap*, _tds__SetNTP *, const char*, const char*);

inline int soap_read__tds__SetNTP(struct soap *soap, _tds__SetNTP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetNTP(struct soap *soap, const char *URL, _tds__SetNTP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetNTP(struct soap *soap, _tds__SetNTP *p)
{
	if (::soap_read__tds__SetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNTPResponse_DEFINED
#define SOAP_TYPE__tds__GetNTPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNTPResponse(struct soap*, const char*, int, const _tds__GetNTPResponse *, const char*);
SOAP_FMAC3 _tds__GetNTPResponse * SOAP_FMAC4 soap_in__tds__GetNTPResponse(struct soap*, const char*, _tds__GetNTPResponse *, const char*);
SOAP_FMAC1 _tds__GetNTPResponse * SOAP_FMAC2 soap_instantiate__tds__GetNTPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNTPResponse * soap_new__tds__GetNTPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNTPResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNTPResponse * soap_new_req__tds__GetNTPResponse(
	struct soap *soap,
	tt__NTPInformation *NTPInformation)
{
	_tds__GetNTPResponse *_p = ::soap_new__tds__GetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNTPResponse::NTPInformation = NTPInformation;
	}
	return _p;
}

inline _tds__GetNTPResponse * soap_new_set__tds__GetNTPResponse(
	struct soap *soap,
	tt__NTPInformation *NTPInformation)
{
	_tds__GetNTPResponse *_p = ::soap_new__tds__GetNTPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetNTPResponse::NTPInformation = NTPInformation;
	}
	return _p;
}

inline int soap_write__tds__GetNTPResponse(struct soap *soap, _tds__GetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTPResponse", p->soap_type() == SOAP_TYPE__tds__GetNTPResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNTPResponse(struct soap *soap, const char *URL, _tds__GetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTPResponse", p->soap_type() == SOAP_TYPE__tds__GetNTPResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNTPResponse(struct soap *soap, const char *URL, _tds__GetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTPResponse", p->soap_type() == SOAP_TYPE__tds__GetNTPResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNTPResponse(struct soap *soap, const char *URL, _tds__GetNTPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTPResponse", p->soap_type() == SOAP_TYPE__tds__GetNTPResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNTPResponse * SOAP_FMAC4 soap_get__tds__GetNTPResponse(struct soap*, _tds__GetNTPResponse *, const char*, const char*);

inline int soap_read__tds__GetNTPResponse(struct soap *soap, _tds__GetNTPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNTPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNTPResponse(struct soap *soap, const char *URL, _tds__GetNTPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNTPResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNTPResponse(struct soap *soap, _tds__GetNTPResponse *p)
{
	if (::soap_read__tds__GetNTPResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetNTP_DEFINED
#define SOAP_TYPE__tds__GetNTP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetNTP(struct soap*, const char*, int, const _tds__GetNTP *, const char*);
SOAP_FMAC3 _tds__GetNTP * SOAP_FMAC4 soap_in__tds__GetNTP(struct soap*, const char*, _tds__GetNTP *, const char*);
SOAP_FMAC1 _tds__GetNTP * SOAP_FMAC2 soap_instantiate__tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetNTP * soap_new__tds__GetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetNTP(soap, n, NULL, NULL, NULL);
}

inline _tds__GetNTP * soap_new_req__tds__GetNTP(
	struct soap *soap)
{
	_tds__GetNTP *_p = ::soap_new__tds__GetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetNTP * soap_new_set__tds__GetNTP(
	struct soap *soap)
{
	_tds__GetNTP *_p = ::soap_new__tds__GetNTP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetNTP(struct soap *soap, _tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTP", p->soap_type() == SOAP_TYPE__tds__GetNTP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetNTP(struct soap *soap, const char *URL, _tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTP", p->soap_type() == SOAP_TYPE__tds__GetNTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetNTP(struct soap *soap, const char *URL, _tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTP", p->soap_type() == SOAP_TYPE__tds__GetNTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetNTP(struct soap *soap, const char *URL, _tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetNTP", p->soap_type() == SOAP_TYPE__tds__GetNTP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetNTP * SOAP_FMAC4 soap_get__tds__GetNTP(struct soap*, _tds__GetNTP *, const char*, const char*);

inline int soap_read__tds__GetNTP(struct soap *soap, _tds__GetNTP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetNTP(struct soap *soap, const char *URL, _tds__GetNTP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetNTP(struct soap *soap, _tds__GetNTP *p)
{
	if (::soap_read__tds__GetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDNSResponse_DEFINED
#define SOAP_TYPE__tds__SetDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDNSResponse(struct soap*, const char*, int, const _tds__SetDNSResponse *, const char*);
SOAP_FMAC3 _tds__SetDNSResponse * SOAP_FMAC4 soap_in__tds__SetDNSResponse(struct soap*, const char*, _tds__SetDNSResponse *, const char*);
SOAP_FMAC1 _tds__SetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__SetDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDNSResponse * soap_new__tds__SetDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDNSResponse * soap_new_req__tds__SetDNSResponse(
	struct soap *soap)
{
	_tds__SetDNSResponse *_p = ::soap_new__tds__SetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDNSResponse * soap_new_set__tds__SetDNSResponse(
	struct soap *soap)
{
	_tds__SetDNSResponse *_p = ::soap_new__tds__SetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDNSResponse(struct soap *soap, _tds__SetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDNSResponse(struct soap *soap, const char *URL, _tds__SetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDNSResponse(struct soap *soap, const char *URL, _tds__SetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDNSResponse(struct soap *soap, const char *URL, _tds__SetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNSResponse", p->soap_type() == SOAP_TYPE__tds__SetDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDNSResponse * SOAP_FMAC4 soap_get__tds__SetDNSResponse(struct soap*, _tds__SetDNSResponse *, const char*, const char*);

inline int soap_read__tds__SetDNSResponse(struct soap *soap, _tds__SetDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDNSResponse(struct soap *soap, const char *URL, _tds__SetDNSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDNSResponse(struct soap *soap, _tds__SetDNSResponse *p)
{
	if (::soap_read__tds__SetDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDNS_DEFINED
#define SOAP_TYPE__tds__SetDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDNS(struct soap*, const char*, int, const _tds__SetDNS *, const char*);
SOAP_FMAC3 _tds__SetDNS * SOAP_FMAC4 soap_in__tds__SetDNS(struct soap*, const char*, _tds__SetDNS *, const char*);
SOAP_FMAC1 _tds__SetDNS * SOAP_FMAC2 soap_instantiate__tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDNS * soap_new__tds__SetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDNS * soap_new_req__tds__SetDNS(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetDNS *_p = ::soap_new__tds__SetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDNS::FromDHCP = FromDHCP;
	}
	return _p;
}

inline _tds__SetDNS * soap_new_set__tds__SetDNS(
	struct soap *soap,
	bool FromDHCP,
	const std::vector<std::string> & SearchDomain,
	const std::vector<tt__IPAddress *> & DNSManual)
{
	_tds__SetDNS *_p = ::soap_new__tds__SetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDNS::FromDHCP = FromDHCP;
		_p->_tds__SetDNS::SearchDomain = SearchDomain;
		_p->_tds__SetDNS::DNSManual = DNSManual;
	}
	return _p;
}

inline int soap_write__tds__SetDNS(struct soap *soap, _tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNS", p->soap_type() == SOAP_TYPE__tds__SetDNS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDNS(struct soap *soap, const char *URL, _tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNS", p->soap_type() == SOAP_TYPE__tds__SetDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDNS(struct soap *soap, const char *URL, _tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNS", p->soap_type() == SOAP_TYPE__tds__SetDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDNS(struct soap *soap, const char *URL, _tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDNS", p->soap_type() == SOAP_TYPE__tds__SetDNS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDNS * SOAP_FMAC4 soap_get__tds__SetDNS(struct soap*, _tds__SetDNS *, const char*, const char*);

inline int soap_read__tds__SetDNS(struct soap *soap, _tds__SetDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDNS(struct soap *soap, const char *URL, _tds__SetDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDNS(struct soap *soap, _tds__SetDNS *p)
{
	if (::soap_read__tds__SetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDNSResponse_DEFINED
#define SOAP_TYPE__tds__GetDNSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDNSResponse(struct soap*, const char*, int, const _tds__GetDNSResponse *, const char*);
SOAP_FMAC3 _tds__GetDNSResponse * SOAP_FMAC4 soap_in__tds__GetDNSResponse(struct soap*, const char*, _tds__GetDNSResponse *, const char*);
SOAP_FMAC1 _tds__GetDNSResponse * SOAP_FMAC2 soap_instantiate__tds__GetDNSResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDNSResponse * soap_new__tds__GetDNSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDNSResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDNSResponse * soap_new_req__tds__GetDNSResponse(
	struct soap *soap,
	tt__DNSInformation *DNSInformation)
{
	_tds__GetDNSResponse *_p = ::soap_new__tds__GetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDNSResponse::DNSInformation = DNSInformation;
	}
	return _p;
}

inline _tds__GetDNSResponse * soap_new_set__tds__GetDNSResponse(
	struct soap *soap,
	tt__DNSInformation *DNSInformation)
{
	_tds__GetDNSResponse *_p = ::soap_new__tds__GetDNSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDNSResponse::DNSInformation = DNSInformation;
	}
	return _p;
}

inline int soap_write__tds__GetDNSResponse(struct soap *soap, _tds__GetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDNSResponse(struct soap *soap, const char *URL, _tds__GetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDNSResponse(struct soap *soap, const char *URL, _tds__GetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDNSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDNSResponse(struct soap *soap, const char *URL, _tds__GetDNSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNSResponse", p->soap_type() == SOAP_TYPE__tds__GetDNSResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDNSResponse * SOAP_FMAC4 soap_get__tds__GetDNSResponse(struct soap*, _tds__GetDNSResponse *, const char*, const char*);

inline int soap_read__tds__GetDNSResponse(struct soap *soap, _tds__GetDNSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDNSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDNSResponse(struct soap *soap, const char *URL, _tds__GetDNSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDNSResponse(struct soap *soap, _tds__GetDNSResponse *p)
{
	if (::soap_read__tds__GetDNSResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDNS_DEFINED
#define SOAP_TYPE__tds__GetDNS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDNS(struct soap*, const char*, int, const _tds__GetDNS *, const char*);
SOAP_FMAC3 _tds__GetDNS * SOAP_FMAC4 soap_in__tds__GetDNS(struct soap*, const char*, _tds__GetDNS *, const char*);
SOAP_FMAC1 _tds__GetDNS * SOAP_FMAC2 soap_instantiate__tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDNS * soap_new__tds__GetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDNS(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDNS * soap_new_req__tds__GetDNS(
	struct soap *soap)
{
	_tds__GetDNS *_p = ::soap_new__tds__GetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDNS * soap_new_set__tds__GetDNS(
	struct soap *soap)
{
	_tds__GetDNS *_p = ::soap_new__tds__GetDNS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDNS(struct soap *soap, _tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNS", p->soap_type() == SOAP_TYPE__tds__GetDNS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDNS(struct soap *soap, const char *URL, _tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNS", p->soap_type() == SOAP_TYPE__tds__GetDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDNS(struct soap *soap, const char *URL, _tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNS", p->soap_type() == SOAP_TYPE__tds__GetDNS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDNS(struct soap *soap, const char *URL, _tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDNS", p->soap_type() == SOAP_TYPE__tds__GetDNS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDNS * SOAP_FMAC4 soap_get__tds__GetDNS(struct soap*, _tds__GetDNS *, const char*, const char*);

inline int soap_read__tds__GetDNS(struct soap *soap, _tds__GetDNS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDNS(struct soap *soap, const char *URL, _tds__GetDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDNS(struct soap *soap, _tds__GetDNS *p)
{
	if (::soap_read__tds__GetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse_DEFINED
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostnameFromDHCPResponse(struct soap*, const char*, int, const _tds__SetHostnameFromDHCPResponse *, const char*);
SOAP_FMAC3 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC4 soap_in__tds__SetHostnameFromDHCPResponse(struct soap*, const char*, _tds__SetHostnameFromDHCPResponse *, const char*);
SOAP_FMAC1 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostnameFromDHCPResponse * soap_new__tds__SetHostnameFromDHCPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostnameFromDHCPResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostnameFromDHCPResponse * soap_new_req__tds__SetHostnameFromDHCPResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetHostnameFromDHCPResponse *_p = ::soap_new__tds__SetHostnameFromDHCPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCPResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline _tds__SetHostnameFromDHCPResponse * soap_new_set__tds__SetHostnameFromDHCPResponse(
	struct soap *soap,
	bool RebootNeeded)
{
	_tds__SetHostnameFromDHCPResponse *_p = ::soap_new__tds__SetHostnameFromDHCPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCPResponse::RebootNeeded = RebootNeeded;
	}
	return _p;
}

inline int soap_write__tds__SetHostnameFromDHCPResponse(struct soap *soap, _tds__SetHostnameFromDHCPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCPResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCPResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetHostnameFromDHCPResponse(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCPResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCPResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetHostnameFromDHCPResponse(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCPResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCPResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetHostnameFromDHCPResponse(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCPResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCPResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostnameFromDHCPResponse * SOAP_FMAC4 soap_get__tds__SetHostnameFromDHCPResponse(struct soap*, _tds__SetHostnameFromDHCPResponse *, const char*, const char*);

inline int soap_read__tds__SetHostnameFromDHCPResponse(struct soap *soap, _tds__SetHostnameFromDHCPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetHostnameFromDHCPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetHostnameFromDHCPResponse(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetHostnameFromDHCPResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetHostnameFromDHCPResponse(struct soap *soap, _tds__SetHostnameFromDHCPResponse *p)
{
	if (::soap_read__tds__SetHostnameFromDHCPResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP_DEFINED
#define SOAP_TYPE__tds__SetHostnameFromDHCP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostnameFromDHCP(struct soap*, const char*, int, const _tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC3 _tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_in__tds__SetHostnameFromDHCP(struct soap*, const char*, _tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC1 _tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate__tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostnameFromDHCP * soap_new__tds__SetHostnameFromDHCP(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostnameFromDHCP(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostnameFromDHCP * soap_new_req__tds__SetHostnameFromDHCP(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetHostnameFromDHCP *_p = ::soap_new__tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCP::FromDHCP = FromDHCP;
	}
	return _p;
}

inline _tds__SetHostnameFromDHCP * soap_new_set__tds__SetHostnameFromDHCP(
	struct soap *soap,
	bool FromDHCP)
{
	_tds__SetHostnameFromDHCP *_p = ::soap_new__tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostnameFromDHCP::FromDHCP = FromDHCP;
	}
	return _p;
}

inline int soap_write__tds__SetHostnameFromDHCP(struct soap *soap, _tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCP", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCP", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCP", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameFromDHCP", p->soap_type() == SOAP_TYPE__tds__SetHostnameFromDHCP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_get__tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP *, const char*, const char*);

inline int soap_read__tds__SetHostnameFromDHCP(struct soap *soap, _tds__SetHostnameFromDHCP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetHostnameFromDHCP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, _tds__SetHostnameFromDHCP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetHostnameFromDHCP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetHostnameFromDHCP(struct soap *soap, _tds__SetHostnameFromDHCP *p)
{
	if (::soap_read__tds__SetHostnameFromDHCP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetHostnameResponse_DEFINED
#define SOAP_TYPE__tds__SetHostnameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostnameResponse(struct soap*, const char*, int, const _tds__SetHostnameResponse *, const char*);
SOAP_FMAC3 _tds__SetHostnameResponse * SOAP_FMAC4 soap_in__tds__SetHostnameResponse(struct soap*, const char*, _tds__SetHostnameResponse *, const char*);
SOAP_FMAC1 _tds__SetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__SetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostnameResponse * soap_new__tds__SetHostnameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostnameResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostnameResponse * soap_new_req__tds__SetHostnameResponse(
	struct soap *soap)
{
	_tds__SetHostnameResponse *_p = ::soap_new__tds__SetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetHostnameResponse * soap_new_set__tds__SetHostnameResponse(
	struct soap *soap)
{
	_tds__SetHostnameResponse *_p = ::soap_new__tds__SetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetHostnameResponse(struct soap *soap, _tds__SetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetHostnameResponse(struct soap *soap, const char *URL, _tds__SetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetHostnameResponse(struct soap *soap, const char *URL, _tds__SetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetHostnameResponse(struct soap *soap, const char *URL, _tds__SetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__SetHostnameResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostnameResponse * SOAP_FMAC4 soap_get__tds__SetHostnameResponse(struct soap*, _tds__SetHostnameResponse *, const char*, const char*);

inline int soap_read__tds__SetHostnameResponse(struct soap *soap, _tds__SetHostnameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetHostnameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetHostnameResponse(struct soap *soap, const char *URL, _tds__SetHostnameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetHostnameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetHostnameResponse(struct soap *soap, _tds__SetHostnameResponse *p)
{
	if (::soap_read__tds__SetHostnameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetHostname_DEFINED
#define SOAP_TYPE__tds__SetHostname_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetHostname(struct soap*, const char*, int, const _tds__SetHostname *, const char*);
SOAP_FMAC3 _tds__SetHostname * SOAP_FMAC4 soap_in__tds__SetHostname(struct soap*, const char*, _tds__SetHostname *, const char*);
SOAP_FMAC1 _tds__SetHostname * SOAP_FMAC2 soap_instantiate__tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetHostname * soap_new__tds__SetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetHostname(soap, n, NULL, NULL, NULL);
}

inline _tds__SetHostname * soap_new_req__tds__SetHostname(
	struct soap *soap,
	const std::string& Name)
{
	_tds__SetHostname *_p = ::soap_new__tds__SetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostname::Name = Name;
	}
	return _p;
}

inline _tds__SetHostname * soap_new_set__tds__SetHostname(
	struct soap *soap,
	const std::string& Name)
{
	_tds__SetHostname *_p = ::soap_new__tds__SetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetHostname::Name = Name;
	}
	return _p;
}

inline int soap_write__tds__SetHostname(struct soap *soap, _tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostname", p->soap_type() == SOAP_TYPE__tds__SetHostname ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetHostname(struct soap *soap, const char *URL, _tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostname", p->soap_type() == SOAP_TYPE__tds__SetHostname ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetHostname(struct soap *soap, const char *URL, _tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostname", p->soap_type() == SOAP_TYPE__tds__SetHostname ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetHostname(struct soap *soap, const char *URL, _tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetHostname", p->soap_type() == SOAP_TYPE__tds__SetHostname ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetHostname * SOAP_FMAC4 soap_get__tds__SetHostname(struct soap*, _tds__SetHostname *, const char*, const char*);

inline int soap_read__tds__SetHostname(struct soap *soap, _tds__SetHostname *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetHostname(struct soap *soap, const char *URL, _tds__SetHostname *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetHostname(struct soap *soap, _tds__SetHostname *p)
{
	if (::soap_read__tds__SetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetHostnameResponse_DEFINED
#define SOAP_TYPE__tds__GetHostnameResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetHostnameResponse(struct soap*, const char*, int, const _tds__GetHostnameResponse *, const char*);
SOAP_FMAC3 _tds__GetHostnameResponse * SOAP_FMAC4 soap_in__tds__GetHostnameResponse(struct soap*, const char*, _tds__GetHostnameResponse *, const char*);
SOAP_FMAC1 _tds__GetHostnameResponse * SOAP_FMAC2 soap_instantiate__tds__GetHostnameResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetHostnameResponse * soap_new__tds__GetHostnameResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetHostnameResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetHostnameResponse * soap_new_req__tds__GetHostnameResponse(
	struct soap *soap,
	tt__HostnameInformation *HostnameInformation)
{
	_tds__GetHostnameResponse *_p = ::soap_new__tds__GetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetHostnameResponse::HostnameInformation = HostnameInformation;
	}
	return _p;
}

inline _tds__GetHostnameResponse * soap_new_set__tds__GetHostnameResponse(
	struct soap *soap,
	tt__HostnameInformation *HostnameInformation)
{
	_tds__GetHostnameResponse *_p = ::soap_new__tds__GetHostnameResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetHostnameResponse::HostnameInformation = HostnameInformation;
	}
	return _p;
}

inline int soap_write__tds__GetHostnameResponse(struct soap *soap, _tds__GetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__GetHostnameResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetHostnameResponse(struct soap *soap, const char *URL, _tds__GetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__GetHostnameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetHostnameResponse(struct soap *soap, const char *URL, _tds__GetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__GetHostnameResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetHostnameResponse(struct soap *soap, const char *URL, _tds__GetHostnameResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostnameResponse", p->soap_type() == SOAP_TYPE__tds__GetHostnameResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetHostnameResponse * SOAP_FMAC4 soap_get__tds__GetHostnameResponse(struct soap*, _tds__GetHostnameResponse *, const char*, const char*);

inline int soap_read__tds__GetHostnameResponse(struct soap *soap, _tds__GetHostnameResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetHostnameResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetHostnameResponse(struct soap *soap, const char *URL, _tds__GetHostnameResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetHostnameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetHostnameResponse(struct soap *soap, _tds__GetHostnameResponse *p)
{
	if (::soap_read__tds__GetHostnameResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetHostname_DEFINED
#define SOAP_TYPE__tds__GetHostname_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetHostname(struct soap*, const char*, int, const _tds__GetHostname *, const char*);
SOAP_FMAC3 _tds__GetHostname * SOAP_FMAC4 soap_in__tds__GetHostname(struct soap*, const char*, _tds__GetHostname *, const char*);
SOAP_FMAC1 _tds__GetHostname * SOAP_FMAC2 soap_instantiate__tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetHostname * soap_new__tds__GetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetHostname(soap, n, NULL, NULL, NULL);
}

inline _tds__GetHostname * soap_new_req__tds__GetHostname(
	struct soap *soap)
{
	_tds__GetHostname *_p = ::soap_new__tds__GetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetHostname * soap_new_set__tds__GetHostname(
	struct soap *soap)
{
	_tds__GetHostname *_p = ::soap_new__tds__GetHostname(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetHostname(struct soap *soap, _tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostname", p->soap_type() == SOAP_TYPE__tds__GetHostname ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetHostname(struct soap *soap, const char *URL, _tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostname", p->soap_type() == SOAP_TYPE__tds__GetHostname ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetHostname(struct soap *soap, const char *URL, _tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostname", p->soap_type() == SOAP_TYPE__tds__GetHostname ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetHostname(struct soap *soap, const char *URL, _tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetHostname", p->soap_type() == SOAP_TYPE__tds__GetHostname ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetHostname * SOAP_FMAC4 soap_get__tds__GetHostname(struct soap*, _tds__GetHostname *, const char*, const char*);

inline int soap_read__tds__GetHostname(struct soap *soap, _tds__GetHostname *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetHostname(struct soap *soap, const char *URL, _tds__GetHostname *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetHostname(struct soap *soap, _tds__GetHostname *p)
{
	if (::soap_read__tds__GetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tds__GetCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCapabilitiesResponse(struct soap*, const char*, int, const _tds__GetCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tds__GetCapabilitiesResponse * SOAP_FMAC4 soap_in__tds__GetCapabilitiesResponse(struct soap*, const char*, _tds__GetCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tds__GetCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCapabilitiesResponse * soap_new__tds__GetCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCapabilitiesResponse * soap_new_req__tds__GetCapabilitiesResponse(
	struct soap *soap,
	tt__Capabilities *Capabilities)
{
	_tds__GetCapabilitiesResponse *_p = ::soap_new__tds__GetCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tds__GetCapabilitiesResponse * soap_new_set__tds__GetCapabilitiesResponse(
	struct soap *soap,
	tt__Capabilities *Capabilities)
{
	_tds__GetCapabilitiesResponse *_p = ::soap_new__tds__GetCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tds__GetCapabilitiesResponse(struct soap *soap, _tds__GetCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCapabilitiesResponse * SOAP_FMAC4 soap_get__tds__GetCapabilitiesResponse(struct soap*, _tds__GetCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tds__GetCapabilitiesResponse(struct soap *soap, _tds__GetCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetCapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCapabilitiesResponse(struct soap *soap, _tds__GetCapabilitiesResponse *p)
{
	if (::soap_read__tds__GetCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetCapabilities_DEFINED
#define SOAP_TYPE__tds__GetCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetCapabilities(struct soap*, const char*, int, const _tds__GetCapabilities *, const char*);
SOAP_FMAC3 _tds__GetCapabilities * SOAP_FMAC4 soap_in__tds__GetCapabilities(struct soap*, const char*, _tds__GetCapabilities *, const char*);
SOAP_FMAC1 _tds__GetCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetCapabilities * soap_new__tds__GetCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__GetCapabilities * soap_new_req__tds__GetCapabilities(
	struct soap *soap)
{
	_tds__GetCapabilities *_p = ::soap_new__tds__GetCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetCapabilities * soap_new_set__tds__GetCapabilities(
	struct soap *soap,
	const std::vector<enum tt__CapabilityCategory> & Category)
{
	_tds__GetCapabilities *_p = ::soap_new__tds__GetCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetCapabilities::Category = Category;
	}
	return _p;
}

inline int soap_write__tds__GetCapabilities(struct soap *soap, _tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilities", p->soap_type() == SOAP_TYPE__tds__GetCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetCapabilities(struct soap *soap, const char *URL, _tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilities", p->soap_type() == SOAP_TYPE__tds__GetCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetCapabilities(struct soap *soap, const char *URL, _tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilities", p->soap_type() == SOAP_TYPE__tds__GetCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetCapabilities(struct soap *soap, const char *URL, _tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetCapabilities", p->soap_type() == SOAP_TYPE__tds__GetCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetCapabilities * SOAP_FMAC4 soap_get__tds__GetCapabilities(struct soap*, _tds__GetCapabilities *, const char*, const char*);

inline int soap_read__tds__GetCapabilities(struct soap *soap, _tds__GetCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetCapabilities(struct soap *soap, const char *URL, _tds__GetCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetCapabilities(struct soap *soap, _tds__GetCapabilities *p)
{
	if (::soap_read__tds__GetCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, const char*, int, const _tds__SetAuthFailureWarningConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetAuthFailureWarningConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, const char*, _tds__SetAuthFailureWarningConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetAuthFailureWarningConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetAuthFailureWarningConfigurationResponse * soap_new__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetAuthFailureWarningConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetAuthFailureWarningConfigurationResponse * soap_new_req__tds__SetAuthFailureWarningConfigurationResponse(
	struct soap *soap)
{
	_tds__SetAuthFailureWarningConfigurationResponse *_p = ::soap_new__tds__SetAuthFailureWarningConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetAuthFailureWarningConfigurationResponse * soap_new_set__tds__SetAuthFailureWarningConfigurationResponse(
	struct soap *soap)
{
	_tds__SetAuthFailureWarningConfigurationResponse *_p = ::soap_new__tds__SetAuthFailureWarningConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, _tds__SetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetAuthFailureWarningConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetAuthFailureWarningConfigurationResponse(struct soap*, _tds__SetAuthFailureWarningConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, _tds__SetAuthFailureWarningConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetAuthFailureWarningConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetAuthFailureWarningConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetAuthFailureWarningConfigurationResponse(struct soap *soap, _tds__SetAuthFailureWarningConfigurationResponse *p)
{
	if (::soap_read__tds__SetAuthFailureWarningConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetAuthFailureWarningConfiguration_DEFINED
#define SOAP_TYPE__tds__SetAuthFailureWarningConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetAuthFailureWarningConfiguration(struct soap*, const char*, int, const _tds__SetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC3 _tds__SetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_in__tds__SetAuthFailureWarningConfiguration(struct soap*, const char*, _tds__SetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC1 _tds__SetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetAuthFailureWarningConfiguration * soap_new__tds__SetAuthFailureWarningConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetAuthFailureWarningConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetAuthFailureWarningConfiguration * soap_new_req__tds__SetAuthFailureWarningConfiguration(
	struct soap *soap,
	bool Enabled,
	int MonitorPeriod,
	int MaxAuthFailures)
{
	_tds__SetAuthFailureWarningConfiguration *_p = ::soap_new__tds__SetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetAuthFailureWarningConfiguration::Enabled = Enabled;
		_p->_tds__SetAuthFailureWarningConfiguration::MonitorPeriod = MonitorPeriod;
		_p->_tds__SetAuthFailureWarningConfiguration::MaxAuthFailures = MaxAuthFailures;
	}
	return _p;
}

inline _tds__SetAuthFailureWarningConfiguration * soap_new_set__tds__SetAuthFailureWarningConfiguration(
	struct soap *soap,
	bool Enabled,
	int MonitorPeriod,
	int MaxAuthFailures)
{
	_tds__SetAuthFailureWarningConfiguration *_p = ::soap_new__tds__SetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetAuthFailureWarningConfiguration::Enabled = Enabled;
		_p->_tds__SetAuthFailureWarningConfiguration::MonitorPeriod = MonitorPeriod;
		_p->_tds__SetAuthFailureWarningConfiguration::MaxAuthFailures = MaxAuthFailures;
	}
	return _p;
}

inline int soap_write__tds__SetAuthFailureWarningConfiguration(struct soap *soap, _tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__SetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_get__tds__SetAuthFailureWarningConfiguration(struct soap*, _tds__SetAuthFailureWarningConfiguration *, const char*, const char*);

inline int soap_read__tds__SetAuthFailureWarningConfiguration(struct soap *soap, _tds__SetAuthFailureWarningConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetAuthFailureWarningConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__SetAuthFailureWarningConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetAuthFailureWarningConfiguration(struct soap *soap, _tds__SetAuthFailureWarningConfiguration *p)
{
	if (::soap_read__tds__SetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, const char*, int, const _tds__GetAuthFailureWarningConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetAuthFailureWarningConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, const char*, _tds__GetAuthFailureWarningConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetAuthFailureWarningConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAuthFailureWarningConfigurationResponse * soap_new__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAuthFailureWarningConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAuthFailureWarningConfigurationResponse * soap_new_req__tds__GetAuthFailureWarningConfigurationResponse(
	struct soap *soap,
	bool Enabled,
	int MonitorPeriod,
	int MaxAuthFailures)
{
	_tds__GetAuthFailureWarningConfigurationResponse *_p = ::soap_new__tds__GetAuthFailureWarningConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAuthFailureWarningConfigurationResponse::Enabled = Enabled;
		_p->_tds__GetAuthFailureWarningConfigurationResponse::MonitorPeriod = MonitorPeriod;
		_p->_tds__GetAuthFailureWarningConfigurationResponse::MaxAuthFailures = MaxAuthFailures;
	}
	return _p;
}

inline _tds__GetAuthFailureWarningConfigurationResponse * soap_new_set__tds__GetAuthFailureWarningConfigurationResponse(
	struct soap *soap,
	bool Enabled,
	int MonitorPeriod,
	int MaxAuthFailures)
{
	_tds__GetAuthFailureWarningConfigurationResponse *_p = ::soap_new__tds__GetAuthFailureWarningConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAuthFailureWarningConfigurationResponse::Enabled = Enabled;
		_p->_tds__GetAuthFailureWarningConfigurationResponse::MonitorPeriod = MonitorPeriod;
		_p->_tds__GetAuthFailureWarningConfigurationResponse::MaxAuthFailures = MaxAuthFailures;
	}
	return _p;
}

inline int soap_write__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, _tds__GetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAuthFailureWarningConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetAuthFailureWarningConfigurationResponse(struct soap*, _tds__GetAuthFailureWarningConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, _tds__GetAuthFailureWarningConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetAuthFailureWarningConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetAuthFailureWarningConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetAuthFailureWarningConfigurationResponse(struct soap *soap, _tds__GetAuthFailureWarningConfigurationResponse *p)
{
	if (::soap_read__tds__GetAuthFailureWarningConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetAuthFailureWarningConfiguration_DEFINED
#define SOAP_TYPE__tds__GetAuthFailureWarningConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAuthFailureWarningConfiguration(struct soap*, const char*, int, const _tds__GetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC3 _tds__GetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_in__tds__GetAuthFailureWarningConfiguration(struct soap*, const char*, _tds__GetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC1 _tds__GetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAuthFailureWarningConfiguration * soap_new__tds__GetAuthFailureWarningConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAuthFailureWarningConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAuthFailureWarningConfiguration * soap_new_req__tds__GetAuthFailureWarningConfiguration(
	struct soap *soap)
{
	_tds__GetAuthFailureWarningConfiguration *_p = ::soap_new__tds__GetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetAuthFailureWarningConfiguration * soap_new_set__tds__GetAuthFailureWarningConfiguration(
	struct soap *soap)
{
	_tds__GetAuthFailureWarningConfiguration *_p = ::soap_new__tds__GetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetAuthFailureWarningConfiguration(struct soap *soap, _tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningConfiguration", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_get__tds__GetAuthFailureWarningConfiguration(struct soap*, _tds__GetAuthFailureWarningConfiguration *, const char*, const char*);

inline int soap_read__tds__GetAuthFailureWarningConfiguration(struct soap *soap, _tds__GetAuthFailureWarningConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetAuthFailureWarningConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetAuthFailureWarningConfiguration(struct soap *soap, _tds__GetAuthFailureWarningConfiguration *p)
{
	if (::soap_read__tds__GetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse_DEFINED
#define SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAuthFailureWarningOptionsResponse(struct soap*, const char*, int, const _tds__GetAuthFailureWarningOptionsResponse *, const char*);
SOAP_FMAC3 _tds__GetAuthFailureWarningOptionsResponse * SOAP_FMAC4 soap_in__tds__GetAuthFailureWarningOptionsResponse(struct soap*, const char*, _tds__GetAuthFailureWarningOptionsResponse *, const char*);
SOAP_FMAC1 _tds__GetAuthFailureWarningOptionsResponse * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAuthFailureWarningOptionsResponse * soap_new__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAuthFailureWarningOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAuthFailureWarningOptionsResponse * soap_new_req__tds__GetAuthFailureWarningOptionsResponse(
	struct soap *soap,
	tt__IntRange *MonitorPeriodRange,
	tt__IntRange *AuthFailureRange)
{
	_tds__GetAuthFailureWarningOptionsResponse *_p = ::soap_new__tds__GetAuthFailureWarningOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAuthFailureWarningOptionsResponse::MonitorPeriodRange = MonitorPeriodRange;
		_p->_tds__GetAuthFailureWarningOptionsResponse::AuthFailureRange = AuthFailureRange;
	}
	return _p;
}

inline _tds__GetAuthFailureWarningOptionsResponse * soap_new_set__tds__GetAuthFailureWarningOptionsResponse(
	struct soap *soap,
	tt__IntRange *MonitorPeriodRange,
	tt__IntRange *AuthFailureRange)
{
	_tds__GetAuthFailureWarningOptionsResponse *_p = ::soap_new__tds__GetAuthFailureWarningOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetAuthFailureWarningOptionsResponse::MonitorPeriodRange = MonitorPeriodRange;
		_p->_tds__GetAuthFailureWarningOptionsResponse::AuthFailureRange = AuthFailureRange;
	}
	return _p;
}

inline int soap_write__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, _tds__GetAuthFailureWarningOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAuthFailureWarningOptionsResponse * SOAP_FMAC4 soap_get__tds__GetAuthFailureWarningOptionsResponse(struct soap*, _tds__GetAuthFailureWarningOptionsResponse *, const char*, const char*);

inline int soap_read__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, _tds__GetAuthFailureWarningOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetAuthFailureWarningOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetAuthFailureWarningOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetAuthFailureWarningOptionsResponse(struct soap *soap, _tds__GetAuthFailureWarningOptionsResponse *p)
{
	if (::soap_read__tds__GetAuthFailureWarningOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetAuthFailureWarningOptions_DEFINED
#define SOAP_TYPE__tds__GetAuthFailureWarningOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetAuthFailureWarningOptions(struct soap*, const char*, int, const _tds__GetAuthFailureWarningOptions *, const char*);
SOAP_FMAC3 _tds__GetAuthFailureWarningOptions * SOAP_FMAC4 soap_in__tds__GetAuthFailureWarningOptions(struct soap*, const char*, _tds__GetAuthFailureWarningOptions *, const char*);
SOAP_FMAC1 _tds__GetAuthFailureWarningOptions * SOAP_FMAC2 soap_instantiate__tds__GetAuthFailureWarningOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetAuthFailureWarningOptions * soap_new__tds__GetAuthFailureWarningOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetAuthFailureWarningOptions(soap, n, NULL, NULL, NULL);
}

inline _tds__GetAuthFailureWarningOptions * soap_new_req__tds__GetAuthFailureWarningOptions(
	struct soap *soap)
{
	_tds__GetAuthFailureWarningOptions *_p = ::soap_new__tds__GetAuthFailureWarningOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetAuthFailureWarningOptions * soap_new_set__tds__GetAuthFailureWarningOptions(
	struct soap *soap)
{
	_tds__GetAuthFailureWarningOptions *_p = ::soap_new__tds__GetAuthFailureWarningOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetAuthFailureWarningOptions(struct soap *soap, _tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptions", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptions", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptions", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetAuthFailureWarningOptions", p->soap_type() == SOAP_TYPE__tds__GetAuthFailureWarningOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetAuthFailureWarningOptions * SOAP_FMAC4 soap_get__tds__GetAuthFailureWarningOptions(struct soap*, _tds__GetAuthFailureWarningOptions *, const char*, const char*);

inline int soap_read__tds__GetAuthFailureWarningOptions(struct soap *soap, _tds__GetAuthFailureWarningOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetAuthFailureWarningOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, _tds__GetAuthFailureWarningOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetAuthFailureWarningOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetAuthFailureWarningOptions(struct soap *soap, _tds__GetAuthFailureWarningOptions *p)
{
	if (::soap_read__tds__GetAuthFailureWarningOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetPasswordHistoryConfigurationResponse(struct soap*, const char*, int, const _tds__SetPasswordHistoryConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetPasswordHistoryConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetPasswordHistoryConfigurationResponse(struct soap*, const char*, _tds__SetPasswordHistoryConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetPasswordHistoryConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetPasswordHistoryConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetPasswordHistoryConfigurationResponse * soap_new__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetPasswordHistoryConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetPasswordHistoryConfigurationResponse * soap_new_req__tds__SetPasswordHistoryConfigurationResponse(
	struct soap *soap)
{
	_tds__SetPasswordHistoryConfigurationResponse *_p = ::soap_new__tds__SetPasswordHistoryConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetPasswordHistoryConfigurationResponse * soap_new_set__tds__SetPasswordHistoryConfigurationResponse(
	struct soap *soap)
{
	_tds__SetPasswordHistoryConfigurationResponse *_p = ::soap_new__tds__SetPasswordHistoryConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, _tds__SetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetPasswordHistoryConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetPasswordHistoryConfigurationResponse(struct soap*, _tds__SetPasswordHistoryConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, _tds__SetPasswordHistoryConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetPasswordHistoryConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetPasswordHistoryConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetPasswordHistoryConfigurationResponse(struct soap *soap, _tds__SetPasswordHistoryConfigurationResponse *p)
{
	if (::soap_read__tds__SetPasswordHistoryConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetPasswordHistoryConfiguration_DEFINED
#define SOAP_TYPE__tds__SetPasswordHistoryConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetPasswordHistoryConfiguration(struct soap*, const char*, int, const _tds__SetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC3 _tds__SetPasswordHistoryConfiguration * SOAP_FMAC4 soap_in__tds__SetPasswordHistoryConfiguration(struct soap*, const char*, _tds__SetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC1 _tds__SetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetPasswordHistoryConfiguration * soap_new__tds__SetPasswordHistoryConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetPasswordHistoryConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetPasswordHistoryConfiguration * soap_new_req__tds__SetPasswordHistoryConfiguration(
	struct soap *soap,
	bool Enabled,
	int Length)
{
	_tds__SetPasswordHistoryConfiguration *_p = ::soap_new__tds__SetPasswordHistoryConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetPasswordHistoryConfiguration::Enabled = Enabled;
		_p->_tds__SetPasswordHistoryConfiguration::Length = Length;
	}
	return _p;
}

inline _tds__SetPasswordHistoryConfiguration * soap_new_set__tds__SetPasswordHistoryConfiguration(
	struct soap *soap,
	bool Enabled,
	int Length)
{
	_tds__SetPasswordHistoryConfiguration *_p = ::soap_new__tds__SetPasswordHistoryConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetPasswordHistoryConfiguration::Enabled = Enabled;
		_p->_tds__SetPasswordHistoryConfiguration::Length = Length;
	}
	return _p;
}

inline int soap_write__tds__SetPasswordHistoryConfiguration(struct soap *soap, _tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetPasswordHistoryConfiguration * SOAP_FMAC4 soap_get__tds__SetPasswordHistoryConfiguration(struct soap*, _tds__SetPasswordHistoryConfiguration *, const char*, const char*);

inline int soap_read__tds__SetPasswordHistoryConfiguration(struct soap *soap, _tds__SetPasswordHistoryConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetPasswordHistoryConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordHistoryConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetPasswordHistoryConfiguration(struct soap *soap, _tds__SetPasswordHistoryConfiguration *p)
{
	if (::soap_read__tds__SetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPasswordHistoryConfigurationResponse(struct soap*, const char*, int, const _tds__GetPasswordHistoryConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetPasswordHistoryConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetPasswordHistoryConfigurationResponse(struct soap*, const char*, _tds__GetPasswordHistoryConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetPasswordHistoryConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordHistoryConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPasswordHistoryConfigurationResponse * soap_new__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPasswordHistoryConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPasswordHistoryConfigurationResponse * soap_new_req__tds__GetPasswordHistoryConfigurationResponse(
	struct soap *soap,
	bool Enabled,
	int Length)
{
	_tds__GetPasswordHistoryConfigurationResponse *_p = ::soap_new__tds__GetPasswordHistoryConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPasswordHistoryConfigurationResponse::Enabled = Enabled;
		_p->_tds__GetPasswordHistoryConfigurationResponse::Length = Length;
	}
	return _p;
}

inline _tds__GetPasswordHistoryConfigurationResponse * soap_new_set__tds__GetPasswordHistoryConfigurationResponse(
	struct soap *soap,
	bool Enabled,
	int Length)
{
	_tds__GetPasswordHistoryConfigurationResponse *_p = ::soap_new__tds__GetPasswordHistoryConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPasswordHistoryConfigurationResponse::Enabled = Enabled;
		_p->_tds__GetPasswordHistoryConfigurationResponse::Length = Length;
	}
	return _p;
}

inline int soap_write__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, _tds__GetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPasswordHistoryConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetPasswordHistoryConfigurationResponse(struct soap*, _tds__GetPasswordHistoryConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, _tds__GetPasswordHistoryConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPasswordHistoryConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPasswordHistoryConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPasswordHistoryConfigurationResponse(struct soap *soap, _tds__GetPasswordHistoryConfigurationResponse *p)
{
	if (::soap_read__tds__GetPasswordHistoryConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPasswordHistoryConfiguration_DEFINED
#define SOAP_TYPE__tds__GetPasswordHistoryConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPasswordHistoryConfiguration(struct soap*, const char*, int, const _tds__GetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC3 _tds__GetPasswordHistoryConfiguration * SOAP_FMAC4 soap_in__tds__GetPasswordHistoryConfiguration(struct soap*, const char*, _tds__GetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC1 _tds__GetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPasswordHistoryConfiguration * soap_new__tds__GetPasswordHistoryConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPasswordHistoryConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPasswordHistoryConfiguration * soap_new_req__tds__GetPasswordHistoryConfiguration(
	struct soap *soap)
{
	_tds__GetPasswordHistoryConfiguration *_p = ::soap_new__tds__GetPasswordHistoryConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetPasswordHistoryConfiguration * soap_new_set__tds__GetPasswordHistoryConfiguration(
	struct soap *soap)
{
	_tds__GetPasswordHistoryConfiguration *_p = ::soap_new__tds__GetPasswordHistoryConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetPasswordHistoryConfiguration(struct soap *soap, _tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordHistoryConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordHistoryConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPasswordHistoryConfiguration * SOAP_FMAC4 soap_get__tds__GetPasswordHistoryConfiguration(struct soap*, _tds__GetPasswordHistoryConfiguration *, const char*, const char*);

inline int soap_read__tds__GetPasswordHistoryConfiguration(struct soap *soap, _tds__GetPasswordHistoryConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPasswordHistoryConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordHistoryConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPasswordHistoryConfiguration(struct soap *soap, _tds__GetPasswordHistoryConfiguration *p)
{
	if (::soap_read__tds__GetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetPasswordComplexityConfigurationResponse(struct soap*, const char*, int, const _tds__SetPasswordComplexityConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__SetPasswordComplexityConfigurationResponse * SOAP_FMAC4 soap_in__tds__SetPasswordComplexityConfigurationResponse(struct soap*, const char*, _tds__SetPasswordComplexityConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__SetPasswordComplexityConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__SetPasswordComplexityConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetPasswordComplexityConfigurationResponse * soap_new__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetPasswordComplexityConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetPasswordComplexityConfigurationResponse * soap_new_req__tds__SetPasswordComplexityConfigurationResponse(
	struct soap *soap)
{
	_tds__SetPasswordComplexityConfigurationResponse *_p = ::soap_new__tds__SetPasswordComplexityConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetPasswordComplexityConfigurationResponse * soap_new_set__tds__SetPasswordComplexityConfigurationResponse(
	struct soap *soap)
{
	_tds__SetPasswordComplexityConfigurationResponse *_p = ::soap_new__tds__SetPasswordComplexityConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, _tds__SetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetPasswordComplexityConfigurationResponse * SOAP_FMAC4 soap_get__tds__SetPasswordComplexityConfigurationResponse(struct soap*, _tds__SetPasswordComplexityConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, _tds__SetPasswordComplexityConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetPasswordComplexityConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetPasswordComplexityConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetPasswordComplexityConfigurationResponse(struct soap *soap, _tds__SetPasswordComplexityConfigurationResponse *p)
{
	if (::soap_read__tds__SetPasswordComplexityConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetPasswordComplexityConfiguration_DEFINED
#define SOAP_TYPE__tds__SetPasswordComplexityConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetPasswordComplexityConfiguration(struct soap*, const char*, int, const _tds__SetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC3 _tds__SetPasswordComplexityConfiguration * SOAP_FMAC4 soap_in__tds__SetPasswordComplexityConfiguration(struct soap*, const char*, _tds__SetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC1 _tds__SetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate__tds__SetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetPasswordComplexityConfiguration * soap_new__tds__SetPasswordComplexityConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetPasswordComplexityConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__SetPasswordComplexityConfiguration * soap_new_req__tds__SetPasswordComplexityConfiguration(
	struct soap *soap)
{
	_tds__SetPasswordComplexityConfiguration *_p = ::soap_new__tds__SetPasswordComplexityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetPasswordComplexityConfiguration * soap_new_set__tds__SetPasswordComplexityConfiguration(
	struct soap *soap,
	int *MinLen,
	int *Uppercase,
	int *Number,
	int *SpecialChars,
	bool *BlockUsernameOccurrence,
	bool *PolicyConfigurationLocked)
{
	_tds__SetPasswordComplexityConfiguration *_p = ::soap_new__tds__SetPasswordComplexityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetPasswordComplexityConfiguration::MinLen = MinLen;
		_p->_tds__SetPasswordComplexityConfiguration::Uppercase = Uppercase;
		_p->_tds__SetPasswordComplexityConfiguration::Number = Number;
		_p->_tds__SetPasswordComplexityConfiguration::SpecialChars = SpecialChars;
		_p->_tds__SetPasswordComplexityConfiguration::BlockUsernameOccurrence = BlockUsernameOccurrence;
		_p->_tds__SetPasswordComplexityConfiguration::PolicyConfigurationLocked = PolicyConfigurationLocked;
	}
	return _p;
}

inline int soap_write__tds__SetPasswordComplexityConfiguration(struct soap *soap, _tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__SetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetPasswordComplexityConfiguration * SOAP_FMAC4 soap_get__tds__SetPasswordComplexityConfiguration(struct soap*, _tds__SetPasswordComplexityConfiguration *, const char*, const char*);

inline int soap_read__tds__SetPasswordComplexityConfiguration(struct soap *soap, _tds__SetPasswordComplexityConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetPasswordComplexityConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__SetPasswordComplexityConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetPasswordComplexityConfiguration(struct soap *soap, _tds__SetPasswordComplexityConfiguration *p)
{
	if (::soap_read__tds__SetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse_DEFINED
#define SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPasswordComplexityConfigurationResponse(struct soap*, const char*, int, const _tds__GetPasswordComplexityConfigurationResponse *, const char*);
SOAP_FMAC3 _tds__GetPasswordComplexityConfigurationResponse * SOAP_FMAC4 soap_in__tds__GetPasswordComplexityConfigurationResponse(struct soap*, const char*, _tds__GetPasswordComplexityConfigurationResponse *, const char*);
SOAP_FMAC1 _tds__GetPasswordComplexityConfigurationResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPasswordComplexityConfigurationResponse * soap_new__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPasswordComplexityConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPasswordComplexityConfigurationResponse * soap_new_req__tds__GetPasswordComplexityConfigurationResponse(
	struct soap *soap)
{
	_tds__GetPasswordComplexityConfigurationResponse *_p = ::soap_new__tds__GetPasswordComplexityConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetPasswordComplexityConfigurationResponse * soap_new_set__tds__GetPasswordComplexityConfigurationResponse(
	struct soap *soap,
	int *MinLen,
	int *Uppercase,
	int *Number,
	int *SpecialChars,
	bool *BlockUsernameOccurrence,
	bool *PolicyConfigurationLocked)
{
	_tds__GetPasswordComplexityConfigurationResponse *_p = ::soap_new__tds__GetPasswordComplexityConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPasswordComplexityConfigurationResponse::MinLen = MinLen;
		_p->_tds__GetPasswordComplexityConfigurationResponse::Uppercase = Uppercase;
		_p->_tds__GetPasswordComplexityConfigurationResponse::Number = Number;
		_p->_tds__GetPasswordComplexityConfigurationResponse::SpecialChars = SpecialChars;
		_p->_tds__GetPasswordComplexityConfigurationResponse::BlockUsernameOccurrence = BlockUsernameOccurrence;
		_p->_tds__GetPasswordComplexityConfigurationResponse::PolicyConfigurationLocked = PolicyConfigurationLocked;
	}
	return _p;
}

inline int soap_write__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, _tds__GetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfigurationResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPasswordComplexityConfigurationResponse * SOAP_FMAC4 soap_get__tds__GetPasswordComplexityConfigurationResponse(struct soap*, _tds__GetPasswordComplexityConfigurationResponse *, const char*, const char*);

inline int soap_read__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, _tds__GetPasswordComplexityConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPasswordComplexityConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPasswordComplexityConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPasswordComplexityConfigurationResponse(struct soap *soap, _tds__GetPasswordComplexityConfigurationResponse *p)
{
	if (::soap_read__tds__GetPasswordComplexityConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPasswordComplexityConfiguration_DEFINED
#define SOAP_TYPE__tds__GetPasswordComplexityConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPasswordComplexityConfiguration(struct soap*, const char*, int, const _tds__GetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC3 _tds__GetPasswordComplexityConfiguration * SOAP_FMAC4 soap_in__tds__GetPasswordComplexityConfiguration(struct soap*, const char*, _tds__GetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC1 _tds__GetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPasswordComplexityConfiguration * soap_new__tds__GetPasswordComplexityConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPasswordComplexityConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPasswordComplexityConfiguration * soap_new_req__tds__GetPasswordComplexityConfiguration(
	struct soap *soap)
{
	_tds__GetPasswordComplexityConfiguration *_p = ::soap_new__tds__GetPasswordComplexityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetPasswordComplexityConfiguration * soap_new_set__tds__GetPasswordComplexityConfiguration(
	struct soap *soap)
{
	_tds__GetPasswordComplexityConfiguration *_p = ::soap_new__tds__GetPasswordComplexityConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetPasswordComplexityConfiguration(struct soap *soap, _tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityConfiguration", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPasswordComplexityConfiguration * SOAP_FMAC4 soap_get__tds__GetPasswordComplexityConfiguration(struct soap*, _tds__GetPasswordComplexityConfiguration *, const char*, const char*);

inline int soap_read__tds__GetPasswordComplexityConfiguration(struct soap *soap, _tds__GetPasswordComplexityConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPasswordComplexityConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, _tds__GetPasswordComplexityConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPasswordComplexityConfiguration(struct soap *soap, _tds__GetPasswordComplexityConfiguration *p)
{
	if (::soap_read__tds__GetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse_DEFINED
#define SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPasswordComplexityOptionsResponse(struct soap*, const char*, int, const _tds__GetPasswordComplexityOptionsResponse *, const char*);
SOAP_FMAC3 _tds__GetPasswordComplexityOptionsResponse * SOAP_FMAC4 soap_in__tds__GetPasswordComplexityOptionsResponse(struct soap*, const char*, _tds__GetPasswordComplexityOptionsResponse *, const char*);
SOAP_FMAC1 _tds__GetPasswordComplexityOptionsResponse * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPasswordComplexityOptionsResponse * soap_new__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPasswordComplexityOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPasswordComplexityOptionsResponse * soap_new_req__tds__GetPasswordComplexityOptionsResponse(
	struct soap *soap)
{
	_tds__GetPasswordComplexityOptionsResponse *_p = ::soap_new__tds__GetPasswordComplexityOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetPasswordComplexityOptionsResponse * soap_new_set__tds__GetPasswordComplexityOptionsResponse(
	struct soap *soap,
	tt__IntRange *MinLenRange,
	tt__IntRange *UppercaseRange,
	tt__IntRange *NumberRange,
	tt__IntRange *SpecialCharsRange,
	bool *BlockUsernameOccurrenceSupported,
	bool *PolicyConfigurationLockSupported)
{
	_tds__GetPasswordComplexityOptionsResponse *_p = ::soap_new__tds__GetPasswordComplexityOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetPasswordComplexityOptionsResponse::MinLenRange = MinLenRange;
		_p->_tds__GetPasswordComplexityOptionsResponse::UppercaseRange = UppercaseRange;
		_p->_tds__GetPasswordComplexityOptionsResponse::NumberRange = NumberRange;
		_p->_tds__GetPasswordComplexityOptionsResponse::SpecialCharsRange = SpecialCharsRange;
		_p->_tds__GetPasswordComplexityOptionsResponse::BlockUsernameOccurrenceSupported = BlockUsernameOccurrenceSupported;
		_p->_tds__GetPasswordComplexityOptionsResponse::PolicyConfigurationLockSupported = PolicyConfigurationLockSupported;
	}
	return _p;
}

inline int soap_write__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, _tds__GetPasswordComplexityOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptionsResponse", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPasswordComplexityOptionsResponse * SOAP_FMAC4 soap_get__tds__GetPasswordComplexityOptionsResponse(struct soap*, _tds__GetPasswordComplexityOptionsResponse *, const char*, const char*);

inline int soap_read__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, _tds__GetPasswordComplexityOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPasswordComplexityOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPasswordComplexityOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPasswordComplexityOptionsResponse(struct soap *soap, _tds__GetPasswordComplexityOptionsResponse *p)
{
	if (::soap_read__tds__GetPasswordComplexityOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetPasswordComplexityOptions_DEFINED
#define SOAP_TYPE__tds__GetPasswordComplexityOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetPasswordComplexityOptions(struct soap*, const char*, int, const _tds__GetPasswordComplexityOptions *, const char*);
SOAP_FMAC3 _tds__GetPasswordComplexityOptions * SOAP_FMAC4 soap_in__tds__GetPasswordComplexityOptions(struct soap*, const char*, _tds__GetPasswordComplexityOptions *, const char*);
SOAP_FMAC1 _tds__GetPasswordComplexityOptions * SOAP_FMAC2 soap_instantiate__tds__GetPasswordComplexityOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetPasswordComplexityOptions * soap_new__tds__GetPasswordComplexityOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetPasswordComplexityOptions(soap, n, NULL, NULL, NULL);
}

inline _tds__GetPasswordComplexityOptions * soap_new_req__tds__GetPasswordComplexityOptions(
	struct soap *soap)
{
	_tds__GetPasswordComplexityOptions *_p = ::soap_new__tds__GetPasswordComplexityOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetPasswordComplexityOptions * soap_new_set__tds__GetPasswordComplexityOptions(
	struct soap *soap)
{
	_tds__GetPasswordComplexityOptions *_p = ::soap_new__tds__GetPasswordComplexityOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetPasswordComplexityOptions(struct soap *soap, _tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptions", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptions", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptions", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetPasswordComplexityOptions", p->soap_type() == SOAP_TYPE__tds__GetPasswordComplexityOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetPasswordComplexityOptions * SOAP_FMAC4 soap_get__tds__GetPasswordComplexityOptions(struct soap*, _tds__GetPasswordComplexityOptions *, const char*, const char*);

inline int soap_read__tds__GetPasswordComplexityOptions(struct soap *soap, _tds__GetPasswordComplexityOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetPasswordComplexityOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, _tds__GetPasswordComplexityOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetPasswordComplexityOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetPasswordComplexityOptions(struct soap *soap, _tds__GetPasswordComplexityOptions *p)
{
	if (::soap_read__tds__GetPasswordComplexityOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse_DEFINED
#define SOAP_TYPE__tds__GetWsdlUrlResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetWsdlUrlResponse(struct soap*, const char*, int, const _tds__GetWsdlUrlResponse *, const char*);
SOAP_FMAC3 _tds__GetWsdlUrlResponse * SOAP_FMAC4 soap_in__tds__GetWsdlUrlResponse(struct soap*, const char*, _tds__GetWsdlUrlResponse *, const char*);
SOAP_FMAC1 _tds__GetWsdlUrlResponse * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetWsdlUrlResponse * soap_new__tds__GetWsdlUrlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetWsdlUrlResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetWsdlUrlResponse * soap_new_req__tds__GetWsdlUrlResponse(
	struct soap *soap,
	const std::string& WsdlUrl)
{
	_tds__GetWsdlUrlResponse *_p = ::soap_new__tds__GetWsdlUrlResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetWsdlUrlResponse::WsdlUrl = WsdlUrl;
	}
	return _p;
}

inline _tds__GetWsdlUrlResponse * soap_new_set__tds__GetWsdlUrlResponse(
	struct soap *soap,
	const std::string& WsdlUrl)
{
	_tds__GetWsdlUrlResponse *_p = ::soap_new__tds__GetWsdlUrlResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetWsdlUrlResponse::WsdlUrl = WsdlUrl;
	}
	return _p;
}

inline int soap_write__tds__GetWsdlUrlResponse(struct soap *soap, _tds__GetWsdlUrlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrlResponse", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrlResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetWsdlUrlResponse(struct soap *soap, const char *URL, _tds__GetWsdlUrlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrlResponse", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrlResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetWsdlUrlResponse(struct soap *soap, const char *URL, _tds__GetWsdlUrlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrlResponse", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrlResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetWsdlUrlResponse(struct soap *soap, const char *URL, _tds__GetWsdlUrlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrlResponse", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrlResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetWsdlUrlResponse * SOAP_FMAC4 soap_get__tds__GetWsdlUrlResponse(struct soap*, _tds__GetWsdlUrlResponse *, const char*, const char*);

inline int soap_read__tds__GetWsdlUrlResponse(struct soap *soap, _tds__GetWsdlUrlResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetWsdlUrlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetWsdlUrlResponse(struct soap *soap, const char *URL, _tds__GetWsdlUrlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetWsdlUrlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetWsdlUrlResponse(struct soap *soap, _tds__GetWsdlUrlResponse *p)
{
	if (::soap_read__tds__GetWsdlUrlResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrl_DEFINED
#define SOAP_TYPE__tds__GetWsdlUrl_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetWsdlUrl(struct soap*, const char*, int, const _tds__GetWsdlUrl *, const char*);
SOAP_FMAC3 _tds__GetWsdlUrl * SOAP_FMAC4 soap_in__tds__GetWsdlUrl(struct soap*, const char*, _tds__GetWsdlUrl *, const char*);
SOAP_FMAC1 _tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate__tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetWsdlUrl * soap_new__tds__GetWsdlUrl(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetWsdlUrl(soap, n, NULL, NULL, NULL);
}

inline _tds__GetWsdlUrl * soap_new_req__tds__GetWsdlUrl(
	struct soap *soap)
{
	_tds__GetWsdlUrl *_p = ::soap_new__tds__GetWsdlUrl(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetWsdlUrl * soap_new_set__tds__GetWsdlUrl(
	struct soap *soap)
{
	_tds__GetWsdlUrl *_p = ::soap_new__tds__GetWsdlUrl(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetWsdlUrl(struct soap *soap, _tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrl", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrl ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetWsdlUrl(struct soap *soap, const char *URL, _tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrl", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrl ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetWsdlUrl(struct soap *soap, const char *URL, _tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrl", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrl ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetWsdlUrl(struct soap *soap, const char *URL, _tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetWsdlUrl", p->soap_type() == SOAP_TYPE__tds__GetWsdlUrl ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetWsdlUrl * SOAP_FMAC4 soap_get__tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl *, const char*, const char*);

inline int soap_read__tds__GetWsdlUrl(struct soap *soap, _tds__GetWsdlUrl *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetWsdlUrl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetWsdlUrl(struct soap *soap, const char *URL, _tds__GetWsdlUrl *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetWsdlUrl(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetWsdlUrl(struct soap *soap, _tds__GetWsdlUrl *p)
{
	if (::soap_read__tds__GetWsdlUrl(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetUserResponse_DEFINED
#define SOAP_TYPE__tds__SetUserResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetUserResponse(struct soap*, const char*, int, const _tds__SetUserResponse *, const char*);
SOAP_FMAC3 _tds__SetUserResponse * SOAP_FMAC4 soap_in__tds__SetUserResponse(struct soap*, const char*, _tds__SetUserResponse *, const char*);
SOAP_FMAC1 _tds__SetUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetUserResponse * soap_new__tds__SetUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetUserResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetUserResponse * soap_new_req__tds__SetUserResponse(
	struct soap *soap)
{
	_tds__SetUserResponse *_p = ::soap_new__tds__SetUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetUserResponse * soap_new_set__tds__SetUserResponse(
	struct soap *soap)
{
	_tds__SetUserResponse *_p = ::soap_new__tds__SetUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetUserResponse(struct soap *soap, _tds__SetUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUserResponse", p->soap_type() == SOAP_TYPE__tds__SetUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetUserResponse(struct soap *soap, const char *URL, _tds__SetUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUserResponse", p->soap_type() == SOAP_TYPE__tds__SetUserResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetUserResponse(struct soap *soap, const char *URL, _tds__SetUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUserResponse", p->soap_type() == SOAP_TYPE__tds__SetUserResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetUserResponse(struct soap *soap, const char *URL, _tds__SetUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUserResponse", p->soap_type() == SOAP_TYPE__tds__SetUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetUserResponse * SOAP_FMAC4 soap_get__tds__SetUserResponse(struct soap*, _tds__SetUserResponse *, const char*, const char*);

inline int soap_read__tds__SetUserResponse(struct soap *soap, _tds__SetUserResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetUserResponse(struct soap *soap, const char *URL, _tds__SetUserResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetUserResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetUserResponse(struct soap *soap, _tds__SetUserResponse *p)
{
	if (::soap_read__tds__SetUserResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetUser_DEFINED
#define SOAP_TYPE__tds__SetUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetUser(struct soap*, const char*, int, const _tds__SetUser *, const char*);
SOAP_FMAC3 _tds__SetUser * SOAP_FMAC4 soap_in__tds__SetUser(struct soap*, const char*, _tds__SetUser *, const char*);
SOAP_FMAC1 _tds__SetUser * SOAP_FMAC2 soap_instantiate__tds__SetUser(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetUser * soap_new__tds__SetUser(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetUser(soap, n, NULL, NULL, NULL);
}

inline _tds__SetUser * soap_new_req__tds__SetUser(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__SetUser *_p = ::soap_new__tds__SetUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetUser::User = User;
	}
	return _p;
}

inline _tds__SetUser * soap_new_set__tds__SetUser(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__SetUser *_p = ::soap_new__tds__SetUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetUser::User = User;
	}
	return _p;
}

inline int soap_write__tds__SetUser(struct soap *soap, _tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUser", p->soap_type() == SOAP_TYPE__tds__SetUser ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetUser(struct soap *soap, const char *URL, _tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUser", p->soap_type() == SOAP_TYPE__tds__SetUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetUser(struct soap *soap, const char *URL, _tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUser", p->soap_type() == SOAP_TYPE__tds__SetUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetUser(struct soap *soap, const char *URL, _tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetUser", p->soap_type() == SOAP_TYPE__tds__SetUser ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetUser * SOAP_FMAC4 soap_get__tds__SetUser(struct soap*, _tds__SetUser *, const char*, const char*);

inline int soap_read__tds__SetUser(struct soap *soap, _tds__SetUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetUser(struct soap *soap, const char *URL, _tds__SetUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetUser(struct soap *soap, _tds__SetUser *p)
{
	if (::soap_read__tds__SetUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteUsersResponse_DEFINED
#define SOAP_TYPE__tds__DeleteUsersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteUsersResponse(struct soap*, const char*, int, const _tds__DeleteUsersResponse *, const char*);
SOAP_FMAC3 _tds__DeleteUsersResponse * SOAP_FMAC4 soap_in__tds__DeleteUsersResponse(struct soap*, const char*, _tds__DeleteUsersResponse *, const char*);
SOAP_FMAC1 _tds__DeleteUsersResponse * SOAP_FMAC2 soap_instantiate__tds__DeleteUsersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteUsersResponse * soap_new__tds__DeleteUsersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteUsersResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteUsersResponse * soap_new_req__tds__DeleteUsersResponse(
	struct soap *soap)
{
	_tds__DeleteUsersResponse *_p = ::soap_new__tds__DeleteUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__DeleteUsersResponse * soap_new_set__tds__DeleteUsersResponse(
	struct soap *soap)
{
	_tds__DeleteUsersResponse *_p = ::soap_new__tds__DeleteUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__DeleteUsersResponse(struct soap *soap, _tds__DeleteUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsersResponse", p->soap_type() == SOAP_TYPE__tds__DeleteUsersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteUsersResponse(struct soap *soap, const char *URL, _tds__DeleteUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsersResponse", p->soap_type() == SOAP_TYPE__tds__DeleteUsersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteUsersResponse(struct soap *soap, const char *URL, _tds__DeleteUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsersResponse", p->soap_type() == SOAP_TYPE__tds__DeleteUsersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteUsersResponse(struct soap *soap, const char *URL, _tds__DeleteUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsersResponse", p->soap_type() == SOAP_TYPE__tds__DeleteUsersResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteUsersResponse * SOAP_FMAC4 soap_get__tds__DeleteUsersResponse(struct soap*, _tds__DeleteUsersResponse *, const char*, const char*);

inline int soap_read__tds__DeleteUsersResponse(struct soap *soap, _tds__DeleteUsersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteUsersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteUsersResponse(struct soap *soap, const char *URL, _tds__DeleteUsersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteUsersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteUsersResponse(struct soap *soap, _tds__DeleteUsersResponse *p)
{
	if (::soap_read__tds__DeleteUsersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__DeleteUsers_DEFINED
#define SOAP_TYPE__tds__DeleteUsers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__DeleteUsers(struct soap*, const char*, int, const _tds__DeleteUsers *, const char*);
SOAP_FMAC3 _tds__DeleteUsers * SOAP_FMAC4 soap_in__tds__DeleteUsers(struct soap*, const char*, _tds__DeleteUsers *, const char*);
SOAP_FMAC1 _tds__DeleteUsers * SOAP_FMAC2 soap_instantiate__tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);

inline _tds__DeleteUsers * soap_new__tds__DeleteUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__DeleteUsers(soap, n, NULL, NULL, NULL);
}

inline _tds__DeleteUsers * soap_new_req__tds__DeleteUsers(
	struct soap *soap,
	const std::vector<std::string> & Username)
{
	_tds__DeleteUsers *_p = ::soap_new__tds__DeleteUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteUsers::Username = Username;
	}
	return _p;
}

inline _tds__DeleteUsers * soap_new_set__tds__DeleteUsers(
	struct soap *soap,
	const std::vector<std::string> & Username)
{
	_tds__DeleteUsers *_p = ::soap_new__tds__DeleteUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__DeleteUsers::Username = Username;
	}
	return _p;
}

inline int soap_write__tds__DeleteUsers(struct soap *soap, _tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsers", p->soap_type() == SOAP_TYPE__tds__DeleteUsers ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__DeleteUsers(struct soap *soap, const char *URL, _tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsers", p->soap_type() == SOAP_TYPE__tds__DeleteUsers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__DeleteUsers(struct soap *soap, const char *URL, _tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsers", p->soap_type() == SOAP_TYPE__tds__DeleteUsers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__DeleteUsers(struct soap *soap, const char *URL, _tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeleteUsers", p->soap_type() == SOAP_TYPE__tds__DeleteUsers ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__DeleteUsers * SOAP_FMAC4 soap_get__tds__DeleteUsers(struct soap*, _tds__DeleteUsers *, const char*, const char*);

inline int soap_read__tds__DeleteUsers(struct soap *soap, _tds__DeleteUsers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__DeleteUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__DeleteUsers(struct soap *soap, const char *URL, _tds__DeleteUsers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__DeleteUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__DeleteUsers(struct soap *soap, _tds__DeleteUsers *p)
{
	if (::soap_read__tds__DeleteUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateUsersResponse_DEFINED
#define SOAP_TYPE__tds__CreateUsersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateUsersResponse(struct soap*, const char*, int, const _tds__CreateUsersResponse *, const char*);
SOAP_FMAC3 _tds__CreateUsersResponse * SOAP_FMAC4 soap_in__tds__CreateUsersResponse(struct soap*, const char*, _tds__CreateUsersResponse *, const char*);
SOAP_FMAC1 _tds__CreateUsersResponse * SOAP_FMAC2 soap_instantiate__tds__CreateUsersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateUsersResponse * soap_new__tds__CreateUsersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateUsersResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateUsersResponse * soap_new_req__tds__CreateUsersResponse(
	struct soap *soap)
{
	_tds__CreateUsersResponse *_p = ::soap_new__tds__CreateUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__CreateUsersResponse * soap_new_set__tds__CreateUsersResponse(
	struct soap *soap)
{
	_tds__CreateUsersResponse *_p = ::soap_new__tds__CreateUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__CreateUsersResponse(struct soap *soap, _tds__CreateUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsersResponse", p->soap_type() == SOAP_TYPE__tds__CreateUsersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateUsersResponse(struct soap *soap, const char *URL, _tds__CreateUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsersResponse", p->soap_type() == SOAP_TYPE__tds__CreateUsersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateUsersResponse(struct soap *soap, const char *URL, _tds__CreateUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsersResponse", p->soap_type() == SOAP_TYPE__tds__CreateUsersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateUsersResponse(struct soap *soap, const char *URL, _tds__CreateUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsersResponse", p->soap_type() == SOAP_TYPE__tds__CreateUsersResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateUsersResponse * SOAP_FMAC4 soap_get__tds__CreateUsersResponse(struct soap*, _tds__CreateUsersResponse *, const char*, const char*);

inline int soap_read__tds__CreateUsersResponse(struct soap *soap, _tds__CreateUsersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateUsersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateUsersResponse(struct soap *soap, const char *URL, _tds__CreateUsersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateUsersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateUsersResponse(struct soap *soap, _tds__CreateUsersResponse *p)
{
	if (::soap_read__tds__CreateUsersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__CreateUsers_DEFINED
#define SOAP_TYPE__tds__CreateUsers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__CreateUsers(struct soap*, const char*, int, const _tds__CreateUsers *, const char*);
SOAP_FMAC3 _tds__CreateUsers * SOAP_FMAC4 soap_in__tds__CreateUsers(struct soap*, const char*, _tds__CreateUsers *, const char*);
SOAP_FMAC1 _tds__CreateUsers * SOAP_FMAC2 soap_instantiate__tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);

inline _tds__CreateUsers * soap_new__tds__CreateUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__CreateUsers(soap, n, NULL, NULL, NULL);
}

inline _tds__CreateUsers * soap_new_req__tds__CreateUsers(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__CreateUsers *_p = ::soap_new__tds__CreateUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateUsers::User = User;
	}
	return _p;
}

inline _tds__CreateUsers * soap_new_set__tds__CreateUsers(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__CreateUsers *_p = ::soap_new__tds__CreateUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__CreateUsers::User = User;
	}
	return _p;
}

inline int soap_write__tds__CreateUsers(struct soap *soap, _tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsers", p->soap_type() == SOAP_TYPE__tds__CreateUsers ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__CreateUsers(struct soap *soap, const char *URL, _tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsers", p->soap_type() == SOAP_TYPE__tds__CreateUsers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__CreateUsers(struct soap *soap, const char *URL, _tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsers", p->soap_type() == SOAP_TYPE__tds__CreateUsers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__CreateUsers(struct soap *soap, const char *URL, _tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:CreateUsers", p->soap_type() == SOAP_TYPE__tds__CreateUsers ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__CreateUsers * SOAP_FMAC4 soap_get__tds__CreateUsers(struct soap*, _tds__CreateUsers *, const char*, const char*);

inline int soap_read__tds__CreateUsers(struct soap *soap, _tds__CreateUsers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__CreateUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__CreateUsers(struct soap *soap, const char *URL, _tds__CreateUsers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__CreateUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__CreateUsers(struct soap *soap, _tds__CreateUsers *p)
{
	if (::soap_read__tds__CreateUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetUsersResponse_DEFINED
#define SOAP_TYPE__tds__GetUsersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetUsersResponse(struct soap*, const char*, int, const _tds__GetUsersResponse *, const char*);
SOAP_FMAC3 _tds__GetUsersResponse * SOAP_FMAC4 soap_in__tds__GetUsersResponse(struct soap*, const char*, _tds__GetUsersResponse *, const char*);
SOAP_FMAC1 _tds__GetUsersResponse * SOAP_FMAC2 soap_instantiate__tds__GetUsersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetUsersResponse * soap_new__tds__GetUsersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetUsersResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetUsersResponse * soap_new_req__tds__GetUsersResponse(
	struct soap *soap)
{
	_tds__GetUsersResponse *_p = ::soap_new__tds__GetUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetUsersResponse * soap_new_set__tds__GetUsersResponse(
	struct soap *soap,
	const std::vector<tt__User *> & User)
{
	_tds__GetUsersResponse *_p = ::soap_new__tds__GetUsersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetUsersResponse::User = User;
	}
	return _p;
}

inline int soap_write__tds__GetUsersResponse(struct soap *soap, _tds__GetUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsersResponse", p->soap_type() == SOAP_TYPE__tds__GetUsersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetUsersResponse(struct soap *soap, const char *URL, _tds__GetUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsersResponse", p->soap_type() == SOAP_TYPE__tds__GetUsersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetUsersResponse(struct soap *soap, const char *URL, _tds__GetUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsersResponse", p->soap_type() == SOAP_TYPE__tds__GetUsersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetUsersResponse(struct soap *soap, const char *URL, _tds__GetUsersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsersResponse", p->soap_type() == SOAP_TYPE__tds__GetUsersResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetUsersResponse * SOAP_FMAC4 soap_get__tds__GetUsersResponse(struct soap*, _tds__GetUsersResponse *, const char*, const char*);

inline int soap_read__tds__GetUsersResponse(struct soap *soap, _tds__GetUsersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetUsersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetUsersResponse(struct soap *soap, const char *URL, _tds__GetUsersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetUsersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetUsersResponse(struct soap *soap, _tds__GetUsersResponse *p)
{
	if (::soap_read__tds__GetUsersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetUsers_DEFINED
#define SOAP_TYPE__tds__GetUsers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetUsers(struct soap*, const char*, int, const _tds__GetUsers *, const char*);
SOAP_FMAC3 _tds__GetUsers * SOAP_FMAC4 soap_in__tds__GetUsers(struct soap*, const char*, _tds__GetUsers *, const char*);
SOAP_FMAC1 _tds__GetUsers * SOAP_FMAC2 soap_instantiate__tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetUsers * soap_new__tds__GetUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetUsers(soap, n, NULL, NULL, NULL);
}

inline _tds__GetUsers * soap_new_req__tds__GetUsers(
	struct soap *soap)
{
	_tds__GetUsers *_p = ::soap_new__tds__GetUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetUsers * soap_new_set__tds__GetUsers(
	struct soap *soap)
{
	_tds__GetUsers *_p = ::soap_new__tds__GetUsers(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetUsers(struct soap *soap, _tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsers", p->soap_type() == SOAP_TYPE__tds__GetUsers ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetUsers(struct soap *soap, const char *URL, _tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsers", p->soap_type() == SOAP_TYPE__tds__GetUsers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetUsers(struct soap *soap, const char *URL, _tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsers", p->soap_type() == SOAP_TYPE__tds__GetUsers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetUsers(struct soap *soap, const char *URL, _tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetUsers", p->soap_type() == SOAP_TYPE__tds__GetUsers ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetUsers * SOAP_FMAC4 soap_get__tds__GetUsers(struct soap*, _tds__GetUsers *, const char*, const char*);

inline int soap_read__tds__GetUsers(struct soap *soap, _tds__GetUsers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetUsers(struct soap *soap, const char *URL, _tds__GetUsers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetUsers(struct soap *soap, _tds__GetUsers *p)
{
	if (::soap_read__tds__GetUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUserResponse_DEFINED
#define SOAP_TYPE__tds__SetRemoteUserResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteUserResponse(struct soap*, const char*, int, const _tds__SetRemoteUserResponse *, const char*);
SOAP_FMAC3 _tds__SetRemoteUserResponse * SOAP_FMAC4 soap_in__tds__SetRemoteUserResponse(struct soap*, const char*, _tds__SetRemoteUserResponse *, const char*);
SOAP_FMAC1 _tds__SetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteUserResponse * soap_new__tds__SetRemoteUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteUserResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteUserResponse * soap_new_req__tds__SetRemoteUserResponse(
	struct soap *soap)
{
	_tds__SetRemoteUserResponse *_p = ::soap_new__tds__SetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRemoteUserResponse * soap_new_set__tds__SetRemoteUserResponse(
	struct soap *soap)
{
	_tds__SetRemoteUserResponse *_p = ::soap_new__tds__SetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRemoteUserResponse(struct soap *soap, _tds__SetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRemoteUserResponse(struct soap *soap, const char *URL, _tds__SetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteUserResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRemoteUserResponse(struct soap *soap, const char *URL, _tds__SetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteUserResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRemoteUserResponse(struct soap *soap, const char *URL, _tds__SetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteUserResponse * SOAP_FMAC4 soap_get__tds__SetRemoteUserResponse(struct soap*, _tds__SetRemoteUserResponse *, const char*, const char*);

inline int soap_read__tds__SetRemoteUserResponse(struct soap *soap, _tds__SetRemoteUserResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRemoteUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRemoteUserResponse(struct soap *soap, const char *URL, _tds__SetRemoteUserResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRemoteUserResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRemoteUserResponse(struct soap *soap, _tds__SetRemoteUserResponse *p)
{
	if (::soap_read__tds__SetRemoteUserResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUser_DEFINED
#define SOAP_TYPE__tds__SetRemoteUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteUser(struct soap*, const char*, int, const _tds__SetRemoteUser *, const char*);
SOAP_FMAC3 _tds__SetRemoteUser * SOAP_FMAC4 soap_in__tds__SetRemoteUser(struct soap*, const char*, _tds__SetRemoteUser *, const char*);
SOAP_FMAC1 _tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteUser * soap_new__tds__SetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteUser * soap_new_req__tds__SetRemoteUser(
	struct soap *soap)
{
	_tds__SetRemoteUser *_p = ::soap_new__tds__SetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRemoteUser * soap_new_set__tds__SetRemoteUser(
	struct soap *soap,
	tt__RemoteUser *RemoteUser)
{
	_tds__SetRemoteUser *_p = ::soap_new__tds__SetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRemoteUser::RemoteUser = RemoteUser;
	}
	return _p;
}

inline int soap_write__tds__SetRemoteUser(struct soap *soap, _tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUser", p->soap_type() == SOAP_TYPE__tds__SetRemoteUser ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRemoteUser(struct soap *soap, const char *URL, _tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUser", p->soap_type() == SOAP_TYPE__tds__SetRemoteUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRemoteUser(struct soap *soap, const char *URL, _tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUser", p->soap_type() == SOAP_TYPE__tds__SetRemoteUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRemoteUser(struct soap *soap, const char *URL, _tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteUser", p->soap_type() == SOAP_TYPE__tds__SetRemoteUser ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteUser * SOAP_FMAC4 soap_get__tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser *, const char*, const char*);

inline int soap_read__tds__SetRemoteUser(struct soap *soap, _tds__SetRemoteUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRemoteUser(struct soap *soap, const char *URL, _tds__SetRemoteUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRemoteUser(struct soap *soap, _tds__SetRemoteUser *p)
{
	if (::soap_read__tds__SetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUserResponse_DEFINED
#define SOAP_TYPE__tds__GetRemoteUserResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteUserResponse(struct soap*, const char*, int, const _tds__GetRemoteUserResponse *, const char*);
SOAP_FMAC3 _tds__GetRemoteUserResponse * SOAP_FMAC4 soap_in__tds__GetRemoteUserResponse(struct soap*, const char*, _tds__GetRemoteUserResponse *, const char*);
SOAP_FMAC1 _tds__GetRemoteUserResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteUserResponse * soap_new__tds__GetRemoteUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteUserResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteUserResponse * soap_new_req__tds__GetRemoteUserResponse(
	struct soap *soap)
{
	_tds__GetRemoteUserResponse *_p = ::soap_new__tds__GetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRemoteUserResponse * soap_new_set__tds__GetRemoteUserResponse(
	struct soap *soap,
	tt__RemoteUser *RemoteUser)
{
	_tds__GetRemoteUserResponse *_p = ::soap_new__tds__GetRemoteUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRemoteUserResponse::RemoteUser = RemoteUser;
	}
	return _p;
}

inline int soap_write__tds__GetRemoteUserResponse(struct soap *soap, _tds__GetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetRemoteUserResponse(struct soap *soap, const char *URL, _tds__GetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteUserResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetRemoteUserResponse(struct soap *soap, const char *URL, _tds__GetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteUserResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetRemoteUserResponse(struct soap *soap, const char *URL, _tds__GetRemoteUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUserResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteUserResponse * SOAP_FMAC4 soap_get__tds__GetRemoteUserResponse(struct soap*, _tds__GetRemoteUserResponse *, const char*, const char*);

inline int soap_read__tds__GetRemoteUserResponse(struct soap *soap, _tds__GetRemoteUserResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetRemoteUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetRemoteUserResponse(struct soap *soap, const char *URL, _tds__GetRemoteUserResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetRemoteUserResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetRemoteUserResponse(struct soap *soap, _tds__GetRemoteUserResponse *p)
{
	if (::soap_read__tds__GetRemoteUserResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUser_DEFINED
#define SOAP_TYPE__tds__GetRemoteUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteUser(struct soap*, const char*, int, const _tds__GetRemoteUser *, const char*);
SOAP_FMAC3 _tds__GetRemoteUser * SOAP_FMAC4 soap_in__tds__GetRemoteUser(struct soap*, const char*, _tds__GetRemoteUser *, const char*);
SOAP_FMAC1 _tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate__tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteUser * soap_new__tds__GetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteUser * soap_new_req__tds__GetRemoteUser(
	struct soap *soap)
{
	_tds__GetRemoteUser *_p = ::soap_new__tds__GetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRemoteUser * soap_new_set__tds__GetRemoteUser(
	struct soap *soap)
{
	_tds__GetRemoteUser *_p = ::soap_new__tds__GetRemoteUser(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetRemoteUser(struct soap *soap, _tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUser", p->soap_type() == SOAP_TYPE__tds__GetRemoteUser ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetRemoteUser(struct soap *soap, const char *URL, _tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUser", p->soap_type() == SOAP_TYPE__tds__GetRemoteUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetRemoteUser(struct soap *soap, const char *URL, _tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUser", p->soap_type() == SOAP_TYPE__tds__GetRemoteUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetRemoteUser(struct soap *soap, const char *URL, _tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteUser", p->soap_type() == SOAP_TYPE__tds__GetRemoteUser ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteUser * SOAP_FMAC4 soap_get__tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser *, const char*, const char*);

inline int soap_read__tds__GetRemoteUser(struct soap *soap, _tds__GetRemoteUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetRemoteUser(struct soap *soap, const char *URL, _tds__GetRemoteUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetRemoteUser(struct soap *soap, _tds__GetRemoteUser *p)
{
	if (::soap_read__tds__GetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse_DEFINED
#define SOAP_TYPE__tds__GetEndpointReferenceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetEndpointReferenceResponse(struct soap*, const char*, int, const _tds__GetEndpointReferenceResponse *, const char*);
SOAP_FMAC3 _tds__GetEndpointReferenceResponse * SOAP_FMAC4 soap_in__tds__GetEndpointReferenceResponse(struct soap*, const char*, _tds__GetEndpointReferenceResponse *, const char*);
SOAP_FMAC1 _tds__GetEndpointReferenceResponse * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReferenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetEndpointReferenceResponse * soap_new__tds__GetEndpointReferenceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetEndpointReferenceResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetEndpointReferenceResponse * soap_new_req__tds__GetEndpointReferenceResponse(
	struct soap *soap,
	const std::string& GUID)
{
	_tds__GetEndpointReferenceResponse *_p = ::soap_new__tds__GetEndpointReferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetEndpointReferenceResponse::GUID = GUID;
	}
	return _p;
}

inline _tds__GetEndpointReferenceResponse * soap_new_set__tds__GetEndpointReferenceResponse(
	struct soap *soap,
	const std::string& GUID)
{
	_tds__GetEndpointReferenceResponse *_p = ::soap_new__tds__GetEndpointReferenceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetEndpointReferenceResponse::GUID = GUID;
	}
	return _p;
}

inline int soap_write__tds__GetEndpointReferenceResponse(struct soap *soap, _tds__GetEndpointReferenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReferenceResponse", p->soap_type() == SOAP_TYPE__tds__GetEndpointReferenceResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetEndpointReferenceResponse(struct soap *soap, const char *URL, _tds__GetEndpointReferenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReferenceResponse", p->soap_type() == SOAP_TYPE__tds__GetEndpointReferenceResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetEndpointReferenceResponse(struct soap *soap, const char *URL, _tds__GetEndpointReferenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReferenceResponse", p->soap_type() == SOAP_TYPE__tds__GetEndpointReferenceResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetEndpointReferenceResponse(struct soap *soap, const char *URL, _tds__GetEndpointReferenceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReferenceResponse", p->soap_type() == SOAP_TYPE__tds__GetEndpointReferenceResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetEndpointReferenceResponse * SOAP_FMAC4 soap_get__tds__GetEndpointReferenceResponse(struct soap*, _tds__GetEndpointReferenceResponse *, const char*, const char*);

inline int soap_read__tds__GetEndpointReferenceResponse(struct soap *soap, _tds__GetEndpointReferenceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetEndpointReferenceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetEndpointReferenceResponse(struct soap *soap, const char *URL, _tds__GetEndpointReferenceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetEndpointReferenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetEndpointReferenceResponse(struct soap *soap, _tds__GetEndpointReferenceResponse *p)
{
	if (::soap_read__tds__GetEndpointReferenceResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReference_DEFINED
#define SOAP_TYPE__tds__GetEndpointReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetEndpointReference(struct soap*, const char*, int, const _tds__GetEndpointReference *, const char*);
SOAP_FMAC3 _tds__GetEndpointReference * SOAP_FMAC4 soap_in__tds__GetEndpointReference(struct soap*, const char*, _tds__GetEndpointReference *, const char*);
SOAP_FMAC1 _tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate__tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetEndpointReference * soap_new__tds__GetEndpointReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetEndpointReference(soap, n, NULL, NULL, NULL);
}

inline _tds__GetEndpointReference * soap_new_req__tds__GetEndpointReference(
	struct soap *soap)
{
	_tds__GetEndpointReference *_p = ::soap_new__tds__GetEndpointReference(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetEndpointReference * soap_new_set__tds__GetEndpointReference(
	struct soap *soap)
{
	_tds__GetEndpointReference *_p = ::soap_new__tds__GetEndpointReference(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetEndpointReference(struct soap *soap, _tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReference", p->soap_type() == SOAP_TYPE__tds__GetEndpointReference ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetEndpointReference(struct soap *soap, const char *URL, _tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReference", p->soap_type() == SOAP_TYPE__tds__GetEndpointReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetEndpointReference(struct soap *soap, const char *URL, _tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReference", p->soap_type() == SOAP_TYPE__tds__GetEndpointReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetEndpointReference(struct soap *soap, const char *URL, _tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetEndpointReference", p->soap_type() == SOAP_TYPE__tds__GetEndpointReference ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetEndpointReference * SOAP_FMAC4 soap_get__tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference *, const char*, const char*);

inline int soap_read__tds__GetEndpointReference(struct soap *soap, _tds__GetEndpointReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetEndpointReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetEndpointReference(struct soap *soap, const char *URL, _tds__GetEndpointReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetEndpointReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetEndpointReference(struct soap *soap, _tds__GetEndpointReference *p)
{
	if (::soap_read__tds__GetEndpointReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDPAddressesResponse_DEFINED
#define SOAP_TYPE__tds__SetDPAddressesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDPAddressesResponse(struct soap*, const char*, int, const _tds__SetDPAddressesResponse *, const char*);
SOAP_FMAC3 _tds__SetDPAddressesResponse * SOAP_FMAC4 soap_in__tds__SetDPAddressesResponse(struct soap*, const char*, _tds__SetDPAddressesResponse *, const char*);
SOAP_FMAC1 _tds__SetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__SetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDPAddressesResponse * soap_new__tds__SetDPAddressesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDPAddressesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDPAddressesResponse * soap_new_req__tds__SetDPAddressesResponse(
	struct soap *soap)
{
	_tds__SetDPAddressesResponse *_p = ::soap_new__tds__SetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDPAddressesResponse * soap_new_set__tds__SetDPAddressesResponse(
	struct soap *soap)
{
	_tds__SetDPAddressesResponse *_p = ::soap_new__tds__SetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDPAddressesResponse(struct soap *soap, _tds__SetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__SetDPAddressesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDPAddressesResponse(struct soap *soap, const char *URL, _tds__SetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__SetDPAddressesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDPAddressesResponse(struct soap *soap, const char *URL, _tds__SetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__SetDPAddressesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDPAddressesResponse(struct soap *soap, const char *URL, _tds__SetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__SetDPAddressesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDPAddressesResponse * SOAP_FMAC4 soap_get__tds__SetDPAddressesResponse(struct soap*, _tds__SetDPAddressesResponse *, const char*, const char*);

inline int soap_read__tds__SetDPAddressesResponse(struct soap *soap, _tds__SetDPAddressesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDPAddressesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDPAddressesResponse(struct soap *soap, const char *URL, _tds__SetDPAddressesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDPAddressesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDPAddressesResponse(struct soap *soap, _tds__SetDPAddressesResponse *p)
{
	if (::soap_read__tds__SetDPAddressesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDPAddresses_DEFINED
#define SOAP_TYPE__tds__SetDPAddresses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDPAddresses(struct soap*, const char*, int, const _tds__SetDPAddresses *, const char*);
SOAP_FMAC3 _tds__SetDPAddresses * SOAP_FMAC4 soap_in__tds__SetDPAddresses(struct soap*, const char*, _tds__SetDPAddresses *, const char*);
SOAP_FMAC1 _tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDPAddresses * soap_new__tds__SetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDPAddresses * soap_new_req__tds__SetDPAddresses(
	struct soap *soap)
{
	_tds__SetDPAddresses *_p = ::soap_new__tds__SetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDPAddresses * soap_new_set__tds__SetDPAddresses(
	struct soap *soap,
	const std::vector<tt__NetworkHost *> & DPAddress)
{
	_tds__SetDPAddresses *_p = ::soap_new__tds__SetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDPAddresses::DPAddress = DPAddress;
	}
	return _p;
}

inline int soap_write__tds__SetDPAddresses(struct soap *soap, _tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddresses", p->soap_type() == SOAP_TYPE__tds__SetDPAddresses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDPAddresses(struct soap *soap, const char *URL, _tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddresses", p->soap_type() == SOAP_TYPE__tds__SetDPAddresses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDPAddresses(struct soap *soap, const char *URL, _tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddresses", p->soap_type() == SOAP_TYPE__tds__SetDPAddresses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDPAddresses(struct soap *soap, const char *URL, _tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDPAddresses", p->soap_type() == SOAP_TYPE__tds__SetDPAddresses ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDPAddresses * SOAP_FMAC4 soap_get__tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses *, const char*, const char*);

inline int soap_read__tds__SetDPAddresses(struct soap *soap, _tds__SetDPAddresses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDPAddresses(struct soap *soap, const char *URL, _tds__SetDPAddresses *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDPAddresses(struct soap *soap, _tds__SetDPAddresses *p)
{
	if (::soap_read__tds__SetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDPAddressesResponse_DEFINED
#define SOAP_TYPE__tds__GetDPAddressesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDPAddressesResponse(struct soap*, const char*, int, const _tds__GetDPAddressesResponse *, const char*);
SOAP_FMAC3 _tds__GetDPAddressesResponse * SOAP_FMAC4 soap_in__tds__GetDPAddressesResponse(struct soap*, const char*, _tds__GetDPAddressesResponse *, const char*);
SOAP_FMAC1 _tds__GetDPAddressesResponse * SOAP_FMAC2 soap_instantiate__tds__GetDPAddressesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDPAddressesResponse * soap_new__tds__GetDPAddressesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDPAddressesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDPAddressesResponse * soap_new_req__tds__GetDPAddressesResponse(
	struct soap *soap)
{
	_tds__GetDPAddressesResponse *_p = ::soap_new__tds__GetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDPAddressesResponse * soap_new_set__tds__GetDPAddressesResponse(
	struct soap *soap,
	const std::vector<tt__NetworkHost *> & DPAddress)
{
	_tds__GetDPAddressesResponse *_p = ::soap_new__tds__GetDPAddressesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDPAddressesResponse::DPAddress = DPAddress;
	}
	return _p;
}

inline int soap_write__tds__GetDPAddressesResponse(struct soap *soap, _tds__GetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__GetDPAddressesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDPAddressesResponse(struct soap *soap, const char *URL, _tds__GetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__GetDPAddressesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDPAddressesResponse(struct soap *soap, const char *URL, _tds__GetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__GetDPAddressesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDPAddressesResponse(struct soap *soap, const char *URL, _tds__GetDPAddressesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddressesResponse", p->soap_type() == SOAP_TYPE__tds__GetDPAddressesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDPAddressesResponse * SOAP_FMAC4 soap_get__tds__GetDPAddressesResponse(struct soap*, _tds__GetDPAddressesResponse *, const char*, const char*);

inline int soap_read__tds__GetDPAddressesResponse(struct soap *soap, _tds__GetDPAddressesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDPAddressesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDPAddressesResponse(struct soap *soap, const char *URL, _tds__GetDPAddressesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDPAddressesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDPAddressesResponse(struct soap *soap, _tds__GetDPAddressesResponse *p)
{
	if (::soap_read__tds__GetDPAddressesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDPAddresses_DEFINED
#define SOAP_TYPE__tds__GetDPAddresses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDPAddresses(struct soap*, const char*, int, const _tds__GetDPAddresses *, const char*);
SOAP_FMAC3 _tds__GetDPAddresses * SOAP_FMAC4 soap_in__tds__GetDPAddresses(struct soap*, const char*, _tds__GetDPAddresses *, const char*);
SOAP_FMAC1 _tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate__tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDPAddresses * soap_new__tds__GetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDPAddresses * soap_new_req__tds__GetDPAddresses(
	struct soap *soap)
{
	_tds__GetDPAddresses *_p = ::soap_new__tds__GetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDPAddresses * soap_new_set__tds__GetDPAddresses(
	struct soap *soap)
{
	_tds__GetDPAddresses *_p = ::soap_new__tds__GetDPAddresses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDPAddresses(struct soap *soap, _tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddresses", p->soap_type() == SOAP_TYPE__tds__GetDPAddresses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDPAddresses(struct soap *soap, const char *URL, _tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddresses", p->soap_type() == SOAP_TYPE__tds__GetDPAddresses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDPAddresses(struct soap *soap, const char *URL, _tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddresses", p->soap_type() == SOAP_TYPE__tds__GetDPAddresses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDPAddresses(struct soap *soap, const char *URL, _tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDPAddresses", p->soap_type() == SOAP_TYPE__tds__GetDPAddresses ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDPAddresses * SOAP_FMAC4 soap_get__tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses *, const char*, const char*);

inline int soap_read__tds__GetDPAddresses(struct soap *soap, _tds__GetDPAddresses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDPAddresses(struct soap *soap, const char *URL, _tds__GetDPAddresses *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDPAddresses(struct soap *soap, _tds__GetDPAddresses *p)
{
	if (::soap_read__tds__GetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteDiscoveryModeResponse(struct soap*, const char*, int, const _tds__SetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__SetRemoteDiscoveryModeResponse(struct soap*, const char*, _tds__SetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteDiscoveryModeResponse * soap_new__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteDiscoveryModeResponse * soap_new_req__tds__SetRemoteDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetRemoteDiscoveryModeResponse *_p = ::soap_new__tds__SetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetRemoteDiscoveryModeResponse * soap_new_set__tds__SetRemoteDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetRemoteDiscoveryModeResponse *_p = ::soap_new__tds__SetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, _tds__SetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__SetRemoteDiscoveryModeResponse(struct soap*, _tds__SetRemoteDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, _tds__SetRemoteDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRemoteDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRemoteDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRemoteDiscoveryModeResponse(struct soap *soap, _tds__SetRemoteDiscoveryModeResponse *p)
{
	if (::soap_read__tds__SetRemoteDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetRemoteDiscoveryMode(struct soap*, const char*, int, const _tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_in__tds__SetRemoteDiscoveryMode(struct soap*, const char*, _tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetRemoteDiscoveryMode * soap_new__tds__SetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__SetRemoteDiscoveryMode * soap_new_req__tds__SetRemoteDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__SetRemoteDiscoveryMode *_p = ::soap_new__tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRemoteDiscoveryMode::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline _tds__SetRemoteDiscoveryMode * soap_new_set__tds__SetRemoteDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__SetRemoteDiscoveryMode *_p = ::soap_new__tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetRemoteDiscoveryMode::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__SetRemoteDiscoveryMode(struct soap *soap, _tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_get__tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__SetRemoteDiscoveryMode(struct soap *soap, _tds__SetRemoteDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__SetRemoteDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetRemoteDiscoveryMode(struct soap *soap, _tds__SetRemoteDiscoveryMode *p)
{
	if (::soap_read__tds__SetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteDiscoveryModeResponse(struct soap*, const char*, int, const _tds__GetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__GetRemoteDiscoveryModeResponse(struct soap*, const char*, _tds__GetRemoteDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteDiscoveryModeResponse * soap_new__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteDiscoveryModeResponse * soap_new_req__tds__GetRemoteDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__GetRemoteDiscoveryModeResponse *_p = ::soap_new__tds__GetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRemoteDiscoveryModeResponse::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline _tds__GetRemoteDiscoveryModeResponse * soap_new_set__tds__GetRemoteDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode RemoteDiscoveryMode)
{
	_tds__GetRemoteDiscoveryModeResponse *_p = ::soap_new__tds__GetRemoteDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetRemoteDiscoveryModeResponse::RemoteDiscoveryMode = RemoteDiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, _tds__GetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__GetRemoteDiscoveryModeResponse(struct soap*, _tds__GetRemoteDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, _tds__GetRemoteDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetRemoteDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetRemoteDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetRemoteDiscoveryModeResponse(struct soap *soap, _tds__GetRemoteDiscoveryModeResponse *p)
{
	if (::soap_read__tds__GetRemoteDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetRemoteDiscoveryMode(struct soap*, const char*, int, const _tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_in__tds__GetRemoteDiscoveryMode(struct soap*, const char*, _tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetRemoteDiscoveryMode * soap_new__tds__GetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__GetRemoteDiscoveryMode * soap_new_req__tds__GetRemoteDiscoveryMode(
	struct soap *soap)
{
	_tds__GetRemoteDiscoveryMode *_p = ::soap_new__tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetRemoteDiscoveryMode * soap_new_set__tds__GetRemoteDiscoveryMode(
	struct soap *soap)
{
	_tds__GetRemoteDiscoveryMode *_p = ::soap_new__tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetRemoteDiscoveryMode(struct soap *soap, _tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetRemoteDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetRemoteDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_get__tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__GetRemoteDiscoveryMode(struct soap *soap, _tds__GetRemoteDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, _tds__GetRemoteDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetRemoteDiscoveryMode(struct soap *soap, _tds__GetRemoteDiscoveryMode *p)
{
	if (::soap_read__tds__GetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__SetDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDiscoveryModeResponse(struct soap*, const char*, int, const _tds__SetDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__SetDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__SetDiscoveryModeResponse(struct soap*, const char*, _tds__SetDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__SetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDiscoveryModeResponse * soap_new__tds__SetDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDiscoveryModeResponse * soap_new_req__tds__SetDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetDiscoveryModeResponse *_p = ::soap_new__tds__SetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetDiscoveryModeResponse * soap_new_set__tds__SetDiscoveryModeResponse(
	struct soap *soap)
{
	_tds__SetDiscoveryModeResponse *_p = ::soap_new__tds__SetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetDiscoveryModeResponse(struct soap *soap, _tds__SetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__SetDiscoveryModeResponse(struct soap*, _tds__SetDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__SetDiscoveryModeResponse(struct soap *soap, _tds__SetDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__SetDiscoveryModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDiscoveryModeResponse(struct soap *soap, _tds__SetDiscoveryModeResponse *p)
{
	if (::soap_read__tds__SetDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__SetDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetDiscoveryMode(struct soap*, const char*, int, const _tds__SetDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__SetDiscoveryMode * SOAP_FMAC4 soap_in__tds__SetDiscoveryMode(struct soap*, const char*, _tds__SetDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetDiscoveryMode * soap_new__tds__SetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__SetDiscoveryMode * soap_new_req__tds__SetDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__SetDiscoveryMode *_p = ::soap_new__tds__SetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDiscoveryMode::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline _tds__SetDiscoveryMode * soap_new_set__tds__SetDiscoveryMode(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__SetDiscoveryMode *_p = ::soap_new__tds__SetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetDiscoveryMode::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__SetDiscoveryMode(struct soap *soap, _tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetDiscoveryMode(struct soap *soap, const char *URL, _tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetDiscoveryMode(struct soap *soap, const char *URL, _tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetDiscoveryMode(struct soap *soap, const char *URL, _tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__SetDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetDiscoveryMode * SOAP_FMAC4 soap_get__tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__SetDiscoveryMode(struct soap *soap, _tds__SetDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetDiscoveryMode(struct soap *soap, const char *URL, _tds__SetDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetDiscoveryMode(struct soap *soap, _tds__SetDiscoveryMode *p)
{
	if (::soap_read__tds__SetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse_DEFINED
#define SOAP_TYPE__tds__GetDiscoveryModeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDiscoveryModeResponse(struct soap*, const char*, int, const _tds__GetDiscoveryModeResponse *, const char*);
SOAP_FMAC3 _tds__GetDiscoveryModeResponse * SOAP_FMAC4 soap_in__tds__GetDiscoveryModeResponse(struct soap*, const char*, _tds__GetDiscoveryModeResponse *, const char*);
SOAP_FMAC1 _tds__GetDiscoveryModeResponse * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDiscoveryModeResponse * soap_new__tds__GetDiscoveryModeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDiscoveryModeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDiscoveryModeResponse * soap_new_req__tds__GetDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__GetDiscoveryModeResponse *_p = ::soap_new__tds__GetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDiscoveryModeResponse::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline _tds__GetDiscoveryModeResponse * soap_new_set__tds__GetDiscoveryModeResponse(
	struct soap *soap,
	enum tt__DiscoveryMode DiscoveryMode)
{
	_tds__GetDiscoveryModeResponse *_p = ::soap_new__tds__GetDiscoveryModeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDiscoveryModeResponse::DiscoveryMode = DiscoveryMode;
	}
	return _p;
}

inline int soap_write__tds__GetDiscoveryModeResponse(struct soap *soap, _tds__GetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetDiscoveryModeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryModeResponse", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryModeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDiscoveryModeResponse * SOAP_FMAC4 soap_get__tds__GetDiscoveryModeResponse(struct soap*, _tds__GetDiscoveryModeResponse *, const char*, const char*);

inline int soap_read__tds__GetDiscoveryModeResponse(struct soap *soap, _tds__GetDiscoveryModeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDiscoveryModeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDiscoveryModeResponse(struct soap *soap, const char *URL, _tds__GetDiscoveryModeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDiscoveryModeResponse(struct soap *soap, _tds__GetDiscoveryModeResponse *p)
{
	if (::soap_read__tds__GetDiscoveryModeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryMode_DEFINED
#define SOAP_TYPE__tds__GetDiscoveryMode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDiscoveryMode(struct soap*, const char*, int, const _tds__GetDiscoveryMode *, const char*);
SOAP_FMAC3 _tds__GetDiscoveryMode * SOAP_FMAC4 soap_in__tds__GetDiscoveryMode(struct soap*, const char*, _tds__GetDiscoveryMode *, const char*);
SOAP_FMAC1 _tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate__tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDiscoveryMode * soap_new__tds__GetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDiscoveryMode * soap_new_req__tds__GetDiscoveryMode(
	struct soap *soap)
{
	_tds__GetDiscoveryMode *_p = ::soap_new__tds__GetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDiscoveryMode * soap_new_set__tds__GetDiscoveryMode(
	struct soap *soap)
{
	_tds__GetDiscoveryMode *_p = ::soap_new__tds__GetDiscoveryMode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDiscoveryMode(struct soap *soap, _tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDiscoveryMode(struct soap *soap, const char *URL, _tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDiscoveryMode(struct soap *soap, const char *URL, _tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryMode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDiscoveryMode(struct soap *soap, const char *URL, _tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDiscoveryMode", p->soap_type() == SOAP_TYPE__tds__GetDiscoveryMode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDiscoveryMode * SOAP_FMAC4 soap_get__tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode *, const char*, const char*);

inline int soap_read__tds__GetDiscoveryMode(struct soap *soap, _tds__GetDiscoveryMode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDiscoveryMode(struct soap *soap, const char *URL, _tds__GetDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDiscoveryMode(struct soap *soap, _tds__GetDiscoveryMode *p)
{
	if (::soap_read__tds__GetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__RemoveScopesResponse_DEFINED
#define SOAP_TYPE__tds__RemoveScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveScopesResponse(struct soap*, const char*, int, const _tds__RemoveScopesResponse *, const char*);
SOAP_FMAC3 _tds__RemoveScopesResponse * SOAP_FMAC4 soap_in__tds__RemoveScopesResponse(struct soap*, const char*, _tds__RemoveScopesResponse *, const char*);
SOAP_FMAC1 _tds__RemoveScopesResponse * SOAP_FMAC2 soap_instantiate__tds__RemoveScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveScopesResponse * soap_new__tds__RemoveScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveScopesResponse * soap_new_req__tds__RemoveScopesResponse(
	struct soap *soap)
{
	_tds__RemoveScopesResponse *_p = ::soap_new__tds__RemoveScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__RemoveScopesResponse * soap_new_set__tds__RemoveScopesResponse(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__RemoveScopesResponse *_p = ::soap_new__tds__RemoveScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveScopesResponse::ScopeItem = ScopeItem;
	}
	return _p;
}

inline int soap_write__tds__RemoveScopesResponse(struct soap *soap, _tds__RemoveScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopesResponse", p->soap_type() == SOAP_TYPE__tds__RemoveScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__RemoveScopesResponse(struct soap *soap, const char *URL, _tds__RemoveScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopesResponse", p->soap_type() == SOAP_TYPE__tds__RemoveScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__RemoveScopesResponse(struct soap *soap, const char *URL, _tds__RemoveScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopesResponse", p->soap_type() == SOAP_TYPE__tds__RemoveScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__RemoveScopesResponse(struct soap *soap, const char *URL, _tds__RemoveScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopesResponse", p->soap_type() == SOAP_TYPE__tds__RemoveScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveScopesResponse * SOAP_FMAC4 soap_get__tds__RemoveScopesResponse(struct soap*, _tds__RemoveScopesResponse *, const char*, const char*);

inline int soap_read__tds__RemoveScopesResponse(struct soap *soap, _tds__RemoveScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__RemoveScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__RemoveScopesResponse(struct soap *soap, const char *URL, _tds__RemoveScopesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__RemoveScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__RemoveScopesResponse(struct soap *soap, _tds__RemoveScopesResponse *p)
{
	if (::soap_read__tds__RemoveScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__RemoveScopes_DEFINED
#define SOAP_TYPE__tds__RemoveScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RemoveScopes(struct soap*, const char*, int, const _tds__RemoveScopes *, const char*);
SOAP_FMAC3 _tds__RemoveScopes * SOAP_FMAC4 soap_in__tds__RemoveScopes(struct soap*, const char*, _tds__RemoveScopes *, const char*);
SOAP_FMAC1 _tds__RemoveScopes * SOAP_FMAC2 soap_instantiate__tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RemoveScopes * soap_new__tds__RemoveScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RemoveScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__RemoveScopes * soap_new_req__tds__RemoveScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__RemoveScopes *_p = ::soap_new__tds__RemoveScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline _tds__RemoveScopes * soap_new_set__tds__RemoveScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__RemoveScopes *_p = ::soap_new__tds__RemoveScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RemoveScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline int soap_write__tds__RemoveScopes(struct soap *soap, _tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopes", p->soap_type() == SOAP_TYPE__tds__RemoveScopes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__RemoveScopes(struct soap *soap, const char *URL, _tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopes", p->soap_type() == SOAP_TYPE__tds__RemoveScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__RemoveScopes(struct soap *soap, const char *URL, _tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopes", p->soap_type() == SOAP_TYPE__tds__RemoveScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__RemoveScopes(struct soap *soap, const char *URL, _tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RemoveScopes", p->soap_type() == SOAP_TYPE__tds__RemoveScopes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RemoveScopes * SOAP_FMAC4 soap_get__tds__RemoveScopes(struct soap*, _tds__RemoveScopes *, const char*, const char*);

inline int soap_read__tds__RemoveScopes(struct soap *soap, _tds__RemoveScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__RemoveScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__RemoveScopes(struct soap *soap, const char *URL, _tds__RemoveScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__RemoveScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__RemoveScopes(struct soap *soap, _tds__RemoveScopes *p)
{
	if (::soap_read__tds__RemoveScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__AddScopesResponse_DEFINED
#define SOAP_TYPE__tds__AddScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddScopesResponse(struct soap*, const char*, int, const _tds__AddScopesResponse *, const char*);
SOAP_FMAC3 _tds__AddScopesResponse * SOAP_FMAC4 soap_in__tds__AddScopesResponse(struct soap*, const char*, _tds__AddScopesResponse *, const char*);
SOAP_FMAC1 _tds__AddScopesResponse * SOAP_FMAC2 soap_instantiate__tds__AddScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddScopesResponse * soap_new__tds__AddScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__AddScopesResponse * soap_new_req__tds__AddScopesResponse(
	struct soap *soap)
{
	_tds__AddScopesResponse *_p = ::soap_new__tds__AddScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__AddScopesResponse * soap_new_set__tds__AddScopesResponse(
	struct soap *soap)
{
	_tds__AddScopesResponse *_p = ::soap_new__tds__AddScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__AddScopesResponse(struct soap *soap, _tds__AddScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopesResponse", p->soap_type() == SOAP_TYPE__tds__AddScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__AddScopesResponse(struct soap *soap, const char *URL, _tds__AddScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopesResponse", p->soap_type() == SOAP_TYPE__tds__AddScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__AddScopesResponse(struct soap *soap, const char *URL, _tds__AddScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopesResponse", p->soap_type() == SOAP_TYPE__tds__AddScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__AddScopesResponse(struct soap *soap, const char *URL, _tds__AddScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopesResponse", p->soap_type() == SOAP_TYPE__tds__AddScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddScopesResponse * SOAP_FMAC4 soap_get__tds__AddScopesResponse(struct soap*, _tds__AddScopesResponse *, const char*, const char*);

inline int soap_read__tds__AddScopesResponse(struct soap *soap, _tds__AddScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__AddScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__AddScopesResponse(struct soap *soap, const char *URL, _tds__AddScopesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__AddScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__AddScopesResponse(struct soap *soap, _tds__AddScopesResponse *p)
{
	if (::soap_read__tds__AddScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__AddScopes_DEFINED
#define SOAP_TYPE__tds__AddScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__AddScopes(struct soap*, const char*, int, const _tds__AddScopes *, const char*);
SOAP_FMAC3 _tds__AddScopes * SOAP_FMAC4 soap_in__tds__AddScopes(struct soap*, const char*, _tds__AddScopes *, const char*);
SOAP_FMAC1 _tds__AddScopes * SOAP_FMAC2 soap_instantiate__tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__AddScopes * soap_new__tds__AddScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__AddScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__AddScopes * soap_new_req__tds__AddScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__AddScopes *_p = ::soap_new__tds__AddScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline _tds__AddScopes * soap_new_set__tds__AddScopes(
	struct soap *soap,
	const std::vector<std::string> & ScopeItem)
{
	_tds__AddScopes *_p = ::soap_new__tds__AddScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__AddScopes::ScopeItem = ScopeItem;
	}
	return _p;
}

inline int soap_write__tds__AddScopes(struct soap *soap, _tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopes", p->soap_type() == SOAP_TYPE__tds__AddScopes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__AddScopes(struct soap *soap, const char *URL, _tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopes", p->soap_type() == SOAP_TYPE__tds__AddScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__AddScopes(struct soap *soap, const char *URL, _tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopes", p->soap_type() == SOAP_TYPE__tds__AddScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__AddScopes(struct soap *soap, const char *URL, _tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:AddScopes", p->soap_type() == SOAP_TYPE__tds__AddScopes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__AddScopes * SOAP_FMAC4 soap_get__tds__AddScopes(struct soap*, _tds__AddScopes *, const char*, const char*);

inline int soap_read__tds__AddScopes(struct soap *soap, _tds__AddScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__AddScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__AddScopes(struct soap *soap, const char *URL, _tds__AddScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__AddScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__AddScopes(struct soap *soap, _tds__AddScopes *p)
{
	if (::soap_read__tds__AddScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetScopesResponse_DEFINED
#define SOAP_TYPE__tds__SetScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetScopesResponse(struct soap*, const char*, int, const _tds__SetScopesResponse *, const char*);
SOAP_FMAC3 _tds__SetScopesResponse * SOAP_FMAC4 soap_in__tds__SetScopesResponse(struct soap*, const char*, _tds__SetScopesResponse *, const char*);
SOAP_FMAC1 _tds__SetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__SetScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetScopesResponse * soap_new__tds__SetScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetScopesResponse * soap_new_req__tds__SetScopesResponse(
	struct soap *soap)
{
	_tds__SetScopesResponse *_p = ::soap_new__tds__SetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetScopesResponse * soap_new_set__tds__SetScopesResponse(
	struct soap *soap)
{
	_tds__SetScopesResponse *_p = ::soap_new__tds__SetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetScopesResponse(struct soap *soap, _tds__SetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopesResponse", p->soap_type() == SOAP_TYPE__tds__SetScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetScopesResponse(struct soap *soap, const char *URL, _tds__SetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopesResponse", p->soap_type() == SOAP_TYPE__tds__SetScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetScopesResponse(struct soap *soap, const char *URL, _tds__SetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopesResponse", p->soap_type() == SOAP_TYPE__tds__SetScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetScopesResponse(struct soap *soap, const char *URL, _tds__SetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopesResponse", p->soap_type() == SOAP_TYPE__tds__SetScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetScopesResponse * SOAP_FMAC4 soap_get__tds__SetScopesResponse(struct soap*, _tds__SetScopesResponse *, const char*, const char*);

inline int soap_read__tds__SetScopesResponse(struct soap *soap, _tds__SetScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetScopesResponse(struct soap *soap, const char *URL, _tds__SetScopesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetScopesResponse(struct soap *soap, _tds__SetScopesResponse *p)
{
	if (::soap_read__tds__SetScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetScopes_DEFINED
#define SOAP_TYPE__tds__SetScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetScopes(struct soap*, const char*, int, const _tds__SetScopes *, const char*);
SOAP_FMAC3 _tds__SetScopes * SOAP_FMAC4 soap_in__tds__SetScopes(struct soap*, const char*, _tds__SetScopes *, const char*);
SOAP_FMAC1 _tds__SetScopes * SOAP_FMAC2 soap_instantiate__tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetScopes * soap_new__tds__SetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__SetScopes * soap_new_req__tds__SetScopes(
	struct soap *soap,
	const std::vector<std::string> & Scopes)
{
	_tds__SetScopes *_p = ::soap_new__tds__SetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetScopes::Scopes = Scopes;
	}
	return _p;
}

inline _tds__SetScopes * soap_new_set__tds__SetScopes(
	struct soap *soap,
	const std::vector<std::string> & Scopes)
{
	_tds__SetScopes *_p = ::soap_new__tds__SetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetScopes::Scopes = Scopes;
	}
	return _p;
}

inline int soap_write__tds__SetScopes(struct soap *soap, _tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopes", p->soap_type() == SOAP_TYPE__tds__SetScopes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetScopes(struct soap *soap, const char *URL, _tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopes", p->soap_type() == SOAP_TYPE__tds__SetScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetScopes(struct soap *soap, const char *URL, _tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopes", p->soap_type() == SOAP_TYPE__tds__SetScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetScopes(struct soap *soap, const char *URL, _tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetScopes", p->soap_type() == SOAP_TYPE__tds__SetScopes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetScopes * SOAP_FMAC4 soap_get__tds__SetScopes(struct soap*, _tds__SetScopes *, const char*, const char*);

inline int soap_read__tds__SetScopes(struct soap *soap, _tds__SetScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetScopes(struct soap *soap, const char *URL, _tds__SetScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetScopes(struct soap *soap, _tds__SetScopes *p)
{
	if (::soap_read__tds__SetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetScopesResponse_DEFINED
#define SOAP_TYPE__tds__GetScopesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetScopesResponse(struct soap*, const char*, int, const _tds__GetScopesResponse *, const char*);
SOAP_FMAC3 _tds__GetScopesResponse * SOAP_FMAC4 soap_in__tds__GetScopesResponse(struct soap*, const char*, _tds__GetScopesResponse *, const char*);
SOAP_FMAC1 _tds__GetScopesResponse * SOAP_FMAC2 soap_instantiate__tds__GetScopesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetScopesResponse * soap_new__tds__GetScopesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetScopesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetScopesResponse * soap_new_req__tds__GetScopesResponse(
	struct soap *soap,
	const std::vector<tt__Scope *> & Scopes)
{
	_tds__GetScopesResponse *_p = ::soap_new__tds__GetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetScopesResponse::Scopes = Scopes;
	}
	return _p;
}

inline _tds__GetScopesResponse * soap_new_set__tds__GetScopesResponse(
	struct soap *soap,
	const std::vector<tt__Scope *> & Scopes)
{
	_tds__GetScopesResponse *_p = ::soap_new__tds__GetScopesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetScopesResponse::Scopes = Scopes;
	}
	return _p;
}

inline int soap_write__tds__GetScopesResponse(struct soap *soap, _tds__GetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopesResponse", p->soap_type() == SOAP_TYPE__tds__GetScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetScopesResponse(struct soap *soap, const char *URL, _tds__GetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopesResponse", p->soap_type() == SOAP_TYPE__tds__GetScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetScopesResponse(struct soap *soap, const char *URL, _tds__GetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopesResponse", p->soap_type() == SOAP_TYPE__tds__GetScopesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetScopesResponse(struct soap *soap, const char *URL, _tds__GetScopesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopesResponse", p->soap_type() == SOAP_TYPE__tds__GetScopesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetScopesResponse * SOAP_FMAC4 soap_get__tds__GetScopesResponse(struct soap*, _tds__GetScopesResponse *, const char*, const char*);

inline int soap_read__tds__GetScopesResponse(struct soap *soap, _tds__GetScopesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetScopesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetScopesResponse(struct soap *soap, const char *URL, _tds__GetScopesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetScopesResponse(struct soap *soap, _tds__GetScopesResponse *p)
{
	if (::soap_read__tds__GetScopesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetScopes_DEFINED
#define SOAP_TYPE__tds__GetScopes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetScopes(struct soap*, const char*, int, const _tds__GetScopes *, const char*);
SOAP_FMAC3 _tds__GetScopes * SOAP_FMAC4 soap_in__tds__GetScopes(struct soap*, const char*, _tds__GetScopes *, const char*);
SOAP_FMAC1 _tds__GetScopes * SOAP_FMAC2 soap_instantiate__tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetScopes * soap_new__tds__GetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetScopes(soap, n, NULL, NULL, NULL);
}

inline _tds__GetScopes * soap_new_req__tds__GetScopes(
	struct soap *soap)
{
	_tds__GetScopes *_p = ::soap_new__tds__GetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetScopes * soap_new_set__tds__GetScopes(
	struct soap *soap)
{
	_tds__GetScopes *_p = ::soap_new__tds__GetScopes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetScopes(struct soap *soap, _tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopes", p->soap_type() == SOAP_TYPE__tds__GetScopes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetScopes(struct soap *soap, const char *URL, _tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopes", p->soap_type() == SOAP_TYPE__tds__GetScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetScopes(struct soap *soap, const char *URL, _tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopes", p->soap_type() == SOAP_TYPE__tds__GetScopes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetScopes(struct soap *soap, const char *URL, _tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetScopes", p->soap_type() == SOAP_TYPE__tds__GetScopes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetScopes * SOAP_FMAC4 soap_get__tds__GetScopes(struct soap*, _tds__GetScopes *, const char*, const char*);

inline int soap_read__tds__GetScopes(struct soap *soap, _tds__GetScopes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetScopes(struct soap *soap, const char *URL, _tds__GetScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetScopes(struct soap *soap, _tds__GetScopes *p)
{
	if (::soap_read__tds__GetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemLogResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemLogResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemLogResponse(struct soap*, const char*, int, const _tds__GetSystemLogResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemLogResponse * SOAP_FMAC4 soap_in__tds__GetSystemLogResponse(struct soap*, const char*, _tds__GetSystemLogResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemLogResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemLogResponse * soap_new__tds__GetSystemLogResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemLogResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemLogResponse * soap_new_req__tds__GetSystemLogResponse(
	struct soap *soap,
	tt__SystemLog *SystemLog)
{
	_tds__GetSystemLogResponse *_p = ::soap_new__tds__GetSystemLogResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLogResponse::SystemLog = SystemLog;
	}
	return _p;
}

inline _tds__GetSystemLogResponse * soap_new_set__tds__GetSystemLogResponse(
	struct soap *soap,
	tt__SystemLog *SystemLog)
{
	_tds__GetSystemLogResponse *_p = ::soap_new__tds__GetSystemLogResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLogResponse::SystemLog = SystemLog;
	}
	return _p;
}

inline int soap_write__tds__GetSystemLogResponse(struct soap *soap, _tds__GetSystemLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLogResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemLogResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemLogResponse(struct soap *soap, const char *URL, _tds__GetSystemLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLogResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemLogResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemLogResponse(struct soap *soap, const char *URL, _tds__GetSystemLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLogResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemLogResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemLogResponse(struct soap *soap, const char *URL, _tds__GetSystemLogResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLogResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemLogResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemLogResponse * SOAP_FMAC4 soap_get__tds__GetSystemLogResponse(struct soap*, _tds__GetSystemLogResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemLogResponse(struct soap *soap, _tds__GetSystemLogResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemLogResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemLogResponse(struct soap *soap, const char *URL, _tds__GetSystemLogResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemLogResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemLogResponse(struct soap *soap, _tds__GetSystemLogResponse *p)
{
	if (::soap_read__tds__GetSystemLogResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemLog_DEFINED
#define SOAP_TYPE__tds__GetSystemLog_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemLog(struct soap*, const char*, int, const _tds__GetSystemLog *, const char*);
SOAP_FMAC3 _tds__GetSystemLog * SOAP_FMAC4 soap_in__tds__GetSystemLog(struct soap*, const char*, _tds__GetSystemLog *, const char*);
SOAP_FMAC1 _tds__GetSystemLog * SOAP_FMAC2 soap_instantiate__tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemLog * soap_new__tds__GetSystemLog(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemLog(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemLog * soap_new_req__tds__GetSystemLog(
	struct soap *soap,
	enum tt__SystemLogType LogType)
{
	_tds__GetSystemLog *_p = ::soap_new__tds__GetSystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLog::LogType = LogType;
	}
	return _p;
}

inline _tds__GetSystemLog * soap_new_set__tds__GetSystemLog(
	struct soap *soap,
	enum tt__SystemLogType LogType)
{
	_tds__GetSystemLog *_p = ::soap_new__tds__GetSystemLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemLog::LogType = LogType;
	}
	return _p;
}

inline int soap_write__tds__GetSystemLog(struct soap *soap, _tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLog", p->soap_type() == SOAP_TYPE__tds__GetSystemLog ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemLog(struct soap *soap, const char *URL, _tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLog", p->soap_type() == SOAP_TYPE__tds__GetSystemLog ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemLog(struct soap *soap, const char *URL, _tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLog", p->soap_type() == SOAP_TYPE__tds__GetSystemLog ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemLog(struct soap *soap, const char *URL, _tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemLog", p->soap_type() == SOAP_TYPE__tds__GetSystemLog ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemLog * SOAP_FMAC4 soap_get__tds__GetSystemLog(struct soap*, _tds__GetSystemLog *, const char*, const char*);

inline int soap_read__tds__GetSystemLog(struct soap *soap, _tds__GetSystemLog *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemLog(struct soap *soap, const char *URL, _tds__GetSystemLog *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemLog(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemLog(struct soap *soap, _tds__GetSystemLog *p)
{
	if (::soap_read__tds__GetSystemLog(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemSupportInformationResponse(struct soap*, const char*, int, const _tds__GetSystemSupportInformationResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemSupportInformationResponse * SOAP_FMAC4 soap_in__tds__GetSystemSupportInformationResponse(struct soap*, const char*, _tds__GetSystemSupportInformationResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemSupportInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemSupportInformationResponse * soap_new__tds__GetSystemSupportInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemSupportInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemSupportInformationResponse * soap_new_req__tds__GetSystemSupportInformationResponse(
	struct soap *soap,
	tt__SupportInformation *SupportInformation)
{
	_tds__GetSystemSupportInformationResponse *_p = ::soap_new__tds__GetSystemSupportInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemSupportInformationResponse::SupportInformation = SupportInformation;
	}
	return _p;
}

inline _tds__GetSystemSupportInformationResponse * soap_new_set__tds__GetSystemSupportInformationResponse(
	struct soap *soap,
	tt__SupportInformation *SupportInformation)
{
	_tds__GetSystemSupportInformationResponse *_p = ::soap_new__tds__GetSystemSupportInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemSupportInformationResponse::SupportInformation = SupportInformation;
	}
	return _p;
}

inline int soap_write__tds__GetSystemSupportInformationResponse(struct soap *soap, _tds__GetSystemSupportInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemSupportInformationResponse(struct soap *soap, const char *URL, _tds__GetSystemSupportInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemSupportInformationResponse(struct soap *soap, const char *URL, _tds__GetSystemSupportInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemSupportInformationResponse(struct soap *soap, const char *URL, _tds__GetSystemSupportInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemSupportInformationResponse * SOAP_FMAC4 soap_get__tds__GetSystemSupportInformationResponse(struct soap*, _tds__GetSystemSupportInformationResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemSupportInformationResponse(struct soap *soap, _tds__GetSystemSupportInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemSupportInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemSupportInformationResponse(struct soap *soap, const char *URL, _tds__GetSystemSupportInformationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemSupportInformationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemSupportInformationResponse(struct soap *soap, _tds__GetSystemSupportInformationResponse *p)
{
	if (::soap_read__tds__GetSystemSupportInformationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformation_DEFINED
#define SOAP_TYPE__tds__GetSystemSupportInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemSupportInformation(struct soap*, const char*, int, const _tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC3 _tds__GetSystemSupportInformation * SOAP_FMAC4 soap_in__tds__GetSystemSupportInformation(struct soap*, const char*, _tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC1 _tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate__tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemSupportInformation * soap_new__tds__GetSystemSupportInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemSupportInformation(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemSupportInformation * soap_new_req__tds__GetSystemSupportInformation(
	struct soap *soap)
{
	_tds__GetSystemSupportInformation *_p = ::soap_new__tds__GetSystemSupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemSupportInformation * soap_new_set__tds__GetSystemSupportInformation(
	struct soap *soap)
{
	_tds__GetSystemSupportInformation *_p = ::soap_new__tds__GetSystemSupportInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemSupportInformation(struct soap *soap, _tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformation", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemSupportInformation(struct soap *soap, const char *URL, _tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformation", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemSupportInformation(struct soap *soap, const char *URL, _tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformation", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemSupportInformation(struct soap *soap, const char *URL, _tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemSupportInformation", p->soap_type() == SOAP_TYPE__tds__GetSystemSupportInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemSupportInformation * SOAP_FMAC4 soap_get__tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation *, const char*, const char*);

inline int soap_read__tds__GetSystemSupportInformation(struct soap *soap, _tds__GetSystemSupportInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemSupportInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemSupportInformation(struct soap *soap, const char *URL, _tds__GetSystemSupportInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemSupportInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemSupportInformation(struct soap *soap, _tds__GetSystemSupportInformation *p)
{
	if (::soap_read__tds__GetSystemSupportInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackupResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemBackupResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemBackupResponse(struct soap*, const char*, int, const _tds__GetSystemBackupResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemBackupResponse * SOAP_FMAC4 soap_in__tds__GetSystemBackupResponse(struct soap*, const char*, _tds__GetSystemBackupResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemBackupResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackupResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemBackupResponse * soap_new__tds__GetSystemBackupResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemBackupResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemBackupResponse * soap_new_req__tds__GetSystemBackupResponse(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__GetSystemBackupResponse *_p = ::soap_new__tds__GetSystemBackupResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemBackupResponse::BackupFiles = BackupFiles;
	}
	return _p;
}

inline _tds__GetSystemBackupResponse * soap_new_set__tds__GetSystemBackupResponse(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__GetSystemBackupResponse *_p = ::soap_new__tds__GetSystemBackupResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemBackupResponse::BackupFiles = BackupFiles;
	}
	return _p;
}

inline int soap_write__tds__GetSystemBackupResponse(struct soap *soap, _tds__GetSystemBackupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackupResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemBackupResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemBackupResponse(struct soap *soap, const char *URL, _tds__GetSystemBackupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackupResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemBackupResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemBackupResponse(struct soap *soap, const char *URL, _tds__GetSystemBackupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackupResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemBackupResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemBackupResponse(struct soap *soap, const char *URL, _tds__GetSystemBackupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackupResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemBackupResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemBackupResponse * SOAP_FMAC4 soap_get__tds__GetSystemBackupResponse(struct soap*, _tds__GetSystemBackupResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemBackupResponse(struct soap *soap, _tds__GetSystemBackupResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemBackupResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemBackupResponse(struct soap *soap, const char *URL, _tds__GetSystemBackupResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemBackupResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemBackupResponse(struct soap *soap, _tds__GetSystemBackupResponse *p)
{
	if (::soap_read__tds__GetSystemBackupResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackup_DEFINED
#define SOAP_TYPE__tds__GetSystemBackup_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemBackup(struct soap*, const char*, int, const _tds__GetSystemBackup *, const char*);
SOAP_FMAC3 _tds__GetSystemBackup * SOAP_FMAC4 soap_in__tds__GetSystemBackup(struct soap*, const char*, _tds__GetSystemBackup *, const char*);
SOAP_FMAC1 _tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate__tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemBackup * soap_new__tds__GetSystemBackup(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemBackup(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemBackup * soap_new_req__tds__GetSystemBackup(
	struct soap *soap)
{
	_tds__GetSystemBackup *_p = ::soap_new__tds__GetSystemBackup(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemBackup * soap_new_set__tds__GetSystemBackup(
	struct soap *soap)
{
	_tds__GetSystemBackup *_p = ::soap_new__tds__GetSystemBackup(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemBackup(struct soap *soap, _tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackup", p->soap_type() == SOAP_TYPE__tds__GetSystemBackup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemBackup(struct soap *soap, const char *URL, _tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackup", p->soap_type() == SOAP_TYPE__tds__GetSystemBackup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemBackup(struct soap *soap, const char *URL, _tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackup", p->soap_type() == SOAP_TYPE__tds__GetSystemBackup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemBackup(struct soap *soap, const char *URL, _tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemBackup", p->soap_type() == SOAP_TYPE__tds__GetSystemBackup ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemBackup * SOAP_FMAC4 soap_get__tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup *, const char*, const char*);

inline int soap_read__tds__GetSystemBackup(struct soap *soap, _tds__GetSystemBackup *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemBackup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemBackup(struct soap *soap, const char *URL, _tds__GetSystemBackup *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemBackup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemBackup(struct soap *soap, _tds__GetSystemBackup *p)
{
	if (::soap_read__tds__GetSystemBackup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__RestoreSystemResponse_DEFINED
#define SOAP_TYPE__tds__RestoreSystemResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RestoreSystemResponse(struct soap*, const char*, int, const _tds__RestoreSystemResponse *, const char*);
SOAP_FMAC3 _tds__RestoreSystemResponse * SOAP_FMAC4 soap_in__tds__RestoreSystemResponse(struct soap*, const char*, _tds__RestoreSystemResponse *, const char*);
SOAP_FMAC1 _tds__RestoreSystemResponse * SOAP_FMAC2 soap_instantiate__tds__RestoreSystemResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RestoreSystemResponse * soap_new__tds__RestoreSystemResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RestoreSystemResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__RestoreSystemResponse * soap_new_req__tds__RestoreSystemResponse(
	struct soap *soap)
{
	_tds__RestoreSystemResponse *_p = ::soap_new__tds__RestoreSystemResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__RestoreSystemResponse * soap_new_set__tds__RestoreSystemResponse(
	struct soap *soap)
{
	_tds__RestoreSystemResponse *_p = ::soap_new__tds__RestoreSystemResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__RestoreSystemResponse(struct soap *soap, _tds__RestoreSystemResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystemResponse", p->soap_type() == SOAP_TYPE__tds__RestoreSystemResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__RestoreSystemResponse(struct soap *soap, const char *URL, _tds__RestoreSystemResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystemResponse", p->soap_type() == SOAP_TYPE__tds__RestoreSystemResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__RestoreSystemResponse(struct soap *soap, const char *URL, _tds__RestoreSystemResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystemResponse", p->soap_type() == SOAP_TYPE__tds__RestoreSystemResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__RestoreSystemResponse(struct soap *soap, const char *URL, _tds__RestoreSystemResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystemResponse", p->soap_type() == SOAP_TYPE__tds__RestoreSystemResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RestoreSystemResponse * SOAP_FMAC4 soap_get__tds__RestoreSystemResponse(struct soap*, _tds__RestoreSystemResponse *, const char*, const char*);

inline int soap_read__tds__RestoreSystemResponse(struct soap *soap, _tds__RestoreSystemResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__RestoreSystemResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__RestoreSystemResponse(struct soap *soap, const char *URL, _tds__RestoreSystemResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__RestoreSystemResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__RestoreSystemResponse(struct soap *soap, _tds__RestoreSystemResponse *p)
{
	if (::soap_read__tds__RestoreSystemResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__RestoreSystem_DEFINED
#define SOAP_TYPE__tds__RestoreSystem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__RestoreSystem(struct soap*, const char*, int, const _tds__RestoreSystem *, const char*);
SOAP_FMAC3 _tds__RestoreSystem * SOAP_FMAC4 soap_in__tds__RestoreSystem(struct soap*, const char*, _tds__RestoreSystem *, const char*);
SOAP_FMAC1 _tds__RestoreSystem * SOAP_FMAC2 soap_instantiate__tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);

inline _tds__RestoreSystem * soap_new__tds__RestoreSystem(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__RestoreSystem(soap, n, NULL, NULL, NULL);
}

inline _tds__RestoreSystem * soap_new_req__tds__RestoreSystem(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__RestoreSystem *_p = ::soap_new__tds__RestoreSystem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RestoreSystem::BackupFiles = BackupFiles;
	}
	return _p;
}

inline _tds__RestoreSystem * soap_new_set__tds__RestoreSystem(
	struct soap *soap,
	const std::vector<tt__BackupFile *> & BackupFiles)
{
	_tds__RestoreSystem *_p = ::soap_new__tds__RestoreSystem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__RestoreSystem::BackupFiles = BackupFiles;
	}
	return _p;
}

inline int soap_write__tds__RestoreSystem(struct soap *soap, _tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystem", p->soap_type() == SOAP_TYPE__tds__RestoreSystem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__RestoreSystem(struct soap *soap, const char *URL, _tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystem", p->soap_type() == SOAP_TYPE__tds__RestoreSystem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__RestoreSystem(struct soap *soap, const char *URL, _tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystem", p->soap_type() == SOAP_TYPE__tds__RestoreSystem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__RestoreSystem(struct soap *soap, const char *URL, _tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:RestoreSystem", p->soap_type() == SOAP_TYPE__tds__RestoreSystem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__RestoreSystem * SOAP_FMAC4 soap_get__tds__RestoreSystem(struct soap*, _tds__RestoreSystem *, const char*, const char*);

inline int soap_read__tds__RestoreSystem(struct soap *soap, _tds__RestoreSystem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__RestoreSystem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__RestoreSystem(struct soap *soap, const char *URL, _tds__RestoreSystem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__RestoreSystem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__RestoreSystem(struct soap *soap, _tds__RestoreSystem *p)
{
	if (::soap_read__tds__RestoreSystem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SystemRebootResponse_DEFINED
#define SOAP_TYPE__tds__SystemRebootResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SystemRebootResponse(struct soap*, const char*, int, const _tds__SystemRebootResponse *, const char*);
SOAP_FMAC3 _tds__SystemRebootResponse * SOAP_FMAC4 soap_in__tds__SystemRebootResponse(struct soap*, const char*, _tds__SystemRebootResponse *, const char*);
SOAP_FMAC1 _tds__SystemRebootResponse * SOAP_FMAC2 soap_instantiate__tds__SystemRebootResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SystemRebootResponse * soap_new__tds__SystemRebootResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SystemRebootResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SystemRebootResponse * soap_new_req__tds__SystemRebootResponse(
	struct soap *soap,
	const std::string& Message)
{
	_tds__SystemRebootResponse *_p = ::soap_new__tds__SystemRebootResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SystemRebootResponse::Message = Message;
	}
	return _p;
}

inline _tds__SystemRebootResponse * soap_new_set__tds__SystemRebootResponse(
	struct soap *soap,
	const std::string& Message)
{
	_tds__SystemRebootResponse *_p = ::soap_new__tds__SystemRebootResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SystemRebootResponse::Message = Message;
	}
	return _p;
}

inline int soap_write__tds__SystemRebootResponse(struct soap *soap, _tds__SystemRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemRebootResponse", p->soap_type() == SOAP_TYPE__tds__SystemRebootResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SystemRebootResponse(struct soap *soap, const char *URL, _tds__SystemRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemRebootResponse", p->soap_type() == SOAP_TYPE__tds__SystemRebootResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SystemRebootResponse(struct soap *soap, const char *URL, _tds__SystemRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemRebootResponse", p->soap_type() == SOAP_TYPE__tds__SystemRebootResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SystemRebootResponse(struct soap *soap, const char *URL, _tds__SystemRebootResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemRebootResponse", p->soap_type() == SOAP_TYPE__tds__SystemRebootResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SystemRebootResponse * SOAP_FMAC4 soap_get__tds__SystemRebootResponse(struct soap*, _tds__SystemRebootResponse *, const char*, const char*);

inline int soap_read__tds__SystemRebootResponse(struct soap *soap, _tds__SystemRebootResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SystemRebootResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SystemRebootResponse(struct soap *soap, const char *URL, _tds__SystemRebootResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SystemRebootResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SystemRebootResponse(struct soap *soap, _tds__SystemRebootResponse *p)
{
	if (::soap_read__tds__SystemRebootResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SystemReboot_DEFINED
#define SOAP_TYPE__tds__SystemReboot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SystemReboot(struct soap*, const char*, int, const _tds__SystemReboot *, const char*);
SOAP_FMAC3 _tds__SystemReboot * SOAP_FMAC4 soap_in__tds__SystemReboot(struct soap*, const char*, _tds__SystemReboot *, const char*);
SOAP_FMAC1 _tds__SystemReboot * SOAP_FMAC2 soap_instantiate__tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SystemReboot * soap_new__tds__SystemReboot(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SystemReboot(soap, n, NULL, NULL, NULL);
}

inline _tds__SystemReboot * soap_new_req__tds__SystemReboot(
	struct soap *soap)
{
	_tds__SystemReboot *_p = ::soap_new__tds__SystemReboot(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SystemReboot * soap_new_set__tds__SystemReboot(
	struct soap *soap)
{
	_tds__SystemReboot *_p = ::soap_new__tds__SystemReboot(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SystemReboot(struct soap *soap, _tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemReboot", p->soap_type() == SOAP_TYPE__tds__SystemReboot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SystemReboot(struct soap *soap, const char *URL, _tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemReboot", p->soap_type() == SOAP_TYPE__tds__SystemReboot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SystemReboot(struct soap *soap, const char *URL, _tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemReboot", p->soap_type() == SOAP_TYPE__tds__SystemReboot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SystemReboot(struct soap *soap, const char *URL, _tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemReboot", p->soap_type() == SOAP_TYPE__tds__SystemReboot ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SystemReboot * SOAP_FMAC4 soap_get__tds__SystemReboot(struct soap*, _tds__SystemReboot *, const char*, const char*);

inline int soap_read__tds__SystemReboot(struct soap *soap, _tds__SystemReboot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SystemReboot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SystemReboot(struct soap *soap, const char *URL, _tds__SystemReboot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SystemReboot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SystemReboot(struct soap *soap, _tds__SystemReboot *p)
{
	if (::soap_read__tds__SystemReboot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse_DEFINED
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__UpgradeSystemFirmwareResponse(struct soap*, const char*, int, const _tds__UpgradeSystemFirmwareResponse *, const char*);
SOAP_FMAC3 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC4 soap_in__tds__UpgradeSystemFirmwareResponse(struct soap*, const char*, _tds__UpgradeSystemFirmwareResponse *, const char*);
SOAP_FMAC1 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmwareResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__UpgradeSystemFirmwareResponse * soap_new__tds__UpgradeSystemFirmwareResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__UpgradeSystemFirmwareResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__UpgradeSystemFirmwareResponse * soap_new_req__tds__UpgradeSystemFirmwareResponse(
	struct soap *soap)
{
	_tds__UpgradeSystemFirmwareResponse *_p = ::soap_new__tds__UpgradeSystemFirmwareResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__UpgradeSystemFirmwareResponse * soap_new_set__tds__UpgradeSystemFirmwareResponse(
	struct soap *soap,
	std::string *Message)
{
	_tds__UpgradeSystemFirmwareResponse *_p = ::soap_new__tds__UpgradeSystemFirmwareResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__UpgradeSystemFirmwareResponse::Message = Message;
	}
	return _p;
}

inline int soap_write__tds__UpgradeSystemFirmwareResponse(struct soap *soap, _tds__UpgradeSystemFirmwareResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmwareResponse", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmwareResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__UpgradeSystemFirmwareResponse(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmwareResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmwareResponse", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmwareResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__UpgradeSystemFirmwareResponse(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmwareResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmwareResponse", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmwareResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__UpgradeSystemFirmwareResponse(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmwareResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmwareResponse", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmwareResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__UpgradeSystemFirmwareResponse * SOAP_FMAC4 soap_get__tds__UpgradeSystemFirmwareResponse(struct soap*, _tds__UpgradeSystemFirmwareResponse *, const char*, const char*);

inline int soap_read__tds__UpgradeSystemFirmwareResponse(struct soap *soap, _tds__UpgradeSystemFirmwareResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__UpgradeSystemFirmwareResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__UpgradeSystemFirmwareResponse(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmwareResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__UpgradeSystemFirmwareResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__UpgradeSystemFirmwareResponse(struct soap *soap, _tds__UpgradeSystemFirmwareResponse *p)
{
	if (::soap_read__tds__UpgradeSystemFirmwareResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware_DEFINED
#define SOAP_TYPE__tds__UpgradeSystemFirmware_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__UpgradeSystemFirmware(struct soap*, const char*, int, const _tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC3 _tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_in__tds__UpgradeSystemFirmware(struct soap*, const char*, _tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC1 _tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate__tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);

inline _tds__UpgradeSystemFirmware * soap_new__tds__UpgradeSystemFirmware(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__UpgradeSystemFirmware(soap, n, NULL, NULL, NULL);
}

inline _tds__UpgradeSystemFirmware * soap_new_req__tds__UpgradeSystemFirmware(
	struct soap *soap,
	tt__AttachmentData *Firmware)
{
	_tds__UpgradeSystemFirmware *_p = ::soap_new__tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__UpgradeSystemFirmware::Firmware = Firmware;
	}
	return _p;
}

inline _tds__UpgradeSystemFirmware * soap_new_set__tds__UpgradeSystemFirmware(
	struct soap *soap,
	tt__AttachmentData *Firmware)
{
	_tds__UpgradeSystemFirmware *_p = ::soap_new__tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__UpgradeSystemFirmware::Firmware = Firmware;
	}
	return _p;
}

inline int soap_write__tds__UpgradeSystemFirmware(struct soap *soap, _tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmware", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmware ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmware", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmware ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmware", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmware ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UpgradeSystemFirmware", p->soap_type() == SOAP_TYPE__tds__UpgradeSystemFirmware ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_get__tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware *, const char*, const char*);

inline int soap_read__tds__UpgradeSystemFirmware(struct soap *soap, _tds__UpgradeSystemFirmware *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__UpgradeSystemFirmware(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, _tds__UpgradeSystemFirmware *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__UpgradeSystemFirmware(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__UpgradeSystemFirmware(struct soap *soap, _tds__UpgradeSystemFirmware *p)
{
	if (::soap_read__tds__UpgradeSystemFirmware(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse_DEFINED
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemFactoryDefaultResponse(struct soap*, const char*, int, const _tds__SetSystemFactoryDefaultResponse *, const char*);
SOAP_FMAC3 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC4 soap_in__tds__SetSystemFactoryDefaultResponse(struct soap*, const char*, _tds__SetSystemFactoryDefaultResponse *, const char*);
SOAP_FMAC1 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefaultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemFactoryDefaultResponse * soap_new__tds__SetSystemFactoryDefaultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemFactoryDefaultResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemFactoryDefaultResponse * soap_new_req__tds__SetSystemFactoryDefaultResponse(
	struct soap *soap)
{
	_tds__SetSystemFactoryDefaultResponse *_p = ::soap_new__tds__SetSystemFactoryDefaultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetSystemFactoryDefaultResponse * soap_new_set__tds__SetSystemFactoryDefaultResponse(
	struct soap *soap)
{
	_tds__SetSystemFactoryDefaultResponse *_p = ::soap_new__tds__SetSystemFactoryDefaultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetSystemFactoryDefaultResponse(struct soap *soap, _tds__SetSystemFactoryDefaultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefaultResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefaultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetSystemFactoryDefaultResponse(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefaultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefaultResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefaultResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetSystemFactoryDefaultResponse(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefaultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefaultResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefaultResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetSystemFactoryDefaultResponse(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefaultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefaultResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefaultResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemFactoryDefaultResponse * SOAP_FMAC4 soap_get__tds__SetSystemFactoryDefaultResponse(struct soap*, _tds__SetSystemFactoryDefaultResponse *, const char*, const char*);

inline int soap_read__tds__SetSystemFactoryDefaultResponse(struct soap *soap, _tds__SetSystemFactoryDefaultResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetSystemFactoryDefaultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetSystemFactoryDefaultResponse(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefaultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetSystemFactoryDefaultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetSystemFactoryDefaultResponse(struct soap *soap, _tds__SetSystemFactoryDefaultResponse *p)
{
	if (::soap_read__tds__SetSystemFactoryDefaultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault_DEFINED
#define SOAP_TYPE__tds__SetSystemFactoryDefault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemFactoryDefault(struct soap*, const char*, int, const _tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC3 _tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_in__tds__SetSystemFactoryDefault(struct soap*, const char*, _tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC1 _tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate__tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemFactoryDefault * soap_new__tds__SetSystemFactoryDefault(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemFactoryDefault(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemFactoryDefault * soap_new_req__tds__SetSystemFactoryDefault(
	struct soap *soap,
	enum tt__FactoryDefaultType FactoryDefault)
{
	_tds__SetSystemFactoryDefault *_p = ::soap_new__tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemFactoryDefault::FactoryDefault = FactoryDefault;
	}
	return _p;
}

inline _tds__SetSystemFactoryDefault * soap_new_set__tds__SetSystemFactoryDefault(
	struct soap *soap,
	enum tt__FactoryDefaultType FactoryDefault)
{
	_tds__SetSystemFactoryDefault *_p = ::soap_new__tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemFactoryDefault::FactoryDefault = FactoryDefault;
	}
	return _p;
}

inline int soap_write__tds__SetSystemFactoryDefault(struct soap *soap, _tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefault", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefault", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefault", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemFactoryDefault", p->soap_type() == SOAP_TYPE__tds__SetSystemFactoryDefault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_get__tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault *, const char*, const char*);

inline int soap_read__tds__SetSystemFactoryDefault(struct soap *soap, _tds__SetSystemFactoryDefault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetSystemFactoryDefault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, _tds__SetSystemFactoryDefault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetSystemFactoryDefault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetSystemFactoryDefault(struct soap *soap, _tds__SetSystemFactoryDefault *p)
{
	if (::soap_read__tds__SetSystemFactoryDefault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse_DEFINED
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemDateAndTimeResponse(struct soap*, const char*, int, const _tds__GetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC3 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC4 soap_in__tds__GetSystemDateAndTimeResponse(struct soap*, const char*, _tds__GetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC1 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemDateAndTimeResponse * soap_new__tds__GetSystemDateAndTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemDateAndTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemDateAndTimeResponse * soap_new_req__tds__GetSystemDateAndTimeResponse(
	struct soap *soap,
	tt__SystemDateTime *SystemDateAndTime)
{
	_tds__GetSystemDateAndTimeResponse *_p = ::soap_new__tds__GetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemDateAndTimeResponse::SystemDateAndTime = SystemDateAndTime;
	}
	return _p;
}

inline _tds__GetSystemDateAndTimeResponse * soap_new_set__tds__GetSystemDateAndTimeResponse(
	struct soap *soap,
	tt__SystemDateTime *SystemDateAndTime)
{
	_tds__GetSystemDateAndTimeResponse *_p = ::soap_new__tds__GetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetSystemDateAndTimeResponse::SystemDateAndTime = SystemDateAndTime;
	}
	return _p;
}

inline int soap_write__tds__GetSystemDateAndTimeResponse(struct soap *soap, _tds__GetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__GetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__GetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__GetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemDateAndTimeResponse * SOAP_FMAC4 soap_get__tds__GetSystemDateAndTimeResponse(struct soap*, _tds__GetSystemDateAndTimeResponse *, const char*, const char*);

inline int soap_read__tds__GetSystemDateAndTimeResponse(struct soap *soap, _tds__GetSystemDateAndTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemDateAndTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__GetSystemDateAndTimeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemDateAndTimeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemDateAndTimeResponse(struct soap *soap, _tds__GetSystemDateAndTimeResponse *p)
{
	if (::soap_read__tds__GetSystemDateAndTimeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTime_DEFINED
#define SOAP_TYPE__tds__GetSystemDateAndTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetSystemDateAndTime(struct soap*, const char*, int, const _tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC3 _tds__GetSystemDateAndTime * SOAP_FMAC4 soap_in__tds__GetSystemDateAndTime(struct soap*, const char*, _tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC1 _tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetSystemDateAndTime * soap_new__tds__GetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline _tds__GetSystemDateAndTime * soap_new_req__tds__GetSystemDateAndTime(
	struct soap *soap)
{
	_tds__GetSystemDateAndTime *_p = ::soap_new__tds__GetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetSystemDateAndTime * soap_new_set__tds__GetSystemDateAndTime(
	struct soap *soap)
{
	_tds__GetSystemDateAndTime *_p = ::soap_new__tds__GetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetSystemDateAndTime(struct soap *soap, _tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetSystemDateAndTime(struct soap *soap, const char *URL, _tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetSystemDateAndTime(struct soap *soap, const char *URL, _tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetSystemDateAndTime(struct soap *soap, const char *URL, _tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__GetSystemDateAndTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetSystemDateAndTime * SOAP_FMAC4 soap_get__tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime *, const char*, const char*);

inline int soap_read__tds__GetSystemDateAndTime(struct soap *soap, _tds__GetSystemDateAndTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetSystemDateAndTime(struct soap *soap, const char *URL, _tds__GetSystemDateAndTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetSystemDateAndTime(struct soap *soap, _tds__GetSystemDateAndTime *p)
{
	if (::soap_read__tds__GetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse_DEFINED
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemDateAndTimeResponse(struct soap*, const char*, int, const _tds__SetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC3 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC4 soap_in__tds__SetSystemDateAndTimeResponse(struct soap*, const char*, _tds__SetSystemDateAndTimeResponse *, const char*);
SOAP_FMAC1 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemDateAndTimeResponse * soap_new__tds__SetSystemDateAndTimeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemDateAndTimeResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemDateAndTimeResponse * soap_new_req__tds__SetSystemDateAndTimeResponse(
	struct soap *soap)
{
	_tds__SetSystemDateAndTimeResponse *_p = ::soap_new__tds__SetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__SetSystemDateAndTimeResponse * soap_new_set__tds__SetSystemDateAndTimeResponse(
	struct soap *soap)
{
	_tds__SetSystemDateAndTimeResponse *_p = ::soap_new__tds__SetSystemDateAndTimeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__SetSystemDateAndTimeResponse(struct soap *soap, _tds__SetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__SetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__SetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__SetSystemDateAndTimeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTimeResponse", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTimeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemDateAndTimeResponse * SOAP_FMAC4 soap_get__tds__SetSystemDateAndTimeResponse(struct soap*, _tds__SetSystemDateAndTimeResponse *, const char*, const char*);

inline int soap_read__tds__SetSystemDateAndTimeResponse(struct soap *soap, _tds__SetSystemDateAndTimeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetSystemDateAndTimeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetSystemDateAndTimeResponse(struct soap *soap, const char *URL, _tds__SetSystemDateAndTimeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetSystemDateAndTimeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetSystemDateAndTimeResponse(struct soap *soap, _tds__SetSystemDateAndTimeResponse *p)
{
	if (::soap_read__tds__SetSystemDateAndTimeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTime_DEFINED
#define SOAP_TYPE__tds__SetSystemDateAndTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__SetSystemDateAndTime(struct soap*, const char*, int, const _tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC3 _tds__SetSystemDateAndTime * SOAP_FMAC4 soap_in__tds__SetSystemDateAndTime(struct soap*, const char*, _tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC1 _tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate__tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline _tds__SetSystemDateAndTime * soap_new__tds__SetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__SetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline _tds__SetSystemDateAndTime * soap_new_req__tds__SetSystemDateAndTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings)
{
	_tds__SetSystemDateAndTime *_p = ::soap_new__tds__SetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemDateAndTime::DateTimeType = DateTimeType;
		_p->_tds__SetSystemDateAndTime::DaylightSavings = DaylightSavings;
	}
	return _p;
}

inline _tds__SetSystemDateAndTime * soap_new_set__tds__SetSystemDateAndTime(
	struct soap *soap,
	enum tt__SetDateTimeType DateTimeType,
	bool DaylightSavings,
	tt__TimeZone *TimeZone,
	tt__DateTime *UTCDateTime)
{
	_tds__SetSystemDateAndTime *_p = ::soap_new__tds__SetSystemDateAndTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__SetSystemDateAndTime::DateTimeType = DateTimeType;
		_p->_tds__SetSystemDateAndTime::DaylightSavings = DaylightSavings;
		_p->_tds__SetSystemDateAndTime::TimeZone = TimeZone;
		_p->_tds__SetSystemDateAndTime::UTCDateTime = UTCDateTime;
	}
	return _p;
}

inline int soap_write__tds__SetSystemDateAndTime(struct soap *soap, _tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__SetSystemDateAndTime(struct soap *soap, const char *URL, _tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__SetSystemDateAndTime(struct soap *soap, const char *URL, _tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__SetSystemDateAndTime(struct soap *soap, const char *URL, _tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SetSystemDateAndTime", p->soap_type() == SOAP_TYPE__tds__SetSystemDateAndTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__SetSystemDateAndTime * SOAP_FMAC4 soap_get__tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime *, const char*, const char*);

inline int soap_read__tds__SetSystemDateAndTime(struct soap *soap, _tds__SetSystemDateAndTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__SetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__SetSystemDateAndTime(struct soap *soap, const char *URL, _tds__SetSystemDateAndTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__SetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__SetSystemDateAndTime(struct soap *soap, _tds__SetSystemDateAndTime *p)
{
	if (::soap_read__tds__SetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse_DEFINED
#define SOAP_TYPE__tds__GetDeviceInformationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDeviceInformationResponse(struct soap*, const char*, int, const _tds__GetDeviceInformationResponse *, const char*);
SOAP_FMAC3 _tds__GetDeviceInformationResponse * SOAP_FMAC4 soap_in__tds__GetDeviceInformationResponse(struct soap*, const char*, _tds__GetDeviceInformationResponse *, const char*);
SOAP_FMAC1 _tds__GetDeviceInformationResponse * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDeviceInformationResponse * soap_new__tds__GetDeviceInformationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDeviceInformationResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDeviceInformationResponse * soap_new_req__tds__GetDeviceInformationResponse(
	struct soap *soap,
	const std::string& Manufacturer,
	const std::string& Model,
	const std::string& FirmwareVersion,
	const std::string& SerialNumber,
	const std::string& HardwareId)
{
	_tds__GetDeviceInformationResponse *_p = ::soap_new__tds__GetDeviceInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDeviceInformationResponse::Manufacturer = Manufacturer;
		_p->_tds__GetDeviceInformationResponse::Model = Model;
		_p->_tds__GetDeviceInformationResponse::FirmwareVersion = FirmwareVersion;
		_p->_tds__GetDeviceInformationResponse::SerialNumber = SerialNumber;
		_p->_tds__GetDeviceInformationResponse::HardwareId = HardwareId;
	}
	return _p;
}

inline _tds__GetDeviceInformationResponse * soap_new_set__tds__GetDeviceInformationResponse(
	struct soap *soap,
	const std::string& Manufacturer,
	const std::string& Model,
	const std::string& FirmwareVersion,
	const std::string& SerialNumber,
	const std::string& HardwareId)
{
	_tds__GetDeviceInformationResponse *_p = ::soap_new__tds__GetDeviceInformationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetDeviceInformationResponse::Manufacturer = Manufacturer;
		_p->_tds__GetDeviceInformationResponse::Model = Model;
		_p->_tds__GetDeviceInformationResponse::FirmwareVersion = FirmwareVersion;
		_p->_tds__GetDeviceInformationResponse::SerialNumber = SerialNumber;
		_p->_tds__GetDeviceInformationResponse::HardwareId = HardwareId;
	}
	return _p;
}

inline int soap_write__tds__GetDeviceInformationResponse(struct soap *soap, _tds__GetDeviceInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDeviceInformationResponse(struct soap *soap, const char *URL, _tds__GetDeviceInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDeviceInformationResponse(struct soap *soap, const char *URL, _tds__GetDeviceInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDeviceInformationResponse(struct soap *soap, const char *URL, _tds__GetDeviceInformationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformationResponse", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDeviceInformationResponse * SOAP_FMAC4 soap_get__tds__GetDeviceInformationResponse(struct soap*, _tds__GetDeviceInformationResponse *, const char*, const char*);

inline int soap_read__tds__GetDeviceInformationResponse(struct soap *soap, _tds__GetDeviceInformationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDeviceInformationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDeviceInformationResponse(struct soap *soap, const char *URL, _tds__GetDeviceInformationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDeviceInformationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDeviceInformationResponse(struct soap *soap, _tds__GetDeviceInformationResponse *p)
{
	if (::soap_read__tds__GetDeviceInformationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformation_DEFINED
#define SOAP_TYPE__tds__GetDeviceInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetDeviceInformation(struct soap*, const char*, int, const _tds__GetDeviceInformation *, const char*);
SOAP_FMAC3 _tds__GetDeviceInformation * SOAP_FMAC4 soap_in__tds__GetDeviceInformation(struct soap*, const char*, _tds__GetDeviceInformation *, const char*);
SOAP_FMAC1 _tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate__tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetDeviceInformation * soap_new__tds__GetDeviceInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetDeviceInformation(soap, n, NULL, NULL, NULL);
}

inline _tds__GetDeviceInformation * soap_new_req__tds__GetDeviceInformation(
	struct soap *soap)
{
	_tds__GetDeviceInformation *_p = ::soap_new__tds__GetDeviceInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetDeviceInformation * soap_new_set__tds__GetDeviceInformation(
	struct soap *soap)
{
	_tds__GetDeviceInformation *_p = ::soap_new__tds__GetDeviceInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetDeviceInformation(struct soap *soap, _tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformation", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetDeviceInformation(struct soap *soap, const char *URL, _tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformation", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetDeviceInformation(struct soap *soap, const char *URL, _tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformation", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetDeviceInformation(struct soap *soap, const char *URL, _tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetDeviceInformation", p->soap_type() == SOAP_TYPE__tds__GetDeviceInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetDeviceInformation * SOAP_FMAC4 soap_get__tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation *, const char*, const char*);

inline int soap_read__tds__GetDeviceInformation(struct soap *soap, _tds__GetDeviceInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetDeviceInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetDeviceInformation(struct soap *soap, const char *URL, _tds__GetDeviceInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetDeviceInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetDeviceInformation(struct soap *soap, _tds__GetDeviceInformation *p)
{
	if (::soap_read__tds__GetDeviceInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _tds__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__tds__GetServiceCapabilitiesResponse(struct soap*, const char*, _tds__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServiceCapabilitiesResponse * soap_new__tds__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServiceCapabilitiesResponse * soap_new_req__tds__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tds__DeviceServiceCapabilities *Capabilities)
{
	_tds__GetServiceCapabilitiesResponse *_p = ::soap_new__tds__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tds__GetServiceCapabilitiesResponse * soap_new_set__tds__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tds__DeviceServiceCapabilities *Capabilities)
{
	_tds__GetServiceCapabilitiesResponse *_p = ::soap_new__tds__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tds__GetServiceCapabilitiesResponse(struct soap *soap, _tds__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__tds__GetServiceCapabilitiesResponse(struct soap*, _tds__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tds__GetServiceCapabilitiesResponse(struct soap *soap, _tds__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tds__GetServiceCapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetServiceCapabilitiesResponse(struct soap *soap, _tds__GetServiceCapabilitiesResponse *p)
{
	if (::soap_read__tds__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__tds__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServiceCapabilities(struct soap*, const char*, int, const _tds__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _tds__GetServiceCapabilities * SOAP_FMAC4 soap_in__tds__GetServiceCapabilities(struct soap*, const char*, _tds__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServiceCapabilities * soap_new__tds__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServiceCapabilities * soap_new_req__tds__GetServiceCapabilities(
	struct soap *soap)
{
	_tds__GetServiceCapabilities *_p = ::soap_new__tds__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tds__GetServiceCapabilities * soap_new_set__tds__GetServiceCapabilities(
	struct soap *soap)
{
	_tds__GetServiceCapabilities *_p = ::soap_new__tds__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tds__GetServiceCapabilities(struct soap *soap, _tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetServiceCapabilities(struct soap *soap, const char *URL, _tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetServiceCapabilities(struct soap *soap, const char *URL, _tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetServiceCapabilities(struct soap *soap, const char *URL, _tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tds__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServiceCapabilities * SOAP_FMAC4 soap_get__tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__tds__GetServiceCapabilities(struct soap *soap, _tds__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetServiceCapabilities(struct soap *soap, const char *URL, _tds__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetServiceCapabilities(struct soap *soap, _tds__GetServiceCapabilities *p)
{
	if (::soap_read__tds__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetServicesResponse_DEFINED
#define SOAP_TYPE__tds__GetServicesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServicesResponse(struct soap*, const char*, int, const _tds__GetServicesResponse *, const char*);
SOAP_FMAC3 _tds__GetServicesResponse * SOAP_FMAC4 soap_in__tds__GetServicesResponse(struct soap*, const char*, _tds__GetServicesResponse *, const char*);
SOAP_FMAC1 _tds__GetServicesResponse * SOAP_FMAC2 soap_instantiate__tds__GetServicesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServicesResponse * soap_new__tds__GetServicesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServicesResponse(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServicesResponse * soap_new_req__tds__GetServicesResponse(
	struct soap *soap,
	const std::vector<tds__Service *> & Service)
{
	_tds__GetServicesResponse *_p = ::soap_new__tds__GetServicesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServicesResponse::Service = Service;
	}
	return _p;
}

inline _tds__GetServicesResponse * soap_new_set__tds__GetServicesResponse(
	struct soap *soap,
	const std::vector<tds__Service *> & Service)
{
	_tds__GetServicesResponse *_p = ::soap_new__tds__GetServicesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServicesResponse::Service = Service;
	}
	return _p;
}

inline int soap_write__tds__GetServicesResponse(struct soap *soap, _tds__GetServicesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServicesResponse", p->soap_type() == SOAP_TYPE__tds__GetServicesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetServicesResponse(struct soap *soap, const char *URL, _tds__GetServicesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServicesResponse", p->soap_type() == SOAP_TYPE__tds__GetServicesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetServicesResponse(struct soap *soap, const char *URL, _tds__GetServicesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServicesResponse", p->soap_type() == SOAP_TYPE__tds__GetServicesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetServicesResponse(struct soap *soap, const char *URL, _tds__GetServicesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServicesResponse", p->soap_type() == SOAP_TYPE__tds__GetServicesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServicesResponse * SOAP_FMAC4 soap_get__tds__GetServicesResponse(struct soap*, _tds__GetServicesResponse *, const char*, const char*);

inline int soap_read__tds__GetServicesResponse(struct soap *soap, _tds__GetServicesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetServicesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetServicesResponse(struct soap *soap, const char *URL, _tds__GetServicesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetServicesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetServicesResponse(struct soap *soap, _tds__GetServicesResponse *p)
{
	if (::soap_read__tds__GetServicesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tds__GetServices_DEFINED
#define SOAP_TYPE__tds__GetServices_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tds__GetServices(struct soap*, const char*, int, const _tds__GetServices *, const char*);
SOAP_FMAC3 _tds__GetServices * SOAP_FMAC4 soap_in__tds__GetServices(struct soap*, const char*, _tds__GetServices *, const char*);
SOAP_FMAC1 _tds__GetServices * SOAP_FMAC2 soap_instantiate__tds__GetServices(struct soap*, int, const char*, const char*, size_t*);

inline _tds__GetServices * soap_new__tds__GetServices(struct soap *soap, int n = -1)
{
	return soap_instantiate__tds__GetServices(soap, n, NULL, NULL, NULL);
}

inline _tds__GetServices * soap_new_req__tds__GetServices(
	struct soap *soap,
	bool IncludeCapability)
{
	_tds__GetServices *_p = ::soap_new__tds__GetServices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServices::IncludeCapability = IncludeCapability;
	}
	return _p;
}

inline _tds__GetServices * soap_new_set__tds__GetServices(
	struct soap *soap,
	bool IncludeCapability)
{
	_tds__GetServices *_p = ::soap_new__tds__GetServices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tds__GetServices::IncludeCapability = IncludeCapability;
	}
	return _p;
}

inline int soap_write__tds__GetServices(struct soap *soap, _tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServices", p->soap_type() == SOAP_TYPE__tds__GetServices ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tds__GetServices(struct soap *soap, const char *URL, _tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServices", p->soap_type() == SOAP_TYPE__tds__GetServices ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tds__GetServices(struct soap *soap, const char *URL, _tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServices", p->soap_type() == SOAP_TYPE__tds__GetServices ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tds__GetServices(struct soap *soap, const char *URL, _tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:GetServices", p->soap_type() == SOAP_TYPE__tds__GetServices ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tds__GetServices * SOAP_FMAC4 soap_get__tds__GetServices(struct soap*, _tds__GetServices *, const char*, const char*);

inline int soap_read__tds__GetServices(struct soap *soap, _tds__GetServices *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tds__GetServices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tds__GetServices(struct soap *soap, const char *URL, _tds__GetServices *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tds__GetServices(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tds__GetServices(struct soap *soap, _tds__GetServices *p)
{
	if (::soap_read__tds__GetServices(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__StorageConfiguration_DEFINED
#define SOAP_TYPE_tds__StorageConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__StorageConfiguration(struct soap*, const char*, int, const tds__StorageConfiguration *, const char*);
SOAP_FMAC3 tds__StorageConfiguration * SOAP_FMAC4 soap_in_tds__StorageConfiguration(struct soap*, const char*, tds__StorageConfiguration *, const char*);
SOAP_FMAC1 tds__StorageConfiguration * SOAP_FMAC2 soap_instantiate_tds__StorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tds__StorageConfiguration * soap_new_tds__StorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__StorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline tds__StorageConfiguration * soap_new_req_tds__StorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *Data,
	const std::string& token__1)
{
	tds__StorageConfiguration *_p = ::soap_new_tds__StorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfiguration::Data = Data;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tds__StorageConfiguration * soap_new_set_tds__StorageConfiguration(
	struct soap *soap,
	tds__StorageConfigurationData *Data,
	const std::string& token__1)
{
	tds__StorageConfiguration *_p = ::soap_new_tds__StorageConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfiguration::Data = Data;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tds__StorageConfiguration(struct soap *soap, tds__StorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfiguration", p->soap_type() == SOAP_TYPE_tds__StorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__StorageConfiguration(struct soap *soap, const char *URL, tds__StorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfiguration", p->soap_type() == SOAP_TYPE_tds__StorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__StorageConfiguration(struct soap *soap, const char *URL, tds__StorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfiguration", p->soap_type() == SOAP_TYPE_tds__StorageConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__StorageConfiguration(struct soap *soap, const char *URL, tds__StorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfiguration", p->soap_type() == SOAP_TYPE_tds__StorageConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__StorageConfiguration * SOAP_FMAC4 soap_get_tds__StorageConfiguration(struct soap*, tds__StorageConfiguration *, const char*, const char*);

inline int soap_read_tds__StorageConfiguration(struct soap *soap, tds__StorageConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__StorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__StorageConfiguration(struct soap *soap, const char *URL, tds__StorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__StorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__StorageConfiguration(struct soap *soap, tds__StorageConfiguration *p)
{
	if (::soap_read_tds__StorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__StorageConfigurationData_DEFINED
#define SOAP_TYPE_tds__StorageConfigurationData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__StorageConfigurationData(struct soap*, const char*, int, const tds__StorageConfigurationData *, const char*);
SOAP_FMAC3 tds__StorageConfigurationData * SOAP_FMAC4 soap_in_tds__StorageConfigurationData(struct soap*, const char*, tds__StorageConfigurationData *, const char*);
SOAP_FMAC1 tds__StorageConfigurationData * SOAP_FMAC2 soap_instantiate_tds__StorageConfigurationData(struct soap*, int, const char*, const char*, size_t*);

inline tds__StorageConfigurationData * soap_new_tds__StorageConfigurationData(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__StorageConfigurationData(soap, n, NULL, NULL, NULL);
}

inline tds__StorageConfigurationData * soap_new_req_tds__StorageConfigurationData(
	struct soap *soap,
	const std::string& type)
{
	tds__StorageConfigurationData *_p = ::soap_new_tds__StorageConfigurationData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfigurationData::type = type;
	}
	return _p;
}

inline tds__StorageConfigurationData * soap_new_set_tds__StorageConfigurationData(
	struct soap *soap,
	std::string *LocalPath,
	std::string *StorageUri,
	tds__UserCredential *User,
	_tds__StorageConfigurationData_Extension *Extension,
	const std::string& type)
{
	tds__StorageConfigurationData *_p = ::soap_new_tds__StorageConfigurationData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__StorageConfigurationData::LocalPath = LocalPath;
		_p->tds__StorageConfigurationData::StorageUri = StorageUri;
		_p->tds__StorageConfigurationData::User = User;
		_p->tds__StorageConfigurationData::Extension = Extension;
		_p->tds__StorageConfigurationData::type = type;
	}
	return _p;
}

inline int soap_write_tds__StorageConfigurationData(struct soap *soap, tds__StorageConfigurationData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData", p->soap_type() == SOAP_TYPE_tds__StorageConfigurationData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__StorageConfigurationData(struct soap *soap, const char *URL, tds__StorageConfigurationData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData", p->soap_type() == SOAP_TYPE_tds__StorageConfigurationData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__StorageConfigurationData(struct soap *soap, const char *URL, tds__StorageConfigurationData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData", p->soap_type() == SOAP_TYPE_tds__StorageConfigurationData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__StorageConfigurationData(struct soap *soap, const char *URL, tds__StorageConfigurationData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:StorageConfigurationData", p->soap_type() == SOAP_TYPE_tds__StorageConfigurationData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__StorageConfigurationData * SOAP_FMAC4 soap_get_tds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData *, const char*, const char*);

inline int soap_read_tds__StorageConfigurationData(struct soap *soap, tds__StorageConfigurationData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__StorageConfigurationData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__StorageConfigurationData(struct soap *soap, const char *URL, tds__StorageConfigurationData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__StorageConfigurationData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__StorageConfigurationData(struct soap *soap, tds__StorageConfigurationData *p)
{
	if (::soap_read_tds__StorageConfigurationData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__UserCredential_DEFINED
#define SOAP_TYPE_tds__UserCredential_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__UserCredential(struct soap*, const char*, int, const tds__UserCredential *, const char*);
SOAP_FMAC3 tds__UserCredential * SOAP_FMAC4 soap_in_tds__UserCredential(struct soap*, const char*, tds__UserCredential *, const char*);
SOAP_FMAC1 tds__UserCredential * SOAP_FMAC2 soap_instantiate_tds__UserCredential(struct soap*, int, const char*, const char*, size_t*);

inline tds__UserCredential * soap_new_tds__UserCredential(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__UserCredential(soap, n, NULL, NULL, NULL);
}

inline tds__UserCredential * soap_new_req_tds__UserCredential(
	struct soap *soap,
	const std::string& UserName)
{
	tds__UserCredential *_p = ::soap_new_tds__UserCredential(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__UserCredential::UserName = UserName;
	}
	return _p;
}

inline tds__UserCredential * soap_new_set_tds__UserCredential(
	struct soap *soap,
	const std::string& UserName,
	std::string *Password,
	_tds__UserCredential_Extension *Extension)
{
	tds__UserCredential *_p = ::soap_new_tds__UserCredential(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__UserCredential::UserName = UserName;
		_p->tds__UserCredential::Password = Password;
		_p->tds__UserCredential::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tds__UserCredential(struct soap *soap, tds__UserCredential const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential", p->soap_type() == SOAP_TYPE_tds__UserCredential ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__UserCredential(struct soap *soap, const char *URL, tds__UserCredential const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential", p->soap_type() == SOAP_TYPE_tds__UserCredential ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__UserCredential(struct soap *soap, const char *URL, tds__UserCredential const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential", p->soap_type() == SOAP_TYPE_tds__UserCredential ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__UserCredential(struct soap *soap, const char *URL, tds__UserCredential const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:UserCredential", p->soap_type() == SOAP_TYPE_tds__UserCredential ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__UserCredential * SOAP_FMAC4 soap_get_tds__UserCredential(struct soap*, tds__UserCredential *, const char*, const char*);

inline int soap_read_tds__UserCredential(struct soap *soap, tds__UserCredential *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__UserCredential(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__UserCredential(struct soap *soap, const char *URL, tds__UserCredential *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__UserCredential(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__UserCredential(struct soap *soap, tds__UserCredential *p)
{
	if (::soap_read_tds__UserCredential(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__MiscCapabilities_DEFINED
#define SOAP_TYPE_tds__MiscCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__MiscCapabilities(struct soap*, const char*, int, const tds__MiscCapabilities *, const char*);
SOAP_FMAC3 tds__MiscCapabilities * SOAP_FMAC4 soap_in_tds__MiscCapabilities(struct soap*, const char*, tds__MiscCapabilities *, const char*);
SOAP_FMAC1 tds__MiscCapabilities * SOAP_FMAC2 soap_instantiate_tds__MiscCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__MiscCapabilities * soap_new_tds__MiscCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__MiscCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__MiscCapabilities * soap_new_req_tds__MiscCapabilities(
	struct soap *soap)
{
	tds__MiscCapabilities *_p = ::soap_new_tds__MiscCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__MiscCapabilities * soap_new_set_tds__MiscCapabilities(
	struct soap *soap,
	std::string *AuxiliaryCommands)
{
	tds__MiscCapabilities *_p = ::soap_new_tds__MiscCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__MiscCapabilities::AuxiliaryCommands = AuxiliaryCommands;
	}
	return _p;
}

inline int soap_write_tds__MiscCapabilities(struct soap *soap, tds__MiscCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:MiscCapabilities", p->soap_type() == SOAP_TYPE_tds__MiscCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__MiscCapabilities(struct soap *soap, const char *URL, tds__MiscCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:MiscCapabilities", p->soap_type() == SOAP_TYPE_tds__MiscCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__MiscCapabilities(struct soap *soap, const char *URL, tds__MiscCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:MiscCapabilities", p->soap_type() == SOAP_TYPE_tds__MiscCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__MiscCapabilities(struct soap *soap, const char *URL, tds__MiscCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:MiscCapabilities", p->soap_type() == SOAP_TYPE_tds__MiscCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__MiscCapabilities * SOAP_FMAC4 soap_get_tds__MiscCapabilities(struct soap*, tds__MiscCapabilities *, const char*, const char*);

inline int soap_read_tds__MiscCapabilities(struct soap *soap, tds__MiscCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__MiscCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__MiscCapabilities(struct soap *soap, const char *URL, tds__MiscCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__MiscCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__MiscCapabilities(struct soap *soap, tds__MiscCapabilities *p)
{
	if (::soap_read_tds__MiscCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__SystemCapabilities_DEFINED
#define SOAP_TYPE_tds__SystemCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__SystemCapabilities(struct soap*, const char*, int, const tds__SystemCapabilities *, const char*);
SOAP_FMAC3 tds__SystemCapabilities * SOAP_FMAC4 soap_in_tds__SystemCapabilities(struct soap*, const char*, tds__SystemCapabilities *, const char*);
SOAP_FMAC1 tds__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tds__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__SystemCapabilities * soap_new_tds__SystemCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__SystemCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__SystemCapabilities * soap_new_req_tds__SystemCapabilities(
	struct soap *soap)
{
	tds__SystemCapabilities *_p = ::soap_new_tds__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__SystemCapabilities * soap_new_set_tds__SystemCapabilities(
	struct soap *soap,
	bool *DiscoveryResolve,
	bool *DiscoveryBye,
	bool *RemoteDiscovery,
	bool *SystemBackup,
	bool *SystemLogging,
	bool *FirmwareUpgrade,
	bool *HttpFirmwareUpgrade,
	bool *HttpSystemBackup,
	bool *HttpSystemLogging,
	bool *HttpSupportInformation,
	bool *StorageConfiguration,
	int *MaxStorageConfigurations,
	int *GeoLocationEntries,
	std::string *AutoGeo,
	std::string *StorageTypesSupported,
	bool *DiscoveryNotSupported,
	bool *NetworkConfigNotSupported,
	bool *UserConfigNotSupported,
	std::string *Addons)
{
	tds__SystemCapabilities *_p = ::soap_new_tds__SystemCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__SystemCapabilities::DiscoveryResolve = DiscoveryResolve;
		_p->tds__SystemCapabilities::DiscoveryBye = DiscoveryBye;
		_p->tds__SystemCapabilities::RemoteDiscovery = RemoteDiscovery;
		_p->tds__SystemCapabilities::SystemBackup = SystemBackup;
		_p->tds__SystemCapabilities::SystemLogging = SystemLogging;
		_p->tds__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade;
		_p->tds__SystemCapabilities::HttpFirmwareUpgrade = HttpFirmwareUpgrade;
		_p->tds__SystemCapabilities::HttpSystemBackup = HttpSystemBackup;
		_p->tds__SystemCapabilities::HttpSystemLogging = HttpSystemLogging;
		_p->tds__SystemCapabilities::HttpSupportInformation = HttpSupportInformation;
		_p->tds__SystemCapabilities::StorageConfiguration = StorageConfiguration;
		_p->tds__SystemCapabilities::MaxStorageConfigurations = MaxStorageConfigurations;
		_p->tds__SystemCapabilities::GeoLocationEntries = GeoLocationEntries;
		_p->tds__SystemCapabilities::AutoGeo = AutoGeo;
		_p->tds__SystemCapabilities::StorageTypesSupported = StorageTypesSupported;
		_p->tds__SystemCapabilities::DiscoveryNotSupported = DiscoveryNotSupported;
		_p->tds__SystemCapabilities::NetworkConfigNotSupported = NetworkConfigNotSupported;
		_p->tds__SystemCapabilities::UserConfigNotSupported = UserConfigNotSupported;
		_p->tds__SystemCapabilities::Addons = Addons;
	}
	return _p;
}

inline int soap_write_tds__SystemCapabilities(struct soap *soap, tds__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemCapabilities", p->soap_type() == SOAP_TYPE_tds__SystemCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__SystemCapabilities(struct soap *soap, const char *URL, tds__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemCapabilities", p->soap_type() == SOAP_TYPE_tds__SystemCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__SystemCapabilities(struct soap *soap, const char *URL, tds__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemCapabilities", p->soap_type() == SOAP_TYPE_tds__SystemCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__SystemCapabilities(struct soap *soap, const char *URL, tds__SystemCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SystemCapabilities", p->soap_type() == SOAP_TYPE_tds__SystemCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__SystemCapabilities * SOAP_FMAC4 soap_get_tds__SystemCapabilities(struct soap*, tds__SystemCapabilities *, const char*, const char*);

inline int soap_read_tds__SystemCapabilities(struct soap *soap, tds__SystemCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__SystemCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__SystemCapabilities(struct soap *soap, const char *URL, tds__SystemCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__SystemCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__SystemCapabilities(struct soap *soap, tds__SystemCapabilities *p)
{
	if (::soap_read_tds__SystemCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__SecurityCapabilities_DEFINED
#define SOAP_TYPE_tds__SecurityCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__SecurityCapabilities(struct soap*, const char*, int, const tds__SecurityCapabilities *, const char*);
SOAP_FMAC3 tds__SecurityCapabilities * SOAP_FMAC4 soap_in_tds__SecurityCapabilities(struct soap*, const char*, tds__SecurityCapabilities *, const char*);
SOAP_FMAC1 tds__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tds__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__SecurityCapabilities * soap_new_tds__SecurityCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__SecurityCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__SecurityCapabilities * soap_new_req_tds__SecurityCapabilities(
	struct soap *soap)
{
	tds__SecurityCapabilities *_p = ::soap_new_tds__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__SecurityCapabilities * soap_new_set_tds__SecurityCapabilities(
	struct soap *soap,
	bool *TLS1_x002e0,
	bool *TLS1_x002e1,
	bool *TLS1_x002e2,
	bool *OnboardKeyGeneration,
	bool *AccessPolicyConfig,
	bool *DefaultAccessPolicy,
	bool *Dot1X,
	bool *RemoteUserHandling,
	bool *X_x002e509Token,
	bool *SAMLToken,
	bool *KerberosToken,
	bool *UsernameToken,
	bool *HttpDigest,
	bool *RELToken,
	std::string *SupportedEAPMethods,
	int *MaxUsers,
	int *MaxUserNameLength,
	int *MaxPasswordLength,
	std::string *SecurityPolicies,
	int *MaxPasswordHistory,
	std::string *HashingAlgorithms)
{
	tds__SecurityCapabilities *_p = ::soap_new_tds__SecurityCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__SecurityCapabilities::TLS1_x002e0 = TLS1_x002e0;
		_p->tds__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1;
		_p->tds__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2;
		_p->tds__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration;
		_p->tds__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig;
		_p->tds__SecurityCapabilities::DefaultAccessPolicy = DefaultAccessPolicy;
		_p->tds__SecurityCapabilities::Dot1X = Dot1X;
		_p->tds__SecurityCapabilities::RemoteUserHandling = RemoteUserHandling;
		_p->tds__SecurityCapabilities::X_x002e509Token = X_x002e509Token;
		_p->tds__SecurityCapabilities::SAMLToken = SAMLToken;
		_p->tds__SecurityCapabilities::KerberosToken = KerberosToken;
		_p->tds__SecurityCapabilities::UsernameToken = UsernameToken;
		_p->tds__SecurityCapabilities::HttpDigest = HttpDigest;
		_p->tds__SecurityCapabilities::RELToken = RELToken;
		_p->tds__SecurityCapabilities::SupportedEAPMethods = SupportedEAPMethods;
		_p->tds__SecurityCapabilities::MaxUsers = MaxUsers;
		_p->tds__SecurityCapabilities::MaxUserNameLength = MaxUserNameLength;
		_p->tds__SecurityCapabilities::MaxPasswordLength = MaxPasswordLength;
		_p->tds__SecurityCapabilities::SecurityPolicies = SecurityPolicies;
		_p->tds__SecurityCapabilities::MaxPasswordHistory = MaxPasswordHistory;
		_p->tds__SecurityCapabilities::HashingAlgorithms = HashingAlgorithms;
	}
	return _p;
}

inline int soap_write_tds__SecurityCapabilities(struct soap *soap, tds__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tds__SecurityCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__SecurityCapabilities(struct soap *soap, const char *URL, tds__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tds__SecurityCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__SecurityCapabilities(struct soap *soap, const char *URL, tds__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tds__SecurityCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__SecurityCapabilities(struct soap *soap, const char *URL, tds__SecurityCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:SecurityCapabilities", p->soap_type() == SOAP_TYPE_tds__SecurityCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__SecurityCapabilities * SOAP_FMAC4 soap_get_tds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities *, const char*, const char*);

inline int soap_read_tds__SecurityCapabilities(struct soap *soap, tds__SecurityCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__SecurityCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__SecurityCapabilities(struct soap *soap, const char *URL, tds__SecurityCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__SecurityCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__SecurityCapabilities(struct soap *soap, tds__SecurityCapabilities *p)
{
	if (::soap_read_tds__SecurityCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__NetworkCapabilities_DEFINED
#define SOAP_TYPE_tds__NetworkCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__NetworkCapabilities(struct soap*, const char*, int, const tds__NetworkCapabilities *, const char*);
SOAP_FMAC3 tds__NetworkCapabilities * SOAP_FMAC4 soap_in_tds__NetworkCapabilities(struct soap*, const char*, tds__NetworkCapabilities *, const char*);
SOAP_FMAC1 tds__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tds__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__NetworkCapabilities * soap_new_tds__NetworkCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__NetworkCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__NetworkCapabilities * soap_new_req_tds__NetworkCapabilities(
	struct soap *soap)
{
	tds__NetworkCapabilities *_p = ::soap_new_tds__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tds__NetworkCapabilities * soap_new_set_tds__NetworkCapabilities(
	struct soap *soap,
	bool *IPFilter,
	bool *ZeroConfiguration,
	bool *IPVersion6,
	bool *DynDNS,
	bool *Dot11Configuration,
	int *Dot1XConfigurations,
	bool *HostnameFromDHCP,
	int *NTP,
	bool *DHCPv6)
{
	tds__NetworkCapabilities *_p = ::soap_new_tds__NetworkCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__NetworkCapabilities::IPFilter = IPFilter;
		_p->tds__NetworkCapabilities::ZeroConfiguration = ZeroConfiguration;
		_p->tds__NetworkCapabilities::IPVersion6 = IPVersion6;
		_p->tds__NetworkCapabilities::DynDNS = DynDNS;
		_p->tds__NetworkCapabilities::Dot11Configuration = Dot11Configuration;
		_p->tds__NetworkCapabilities::Dot1XConfigurations = Dot1XConfigurations;
		_p->tds__NetworkCapabilities::HostnameFromDHCP = HostnameFromDHCP;
		_p->tds__NetworkCapabilities::NTP = NTP;
		_p->tds__NetworkCapabilities::DHCPv6 = DHCPv6;
	}
	return _p;
}

inline int soap_write_tds__NetworkCapabilities(struct soap *soap, tds__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tds__NetworkCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__NetworkCapabilities(struct soap *soap, const char *URL, tds__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tds__NetworkCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__NetworkCapabilities(struct soap *soap, const char *URL, tds__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tds__NetworkCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__NetworkCapabilities(struct soap *soap, const char *URL, tds__NetworkCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:NetworkCapabilities", p->soap_type() == SOAP_TYPE_tds__NetworkCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__NetworkCapabilities * SOAP_FMAC4 soap_get_tds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities *, const char*, const char*);

inline int soap_read_tds__NetworkCapabilities(struct soap *soap, tds__NetworkCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__NetworkCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__NetworkCapabilities(struct soap *soap, const char *URL, tds__NetworkCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__NetworkCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__NetworkCapabilities(struct soap *soap, tds__NetworkCapabilities *p)
{
	if (::soap_read_tds__NetworkCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities_DEFINED
#define SOAP_TYPE_tds__DeviceServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__DeviceServiceCapabilities(struct soap*, const char*, int, const tds__DeviceServiceCapabilities *, const char*);
SOAP_FMAC3 tds__DeviceServiceCapabilities * SOAP_FMAC4 soap_in_tds__DeviceServiceCapabilities(struct soap*, const char*, tds__DeviceServiceCapabilities *, const char*);
SOAP_FMAC1 tds__DeviceServiceCapabilities * SOAP_FMAC2 soap_instantiate_tds__DeviceServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tds__DeviceServiceCapabilities * soap_new_tds__DeviceServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__DeviceServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline tds__DeviceServiceCapabilities * soap_new_req_tds__DeviceServiceCapabilities(
	struct soap *soap,
	tds__NetworkCapabilities *Network,
	tds__SecurityCapabilities *Security,
	tds__SystemCapabilities *System)
{
	tds__DeviceServiceCapabilities *_p = ::soap_new_tds__DeviceServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__DeviceServiceCapabilities::Network = Network;
		_p->tds__DeviceServiceCapabilities::Security = Security;
		_p->tds__DeviceServiceCapabilities::System = System;
	}
	return _p;
}

inline tds__DeviceServiceCapabilities * soap_new_set_tds__DeviceServiceCapabilities(
	struct soap *soap,
	tds__NetworkCapabilities *Network,
	tds__SecurityCapabilities *Security,
	tds__SystemCapabilities *System,
	tds__MiscCapabilities *Misc)
{
	tds__DeviceServiceCapabilities *_p = ::soap_new_tds__DeviceServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__DeviceServiceCapabilities::Network = Network;
		_p->tds__DeviceServiceCapabilities::Security = Security;
		_p->tds__DeviceServiceCapabilities::System = System;
		_p->tds__DeviceServiceCapabilities::Misc = Misc;
	}
	return _p;
}

inline int soap_write_tds__DeviceServiceCapabilities(struct soap *soap, tds__DeviceServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeviceServiceCapabilities", p->soap_type() == SOAP_TYPE_tds__DeviceServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__DeviceServiceCapabilities(struct soap *soap, const char *URL, tds__DeviceServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeviceServiceCapabilities", p->soap_type() == SOAP_TYPE_tds__DeviceServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__DeviceServiceCapabilities(struct soap *soap, const char *URL, tds__DeviceServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeviceServiceCapabilities", p->soap_type() == SOAP_TYPE_tds__DeviceServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__DeviceServiceCapabilities(struct soap *soap, const char *URL, tds__DeviceServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:DeviceServiceCapabilities", p->soap_type() == SOAP_TYPE_tds__DeviceServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__DeviceServiceCapabilities * SOAP_FMAC4 soap_get_tds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities *, const char*, const char*);

inline int soap_read_tds__DeviceServiceCapabilities(struct soap *soap, tds__DeviceServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__DeviceServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__DeviceServiceCapabilities(struct soap *soap, const char *URL, tds__DeviceServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__DeviceServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__DeviceServiceCapabilities(struct soap *soap, tds__DeviceServiceCapabilities *p)
{
	if (::soap_read_tds__DeviceServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tds__Service_DEFINED
#define SOAP_TYPE_tds__Service_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tds__Service(struct soap*, const char*, int, const tds__Service *, const char*);
SOAP_FMAC3 tds__Service * SOAP_FMAC4 soap_in_tds__Service(struct soap*, const char*, tds__Service *, const char*);
SOAP_FMAC1 tds__Service * SOAP_FMAC2 soap_instantiate_tds__Service(struct soap*, int, const char*, const char*, size_t*);

inline tds__Service * soap_new_tds__Service(struct soap *soap, int n = -1)
{
	return soap_instantiate_tds__Service(soap, n, NULL, NULL, NULL);
}

inline tds__Service * soap_new_req_tds__Service(
	struct soap *soap,
	const std::string& Namespace,
	const std::string& XAddr,
	tt__OnvifVersion *Version)
{
	tds__Service *_p = ::soap_new_tds__Service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__Service::Namespace = Namespace;
		_p->tds__Service::XAddr = XAddr;
		_p->tds__Service::Version = Version;
	}
	return _p;
}

inline tds__Service * soap_new_set_tds__Service(
	struct soap *soap,
	const std::string& Namespace,
	const std::string& XAddr,
	_tds__Service_Capabilities *Capabilities,
	tt__OnvifVersion *Version)
{
	tds__Service *_p = ::soap_new_tds__Service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tds__Service::Namespace = Namespace;
		_p->tds__Service::XAddr = XAddr;
		_p->tds__Service::Capabilities = Capabilities;
		_p->tds__Service::Version = Version;
	}
	return _p;
}

inline int soap_write_tds__Service(struct soap *soap, tds__Service const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service", p->soap_type() == SOAP_TYPE_tds__Service ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tds__Service(struct soap *soap, const char *URL, tds__Service const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service", p->soap_type() == SOAP_TYPE_tds__Service ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tds__Service(struct soap *soap, const char *URL, tds__Service const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service", p->soap_type() == SOAP_TYPE_tds__Service ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tds__Service(struct soap *soap, const char *URL, tds__Service const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tds:Service", p->soap_type() == SOAP_TYPE_tds__Service ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tds__Service * SOAP_FMAC4 soap_get_tds__Service(struct soap*, tds__Service *, const char*, const char*);

inline int soap_read_tds__Service(struct soap *soap, tds__Service *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tds__Service(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tds__Service(struct soap *soap, const char *URL, tds__Service *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tds__Service(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tds__Service(struct soap *soap, tds__Service *p)
{
	if (::soap_read_tds__Service(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _xml__lang is a typedef synonym of std__string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang soap_default_std__string


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap__xml__lang2s(soap, a) ((a).c_str())

#define soap_out__xml__lang soap_out_std__string


#define soap_s2_xml__lang(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__xml__lang soap_in_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_new__xml__lang soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xml__lang(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__xml__lang(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__xml__lang soap_get_std__string


#define soap_read__xml__lang soap_read_std__string


#define soap_GET__xml__lang soap_GET_std__string


#define soap_POST_recv__xml__lang soap_POST_recv_std__string

#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__token(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED

inline void soap_default_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "\\+?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);

#define soap_xsd__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_new_xsd__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType_DEFINED
#define SOAP_TYPE_xsd__anySimpleType_DEFINED

inline void soap_default_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap*, const std::string *);

#define soap_xsd__anySimpleType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anySimpleType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anySimpleType soap_instantiate_std__string


#define soap_new_xsd__anySimpleType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anySimpleType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anySimpleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anySimpleType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED

inline void soap_default_xsd__NCName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);

#define soap_xsd__NCName2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__NCName(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_new_xsd__NCName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__NCName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__hexBinary2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetHashingAlgorithm_DEFINED
#define SOAP_TYPE___tds__SetHashingAlgorithm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetHashingAlgorithm(struct soap*, struct __tds__SetHashingAlgorithm *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetHashingAlgorithm(struct soap*, const struct __tds__SetHashingAlgorithm *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetHashingAlgorithm(struct soap*, const char*, int, const struct __tds__SetHashingAlgorithm *, const char*);
SOAP_FMAC3 struct __tds__SetHashingAlgorithm * SOAP_FMAC4 soap_in___tds__SetHashingAlgorithm(struct soap*, const char*, struct __tds__SetHashingAlgorithm *, const char*);
SOAP_FMAC1 struct __tds__SetHashingAlgorithm * SOAP_FMAC2 soap_instantiate___tds__SetHashingAlgorithm(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetHashingAlgorithm * soap_new___tds__SetHashingAlgorithm(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetHashingAlgorithm(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetHashingAlgorithm * soap_new_req___tds__SetHashingAlgorithm(
	struct soap *soap)
{
	struct __tds__SetHashingAlgorithm *_p = ::soap_new___tds__SetHashingAlgorithm(soap);
	if (_p)
	{	::soap_default___tds__SetHashingAlgorithm(soap, _p);
	}
	return _p;
}

inline struct __tds__SetHashingAlgorithm * soap_new_set___tds__SetHashingAlgorithm(
	struct soap *soap,
	_tds__SetHashingAlgorithm *tds__SetHashingAlgorithm)
{
	struct __tds__SetHashingAlgorithm *_p = ::soap_new___tds__SetHashingAlgorithm(soap);
	if (_p)
	{	::soap_default___tds__SetHashingAlgorithm(soap, _p);
		_p->tds__SetHashingAlgorithm = tds__SetHashingAlgorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetHashingAlgorithm(struct soap*, const struct __tds__SetHashingAlgorithm *, const char*, const char*);

inline int soap_write___tds__SetHashingAlgorithm(struct soap *soap, struct __tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetHashingAlgorithm(soap, p), 0) || ::soap_put___tds__SetHashingAlgorithm(soap, p, "-tds:SetHashingAlgorithm", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetHashingAlgorithm(struct soap *soap, const char *URL, struct __tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHashingAlgorithm(soap, p), 0) || ::soap_put___tds__SetHashingAlgorithm(soap, p, "-tds:SetHashingAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetHashingAlgorithm(struct soap *soap, const char *URL, struct __tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHashingAlgorithm(soap, p), 0) || ::soap_put___tds__SetHashingAlgorithm(soap, p, "-tds:SetHashingAlgorithm", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetHashingAlgorithm(struct soap *soap, const char *URL, struct __tds__SetHashingAlgorithm const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHashingAlgorithm(soap, p), 0) || ::soap_put___tds__SetHashingAlgorithm(soap, p, "-tds:SetHashingAlgorithm", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetHashingAlgorithm * SOAP_FMAC4 soap_get___tds__SetHashingAlgorithm(struct soap*, struct __tds__SetHashingAlgorithm *, const char*, const char*);

inline int soap_read___tds__SetHashingAlgorithm(struct soap *soap, struct __tds__SetHashingAlgorithm *p)
{
	if (p)
	{	::soap_default___tds__SetHashingAlgorithm(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetHashingAlgorithm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetHashingAlgorithm(struct soap *soap, const char *URL, struct __tds__SetHashingAlgorithm *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetHashingAlgorithm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetHashingAlgorithm(struct soap *soap, struct __tds__SetHashingAlgorithm *p)
{
	if (::soap_read___tds__SetHashingAlgorithm(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__DeleteGeoLocation_DEFINED
#define SOAP_TYPE___tds__DeleteGeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteGeoLocation(struct soap*, struct __tds__DeleteGeoLocation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteGeoLocation(struct soap*, const struct __tds__DeleteGeoLocation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteGeoLocation(struct soap*, const char*, int, const struct __tds__DeleteGeoLocation *, const char*);
SOAP_FMAC3 struct __tds__DeleteGeoLocation * SOAP_FMAC4 soap_in___tds__DeleteGeoLocation(struct soap*, const char*, struct __tds__DeleteGeoLocation *, const char*);
SOAP_FMAC1 struct __tds__DeleteGeoLocation * SOAP_FMAC2 soap_instantiate___tds__DeleteGeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteGeoLocation * soap_new___tds__DeleteGeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteGeoLocation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteGeoLocation * soap_new_req___tds__DeleteGeoLocation(
	struct soap *soap)
{
	struct __tds__DeleteGeoLocation *_p = ::soap_new___tds__DeleteGeoLocation(soap);
	if (_p)
	{	::soap_default___tds__DeleteGeoLocation(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteGeoLocation * soap_new_set___tds__DeleteGeoLocation(
	struct soap *soap,
	_tds__DeleteGeoLocation *tds__DeleteGeoLocation)
{
	struct __tds__DeleteGeoLocation *_p = ::soap_new___tds__DeleteGeoLocation(soap);
	if (_p)
	{	::soap_default___tds__DeleteGeoLocation(soap, _p);
		_p->tds__DeleteGeoLocation = tds__DeleteGeoLocation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteGeoLocation(struct soap*, const struct __tds__DeleteGeoLocation *, const char*, const char*);

inline int soap_write___tds__DeleteGeoLocation(struct soap *soap, struct __tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__DeleteGeoLocation(soap, p), 0) || ::soap_put___tds__DeleteGeoLocation(soap, p, "-tds:DeleteGeoLocation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__DeleteGeoLocation(struct soap *soap, const char *URL, struct __tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteGeoLocation(soap, p), 0) || ::soap_put___tds__DeleteGeoLocation(soap, p, "-tds:DeleteGeoLocation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__DeleteGeoLocation(struct soap *soap, const char *URL, struct __tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteGeoLocation(soap, p), 0) || ::soap_put___tds__DeleteGeoLocation(soap, p, "-tds:DeleteGeoLocation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__DeleteGeoLocation(struct soap *soap, const char *URL, struct __tds__DeleteGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteGeoLocation(soap, p), 0) || ::soap_put___tds__DeleteGeoLocation(soap, p, "-tds:DeleteGeoLocation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteGeoLocation * SOAP_FMAC4 soap_get___tds__DeleteGeoLocation(struct soap*, struct __tds__DeleteGeoLocation *, const char*, const char*);

inline int soap_read___tds__DeleteGeoLocation(struct soap *soap, struct __tds__DeleteGeoLocation *p)
{
	if (p)
	{	::soap_default___tds__DeleteGeoLocation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__DeleteGeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__DeleteGeoLocation(struct soap *soap, const char *URL, struct __tds__DeleteGeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__DeleteGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__DeleteGeoLocation(struct soap *soap, struct __tds__DeleteGeoLocation *p)
{
	if (::soap_read___tds__DeleteGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetGeoLocation_DEFINED
#define SOAP_TYPE___tds__SetGeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetGeoLocation(struct soap*, struct __tds__SetGeoLocation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetGeoLocation(struct soap*, const struct __tds__SetGeoLocation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetGeoLocation(struct soap*, const char*, int, const struct __tds__SetGeoLocation *, const char*);
SOAP_FMAC3 struct __tds__SetGeoLocation * SOAP_FMAC4 soap_in___tds__SetGeoLocation(struct soap*, const char*, struct __tds__SetGeoLocation *, const char*);
SOAP_FMAC1 struct __tds__SetGeoLocation * SOAP_FMAC2 soap_instantiate___tds__SetGeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetGeoLocation * soap_new___tds__SetGeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetGeoLocation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetGeoLocation * soap_new_req___tds__SetGeoLocation(
	struct soap *soap)
{
	struct __tds__SetGeoLocation *_p = ::soap_new___tds__SetGeoLocation(soap);
	if (_p)
	{	::soap_default___tds__SetGeoLocation(soap, _p);
	}
	return _p;
}

inline struct __tds__SetGeoLocation * soap_new_set___tds__SetGeoLocation(
	struct soap *soap,
	_tds__SetGeoLocation *tds__SetGeoLocation)
{
	struct __tds__SetGeoLocation *_p = ::soap_new___tds__SetGeoLocation(soap);
	if (_p)
	{	::soap_default___tds__SetGeoLocation(soap, _p);
		_p->tds__SetGeoLocation = tds__SetGeoLocation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetGeoLocation(struct soap*, const struct __tds__SetGeoLocation *, const char*, const char*);

inline int soap_write___tds__SetGeoLocation(struct soap *soap, struct __tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetGeoLocation(soap, p), 0) || ::soap_put___tds__SetGeoLocation(soap, p, "-tds:SetGeoLocation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetGeoLocation(struct soap *soap, const char *URL, struct __tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetGeoLocation(soap, p), 0) || ::soap_put___tds__SetGeoLocation(soap, p, "-tds:SetGeoLocation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetGeoLocation(struct soap *soap, const char *URL, struct __tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetGeoLocation(soap, p), 0) || ::soap_put___tds__SetGeoLocation(soap, p, "-tds:SetGeoLocation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetGeoLocation(struct soap *soap, const char *URL, struct __tds__SetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetGeoLocation(soap, p), 0) || ::soap_put___tds__SetGeoLocation(soap, p, "-tds:SetGeoLocation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetGeoLocation * SOAP_FMAC4 soap_get___tds__SetGeoLocation(struct soap*, struct __tds__SetGeoLocation *, const char*, const char*);

inline int soap_read___tds__SetGeoLocation(struct soap *soap, struct __tds__SetGeoLocation *p)
{
	if (p)
	{	::soap_default___tds__SetGeoLocation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetGeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetGeoLocation(struct soap *soap, const char *URL, struct __tds__SetGeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetGeoLocation(struct soap *soap, struct __tds__SetGeoLocation *p)
{
	if (::soap_read___tds__SetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetGeoLocation_DEFINED
#define SOAP_TYPE___tds__GetGeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetGeoLocation(struct soap*, struct __tds__GetGeoLocation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetGeoLocation(struct soap*, const struct __tds__GetGeoLocation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetGeoLocation(struct soap*, const char*, int, const struct __tds__GetGeoLocation *, const char*);
SOAP_FMAC3 struct __tds__GetGeoLocation * SOAP_FMAC4 soap_in___tds__GetGeoLocation(struct soap*, const char*, struct __tds__GetGeoLocation *, const char*);
SOAP_FMAC1 struct __tds__GetGeoLocation * SOAP_FMAC2 soap_instantiate___tds__GetGeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetGeoLocation * soap_new___tds__GetGeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetGeoLocation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetGeoLocation * soap_new_req___tds__GetGeoLocation(
	struct soap *soap)
{
	struct __tds__GetGeoLocation *_p = ::soap_new___tds__GetGeoLocation(soap);
	if (_p)
	{	::soap_default___tds__GetGeoLocation(soap, _p);
	}
	return _p;
}

inline struct __tds__GetGeoLocation * soap_new_set___tds__GetGeoLocation(
	struct soap *soap,
	_tds__GetGeoLocation *tds__GetGeoLocation)
{
	struct __tds__GetGeoLocation *_p = ::soap_new___tds__GetGeoLocation(soap);
	if (_p)
	{	::soap_default___tds__GetGeoLocation(soap, _p);
		_p->tds__GetGeoLocation = tds__GetGeoLocation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetGeoLocation(struct soap*, const struct __tds__GetGeoLocation *, const char*, const char*);

inline int soap_write___tds__GetGeoLocation(struct soap *soap, struct __tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetGeoLocation(soap, p), 0) || ::soap_put___tds__GetGeoLocation(soap, p, "-tds:GetGeoLocation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetGeoLocation(struct soap *soap, const char *URL, struct __tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetGeoLocation(soap, p), 0) || ::soap_put___tds__GetGeoLocation(soap, p, "-tds:GetGeoLocation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetGeoLocation(struct soap *soap, const char *URL, struct __tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetGeoLocation(soap, p), 0) || ::soap_put___tds__GetGeoLocation(soap, p, "-tds:GetGeoLocation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetGeoLocation(struct soap *soap, const char *URL, struct __tds__GetGeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetGeoLocation(soap, p), 0) || ::soap_put___tds__GetGeoLocation(soap, p, "-tds:GetGeoLocation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetGeoLocation * SOAP_FMAC4 soap_get___tds__GetGeoLocation(struct soap*, struct __tds__GetGeoLocation *, const char*, const char*);

inline int soap_read___tds__GetGeoLocation(struct soap *soap, struct __tds__GetGeoLocation *p)
{
	if (p)
	{	::soap_default___tds__GetGeoLocation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetGeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetGeoLocation(struct soap *soap, const char *URL, struct __tds__GetGeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetGeoLocation(struct soap *soap, struct __tds__GetGeoLocation *p)
{
	if (::soap_read___tds__GetGeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__DeleteStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__DeleteStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteStorageConfiguration(struct soap*, struct __tds__DeleteStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteStorageConfiguration(struct soap*, const struct __tds__DeleteStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteStorageConfiguration(struct soap*, const char*, int, const struct __tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_in___tds__DeleteStorageConfiguration(struct soap*, const char*, struct __tds__DeleteStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__DeleteStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteStorageConfiguration * soap_new___tds__DeleteStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteStorageConfiguration * soap_new_req___tds__DeleteStorageConfiguration(
	struct soap *soap)
{
	struct __tds__DeleteStorageConfiguration *_p = ::soap_new___tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__DeleteStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteStorageConfiguration * soap_new_set___tds__DeleteStorageConfiguration(
	struct soap *soap,
	_tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration)
{
	struct __tds__DeleteStorageConfiguration *_p = ::soap_new___tds__DeleteStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__DeleteStorageConfiguration(soap, _p);
		_p->tds__DeleteStorageConfiguration = tds__DeleteStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteStorageConfiguration(struct soap*, const struct __tds__DeleteStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__DeleteStorageConfiguration(struct soap *soap, struct __tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__DeleteStorageConfiguration(soap, p), 0) || ::soap_put___tds__DeleteStorageConfiguration(soap, p, "-tds:DeleteStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteStorageConfiguration(soap, p), 0) || ::soap_put___tds__DeleteStorageConfiguration(soap, p, "-tds:DeleteStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteStorageConfiguration(soap, p), 0) || ::soap_put___tds__DeleteStorageConfiguration(soap, p, "-tds:DeleteStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteStorageConfiguration(soap, p), 0) || ::soap_put___tds__DeleteStorageConfiguration(soap, p, "-tds:DeleteStorageConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteStorageConfiguration * SOAP_FMAC4 soap_get___tds__DeleteStorageConfiguration(struct soap*, struct __tds__DeleteStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__DeleteStorageConfiguration(struct soap *soap, struct __tds__DeleteStorageConfiguration *p)
{
	if (p)
	{	::soap_default___tds__DeleteStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__DeleteStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__DeleteStorageConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__DeleteStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__DeleteStorageConfiguration(struct soap *soap, struct __tds__DeleteStorageConfiguration *p)
{
	if (::soap_read___tds__DeleteStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__SetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetStorageConfiguration(struct soap*, struct __tds__SetStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetStorageConfiguration(struct soap*, const struct __tds__SetStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetStorageConfiguration(struct soap*, const char*, int, const struct __tds__SetStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetStorageConfiguration * SOAP_FMAC4 soap_in___tds__SetStorageConfiguration(struct soap*, const char*, struct __tds__SetStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetStorageConfiguration * soap_new___tds__SetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetStorageConfiguration * soap_new_req___tds__SetStorageConfiguration(
	struct soap *soap)
{
	struct __tds__SetStorageConfiguration *_p = ::soap_new___tds__SetStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetStorageConfiguration * soap_new_set___tds__SetStorageConfiguration(
	struct soap *soap,
	_tds__SetStorageConfiguration *tds__SetStorageConfiguration)
{
	struct __tds__SetStorageConfiguration *_p = ::soap_new___tds__SetStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetStorageConfiguration(soap, _p);
		_p->tds__SetStorageConfiguration = tds__SetStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetStorageConfiguration(struct soap*, const struct __tds__SetStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__SetStorageConfiguration(struct soap *soap, struct __tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetStorageConfiguration(soap, p), 0) || ::soap_put___tds__SetStorageConfiguration(soap, p, "-tds:SetStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetStorageConfiguration(soap, p), 0) || ::soap_put___tds__SetStorageConfiguration(soap, p, "-tds:SetStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetStorageConfiguration(soap, p), 0) || ::soap_put___tds__SetStorageConfiguration(soap, p, "-tds:SetStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__SetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetStorageConfiguration(soap, p), 0) || ::soap_put___tds__SetStorageConfiguration(soap, p, "-tds:SetStorageConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetStorageConfiguration * SOAP_FMAC4 soap_get___tds__SetStorageConfiguration(struct soap*, struct __tds__SetStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__SetStorageConfiguration(struct soap *soap, struct __tds__SetStorageConfiguration *p)
{
	if (p)
	{	::soap_default___tds__SetStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__SetStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetStorageConfiguration(struct soap *soap, struct __tds__SetStorageConfiguration *p)
{
	if (::soap_read___tds__SetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__GetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetStorageConfiguration(struct soap*, struct __tds__GetStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetStorageConfiguration(struct soap*, const struct __tds__GetStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetStorageConfiguration(struct soap*, const char*, int, const struct __tds__GetStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetStorageConfiguration * SOAP_FMAC4 soap_in___tds__GetStorageConfiguration(struct soap*, const char*, struct __tds__GetStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetStorageConfiguration * soap_new___tds__GetStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetStorageConfiguration * soap_new_req___tds__GetStorageConfiguration(
	struct soap *soap)
{
	struct __tds__GetStorageConfiguration *_p = ::soap_new___tds__GetStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetStorageConfiguration * soap_new_set___tds__GetStorageConfiguration(
	struct soap *soap,
	_tds__GetStorageConfiguration *tds__GetStorageConfiguration)
{
	struct __tds__GetStorageConfiguration *_p = ::soap_new___tds__GetStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetStorageConfiguration(soap, _p);
		_p->tds__GetStorageConfiguration = tds__GetStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetStorageConfiguration(struct soap*, const struct __tds__GetStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__GetStorageConfiguration(struct soap *soap, struct __tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetStorageConfiguration(soap, p), 0) || ::soap_put___tds__GetStorageConfiguration(soap, p, "-tds:GetStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetStorageConfiguration(soap, p), 0) || ::soap_put___tds__GetStorageConfiguration(soap, p, "-tds:GetStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetStorageConfiguration(soap, p), 0) || ::soap_put___tds__GetStorageConfiguration(soap, p, "-tds:GetStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__GetStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetStorageConfiguration(soap, p), 0) || ::soap_put___tds__GetStorageConfiguration(soap, p, "-tds:GetStorageConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetStorageConfiguration * SOAP_FMAC4 soap_get___tds__GetStorageConfiguration(struct soap*, struct __tds__GetStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__GetStorageConfiguration(struct soap *soap, struct __tds__GetStorageConfiguration *p)
{
	if (p)
	{	::soap_default___tds__GetStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetStorageConfiguration(struct soap *soap, const char *URL, struct __tds__GetStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetStorageConfiguration(struct soap *soap, struct __tds__GetStorageConfiguration *p)
{
	if (::soap_read___tds__GetStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__CreateStorageConfiguration_DEFINED
#define SOAP_TYPE___tds__CreateStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateStorageConfiguration(struct soap*, struct __tds__CreateStorageConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateStorageConfiguration(struct soap*, const struct __tds__CreateStorageConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateStorageConfiguration(struct soap*, const char*, int, const struct __tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC3 struct __tds__CreateStorageConfiguration * SOAP_FMAC4 soap_in___tds__CreateStorageConfiguration(struct soap*, const char*, struct __tds__CreateStorageConfiguration *, const char*);
SOAP_FMAC1 struct __tds__CreateStorageConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateStorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateStorageConfiguration * soap_new___tds__CreateStorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateStorageConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateStorageConfiguration * soap_new_req___tds__CreateStorageConfiguration(
	struct soap *soap)
{
	struct __tds__CreateStorageConfiguration *_p = ::soap_new___tds__CreateStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__CreateStorageConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateStorageConfiguration * soap_new_set___tds__CreateStorageConfiguration(
	struct soap *soap,
	_tds__CreateStorageConfiguration *tds__CreateStorageConfiguration)
{
	struct __tds__CreateStorageConfiguration *_p = ::soap_new___tds__CreateStorageConfiguration(soap);
	if (_p)
	{	::soap_default___tds__CreateStorageConfiguration(soap, _p);
		_p->tds__CreateStorageConfiguration = tds__CreateStorageConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateStorageConfiguration(struct soap*, const struct __tds__CreateStorageConfiguration *, const char*, const char*);

inline int soap_write___tds__CreateStorageConfiguration(struct soap *soap, struct __tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__CreateStorageConfiguration(soap, p), 0) || ::soap_put___tds__CreateStorageConfiguration(soap, p, "-tds:CreateStorageConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__CreateStorageConfiguration(struct soap *soap, const char *URL, struct __tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateStorageConfiguration(soap, p), 0) || ::soap_put___tds__CreateStorageConfiguration(soap, p, "-tds:CreateStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__CreateStorageConfiguration(struct soap *soap, const char *URL, struct __tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateStorageConfiguration(soap, p), 0) || ::soap_put___tds__CreateStorageConfiguration(soap, p, "-tds:CreateStorageConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__CreateStorageConfiguration(struct soap *soap, const char *URL, struct __tds__CreateStorageConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateStorageConfiguration(soap, p), 0) || ::soap_put___tds__CreateStorageConfiguration(soap, p, "-tds:CreateStorageConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateStorageConfiguration * SOAP_FMAC4 soap_get___tds__CreateStorageConfiguration(struct soap*, struct __tds__CreateStorageConfiguration *, const char*, const char*);

inline int soap_read___tds__CreateStorageConfiguration(struct soap *soap, struct __tds__CreateStorageConfiguration *p)
{
	if (p)
	{	::soap_default___tds__CreateStorageConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__CreateStorageConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__CreateStorageConfiguration(struct soap *soap, const char *URL, struct __tds__CreateStorageConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__CreateStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__CreateStorageConfiguration(struct soap *soap, struct __tds__CreateStorageConfiguration *p)
{
	if (::soap_read___tds__CreateStorageConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfigurations_DEFINED
#define SOAP_TYPE___tds__GetStorageConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetStorageConfigurations(struct soap*, struct __tds__GetStorageConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetStorageConfigurations(struct soap*, const struct __tds__GetStorageConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetStorageConfigurations(struct soap*, const char*, int, const struct __tds__GetStorageConfigurations *, const char*);
SOAP_FMAC3 struct __tds__GetStorageConfigurations * SOAP_FMAC4 soap_in___tds__GetStorageConfigurations(struct soap*, const char*, struct __tds__GetStorageConfigurations *, const char*);
SOAP_FMAC1 struct __tds__GetStorageConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetStorageConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetStorageConfigurations * soap_new___tds__GetStorageConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetStorageConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetStorageConfigurations * soap_new_req___tds__GetStorageConfigurations(
	struct soap *soap)
{
	struct __tds__GetStorageConfigurations *_p = ::soap_new___tds__GetStorageConfigurations(soap);
	if (_p)
	{	::soap_default___tds__GetStorageConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tds__GetStorageConfigurations * soap_new_set___tds__GetStorageConfigurations(
	struct soap *soap,
	_tds__GetStorageConfigurations *tds__GetStorageConfigurations)
{
	struct __tds__GetStorageConfigurations *_p = ::soap_new___tds__GetStorageConfigurations(soap);
	if (_p)
	{	::soap_default___tds__GetStorageConfigurations(soap, _p);
		_p->tds__GetStorageConfigurations = tds__GetStorageConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetStorageConfigurations(struct soap*, const struct __tds__GetStorageConfigurations *, const char*, const char*);

inline int soap_write___tds__GetStorageConfigurations(struct soap *soap, struct __tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetStorageConfigurations(soap, p), 0) || ::soap_put___tds__GetStorageConfigurations(soap, p, "-tds:GetStorageConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetStorageConfigurations(struct soap *soap, const char *URL, struct __tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetStorageConfigurations(soap, p), 0) || ::soap_put___tds__GetStorageConfigurations(soap, p, "-tds:GetStorageConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetStorageConfigurations(struct soap *soap, const char *URL, struct __tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetStorageConfigurations(soap, p), 0) || ::soap_put___tds__GetStorageConfigurations(soap, p, "-tds:GetStorageConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetStorageConfigurations(struct soap *soap, const char *URL, struct __tds__GetStorageConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetStorageConfigurations(soap, p), 0) || ::soap_put___tds__GetStorageConfigurations(soap, p, "-tds:GetStorageConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetStorageConfigurations * SOAP_FMAC4 soap_get___tds__GetStorageConfigurations(struct soap*, struct __tds__GetStorageConfigurations *, const char*, const char*);

inline int soap_read___tds__GetStorageConfigurations(struct soap *soap, struct __tds__GetStorageConfigurations *p)
{
	if (p)
	{	::soap_default___tds__GetStorageConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetStorageConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetStorageConfigurations(struct soap *soap, const char *URL, struct __tds__GetStorageConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetStorageConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetStorageConfigurations(struct soap *soap, struct __tds__GetStorageConfigurations *p)
{
	if (::soap_read___tds__GetStorageConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__StartSystemRestore_DEFINED
#define SOAP_TYPE___tds__StartSystemRestore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__StartSystemRestore(struct soap*, struct __tds__StartSystemRestore *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__StartSystemRestore(struct soap*, const struct __tds__StartSystemRestore *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__StartSystemRestore(struct soap*, const char*, int, const struct __tds__StartSystemRestore *, const char*);
SOAP_FMAC3 struct __tds__StartSystemRestore * SOAP_FMAC4 soap_in___tds__StartSystemRestore(struct soap*, const char*, struct __tds__StartSystemRestore *, const char*);
SOAP_FMAC1 struct __tds__StartSystemRestore * SOAP_FMAC2 soap_instantiate___tds__StartSystemRestore(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__StartSystemRestore * soap_new___tds__StartSystemRestore(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__StartSystemRestore(soap, n, NULL, NULL, NULL);
}

inline struct __tds__StartSystemRestore * soap_new_req___tds__StartSystemRestore(
	struct soap *soap)
{
	struct __tds__StartSystemRestore *_p = ::soap_new___tds__StartSystemRestore(soap);
	if (_p)
	{	::soap_default___tds__StartSystemRestore(soap, _p);
	}
	return _p;
}

inline struct __tds__StartSystemRestore * soap_new_set___tds__StartSystemRestore(
	struct soap *soap,
	_tds__StartSystemRestore *tds__StartSystemRestore)
{
	struct __tds__StartSystemRestore *_p = ::soap_new___tds__StartSystemRestore(soap);
	if (_p)
	{	::soap_default___tds__StartSystemRestore(soap, _p);
		_p->tds__StartSystemRestore = tds__StartSystemRestore;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__StartSystemRestore(struct soap*, const struct __tds__StartSystemRestore *, const char*, const char*);

inline int soap_write___tds__StartSystemRestore(struct soap *soap, struct __tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__StartSystemRestore(soap, p), 0) || ::soap_put___tds__StartSystemRestore(soap, p, "-tds:StartSystemRestore", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__StartSystemRestore(struct soap *soap, const char *URL, struct __tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__StartSystemRestore(soap, p), 0) || ::soap_put___tds__StartSystemRestore(soap, p, "-tds:StartSystemRestore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__StartSystemRestore(struct soap *soap, const char *URL, struct __tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__StartSystemRestore(soap, p), 0) || ::soap_put___tds__StartSystemRestore(soap, p, "-tds:StartSystemRestore", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__StartSystemRestore(struct soap *soap, const char *URL, struct __tds__StartSystemRestore const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__StartSystemRestore(soap, p), 0) || ::soap_put___tds__StartSystemRestore(soap, p, "-tds:StartSystemRestore", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__StartSystemRestore * SOAP_FMAC4 soap_get___tds__StartSystemRestore(struct soap*, struct __tds__StartSystemRestore *, const char*, const char*);

inline int soap_read___tds__StartSystemRestore(struct soap *soap, struct __tds__StartSystemRestore *p)
{
	if (p)
	{	::soap_default___tds__StartSystemRestore(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__StartSystemRestore(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__StartSystemRestore(struct soap *soap, const char *URL, struct __tds__StartSystemRestore *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__StartSystemRestore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__StartSystemRestore(struct soap *soap, struct __tds__StartSystemRestore *p)
{
	if (::soap_read___tds__StartSystemRestore(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade_DEFINED
#define SOAP_TYPE___tds__StartFirmwareUpgrade_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__StartFirmwareUpgrade(struct soap*, struct __tds__StartFirmwareUpgrade *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__StartFirmwareUpgrade(struct soap*, const struct __tds__StartFirmwareUpgrade *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__StartFirmwareUpgrade(struct soap*, const char*, int, const struct __tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC3 struct __tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_in___tds__StartFirmwareUpgrade(struct soap*, const char*, struct __tds__StartFirmwareUpgrade *, const char*);
SOAP_FMAC1 struct __tds__StartFirmwareUpgrade * SOAP_FMAC2 soap_instantiate___tds__StartFirmwareUpgrade(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__StartFirmwareUpgrade * soap_new___tds__StartFirmwareUpgrade(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__StartFirmwareUpgrade(soap, n, NULL, NULL, NULL);
}

inline struct __tds__StartFirmwareUpgrade * soap_new_req___tds__StartFirmwareUpgrade(
	struct soap *soap)
{
	struct __tds__StartFirmwareUpgrade *_p = ::soap_new___tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	::soap_default___tds__StartFirmwareUpgrade(soap, _p);
	}
	return _p;
}

inline struct __tds__StartFirmwareUpgrade * soap_new_set___tds__StartFirmwareUpgrade(
	struct soap *soap,
	_tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade)
{
	struct __tds__StartFirmwareUpgrade *_p = ::soap_new___tds__StartFirmwareUpgrade(soap);
	if (_p)
	{	::soap_default___tds__StartFirmwareUpgrade(soap, _p);
		_p->tds__StartFirmwareUpgrade = tds__StartFirmwareUpgrade;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__StartFirmwareUpgrade(struct soap*, const struct __tds__StartFirmwareUpgrade *, const char*, const char*);

inline int soap_write___tds__StartFirmwareUpgrade(struct soap *soap, struct __tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__StartFirmwareUpgrade(soap, p), 0) || ::soap_put___tds__StartFirmwareUpgrade(soap, p, "-tds:StartFirmwareUpgrade", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, struct __tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__StartFirmwareUpgrade(soap, p), 0) || ::soap_put___tds__StartFirmwareUpgrade(soap, p, "-tds:StartFirmwareUpgrade", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, struct __tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__StartFirmwareUpgrade(soap, p), 0) || ::soap_put___tds__StartFirmwareUpgrade(soap, p, "-tds:StartFirmwareUpgrade", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, struct __tds__StartFirmwareUpgrade const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__StartFirmwareUpgrade(soap, p), 0) || ::soap_put___tds__StartFirmwareUpgrade(soap, p, "-tds:StartFirmwareUpgrade", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__StartFirmwareUpgrade * SOAP_FMAC4 soap_get___tds__StartFirmwareUpgrade(struct soap*, struct __tds__StartFirmwareUpgrade *, const char*, const char*);

inline int soap_read___tds__StartFirmwareUpgrade(struct soap *soap, struct __tds__StartFirmwareUpgrade *p)
{
	if (p)
	{	::soap_default___tds__StartFirmwareUpgrade(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__StartFirmwareUpgrade(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__StartFirmwareUpgrade(struct soap *soap, const char *URL, struct __tds__StartFirmwareUpgrade *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__StartFirmwareUpgrade(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__StartFirmwareUpgrade(struct soap *soap, struct __tds__StartFirmwareUpgrade *p)
{
	if (::soap_read___tds__StartFirmwareUpgrade(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemUris_DEFINED
#define SOAP_TYPE___tds__GetSystemUris_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemUris(struct soap*, struct __tds__GetSystemUris *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemUris(struct soap*, const struct __tds__GetSystemUris *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemUris(struct soap*, const char*, int, const struct __tds__GetSystemUris *, const char*);
SOAP_FMAC3 struct __tds__GetSystemUris * SOAP_FMAC4 soap_in___tds__GetSystemUris(struct soap*, const char*, struct __tds__GetSystemUris *, const char*);
SOAP_FMAC1 struct __tds__GetSystemUris * SOAP_FMAC2 soap_instantiate___tds__GetSystemUris(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemUris * soap_new___tds__GetSystemUris(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemUris(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemUris * soap_new_req___tds__GetSystemUris(
	struct soap *soap)
{
	struct __tds__GetSystemUris *_p = ::soap_new___tds__GetSystemUris(soap);
	if (_p)
	{	::soap_default___tds__GetSystemUris(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemUris * soap_new_set___tds__GetSystemUris(
	struct soap *soap,
	_tds__GetSystemUris *tds__GetSystemUris)
{
	struct __tds__GetSystemUris *_p = ::soap_new___tds__GetSystemUris(soap);
	if (_p)
	{	::soap_default___tds__GetSystemUris(soap, _p);
		_p->tds__GetSystemUris = tds__GetSystemUris;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemUris(struct soap*, const struct __tds__GetSystemUris *, const char*, const char*);

inline int soap_write___tds__GetSystemUris(struct soap *soap, struct __tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetSystemUris(soap, p), 0) || ::soap_put___tds__GetSystemUris(soap, p, "-tds:GetSystemUris", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetSystemUris(struct soap *soap, const char *URL, struct __tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemUris(soap, p), 0) || ::soap_put___tds__GetSystemUris(soap, p, "-tds:GetSystemUris", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetSystemUris(struct soap *soap, const char *URL, struct __tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemUris(soap, p), 0) || ::soap_put___tds__GetSystemUris(soap, p, "-tds:GetSystemUris", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetSystemUris(struct soap *soap, const char *URL, struct __tds__GetSystemUris const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemUris(soap, p), 0) || ::soap_put___tds__GetSystemUris(soap, p, "-tds:GetSystemUris", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemUris * SOAP_FMAC4 soap_get___tds__GetSystemUris(struct soap*, struct __tds__GetSystemUris *, const char*, const char*);

inline int soap_read___tds__GetSystemUris(struct soap *soap, struct __tds__GetSystemUris *p)
{
	if (p)
	{	::soap_default___tds__GetSystemUris(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetSystemUris(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetSystemUris(struct soap *soap, const char *URL, struct __tds__GetSystemUris *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetSystemUris(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetSystemUris(struct soap *soap, struct __tds__GetSystemUris *p)
{
	if (::soap_read___tds__GetSystemUris(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks_DEFINED
#define SOAP_TYPE___tds__ScanAvailableDot11Networks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__ScanAvailableDot11Networks(struct soap*, struct __tds__ScanAvailableDot11Networks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__ScanAvailableDot11Networks(struct soap*, const struct __tds__ScanAvailableDot11Networks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__ScanAvailableDot11Networks(struct soap*, const char*, int, const struct __tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC3 struct __tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_in___tds__ScanAvailableDot11Networks(struct soap*, const char*, struct __tds__ScanAvailableDot11Networks *, const char*);
SOAP_FMAC1 struct __tds__ScanAvailableDot11Networks * SOAP_FMAC2 soap_instantiate___tds__ScanAvailableDot11Networks(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__ScanAvailableDot11Networks * soap_new___tds__ScanAvailableDot11Networks(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__ScanAvailableDot11Networks(soap, n, NULL, NULL, NULL);
}

inline struct __tds__ScanAvailableDot11Networks * soap_new_req___tds__ScanAvailableDot11Networks(
	struct soap *soap)
{
	struct __tds__ScanAvailableDot11Networks *_p = ::soap_new___tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	::soap_default___tds__ScanAvailableDot11Networks(soap, _p);
	}
	return _p;
}

inline struct __tds__ScanAvailableDot11Networks * soap_new_set___tds__ScanAvailableDot11Networks(
	struct soap *soap,
	_tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks)
{
	struct __tds__ScanAvailableDot11Networks *_p = ::soap_new___tds__ScanAvailableDot11Networks(soap);
	if (_p)
	{	::soap_default___tds__ScanAvailableDot11Networks(soap, _p);
		_p->tds__ScanAvailableDot11Networks = tds__ScanAvailableDot11Networks;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__ScanAvailableDot11Networks(struct soap*, const struct __tds__ScanAvailableDot11Networks *, const char*, const char*);

inline int soap_write___tds__ScanAvailableDot11Networks(struct soap *soap, struct __tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__ScanAvailableDot11Networks(soap, p), 0) || ::soap_put___tds__ScanAvailableDot11Networks(soap, p, "-tds:ScanAvailableDot11Networks", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, struct __tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__ScanAvailableDot11Networks(soap, p), 0) || ::soap_put___tds__ScanAvailableDot11Networks(soap, p, "-tds:ScanAvailableDot11Networks", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, struct __tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__ScanAvailableDot11Networks(soap, p), 0) || ::soap_put___tds__ScanAvailableDot11Networks(soap, p, "-tds:ScanAvailableDot11Networks", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, struct __tds__ScanAvailableDot11Networks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__ScanAvailableDot11Networks(soap, p), 0) || ::soap_put___tds__ScanAvailableDot11Networks(soap, p, "-tds:ScanAvailableDot11Networks", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__ScanAvailableDot11Networks * SOAP_FMAC4 soap_get___tds__ScanAvailableDot11Networks(struct soap*, struct __tds__ScanAvailableDot11Networks *, const char*, const char*);

inline int soap_read___tds__ScanAvailableDot11Networks(struct soap *soap, struct __tds__ScanAvailableDot11Networks *p)
{
	if (p)
	{	::soap_default___tds__ScanAvailableDot11Networks(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__ScanAvailableDot11Networks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__ScanAvailableDot11Networks(struct soap *soap, const char *URL, struct __tds__ScanAvailableDot11Networks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__ScanAvailableDot11Networks(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__ScanAvailableDot11Networks(struct soap *soap, struct __tds__ScanAvailableDot11Networks *p)
{
	if (::soap_read___tds__ScanAvailableDot11Networks(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDot11Status_DEFINED
#define SOAP_TYPE___tds__GetDot11Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot11Status(struct soap*, struct __tds__GetDot11Status *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot11Status(struct soap*, const struct __tds__GetDot11Status *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot11Status(struct soap*, const char*, int, const struct __tds__GetDot11Status *, const char*);
SOAP_FMAC3 struct __tds__GetDot11Status * SOAP_FMAC4 soap_in___tds__GetDot11Status(struct soap*, const char*, struct __tds__GetDot11Status *, const char*);
SOAP_FMAC1 struct __tds__GetDot11Status * SOAP_FMAC2 soap_instantiate___tds__GetDot11Status(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot11Status * soap_new___tds__GetDot11Status(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot11Status(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot11Status * soap_new_req___tds__GetDot11Status(
	struct soap *soap)
{
	struct __tds__GetDot11Status *_p = ::soap_new___tds__GetDot11Status(soap);
	if (_p)
	{	::soap_default___tds__GetDot11Status(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot11Status * soap_new_set___tds__GetDot11Status(
	struct soap *soap,
	_tds__GetDot11Status *tds__GetDot11Status)
{
	struct __tds__GetDot11Status *_p = ::soap_new___tds__GetDot11Status(soap);
	if (_p)
	{	::soap_default___tds__GetDot11Status(soap, _p);
		_p->tds__GetDot11Status = tds__GetDot11Status;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot11Status(struct soap*, const struct __tds__GetDot11Status *, const char*, const char*);

inline int soap_write___tds__GetDot11Status(struct soap *soap, struct __tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDot11Status(soap, p), 0) || ::soap_put___tds__GetDot11Status(soap, p, "-tds:GetDot11Status", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDot11Status(struct soap *soap, const char *URL, struct __tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot11Status(soap, p), 0) || ::soap_put___tds__GetDot11Status(soap, p, "-tds:GetDot11Status", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDot11Status(struct soap *soap, const char *URL, struct __tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot11Status(soap, p), 0) || ::soap_put___tds__GetDot11Status(soap, p, "-tds:GetDot11Status", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDot11Status(struct soap *soap, const char *URL, struct __tds__GetDot11Status const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot11Status(soap, p), 0) || ::soap_put___tds__GetDot11Status(soap, p, "-tds:GetDot11Status", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot11Status * SOAP_FMAC4 soap_get___tds__GetDot11Status(struct soap*, struct __tds__GetDot11Status *, const char*, const char*);

inline int soap_read___tds__GetDot11Status(struct soap *soap, struct __tds__GetDot11Status *p)
{
	if (p)
	{	::soap_default___tds__GetDot11Status(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDot11Status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDot11Status(struct soap *soap, const char *URL, struct __tds__GetDot11Status *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDot11Status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDot11Status(struct soap *soap, struct __tds__GetDot11Status *p)
{
	if (::soap_read___tds__GetDot11Status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDot11Capabilities_DEFINED
#define SOAP_TYPE___tds__GetDot11Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot11Capabilities(struct soap*, struct __tds__GetDot11Capabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot11Capabilities(struct soap*, const struct __tds__GetDot11Capabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot11Capabilities(struct soap*, const char*, int, const struct __tds__GetDot11Capabilities *, const char*);
SOAP_FMAC3 struct __tds__GetDot11Capabilities * SOAP_FMAC4 soap_in___tds__GetDot11Capabilities(struct soap*, const char*, struct __tds__GetDot11Capabilities *, const char*);
SOAP_FMAC1 struct __tds__GetDot11Capabilities * SOAP_FMAC2 soap_instantiate___tds__GetDot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot11Capabilities * soap_new___tds__GetDot11Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot11Capabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot11Capabilities * soap_new_req___tds__GetDot11Capabilities(
	struct soap *soap)
{
	struct __tds__GetDot11Capabilities *_p = ::soap_new___tds__GetDot11Capabilities(soap);
	if (_p)
	{	::soap_default___tds__GetDot11Capabilities(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot11Capabilities * soap_new_set___tds__GetDot11Capabilities(
	struct soap *soap,
	_tds__GetDot11Capabilities *tds__GetDot11Capabilities)
{
	struct __tds__GetDot11Capabilities *_p = ::soap_new___tds__GetDot11Capabilities(soap);
	if (_p)
	{	::soap_default___tds__GetDot11Capabilities(soap, _p);
		_p->tds__GetDot11Capabilities = tds__GetDot11Capabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot11Capabilities(struct soap*, const struct __tds__GetDot11Capabilities *, const char*, const char*);

inline int soap_write___tds__GetDot11Capabilities(struct soap *soap, struct __tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDot11Capabilities(soap, p), 0) || ::soap_put___tds__GetDot11Capabilities(soap, p, "-tds:GetDot11Capabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDot11Capabilities(struct soap *soap, const char *URL, struct __tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot11Capabilities(soap, p), 0) || ::soap_put___tds__GetDot11Capabilities(soap, p, "-tds:GetDot11Capabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDot11Capabilities(struct soap *soap, const char *URL, struct __tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot11Capabilities(soap, p), 0) || ::soap_put___tds__GetDot11Capabilities(soap, p, "-tds:GetDot11Capabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDot11Capabilities(struct soap *soap, const char *URL, struct __tds__GetDot11Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot11Capabilities(soap, p), 0) || ::soap_put___tds__GetDot11Capabilities(soap, p, "-tds:GetDot11Capabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot11Capabilities * SOAP_FMAC4 soap_get___tds__GetDot11Capabilities(struct soap*, struct __tds__GetDot11Capabilities *, const char*, const char*);

inline int soap_read___tds__GetDot11Capabilities(struct soap *soap, struct __tds__GetDot11Capabilities *p)
{
	if (p)
	{	::soap_default___tds__GetDot11Capabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDot11Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDot11Capabilities(struct soap *soap, const char *URL, struct __tds__GetDot11Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDot11Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDot11Capabilities(struct soap *soap, struct __tds__GetDot11Capabilities *p)
{
	if (::soap_read___tds__GetDot11Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__DeleteDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteDot1XConfiguration(struct soap*, struct __tds__DeleteDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteDot1XConfiguration(struct soap*, const struct __tds__DeleteDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteDot1XConfiguration(struct soap*, const char*, int, const struct __tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_in___tds__DeleteDot1XConfiguration(struct soap*, const char*, struct __tds__DeleteDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__DeleteDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__DeleteDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteDot1XConfiguration * soap_new___tds__DeleteDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteDot1XConfiguration * soap_new_req___tds__DeleteDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__DeleteDot1XConfiguration *_p = ::soap_new___tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__DeleteDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteDot1XConfiguration * soap_new_set___tds__DeleteDot1XConfiguration(
	struct soap *soap,
	_tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration)
{
	struct __tds__DeleteDot1XConfiguration *_p = ::soap_new___tds__DeleteDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__DeleteDot1XConfiguration(soap, _p);
		_p->tds__DeleteDot1XConfiguration = tds__DeleteDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteDot1XConfiguration(struct soap*, const struct __tds__DeleteDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__DeleteDot1XConfiguration(struct soap *soap, struct __tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__DeleteDot1XConfiguration(soap, p), 0) || ::soap_put___tds__DeleteDot1XConfiguration(soap, p, "-tds:DeleteDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteDot1XConfiguration(soap, p), 0) || ::soap_put___tds__DeleteDot1XConfiguration(soap, p, "-tds:DeleteDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteDot1XConfiguration(soap, p), 0) || ::soap_put___tds__DeleteDot1XConfiguration(soap, p, "-tds:DeleteDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteDot1XConfiguration(soap, p), 0) || ::soap_put___tds__DeleteDot1XConfiguration(soap, p, "-tds:DeleteDot1XConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteDot1XConfiguration * SOAP_FMAC4 soap_get___tds__DeleteDot1XConfiguration(struct soap*, struct __tds__DeleteDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__DeleteDot1XConfiguration(struct soap *soap, struct __tds__DeleteDot1XConfiguration *p)
{
	if (p)
	{	::soap_default___tds__DeleteDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__DeleteDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__DeleteDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__DeleteDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__DeleteDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__DeleteDot1XConfiguration(struct soap *soap, struct __tds__DeleteDot1XConfiguration *p)
{
	if (::soap_read___tds__DeleteDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfigurations_DEFINED
#define SOAP_TYPE___tds__GetDot1XConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot1XConfigurations(struct soap*, struct __tds__GetDot1XConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot1XConfigurations(struct soap*, const struct __tds__GetDot1XConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot1XConfigurations(struct soap*, const char*, int, const struct __tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC3 struct __tds__GetDot1XConfigurations * SOAP_FMAC4 soap_in___tds__GetDot1XConfigurations(struct soap*, const char*, struct __tds__GetDot1XConfigurations *, const char*);
SOAP_FMAC1 struct __tds__GetDot1XConfigurations * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot1XConfigurations * soap_new___tds__GetDot1XConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot1XConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot1XConfigurations * soap_new_req___tds__GetDot1XConfigurations(
	struct soap *soap)
{
	struct __tds__GetDot1XConfigurations *_p = ::soap_new___tds__GetDot1XConfigurations(soap);
	if (_p)
	{	::soap_default___tds__GetDot1XConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot1XConfigurations * soap_new_set___tds__GetDot1XConfigurations(
	struct soap *soap,
	_tds__GetDot1XConfigurations *tds__GetDot1XConfigurations)
{
	struct __tds__GetDot1XConfigurations *_p = ::soap_new___tds__GetDot1XConfigurations(soap);
	if (_p)
	{	::soap_default___tds__GetDot1XConfigurations(soap, _p);
		_p->tds__GetDot1XConfigurations = tds__GetDot1XConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot1XConfigurations(struct soap*, const struct __tds__GetDot1XConfigurations *, const char*, const char*);

inline int soap_write___tds__GetDot1XConfigurations(struct soap *soap, struct __tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDot1XConfigurations(soap, p), 0) || ::soap_put___tds__GetDot1XConfigurations(soap, p, "-tds:GetDot1XConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDot1XConfigurations(struct soap *soap, const char *URL, struct __tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot1XConfigurations(soap, p), 0) || ::soap_put___tds__GetDot1XConfigurations(soap, p, "-tds:GetDot1XConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDot1XConfigurations(struct soap *soap, const char *URL, struct __tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot1XConfigurations(soap, p), 0) || ::soap_put___tds__GetDot1XConfigurations(soap, p, "-tds:GetDot1XConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDot1XConfigurations(struct soap *soap, const char *URL, struct __tds__GetDot1XConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot1XConfigurations(soap, p), 0) || ::soap_put___tds__GetDot1XConfigurations(soap, p, "-tds:GetDot1XConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot1XConfigurations * SOAP_FMAC4 soap_get___tds__GetDot1XConfigurations(struct soap*, struct __tds__GetDot1XConfigurations *, const char*, const char*);

inline int soap_read___tds__GetDot1XConfigurations(struct soap *soap, struct __tds__GetDot1XConfigurations *p)
{
	if (p)
	{	::soap_default___tds__GetDot1XConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDot1XConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDot1XConfigurations(struct soap *soap, const char *URL, struct __tds__GetDot1XConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDot1XConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDot1XConfigurations(struct soap *soap, struct __tds__GetDot1XConfigurations *p)
{
	if (::soap_read___tds__GetDot1XConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__GetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDot1XConfiguration(struct soap*, struct __tds__GetDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDot1XConfiguration(struct soap*, const struct __tds__GetDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDot1XConfiguration(struct soap*, const char*, int, const struct __tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetDot1XConfiguration * SOAP_FMAC4 soap_in___tds__GetDot1XConfiguration(struct soap*, const char*, struct __tds__GetDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDot1XConfiguration * soap_new___tds__GetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDot1XConfiguration * soap_new_req___tds__GetDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__GetDot1XConfiguration *_p = ::soap_new___tds__GetDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDot1XConfiguration * soap_new_set___tds__GetDot1XConfiguration(
	struct soap *soap,
	_tds__GetDot1XConfiguration *tds__GetDot1XConfiguration)
{
	struct __tds__GetDot1XConfiguration *_p = ::soap_new___tds__GetDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetDot1XConfiguration(soap, _p);
		_p->tds__GetDot1XConfiguration = tds__GetDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDot1XConfiguration(struct soap*, const struct __tds__GetDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__GetDot1XConfiguration(struct soap *soap, struct __tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__GetDot1XConfiguration(soap, p, "-tds:GetDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__GetDot1XConfiguration(soap, p, "-tds:GetDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__GetDot1XConfiguration(soap, p, "-tds:GetDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__GetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__GetDot1XConfiguration(soap, p, "-tds:GetDot1XConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDot1XConfiguration * SOAP_FMAC4 soap_get___tds__GetDot1XConfiguration(struct soap*, struct __tds__GetDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__GetDot1XConfiguration(struct soap *soap, struct __tds__GetDot1XConfiguration *p)
{
	if (p)
	{	::soap_default___tds__GetDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__GetDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDot1XConfiguration(struct soap *soap, struct __tds__GetDot1XConfiguration *p)
{
	if (::soap_read___tds__GetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__SetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDot1XConfiguration(struct soap*, struct __tds__SetDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDot1XConfiguration(struct soap*, const struct __tds__SetDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDot1XConfiguration(struct soap*, const char*, int, const struct __tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetDot1XConfiguration * SOAP_FMAC4 soap_in___tds__SetDot1XConfiguration(struct soap*, const char*, struct __tds__SetDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDot1XConfiguration * soap_new___tds__SetDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDot1XConfiguration * soap_new_req___tds__SetDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__SetDot1XConfiguration *_p = ::soap_new___tds__SetDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDot1XConfiguration * soap_new_set___tds__SetDot1XConfiguration(
	struct soap *soap,
	_tds__SetDot1XConfiguration *tds__SetDot1XConfiguration)
{
	struct __tds__SetDot1XConfiguration *_p = ::soap_new___tds__SetDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetDot1XConfiguration(soap, _p);
		_p->tds__SetDot1XConfiguration = tds__SetDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDot1XConfiguration(struct soap*, const struct __tds__SetDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__SetDot1XConfiguration(struct soap *soap, struct __tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__SetDot1XConfiguration(soap, p, "-tds:SetDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__SetDot1XConfiguration(soap, p, "-tds:SetDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__SetDot1XConfiguration(soap, p, "-tds:SetDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__SetDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDot1XConfiguration(soap, p), 0) || ::soap_put___tds__SetDot1XConfiguration(soap, p, "-tds:SetDot1XConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDot1XConfiguration * SOAP_FMAC4 soap_get___tds__SetDot1XConfiguration(struct soap*, struct __tds__SetDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__SetDot1XConfiguration(struct soap *soap, struct __tds__SetDot1XConfiguration *p)
{
	if (p)
	{	::soap_default___tds__SetDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__SetDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetDot1XConfiguration(struct soap *soap, struct __tds__SetDot1XConfiguration *p)
{
	if (::soap_read___tds__SetDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration_DEFINED
#define SOAP_TYPE___tds__CreateDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateDot1XConfiguration(struct soap*, struct __tds__CreateDot1XConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateDot1XConfiguration(struct soap*, const struct __tds__CreateDot1XConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateDot1XConfiguration(struct soap*, const char*, int, const struct __tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC3 struct __tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_in___tds__CreateDot1XConfiguration(struct soap*, const char*, struct __tds__CreateDot1XConfiguration *, const char*);
SOAP_FMAC1 struct __tds__CreateDot1XConfiguration * SOAP_FMAC2 soap_instantiate___tds__CreateDot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateDot1XConfiguration * soap_new___tds__CreateDot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateDot1XConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateDot1XConfiguration * soap_new_req___tds__CreateDot1XConfiguration(
	struct soap *soap)
{
	struct __tds__CreateDot1XConfiguration *_p = ::soap_new___tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__CreateDot1XConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateDot1XConfiguration * soap_new_set___tds__CreateDot1XConfiguration(
	struct soap *soap,
	_tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration)
{
	struct __tds__CreateDot1XConfiguration *_p = ::soap_new___tds__CreateDot1XConfiguration(soap);
	if (_p)
	{	::soap_default___tds__CreateDot1XConfiguration(soap, _p);
		_p->tds__CreateDot1XConfiguration = tds__CreateDot1XConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateDot1XConfiguration(struct soap*, const struct __tds__CreateDot1XConfiguration *, const char*, const char*);

inline int soap_write___tds__CreateDot1XConfiguration(struct soap *soap, struct __tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__CreateDot1XConfiguration(soap, p), 0) || ::soap_put___tds__CreateDot1XConfiguration(soap, p, "-tds:CreateDot1XConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateDot1XConfiguration(soap, p), 0) || ::soap_put___tds__CreateDot1XConfiguration(soap, p, "-tds:CreateDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateDot1XConfiguration(soap, p), 0) || ::soap_put___tds__CreateDot1XConfiguration(soap, p, "-tds:CreateDot1XConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__CreateDot1XConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateDot1XConfiguration(soap, p), 0) || ::soap_put___tds__CreateDot1XConfiguration(soap, p, "-tds:CreateDot1XConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateDot1XConfiguration * SOAP_FMAC4 soap_get___tds__CreateDot1XConfiguration(struct soap*, struct __tds__CreateDot1XConfiguration *, const char*, const char*);

inline int soap_read___tds__CreateDot1XConfiguration(struct soap *soap, struct __tds__CreateDot1XConfiguration *p)
{
	if (p)
	{	::soap_default___tds__CreateDot1XConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__CreateDot1XConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__CreateDot1XConfiguration(struct soap *soap, const char *URL, struct __tds__CreateDot1XConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__CreateDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__CreateDot1XConfiguration(struct soap *soap, struct __tds__CreateDot1XConfiguration *p)
{
	if (::soap_read___tds__CreateDot1XConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__LoadCACertificates_DEFINED
#define SOAP_TYPE___tds__LoadCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__LoadCACertificates(struct soap*, struct __tds__LoadCACertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__LoadCACertificates(struct soap*, const struct __tds__LoadCACertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__LoadCACertificates(struct soap*, const char*, int, const struct __tds__LoadCACertificates *, const char*);
SOAP_FMAC3 struct __tds__LoadCACertificates * SOAP_FMAC4 soap_in___tds__LoadCACertificates(struct soap*, const char*, struct __tds__LoadCACertificates *, const char*);
SOAP_FMAC1 struct __tds__LoadCACertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__LoadCACertificates * soap_new___tds__LoadCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__LoadCACertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__LoadCACertificates * soap_new_req___tds__LoadCACertificates(
	struct soap *soap)
{
	struct __tds__LoadCACertificates *_p = ::soap_new___tds__LoadCACertificates(soap);
	if (_p)
	{	::soap_default___tds__LoadCACertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__LoadCACertificates * soap_new_set___tds__LoadCACertificates(
	struct soap *soap,
	_tds__LoadCACertificates *tds__LoadCACertificates)
{
	struct __tds__LoadCACertificates *_p = ::soap_new___tds__LoadCACertificates(soap);
	if (_p)
	{	::soap_default___tds__LoadCACertificates(soap, _p);
		_p->tds__LoadCACertificates = tds__LoadCACertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__LoadCACertificates(struct soap*, const struct __tds__LoadCACertificates *, const char*, const char*);

inline int soap_write___tds__LoadCACertificates(struct soap *soap, struct __tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__LoadCACertificates(soap, p), 0) || ::soap_put___tds__LoadCACertificates(soap, p, "-tds:LoadCACertificates", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__LoadCACertificates(struct soap *soap, const char *URL, struct __tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCACertificates(soap, p), 0) || ::soap_put___tds__LoadCACertificates(soap, p, "-tds:LoadCACertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__LoadCACertificates(struct soap *soap, const char *URL, struct __tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCACertificates(soap, p), 0) || ::soap_put___tds__LoadCACertificates(soap, p, "-tds:LoadCACertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__LoadCACertificates(struct soap *soap, const char *URL, struct __tds__LoadCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCACertificates(soap, p), 0) || ::soap_put___tds__LoadCACertificates(soap, p, "-tds:LoadCACertificates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__LoadCACertificates * SOAP_FMAC4 soap_get___tds__LoadCACertificates(struct soap*, struct __tds__LoadCACertificates *, const char*, const char*);

inline int soap_read___tds__LoadCACertificates(struct soap *soap, struct __tds__LoadCACertificates *p)
{
	if (p)
	{	::soap_default___tds__LoadCACertificates(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__LoadCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__LoadCACertificates(struct soap *soap, const char *URL, struct __tds__LoadCACertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__LoadCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__LoadCACertificates(struct soap *soap, struct __tds__LoadCACertificates *p)
{
	if (::soap_read___tds__LoadCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetCertificateInformation_DEFINED
#define SOAP_TYPE___tds__GetCertificateInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCertificateInformation(struct soap*, struct __tds__GetCertificateInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCertificateInformation(struct soap*, const struct __tds__GetCertificateInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCertificateInformation(struct soap*, const char*, int, const struct __tds__GetCertificateInformation *, const char*);
SOAP_FMAC3 struct __tds__GetCertificateInformation * SOAP_FMAC4 soap_in___tds__GetCertificateInformation(struct soap*, const char*, struct __tds__GetCertificateInformation *, const char*);
SOAP_FMAC1 struct __tds__GetCertificateInformation * SOAP_FMAC2 soap_instantiate___tds__GetCertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCertificateInformation * soap_new___tds__GetCertificateInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCertificateInformation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCertificateInformation * soap_new_req___tds__GetCertificateInformation(
	struct soap *soap)
{
	struct __tds__GetCertificateInformation *_p = ::soap_new___tds__GetCertificateInformation(soap);
	if (_p)
	{	::soap_default___tds__GetCertificateInformation(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCertificateInformation * soap_new_set___tds__GetCertificateInformation(
	struct soap *soap,
	_tds__GetCertificateInformation *tds__GetCertificateInformation)
{
	struct __tds__GetCertificateInformation *_p = ::soap_new___tds__GetCertificateInformation(soap);
	if (_p)
	{	::soap_default___tds__GetCertificateInformation(soap, _p);
		_p->tds__GetCertificateInformation = tds__GetCertificateInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCertificateInformation(struct soap*, const struct __tds__GetCertificateInformation *, const char*, const char*);

inline int soap_write___tds__GetCertificateInformation(struct soap *soap, struct __tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetCertificateInformation(soap, p), 0) || ::soap_put___tds__GetCertificateInformation(soap, p, "-tds:GetCertificateInformation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetCertificateInformation(struct soap *soap, const char *URL, struct __tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificateInformation(soap, p), 0) || ::soap_put___tds__GetCertificateInformation(soap, p, "-tds:GetCertificateInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetCertificateInformation(struct soap *soap, const char *URL, struct __tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificateInformation(soap, p), 0) || ::soap_put___tds__GetCertificateInformation(soap, p, "-tds:GetCertificateInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetCertificateInformation(struct soap *soap, const char *URL, struct __tds__GetCertificateInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificateInformation(soap, p), 0) || ::soap_put___tds__GetCertificateInformation(soap, p, "-tds:GetCertificateInformation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCertificateInformation * SOAP_FMAC4 soap_get___tds__GetCertificateInformation(struct soap*, struct __tds__GetCertificateInformation *, const char*, const char*);

inline int soap_read___tds__GetCertificateInformation(struct soap *soap, struct __tds__GetCertificateInformation *p)
{
	if (p)
	{	::soap_default___tds__GetCertificateInformation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetCertificateInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetCertificateInformation(struct soap *soap, const char *URL, struct __tds__GetCertificateInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetCertificateInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetCertificateInformation(struct soap *soap, struct __tds__GetCertificateInformation *p)
{
	if (::soap_read___tds__GetCertificateInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey_DEFINED
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__LoadCertificateWithPrivateKey(struct soap*, struct __tds__LoadCertificateWithPrivateKey *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__LoadCertificateWithPrivateKey(struct soap*, const struct __tds__LoadCertificateWithPrivateKey *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__LoadCertificateWithPrivateKey(struct soap*, const char*, int, const struct __tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC3 struct __tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_in___tds__LoadCertificateWithPrivateKey(struct soap*, const char*, struct __tds__LoadCertificateWithPrivateKey *, const char*);
SOAP_FMAC1 struct __tds__LoadCertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate___tds__LoadCertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__LoadCertificateWithPrivateKey * soap_new___tds__LoadCertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__LoadCertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}

inline struct __tds__LoadCertificateWithPrivateKey * soap_new_req___tds__LoadCertificateWithPrivateKey(
	struct soap *soap)
{
	struct __tds__LoadCertificateWithPrivateKey *_p = ::soap_new___tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	::soap_default___tds__LoadCertificateWithPrivateKey(soap, _p);
	}
	return _p;
}

inline struct __tds__LoadCertificateWithPrivateKey * soap_new_set___tds__LoadCertificateWithPrivateKey(
	struct soap *soap,
	_tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey)
{
	struct __tds__LoadCertificateWithPrivateKey *_p = ::soap_new___tds__LoadCertificateWithPrivateKey(soap);
	if (_p)
	{	::soap_default___tds__LoadCertificateWithPrivateKey(soap, _p);
		_p->tds__LoadCertificateWithPrivateKey = tds__LoadCertificateWithPrivateKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__LoadCertificateWithPrivateKey(struct soap*, const struct __tds__LoadCertificateWithPrivateKey *, const char*, const char*);

inline int soap_write___tds__LoadCertificateWithPrivateKey(struct soap *soap, struct __tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__LoadCertificateWithPrivateKey(soap, p), 0) || ::soap_put___tds__LoadCertificateWithPrivateKey(soap, p, "-tds:LoadCertificateWithPrivateKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, struct __tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCertificateWithPrivateKey(soap, p), 0) || ::soap_put___tds__LoadCertificateWithPrivateKey(soap, p, "-tds:LoadCertificateWithPrivateKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, struct __tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCertificateWithPrivateKey(soap, p), 0) || ::soap_put___tds__LoadCertificateWithPrivateKey(soap, p, "-tds:LoadCertificateWithPrivateKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, struct __tds__LoadCertificateWithPrivateKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCertificateWithPrivateKey(soap, p), 0) || ::soap_put___tds__LoadCertificateWithPrivateKey(soap, p, "-tds:LoadCertificateWithPrivateKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__LoadCertificateWithPrivateKey * SOAP_FMAC4 soap_get___tds__LoadCertificateWithPrivateKey(struct soap*, struct __tds__LoadCertificateWithPrivateKey *, const char*, const char*);

inline int soap_read___tds__LoadCertificateWithPrivateKey(struct soap *soap, struct __tds__LoadCertificateWithPrivateKey *p)
{
	if (p)
	{	::soap_default___tds__LoadCertificateWithPrivateKey(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__LoadCertificateWithPrivateKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__LoadCertificateWithPrivateKey(struct soap *soap, const char *URL, struct __tds__LoadCertificateWithPrivateKey *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__LoadCertificateWithPrivateKey(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__LoadCertificateWithPrivateKey(struct soap *soap, struct __tds__LoadCertificateWithPrivateKey *p)
{
	if (::soap_read___tds__LoadCertificateWithPrivateKey(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetCACertificates_DEFINED
#define SOAP_TYPE___tds__GetCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCACertificates(struct soap*, struct __tds__GetCACertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCACertificates(struct soap*, const struct __tds__GetCACertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCACertificates(struct soap*, const char*, int, const struct __tds__GetCACertificates *, const char*);
SOAP_FMAC3 struct __tds__GetCACertificates * SOAP_FMAC4 soap_in___tds__GetCACertificates(struct soap*, const char*, struct __tds__GetCACertificates *, const char*);
SOAP_FMAC1 struct __tds__GetCACertificates * SOAP_FMAC2 soap_instantiate___tds__GetCACertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCACertificates * soap_new___tds__GetCACertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCACertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCACertificates * soap_new_req___tds__GetCACertificates(
	struct soap *soap)
{
	struct __tds__GetCACertificates *_p = ::soap_new___tds__GetCACertificates(soap);
	if (_p)
	{	::soap_default___tds__GetCACertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCACertificates * soap_new_set___tds__GetCACertificates(
	struct soap *soap,
	_tds__GetCACertificates *tds__GetCACertificates)
{
	struct __tds__GetCACertificates *_p = ::soap_new___tds__GetCACertificates(soap);
	if (_p)
	{	::soap_default___tds__GetCACertificates(soap, _p);
		_p->tds__GetCACertificates = tds__GetCACertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCACertificates(struct soap*, const struct __tds__GetCACertificates *, const char*, const char*);

inline int soap_write___tds__GetCACertificates(struct soap *soap, struct __tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetCACertificates(soap, p), 0) || ::soap_put___tds__GetCACertificates(soap, p, "-tds:GetCACertificates", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetCACertificates(struct soap *soap, const char *URL, struct __tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCACertificates(soap, p), 0) || ::soap_put___tds__GetCACertificates(soap, p, "-tds:GetCACertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetCACertificates(struct soap *soap, const char *URL, struct __tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCACertificates(soap, p), 0) || ::soap_put___tds__GetCACertificates(soap, p, "-tds:GetCACertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetCACertificates(struct soap *soap, const char *URL, struct __tds__GetCACertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCACertificates(soap, p), 0) || ::soap_put___tds__GetCACertificates(soap, p, "-tds:GetCACertificates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCACertificates * SOAP_FMAC4 soap_get___tds__GetCACertificates(struct soap*, struct __tds__GetCACertificates *, const char*, const char*);

inline int soap_read___tds__GetCACertificates(struct soap *soap, struct __tds__GetCACertificates *p)
{
	if (p)
	{	::soap_default___tds__GetCACertificates(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetCACertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetCACertificates(struct soap *soap, const char *URL, struct __tds__GetCACertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetCACertificates(struct soap *soap, struct __tds__GetCACertificates *p)
{
	if (::soap_read___tds__GetCACertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE___tds__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SendAuxiliaryCommand(struct soap*, struct __tds__SendAuxiliaryCommand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SendAuxiliaryCommand(struct soap*, const struct __tds__SendAuxiliaryCommand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SendAuxiliaryCommand(struct soap*, const char*, int, const struct __tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 struct __tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_in___tds__SendAuxiliaryCommand(struct soap*, const char*, struct __tds__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 struct __tds__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tds__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SendAuxiliaryCommand * soap_new___tds__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SendAuxiliaryCommand * soap_new_req___tds__SendAuxiliaryCommand(
	struct soap *soap)
{
	struct __tds__SendAuxiliaryCommand *_p = ::soap_new___tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tds__SendAuxiliaryCommand(soap, _p);
	}
	return _p;
}

inline struct __tds__SendAuxiliaryCommand * soap_new_set___tds__SendAuxiliaryCommand(
	struct soap *soap,
	_tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand)
{
	struct __tds__SendAuxiliaryCommand *_p = ::soap_new___tds__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tds__SendAuxiliaryCommand(soap, _p);
		_p->tds__SendAuxiliaryCommand = tds__SendAuxiliaryCommand;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SendAuxiliaryCommand(struct soap*, const struct __tds__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_write___tds__SendAuxiliaryCommand(struct soap *soap, struct __tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tds__SendAuxiliaryCommand(soap, p, "-tds:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tds__SendAuxiliaryCommand(soap, p, "-tds:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tds__SendAuxiliaryCommand(soap, p, "-tds:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tds__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tds__SendAuxiliaryCommand(soap, p, "-tds:SendAuxiliaryCommand", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SendAuxiliaryCommand * SOAP_FMAC4 soap_get___tds__SendAuxiliaryCommand(struct soap*, struct __tds__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read___tds__SendAuxiliaryCommand(struct soap *soap, struct __tds__SendAuxiliaryCommand *p)
{
	if (p)
	{	::soap_default___tds__SendAuxiliaryCommand(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tds__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SendAuxiliaryCommand(struct soap *soap, struct __tds__SendAuxiliaryCommand *p)
{
	if (::soap_read___tds__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputState_DEFINED
#define SOAP_TYPE___tds__SetRelayOutputState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRelayOutputState(struct soap*, struct __tds__SetRelayOutputState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRelayOutputState(struct soap*, const struct __tds__SetRelayOutputState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRelayOutputState(struct soap*, const char*, int, const struct __tds__SetRelayOutputState *, const char*);
SOAP_FMAC3 struct __tds__SetRelayOutputState * SOAP_FMAC4 soap_in___tds__SetRelayOutputState(struct soap*, const char*, struct __tds__SetRelayOutputState *, const char*);
SOAP_FMAC1 struct __tds__SetRelayOutputState * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputState(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRelayOutputState * soap_new___tds__SetRelayOutputState(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRelayOutputState(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRelayOutputState * soap_new_req___tds__SetRelayOutputState(
	struct soap *soap)
{
	struct __tds__SetRelayOutputState *_p = ::soap_new___tds__SetRelayOutputState(soap);
	if (_p)
	{	::soap_default___tds__SetRelayOutputState(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRelayOutputState * soap_new_set___tds__SetRelayOutputState(
	struct soap *soap,
	_tds__SetRelayOutputState *tds__SetRelayOutputState)
{
	struct __tds__SetRelayOutputState *_p = ::soap_new___tds__SetRelayOutputState(soap);
	if (_p)
	{	::soap_default___tds__SetRelayOutputState(soap, _p);
		_p->tds__SetRelayOutputState = tds__SetRelayOutputState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRelayOutputState(struct soap*, const struct __tds__SetRelayOutputState *, const char*, const char*);

inline int soap_write___tds__SetRelayOutputState(struct soap *soap, struct __tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetRelayOutputState(soap, p), 0) || ::soap_put___tds__SetRelayOutputState(soap, p, "-tds:SetRelayOutputState", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetRelayOutputState(struct soap *soap, const char *URL, struct __tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRelayOutputState(soap, p), 0) || ::soap_put___tds__SetRelayOutputState(soap, p, "-tds:SetRelayOutputState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetRelayOutputState(struct soap *soap, const char *URL, struct __tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRelayOutputState(soap, p), 0) || ::soap_put___tds__SetRelayOutputState(soap, p, "-tds:SetRelayOutputState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetRelayOutputState(struct soap *soap, const char *URL, struct __tds__SetRelayOutputState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRelayOutputState(soap, p), 0) || ::soap_put___tds__SetRelayOutputState(soap, p, "-tds:SetRelayOutputState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRelayOutputState * SOAP_FMAC4 soap_get___tds__SetRelayOutputState(struct soap*, struct __tds__SetRelayOutputState *, const char*, const char*);

inline int soap_read___tds__SetRelayOutputState(struct soap *soap, struct __tds__SetRelayOutputState *p)
{
	if (p)
	{	::soap_default___tds__SetRelayOutputState(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetRelayOutputState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetRelayOutputState(struct soap *soap, const char *URL, struct __tds__SetRelayOutputState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetRelayOutputState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetRelayOutputState(struct soap *soap, struct __tds__SetRelayOutputState *p)
{
	if (::soap_read___tds__SetRelayOutputState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputSettings_DEFINED
#define SOAP_TYPE___tds__SetRelayOutputSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRelayOutputSettings(struct soap*, struct __tds__SetRelayOutputSettings *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRelayOutputSettings(struct soap*, const struct __tds__SetRelayOutputSettings *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRelayOutputSettings(struct soap*, const char*, int, const struct __tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC3 struct __tds__SetRelayOutputSettings * SOAP_FMAC4 soap_in___tds__SetRelayOutputSettings(struct soap*, const char*, struct __tds__SetRelayOutputSettings *, const char*);
SOAP_FMAC1 struct __tds__SetRelayOutputSettings * SOAP_FMAC2 soap_instantiate___tds__SetRelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRelayOutputSettings * soap_new___tds__SetRelayOutputSettings(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRelayOutputSettings(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRelayOutputSettings * soap_new_req___tds__SetRelayOutputSettings(
	struct soap *soap)
{
	struct __tds__SetRelayOutputSettings *_p = ::soap_new___tds__SetRelayOutputSettings(soap);
	if (_p)
	{	::soap_default___tds__SetRelayOutputSettings(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRelayOutputSettings * soap_new_set___tds__SetRelayOutputSettings(
	struct soap *soap,
	_tds__SetRelayOutputSettings *tds__SetRelayOutputSettings)
{
	struct __tds__SetRelayOutputSettings *_p = ::soap_new___tds__SetRelayOutputSettings(soap);
	if (_p)
	{	::soap_default___tds__SetRelayOutputSettings(soap, _p);
		_p->tds__SetRelayOutputSettings = tds__SetRelayOutputSettings;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRelayOutputSettings(struct soap*, const struct __tds__SetRelayOutputSettings *, const char*, const char*);

inline int soap_write___tds__SetRelayOutputSettings(struct soap *soap, struct __tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetRelayOutputSettings(soap, p), 0) || ::soap_put___tds__SetRelayOutputSettings(soap, p, "-tds:SetRelayOutputSettings", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetRelayOutputSettings(struct soap *soap, const char *URL, struct __tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRelayOutputSettings(soap, p), 0) || ::soap_put___tds__SetRelayOutputSettings(soap, p, "-tds:SetRelayOutputSettings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetRelayOutputSettings(struct soap *soap, const char *URL, struct __tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRelayOutputSettings(soap, p), 0) || ::soap_put___tds__SetRelayOutputSettings(soap, p, "-tds:SetRelayOutputSettings", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetRelayOutputSettings(struct soap *soap, const char *URL, struct __tds__SetRelayOutputSettings const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRelayOutputSettings(soap, p), 0) || ::soap_put___tds__SetRelayOutputSettings(soap, p, "-tds:SetRelayOutputSettings", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRelayOutputSettings * SOAP_FMAC4 soap_get___tds__SetRelayOutputSettings(struct soap*, struct __tds__SetRelayOutputSettings *, const char*, const char*);

inline int soap_read___tds__SetRelayOutputSettings(struct soap *soap, struct __tds__SetRelayOutputSettings *p)
{
	if (p)
	{	::soap_default___tds__SetRelayOutputSettings(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetRelayOutputSettings(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetRelayOutputSettings(struct soap *soap, const char *URL, struct __tds__SetRelayOutputSettings *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetRelayOutputSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetRelayOutputSettings(struct soap *soap, struct __tds__SetRelayOutputSettings *p)
{
	if (::soap_read___tds__SetRelayOutputSettings(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetRelayOutputs_DEFINED
#define SOAP_TYPE___tds__GetRelayOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetRelayOutputs(struct soap*, struct __tds__GetRelayOutputs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetRelayOutputs(struct soap*, const struct __tds__GetRelayOutputs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetRelayOutputs(struct soap*, const char*, int, const struct __tds__GetRelayOutputs *, const char*);
SOAP_FMAC3 struct __tds__GetRelayOutputs * SOAP_FMAC4 soap_in___tds__GetRelayOutputs(struct soap*, const char*, struct __tds__GetRelayOutputs *, const char*);
SOAP_FMAC1 struct __tds__GetRelayOutputs * SOAP_FMAC2 soap_instantiate___tds__GetRelayOutputs(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetRelayOutputs * soap_new___tds__GetRelayOutputs(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetRelayOutputs(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetRelayOutputs * soap_new_req___tds__GetRelayOutputs(
	struct soap *soap)
{
	struct __tds__GetRelayOutputs *_p = ::soap_new___tds__GetRelayOutputs(soap);
	if (_p)
	{	::soap_default___tds__GetRelayOutputs(soap, _p);
	}
	return _p;
}

inline struct __tds__GetRelayOutputs * soap_new_set___tds__GetRelayOutputs(
	struct soap *soap,
	_tds__GetRelayOutputs *tds__GetRelayOutputs)
{
	struct __tds__GetRelayOutputs *_p = ::soap_new___tds__GetRelayOutputs(soap);
	if (_p)
	{	::soap_default___tds__GetRelayOutputs(soap, _p);
		_p->tds__GetRelayOutputs = tds__GetRelayOutputs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetRelayOutputs(struct soap*, const struct __tds__GetRelayOutputs *, const char*, const char*);

inline int soap_write___tds__GetRelayOutputs(struct soap *soap, struct __tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetRelayOutputs(soap, p), 0) || ::soap_put___tds__GetRelayOutputs(soap, p, "-tds:GetRelayOutputs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetRelayOutputs(struct soap *soap, const char *URL, struct __tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRelayOutputs(soap, p), 0) || ::soap_put___tds__GetRelayOutputs(soap, p, "-tds:GetRelayOutputs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetRelayOutputs(struct soap *soap, const char *URL, struct __tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRelayOutputs(soap, p), 0) || ::soap_put___tds__GetRelayOutputs(soap, p, "-tds:GetRelayOutputs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetRelayOutputs(struct soap *soap, const char *URL, struct __tds__GetRelayOutputs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRelayOutputs(soap, p), 0) || ::soap_put___tds__GetRelayOutputs(soap, p, "-tds:GetRelayOutputs", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetRelayOutputs * SOAP_FMAC4 soap_get___tds__GetRelayOutputs(struct soap*, struct __tds__GetRelayOutputs *, const char*, const char*);

inline int soap_read___tds__GetRelayOutputs(struct soap *soap, struct __tds__GetRelayOutputs *p)
{
	if (p)
	{	::soap_default___tds__GetRelayOutputs(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetRelayOutputs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetRelayOutputs(struct soap *soap, const char *URL, struct __tds__GetRelayOutputs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetRelayOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetRelayOutputs(struct soap *soap, struct __tds__GetRelayOutputs *p)
{
	if (::soap_read___tds__GetRelayOutputs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetClientCertificateMode_DEFINED
#define SOAP_TYPE___tds__SetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetClientCertificateMode(struct soap*, struct __tds__SetClientCertificateMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetClientCertificateMode(struct soap*, const struct __tds__SetClientCertificateMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetClientCertificateMode(struct soap*, const char*, int, const struct __tds__SetClientCertificateMode *, const char*);
SOAP_FMAC3 struct __tds__SetClientCertificateMode * SOAP_FMAC4 soap_in___tds__SetClientCertificateMode(struct soap*, const char*, struct __tds__SetClientCertificateMode *, const char*);
SOAP_FMAC1 struct __tds__SetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__SetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetClientCertificateMode * soap_new___tds__SetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetClientCertificateMode * soap_new_req___tds__SetClientCertificateMode(
	struct soap *soap)
{
	struct __tds__SetClientCertificateMode *_p = ::soap_new___tds__SetClientCertificateMode(soap);
	if (_p)
	{	::soap_default___tds__SetClientCertificateMode(soap, _p);
	}
	return _p;
}

inline struct __tds__SetClientCertificateMode * soap_new_set___tds__SetClientCertificateMode(
	struct soap *soap,
	_tds__SetClientCertificateMode *tds__SetClientCertificateMode)
{
	struct __tds__SetClientCertificateMode *_p = ::soap_new___tds__SetClientCertificateMode(soap);
	if (_p)
	{	::soap_default___tds__SetClientCertificateMode(soap, _p);
		_p->tds__SetClientCertificateMode = tds__SetClientCertificateMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetClientCertificateMode(struct soap*, const struct __tds__SetClientCertificateMode *, const char*, const char*);

inline int soap_write___tds__SetClientCertificateMode(struct soap *soap, struct __tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetClientCertificateMode(soap, p), 0) || ::soap_put___tds__SetClientCertificateMode(soap, p, "-tds:SetClientCertificateMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetClientCertificateMode(soap, p), 0) || ::soap_put___tds__SetClientCertificateMode(soap, p, "-tds:SetClientCertificateMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetClientCertificateMode(soap, p), 0) || ::soap_put___tds__SetClientCertificateMode(soap, p, "-tds:SetClientCertificateMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__SetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetClientCertificateMode(soap, p), 0) || ::soap_put___tds__SetClientCertificateMode(soap, p, "-tds:SetClientCertificateMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetClientCertificateMode * SOAP_FMAC4 soap_get___tds__SetClientCertificateMode(struct soap*, struct __tds__SetClientCertificateMode *, const char*, const char*);

inline int soap_read___tds__SetClientCertificateMode(struct soap *soap, struct __tds__SetClientCertificateMode *p)
{
	if (p)
	{	::soap_default___tds__SetClientCertificateMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__SetClientCertificateMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetClientCertificateMode(struct soap *soap, struct __tds__SetClientCertificateMode *p)
{
	if (::soap_read___tds__SetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetClientCertificateMode_DEFINED
#define SOAP_TYPE___tds__GetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetClientCertificateMode(struct soap*, struct __tds__GetClientCertificateMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetClientCertificateMode(struct soap*, const struct __tds__GetClientCertificateMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetClientCertificateMode(struct soap*, const char*, int, const struct __tds__GetClientCertificateMode *, const char*);
SOAP_FMAC3 struct __tds__GetClientCertificateMode * SOAP_FMAC4 soap_in___tds__GetClientCertificateMode(struct soap*, const char*, struct __tds__GetClientCertificateMode *, const char*);
SOAP_FMAC1 struct __tds__GetClientCertificateMode * SOAP_FMAC2 soap_instantiate___tds__GetClientCertificateMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetClientCertificateMode * soap_new___tds__GetClientCertificateMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetClientCertificateMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetClientCertificateMode * soap_new_req___tds__GetClientCertificateMode(
	struct soap *soap)
{
	struct __tds__GetClientCertificateMode *_p = ::soap_new___tds__GetClientCertificateMode(soap);
	if (_p)
	{	::soap_default___tds__GetClientCertificateMode(soap, _p);
	}
	return _p;
}

inline struct __tds__GetClientCertificateMode * soap_new_set___tds__GetClientCertificateMode(
	struct soap *soap,
	_tds__GetClientCertificateMode *tds__GetClientCertificateMode)
{
	struct __tds__GetClientCertificateMode *_p = ::soap_new___tds__GetClientCertificateMode(soap);
	if (_p)
	{	::soap_default___tds__GetClientCertificateMode(soap, _p);
		_p->tds__GetClientCertificateMode = tds__GetClientCertificateMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetClientCertificateMode(struct soap*, const struct __tds__GetClientCertificateMode *, const char*, const char*);

inline int soap_write___tds__GetClientCertificateMode(struct soap *soap, struct __tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetClientCertificateMode(soap, p), 0) || ::soap_put___tds__GetClientCertificateMode(soap, p, "-tds:GetClientCertificateMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetClientCertificateMode(soap, p), 0) || ::soap_put___tds__GetClientCertificateMode(soap, p, "-tds:GetClientCertificateMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetClientCertificateMode(soap, p), 0) || ::soap_put___tds__GetClientCertificateMode(soap, p, "-tds:GetClientCertificateMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__GetClientCertificateMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetClientCertificateMode(soap, p), 0) || ::soap_put___tds__GetClientCertificateMode(soap, p, "-tds:GetClientCertificateMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetClientCertificateMode * SOAP_FMAC4 soap_get___tds__GetClientCertificateMode(struct soap*, struct __tds__GetClientCertificateMode *, const char*, const char*);

inline int soap_read___tds__GetClientCertificateMode(struct soap *soap, struct __tds__GetClientCertificateMode *p)
{
	if (p)
	{	::soap_default___tds__GetClientCertificateMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetClientCertificateMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetClientCertificateMode(struct soap *soap, const char *URL, struct __tds__GetClientCertificateMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetClientCertificateMode(struct soap *soap, struct __tds__GetClientCertificateMode *p)
{
	if (::soap_read___tds__GetClientCertificateMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__LoadCertificates_DEFINED
#define SOAP_TYPE___tds__LoadCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__LoadCertificates(struct soap*, struct __tds__LoadCertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__LoadCertificates(struct soap*, const struct __tds__LoadCertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__LoadCertificates(struct soap*, const char*, int, const struct __tds__LoadCertificates *, const char*);
SOAP_FMAC3 struct __tds__LoadCertificates * SOAP_FMAC4 soap_in___tds__LoadCertificates(struct soap*, const char*, struct __tds__LoadCertificates *, const char*);
SOAP_FMAC1 struct __tds__LoadCertificates * SOAP_FMAC2 soap_instantiate___tds__LoadCertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__LoadCertificates * soap_new___tds__LoadCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__LoadCertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__LoadCertificates * soap_new_req___tds__LoadCertificates(
	struct soap *soap)
{
	struct __tds__LoadCertificates *_p = ::soap_new___tds__LoadCertificates(soap);
	if (_p)
	{	::soap_default___tds__LoadCertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__LoadCertificates * soap_new_set___tds__LoadCertificates(
	struct soap *soap,
	_tds__LoadCertificates *tds__LoadCertificates)
{
	struct __tds__LoadCertificates *_p = ::soap_new___tds__LoadCertificates(soap);
	if (_p)
	{	::soap_default___tds__LoadCertificates(soap, _p);
		_p->tds__LoadCertificates = tds__LoadCertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__LoadCertificates(struct soap*, const struct __tds__LoadCertificates *, const char*, const char*);

inline int soap_write___tds__LoadCertificates(struct soap *soap, struct __tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__LoadCertificates(soap, p), 0) || ::soap_put___tds__LoadCertificates(soap, p, "-tds:LoadCertificates", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__LoadCertificates(struct soap *soap, const char *URL, struct __tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCertificates(soap, p), 0) || ::soap_put___tds__LoadCertificates(soap, p, "-tds:LoadCertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__LoadCertificates(struct soap *soap, const char *URL, struct __tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCertificates(soap, p), 0) || ::soap_put___tds__LoadCertificates(soap, p, "-tds:LoadCertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__LoadCertificates(struct soap *soap, const char *URL, struct __tds__LoadCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__LoadCertificates(soap, p), 0) || ::soap_put___tds__LoadCertificates(soap, p, "-tds:LoadCertificates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__LoadCertificates * SOAP_FMAC4 soap_get___tds__LoadCertificates(struct soap*, struct __tds__LoadCertificates *, const char*, const char*);

inline int soap_read___tds__LoadCertificates(struct soap *soap, struct __tds__LoadCertificates *p)
{
	if (p)
	{	::soap_default___tds__LoadCertificates(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__LoadCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__LoadCertificates(struct soap *soap, const char *URL, struct __tds__LoadCertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__LoadCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__LoadCertificates(struct soap *soap, struct __tds__LoadCertificates *p)
{
	if (::soap_read___tds__LoadCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetPkcs10Request_DEFINED
#define SOAP_TYPE___tds__GetPkcs10Request_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetPkcs10Request(struct soap*, struct __tds__GetPkcs10Request *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetPkcs10Request(struct soap*, const struct __tds__GetPkcs10Request *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetPkcs10Request(struct soap*, const char*, int, const struct __tds__GetPkcs10Request *, const char*);
SOAP_FMAC3 struct __tds__GetPkcs10Request * SOAP_FMAC4 soap_in___tds__GetPkcs10Request(struct soap*, const char*, struct __tds__GetPkcs10Request *, const char*);
SOAP_FMAC1 struct __tds__GetPkcs10Request * SOAP_FMAC2 soap_instantiate___tds__GetPkcs10Request(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetPkcs10Request * soap_new___tds__GetPkcs10Request(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetPkcs10Request(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetPkcs10Request * soap_new_req___tds__GetPkcs10Request(
	struct soap *soap)
{
	struct __tds__GetPkcs10Request *_p = ::soap_new___tds__GetPkcs10Request(soap);
	if (_p)
	{	::soap_default___tds__GetPkcs10Request(soap, _p);
	}
	return _p;
}

inline struct __tds__GetPkcs10Request * soap_new_set___tds__GetPkcs10Request(
	struct soap *soap,
	_tds__GetPkcs10Request *tds__GetPkcs10Request)
{
	struct __tds__GetPkcs10Request *_p = ::soap_new___tds__GetPkcs10Request(soap);
	if (_p)
	{	::soap_default___tds__GetPkcs10Request(soap, _p);
		_p->tds__GetPkcs10Request = tds__GetPkcs10Request;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetPkcs10Request(struct soap*, const struct __tds__GetPkcs10Request *, const char*, const char*);

inline int soap_write___tds__GetPkcs10Request(struct soap *soap, struct __tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetPkcs10Request(soap, p), 0) || ::soap_put___tds__GetPkcs10Request(soap, p, "-tds:GetPkcs10Request", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetPkcs10Request(struct soap *soap, const char *URL, struct __tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPkcs10Request(soap, p), 0) || ::soap_put___tds__GetPkcs10Request(soap, p, "-tds:GetPkcs10Request", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetPkcs10Request(struct soap *soap, const char *URL, struct __tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPkcs10Request(soap, p), 0) || ::soap_put___tds__GetPkcs10Request(soap, p, "-tds:GetPkcs10Request", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetPkcs10Request(struct soap *soap, const char *URL, struct __tds__GetPkcs10Request const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPkcs10Request(soap, p), 0) || ::soap_put___tds__GetPkcs10Request(soap, p, "-tds:GetPkcs10Request", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetPkcs10Request * SOAP_FMAC4 soap_get___tds__GetPkcs10Request(struct soap*, struct __tds__GetPkcs10Request *, const char*, const char*);

inline int soap_read___tds__GetPkcs10Request(struct soap *soap, struct __tds__GetPkcs10Request *p)
{
	if (p)
	{	::soap_default___tds__GetPkcs10Request(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetPkcs10Request(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetPkcs10Request(struct soap *soap, const char *URL, struct __tds__GetPkcs10Request *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetPkcs10Request(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetPkcs10Request(struct soap *soap, struct __tds__GetPkcs10Request *p)
{
	if (::soap_read___tds__GetPkcs10Request(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__DeleteCertificates_DEFINED
#define SOAP_TYPE___tds__DeleteCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteCertificates(struct soap*, struct __tds__DeleteCertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteCertificates(struct soap*, const struct __tds__DeleteCertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteCertificates(struct soap*, const char*, int, const struct __tds__DeleteCertificates *, const char*);
SOAP_FMAC3 struct __tds__DeleteCertificates * SOAP_FMAC4 soap_in___tds__DeleteCertificates(struct soap*, const char*, struct __tds__DeleteCertificates *, const char*);
SOAP_FMAC1 struct __tds__DeleteCertificates * SOAP_FMAC2 soap_instantiate___tds__DeleteCertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteCertificates * soap_new___tds__DeleteCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteCertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteCertificates * soap_new_req___tds__DeleteCertificates(
	struct soap *soap)
{
	struct __tds__DeleteCertificates *_p = ::soap_new___tds__DeleteCertificates(soap);
	if (_p)
	{	::soap_default___tds__DeleteCertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteCertificates * soap_new_set___tds__DeleteCertificates(
	struct soap *soap,
	_tds__DeleteCertificates *tds__DeleteCertificates)
{
	struct __tds__DeleteCertificates *_p = ::soap_new___tds__DeleteCertificates(soap);
	if (_p)
	{	::soap_default___tds__DeleteCertificates(soap, _p);
		_p->tds__DeleteCertificates = tds__DeleteCertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteCertificates(struct soap*, const struct __tds__DeleteCertificates *, const char*, const char*);

inline int soap_write___tds__DeleteCertificates(struct soap *soap, struct __tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__DeleteCertificates(soap, p), 0) || ::soap_put___tds__DeleteCertificates(soap, p, "-tds:DeleteCertificates", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__DeleteCertificates(struct soap *soap, const char *URL, struct __tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteCertificates(soap, p), 0) || ::soap_put___tds__DeleteCertificates(soap, p, "-tds:DeleteCertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__DeleteCertificates(struct soap *soap, const char *URL, struct __tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteCertificates(soap, p), 0) || ::soap_put___tds__DeleteCertificates(soap, p, "-tds:DeleteCertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__DeleteCertificates(struct soap *soap, const char *URL, struct __tds__DeleteCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteCertificates(soap, p), 0) || ::soap_put___tds__DeleteCertificates(soap, p, "-tds:DeleteCertificates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteCertificates * SOAP_FMAC4 soap_get___tds__DeleteCertificates(struct soap*, struct __tds__DeleteCertificates *, const char*, const char*);

inline int soap_read___tds__DeleteCertificates(struct soap *soap, struct __tds__DeleteCertificates *p)
{
	if (p)
	{	::soap_default___tds__DeleteCertificates(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__DeleteCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__DeleteCertificates(struct soap *soap, const char *URL, struct __tds__DeleteCertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__DeleteCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__DeleteCertificates(struct soap *soap, struct __tds__DeleteCertificates *p)
{
	if (::soap_read___tds__DeleteCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetCertificatesStatus_DEFINED
#define SOAP_TYPE___tds__SetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetCertificatesStatus(struct soap*, struct __tds__SetCertificatesStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetCertificatesStatus(struct soap*, const struct __tds__SetCertificatesStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetCertificatesStatus(struct soap*, const char*, int, const struct __tds__SetCertificatesStatus *, const char*);
SOAP_FMAC3 struct __tds__SetCertificatesStatus * SOAP_FMAC4 soap_in___tds__SetCertificatesStatus(struct soap*, const char*, struct __tds__SetCertificatesStatus *, const char*);
SOAP_FMAC1 struct __tds__SetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__SetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetCertificatesStatus * soap_new___tds__SetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetCertificatesStatus * soap_new_req___tds__SetCertificatesStatus(
	struct soap *soap)
{
	struct __tds__SetCertificatesStatus *_p = ::soap_new___tds__SetCertificatesStatus(soap);
	if (_p)
	{	::soap_default___tds__SetCertificatesStatus(soap, _p);
	}
	return _p;
}

inline struct __tds__SetCertificatesStatus * soap_new_set___tds__SetCertificatesStatus(
	struct soap *soap,
	_tds__SetCertificatesStatus *tds__SetCertificatesStatus)
{
	struct __tds__SetCertificatesStatus *_p = ::soap_new___tds__SetCertificatesStatus(soap);
	if (_p)
	{	::soap_default___tds__SetCertificatesStatus(soap, _p);
		_p->tds__SetCertificatesStatus = tds__SetCertificatesStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetCertificatesStatus(struct soap*, const struct __tds__SetCertificatesStatus *, const char*, const char*);

inline int soap_write___tds__SetCertificatesStatus(struct soap *soap, struct __tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetCertificatesStatus(soap, p), 0) || ::soap_put___tds__SetCertificatesStatus(soap, p, "-tds:SetCertificatesStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetCertificatesStatus(soap, p), 0) || ::soap_put___tds__SetCertificatesStatus(soap, p, "-tds:SetCertificatesStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetCertificatesStatus(soap, p), 0) || ::soap_put___tds__SetCertificatesStatus(soap, p, "-tds:SetCertificatesStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__SetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetCertificatesStatus(soap, p), 0) || ::soap_put___tds__SetCertificatesStatus(soap, p, "-tds:SetCertificatesStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetCertificatesStatus * SOAP_FMAC4 soap_get___tds__SetCertificatesStatus(struct soap*, struct __tds__SetCertificatesStatus *, const char*, const char*);

inline int soap_read___tds__SetCertificatesStatus(struct soap *soap, struct __tds__SetCertificatesStatus *p)
{
	if (p)
	{	::soap_default___tds__SetCertificatesStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__SetCertificatesStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetCertificatesStatus(struct soap *soap, struct __tds__SetCertificatesStatus *p)
{
	if (::soap_read___tds__SetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetCertificatesStatus_DEFINED
#define SOAP_TYPE___tds__GetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCertificatesStatus(struct soap*, struct __tds__GetCertificatesStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCertificatesStatus(struct soap*, const struct __tds__GetCertificatesStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCertificatesStatus(struct soap*, const char*, int, const struct __tds__GetCertificatesStatus *, const char*);
SOAP_FMAC3 struct __tds__GetCertificatesStatus * SOAP_FMAC4 soap_in___tds__GetCertificatesStatus(struct soap*, const char*, struct __tds__GetCertificatesStatus *, const char*);
SOAP_FMAC1 struct __tds__GetCertificatesStatus * SOAP_FMAC2 soap_instantiate___tds__GetCertificatesStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCertificatesStatus * soap_new___tds__GetCertificatesStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCertificatesStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCertificatesStatus * soap_new_req___tds__GetCertificatesStatus(
	struct soap *soap)
{
	struct __tds__GetCertificatesStatus *_p = ::soap_new___tds__GetCertificatesStatus(soap);
	if (_p)
	{	::soap_default___tds__GetCertificatesStatus(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCertificatesStatus * soap_new_set___tds__GetCertificatesStatus(
	struct soap *soap,
	_tds__GetCertificatesStatus *tds__GetCertificatesStatus)
{
	struct __tds__GetCertificatesStatus *_p = ::soap_new___tds__GetCertificatesStatus(soap);
	if (_p)
	{	::soap_default___tds__GetCertificatesStatus(soap, _p);
		_p->tds__GetCertificatesStatus = tds__GetCertificatesStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCertificatesStatus(struct soap*, const struct __tds__GetCertificatesStatus *, const char*, const char*);

inline int soap_write___tds__GetCertificatesStatus(struct soap *soap, struct __tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetCertificatesStatus(soap, p), 0) || ::soap_put___tds__GetCertificatesStatus(soap, p, "-tds:GetCertificatesStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificatesStatus(soap, p), 0) || ::soap_put___tds__GetCertificatesStatus(soap, p, "-tds:GetCertificatesStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificatesStatus(soap, p), 0) || ::soap_put___tds__GetCertificatesStatus(soap, p, "-tds:GetCertificatesStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__GetCertificatesStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificatesStatus(soap, p), 0) || ::soap_put___tds__GetCertificatesStatus(soap, p, "-tds:GetCertificatesStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCertificatesStatus * SOAP_FMAC4 soap_get___tds__GetCertificatesStatus(struct soap*, struct __tds__GetCertificatesStatus *, const char*, const char*);

inline int soap_read___tds__GetCertificatesStatus(struct soap *soap, struct __tds__GetCertificatesStatus *p)
{
	if (p)
	{	::soap_default___tds__GetCertificatesStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetCertificatesStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetCertificatesStatus(struct soap *soap, const char *URL, struct __tds__GetCertificatesStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetCertificatesStatus(struct soap *soap, struct __tds__GetCertificatesStatus *p)
{
	if (::soap_read___tds__GetCertificatesStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetCertificates_DEFINED
#define SOAP_TYPE___tds__GetCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCertificates(struct soap*, struct __tds__GetCertificates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCertificates(struct soap*, const struct __tds__GetCertificates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCertificates(struct soap*, const char*, int, const struct __tds__GetCertificates *, const char*);
SOAP_FMAC3 struct __tds__GetCertificates * SOAP_FMAC4 soap_in___tds__GetCertificates(struct soap*, const char*, struct __tds__GetCertificates *, const char*);
SOAP_FMAC1 struct __tds__GetCertificates * SOAP_FMAC2 soap_instantiate___tds__GetCertificates(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCertificates * soap_new___tds__GetCertificates(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCertificates(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCertificates * soap_new_req___tds__GetCertificates(
	struct soap *soap)
{
	struct __tds__GetCertificates *_p = ::soap_new___tds__GetCertificates(soap);
	if (_p)
	{	::soap_default___tds__GetCertificates(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCertificates * soap_new_set___tds__GetCertificates(
	struct soap *soap,
	_tds__GetCertificates *tds__GetCertificates)
{
	struct __tds__GetCertificates *_p = ::soap_new___tds__GetCertificates(soap);
	if (_p)
	{	::soap_default___tds__GetCertificates(soap, _p);
		_p->tds__GetCertificates = tds__GetCertificates;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCertificates(struct soap*, const struct __tds__GetCertificates *, const char*, const char*);

inline int soap_write___tds__GetCertificates(struct soap *soap, struct __tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetCertificates(soap, p), 0) || ::soap_put___tds__GetCertificates(soap, p, "-tds:GetCertificates", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetCertificates(struct soap *soap, const char *URL, struct __tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificates(soap, p), 0) || ::soap_put___tds__GetCertificates(soap, p, "-tds:GetCertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetCertificates(struct soap *soap, const char *URL, struct __tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificates(soap, p), 0) || ::soap_put___tds__GetCertificates(soap, p, "-tds:GetCertificates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetCertificates(struct soap *soap, const char *URL, struct __tds__GetCertificates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCertificates(soap, p), 0) || ::soap_put___tds__GetCertificates(soap, p, "-tds:GetCertificates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCertificates * SOAP_FMAC4 soap_get___tds__GetCertificates(struct soap*, struct __tds__GetCertificates *, const char*, const char*);

inline int soap_read___tds__GetCertificates(struct soap *soap, struct __tds__GetCertificates *p)
{
	if (p)
	{	::soap_default___tds__GetCertificates(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetCertificates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetCertificates(struct soap *soap, const char *URL, struct __tds__GetCertificates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetCertificates(struct soap *soap, struct __tds__GetCertificates *p)
{
	if (::soap_read___tds__GetCertificates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__CreateCertificate_DEFINED
#define SOAP_TYPE___tds__CreateCertificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateCertificate(struct soap*, struct __tds__CreateCertificate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateCertificate(struct soap*, const struct __tds__CreateCertificate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateCertificate(struct soap*, const char*, int, const struct __tds__CreateCertificate *, const char*);
SOAP_FMAC3 struct __tds__CreateCertificate * SOAP_FMAC4 soap_in___tds__CreateCertificate(struct soap*, const char*, struct __tds__CreateCertificate *, const char*);
SOAP_FMAC1 struct __tds__CreateCertificate * SOAP_FMAC2 soap_instantiate___tds__CreateCertificate(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateCertificate * soap_new___tds__CreateCertificate(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateCertificate(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateCertificate * soap_new_req___tds__CreateCertificate(
	struct soap *soap)
{
	struct __tds__CreateCertificate *_p = ::soap_new___tds__CreateCertificate(soap);
	if (_p)
	{	::soap_default___tds__CreateCertificate(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateCertificate * soap_new_set___tds__CreateCertificate(
	struct soap *soap,
	_tds__CreateCertificate *tds__CreateCertificate)
{
	struct __tds__CreateCertificate *_p = ::soap_new___tds__CreateCertificate(soap);
	if (_p)
	{	::soap_default___tds__CreateCertificate(soap, _p);
		_p->tds__CreateCertificate = tds__CreateCertificate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateCertificate(struct soap*, const struct __tds__CreateCertificate *, const char*, const char*);

inline int soap_write___tds__CreateCertificate(struct soap *soap, struct __tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__CreateCertificate(soap, p), 0) || ::soap_put___tds__CreateCertificate(soap, p, "-tds:CreateCertificate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__CreateCertificate(struct soap *soap, const char *URL, struct __tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateCertificate(soap, p), 0) || ::soap_put___tds__CreateCertificate(soap, p, "-tds:CreateCertificate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__CreateCertificate(struct soap *soap, const char *URL, struct __tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateCertificate(soap, p), 0) || ::soap_put___tds__CreateCertificate(soap, p, "-tds:CreateCertificate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__CreateCertificate(struct soap *soap, const char *URL, struct __tds__CreateCertificate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateCertificate(soap, p), 0) || ::soap_put___tds__CreateCertificate(soap, p, "-tds:CreateCertificate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateCertificate * SOAP_FMAC4 soap_get___tds__CreateCertificate(struct soap*, struct __tds__CreateCertificate *, const char*, const char*);

inline int soap_read___tds__CreateCertificate(struct soap *soap, struct __tds__CreateCertificate *p)
{
	if (p)
	{	::soap_default___tds__CreateCertificate(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__CreateCertificate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__CreateCertificate(struct soap *soap, const char *URL, struct __tds__CreateCertificate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__CreateCertificate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__CreateCertificate(struct soap *soap, struct __tds__CreateCertificate *p)
{
	if (::soap_read___tds__CreateCertificate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetAccessPolicy_DEFINED
#define SOAP_TYPE___tds__SetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetAccessPolicy(struct soap*, struct __tds__SetAccessPolicy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetAccessPolicy(struct soap*, const struct __tds__SetAccessPolicy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetAccessPolicy(struct soap*, const char*, int, const struct __tds__SetAccessPolicy *, const char*);
SOAP_FMAC3 struct __tds__SetAccessPolicy * SOAP_FMAC4 soap_in___tds__SetAccessPolicy(struct soap*, const char*, struct __tds__SetAccessPolicy *, const char*);
SOAP_FMAC1 struct __tds__SetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__SetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetAccessPolicy * soap_new___tds__SetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetAccessPolicy * soap_new_req___tds__SetAccessPolicy(
	struct soap *soap)
{
	struct __tds__SetAccessPolicy *_p = ::soap_new___tds__SetAccessPolicy(soap);
	if (_p)
	{	::soap_default___tds__SetAccessPolicy(soap, _p);
	}
	return _p;
}

inline struct __tds__SetAccessPolicy * soap_new_set___tds__SetAccessPolicy(
	struct soap *soap,
	_tds__SetAccessPolicy *tds__SetAccessPolicy)
{
	struct __tds__SetAccessPolicy *_p = ::soap_new___tds__SetAccessPolicy(soap);
	if (_p)
	{	::soap_default___tds__SetAccessPolicy(soap, _p);
		_p->tds__SetAccessPolicy = tds__SetAccessPolicy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetAccessPolicy(struct soap*, const struct __tds__SetAccessPolicy *, const char*, const char*);

inline int soap_write___tds__SetAccessPolicy(struct soap *soap, struct __tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetAccessPolicy(soap, p), 0) || ::soap_put___tds__SetAccessPolicy(soap, p, "-tds:SetAccessPolicy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetAccessPolicy(struct soap *soap, const char *URL, struct __tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetAccessPolicy(soap, p), 0) || ::soap_put___tds__SetAccessPolicy(soap, p, "-tds:SetAccessPolicy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetAccessPolicy(struct soap *soap, const char *URL, struct __tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetAccessPolicy(soap, p), 0) || ::soap_put___tds__SetAccessPolicy(soap, p, "-tds:SetAccessPolicy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetAccessPolicy(struct soap *soap, const char *URL, struct __tds__SetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetAccessPolicy(soap, p), 0) || ::soap_put___tds__SetAccessPolicy(soap, p, "-tds:SetAccessPolicy", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetAccessPolicy * SOAP_FMAC4 soap_get___tds__SetAccessPolicy(struct soap*, struct __tds__SetAccessPolicy *, const char*, const char*);

inline int soap_read___tds__SetAccessPolicy(struct soap *soap, struct __tds__SetAccessPolicy *p)
{
	if (p)
	{	::soap_default___tds__SetAccessPolicy(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetAccessPolicy(struct soap *soap, const char *URL, struct __tds__SetAccessPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetAccessPolicy(struct soap *soap, struct __tds__SetAccessPolicy *p)
{
	if (::soap_read___tds__SetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetAccessPolicy_DEFINED
#define SOAP_TYPE___tds__GetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetAccessPolicy(struct soap*, struct __tds__GetAccessPolicy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetAccessPolicy(struct soap*, const struct __tds__GetAccessPolicy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetAccessPolicy(struct soap*, const char*, int, const struct __tds__GetAccessPolicy *, const char*);
SOAP_FMAC3 struct __tds__GetAccessPolicy * SOAP_FMAC4 soap_in___tds__GetAccessPolicy(struct soap*, const char*, struct __tds__GetAccessPolicy *, const char*);
SOAP_FMAC1 struct __tds__GetAccessPolicy * SOAP_FMAC2 soap_instantiate___tds__GetAccessPolicy(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetAccessPolicy * soap_new___tds__GetAccessPolicy(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetAccessPolicy(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetAccessPolicy * soap_new_req___tds__GetAccessPolicy(
	struct soap *soap)
{
	struct __tds__GetAccessPolicy *_p = ::soap_new___tds__GetAccessPolicy(soap);
	if (_p)
	{	::soap_default___tds__GetAccessPolicy(soap, _p);
	}
	return _p;
}

inline struct __tds__GetAccessPolicy * soap_new_set___tds__GetAccessPolicy(
	struct soap *soap,
	_tds__GetAccessPolicy *tds__GetAccessPolicy)
{
	struct __tds__GetAccessPolicy *_p = ::soap_new___tds__GetAccessPolicy(soap);
	if (_p)
	{	::soap_default___tds__GetAccessPolicy(soap, _p);
		_p->tds__GetAccessPolicy = tds__GetAccessPolicy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetAccessPolicy(struct soap*, const struct __tds__GetAccessPolicy *, const char*, const char*);

inline int soap_write___tds__GetAccessPolicy(struct soap *soap, struct __tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetAccessPolicy(soap, p), 0) || ::soap_put___tds__GetAccessPolicy(soap, p, "-tds:GetAccessPolicy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetAccessPolicy(struct soap *soap, const char *URL, struct __tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAccessPolicy(soap, p), 0) || ::soap_put___tds__GetAccessPolicy(soap, p, "-tds:GetAccessPolicy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetAccessPolicy(struct soap *soap, const char *URL, struct __tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAccessPolicy(soap, p), 0) || ::soap_put___tds__GetAccessPolicy(soap, p, "-tds:GetAccessPolicy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetAccessPolicy(struct soap *soap, const char *URL, struct __tds__GetAccessPolicy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAccessPolicy(soap, p), 0) || ::soap_put___tds__GetAccessPolicy(soap, p, "-tds:GetAccessPolicy", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetAccessPolicy * SOAP_FMAC4 soap_get___tds__GetAccessPolicy(struct soap*, struct __tds__GetAccessPolicy *, const char*, const char*);

inline int soap_read___tds__GetAccessPolicy(struct soap *soap, struct __tds__GetAccessPolicy *p)
{
	if (p)
	{	::soap_default___tds__GetAccessPolicy(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetAccessPolicy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetAccessPolicy(struct soap *soap, const char *URL, struct __tds__GetAccessPolicy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetAccessPolicy(struct soap *soap, struct __tds__GetAccessPolicy *p)
{
	if (::soap_read___tds__GetAccessPolicy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__RemoveIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__RemoveIPAddressFilter(struct soap*, struct __tds__RemoveIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__RemoveIPAddressFilter(struct soap*, const struct __tds__RemoveIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__RemoveIPAddressFilter(struct soap*, const char*, int, const struct __tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_in___tds__RemoveIPAddressFilter(struct soap*, const char*, struct __tds__RemoveIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__RemoveIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__RemoveIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__RemoveIPAddressFilter * soap_new___tds__RemoveIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__RemoveIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__RemoveIPAddressFilter * soap_new_req___tds__RemoveIPAddressFilter(
	struct soap *soap)
{
	struct __tds__RemoveIPAddressFilter *_p = ::soap_new___tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__RemoveIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__RemoveIPAddressFilter * soap_new_set___tds__RemoveIPAddressFilter(
	struct soap *soap,
	_tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter)
{
	struct __tds__RemoveIPAddressFilter *_p = ::soap_new___tds__RemoveIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__RemoveIPAddressFilter(soap, _p);
		_p->tds__RemoveIPAddressFilter = tds__RemoveIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__RemoveIPAddressFilter(struct soap*, const struct __tds__RemoveIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__RemoveIPAddressFilter(struct soap *soap, struct __tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__RemoveIPAddressFilter(soap, p), 0) || ::soap_put___tds__RemoveIPAddressFilter(soap, p, "-tds:RemoveIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, struct __tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RemoveIPAddressFilter(soap, p), 0) || ::soap_put___tds__RemoveIPAddressFilter(soap, p, "-tds:RemoveIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, struct __tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RemoveIPAddressFilter(soap, p), 0) || ::soap_put___tds__RemoveIPAddressFilter(soap, p, "-tds:RemoveIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, struct __tds__RemoveIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RemoveIPAddressFilter(soap, p), 0) || ::soap_put___tds__RemoveIPAddressFilter(soap, p, "-tds:RemoveIPAddressFilter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__RemoveIPAddressFilter * SOAP_FMAC4 soap_get___tds__RemoveIPAddressFilter(struct soap*, struct __tds__RemoveIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__RemoveIPAddressFilter(struct soap *soap, struct __tds__RemoveIPAddressFilter *p)
{
	if (p)
	{	::soap_default___tds__RemoveIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__RemoveIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__RemoveIPAddressFilter(struct soap *soap, const char *URL, struct __tds__RemoveIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__RemoveIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__RemoveIPAddressFilter(struct soap *soap, struct __tds__RemoveIPAddressFilter *p)
{
	if (::soap_read___tds__RemoveIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__AddIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__AddIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__AddIPAddressFilter(struct soap*, struct __tds__AddIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__AddIPAddressFilter(struct soap*, const struct __tds__AddIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__AddIPAddressFilter(struct soap*, const char*, int, const struct __tds__AddIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__AddIPAddressFilter * SOAP_FMAC4 soap_in___tds__AddIPAddressFilter(struct soap*, const char*, struct __tds__AddIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__AddIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__AddIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__AddIPAddressFilter * soap_new___tds__AddIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__AddIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__AddIPAddressFilter * soap_new_req___tds__AddIPAddressFilter(
	struct soap *soap)
{
	struct __tds__AddIPAddressFilter *_p = ::soap_new___tds__AddIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__AddIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__AddIPAddressFilter * soap_new_set___tds__AddIPAddressFilter(
	struct soap *soap,
	_tds__AddIPAddressFilter *tds__AddIPAddressFilter)
{
	struct __tds__AddIPAddressFilter *_p = ::soap_new___tds__AddIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__AddIPAddressFilter(soap, _p);
		_p->tds__AddIPAddressFilter = tds__AddIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__AddIPAddressFilter(struct soap*, const struct __tds__AddIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__AddIPAddressFilter(struct soap *soap, struct __tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__AddIPAddressFilter(soap, p), 0) || ::soap_put___tds__AddIPAddressFilter(soap, p, "-tds:AddIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__AddIPAddressFilter(struct soap *soap, const char *URL, struct __tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__AddIPAddressFilter(soap, p), 0) || ::soap_put___tds__AddIPAddressFilter(soap, p, "-tds:AddIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__AddIPAddressFilter(struct soap *soap, const char *URL, struct __tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__AddIPAddressFilter(soap, p), 0) || ::soap_put___tds__AddIPAddressFilter(soap, p, "-tds:AddIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__AddIPAddressFilter(struct soap *soap, const char *URL, struct __tds__AddIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__AddIPAddressFilter(soap, p), 0) || ::soap_put___tds__AddIPAddressFilter(soap, p, "-tds:AddIPAddressFilter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__AddIPAddressFilter * SOAP_FMAC4 soap_get___tds__AddIPAddressFilter(struct soap*, struct __tds__AddIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__AddIPAddressFilter(struct soap *soap, struct __tds__AddIPAddressFilter *p)
{
	if (p)
	{	::soap_default___tds__AddIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__AddIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__AddIPAddressFilter(struct soap *soap, const char *URL, struct __tds__AddIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__AddIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__AddIPAddressFilter(struct soap *soap, struct __tds__AddIPAddressFilter *p)
{
	if (::soap_read___tds__AddIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__SetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetIPAddressFilter(struct soap*, struct __tds__SetIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetIPAddressFilter(struct soap*, const struct __tds__SetIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetIPAddressFilter(struct soap*, const char*, int, const struct __tds__SetIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__SetIPAddressFilter * SOAP_FMAC4 soap_in___tds__SetIPAddressFilter(struct soap*, const char*, struct __tds__SetIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__SetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__SetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetIPAddressFilter * soap_new___tds__SetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetIPAddressFilter * soap_new_req___tds__SetIPAddressFilter(
	struct soap *soap)
{
	struct __tds__SetIPAddressFilter *_p = ::soap_new___tds__SetIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__SetIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__SetIPAddressFilter * soap_new_set___tds__SetIPAddressFilter(
	struct soap *soap,
	_tds__SetIPAddressFilter *tds__SetIPAddressFilter)
{
	struct __tds__SetIPAddressFilter *_p = ::soap_new___tds__SetIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__SetIPAddressFilter(soap, _p);
		_p->tds__SetIPAddressFilter = tds__SetIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetIPAddressFilter(struct soap*, const struct __tds__SetIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__SetIPAddressFilter(struct soap *soap, struct __tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetIPAddressFilter(soap, p), 0) || ::soap_put___tds__SetIPAddressFilter(soap, p, "-tds:SetIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetIPAddressFilter(soap, p), 0) || ::soap_put___tds__SetIPAddressFilter(soap, p, "-tds:SetIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetIPAddressFilter(soap, p), 0) || ::soap_put___tds__SetIPAddressFilter(soap, p, "-tds:SetIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__SetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetIPAddressFilter(soap, p), 0) || ::soap_put___tds__SetIPAddressFilter(soap, p, "-tds:SetIPAddressFilter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetIPAddressFilter * SOAP_FMAC4 soap_get___tds__SetIPAddressFilter(struct soap*, struct __tds__SetIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__SetIPAddressFilter(struct soap *soap, struct __tds__SetIPAddressFilter *p)
{
	if (p)
	{	::soap_default___tds__SetIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__SetIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetIPAddressFilter(struct soap *soap, struct __tds__SetIPAddressFilter *p)
{
	if (::soap_read___tds__SetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetIPAddressFilter_DEFINED
#define SOAP_TYPE___tds__GetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetIPAddressFilter(struct soap*, struct __tds__GetIPAddressFilter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetIPAddressFilter(struct soap*, const struct __tds__GetIPAddressFilter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetIPAddressFilter(struct soap*, const char*, int, const struct __tds__GetIPAddressFilter *, const char*);
SOAP_FMAC3 struct __tds__GetIPAddressFilter * SOAP_FMAC4 soap_in___tds__GetIPAddressFilter(struct soap*, const char*, struct __tds__GetIPAddressFilter *, const char*);
SOAP_FMAC1 struct __tds__GetIPAddressFilter * SOAP_FMAC2 soap_instantiate___tds__GetIPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetIPAddressFilter * soap_new___tds__GetIPAddressFilter(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetIPAddressFilter(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetIPAddressFilter * soap_new_req___tds__GetIPAddressFilter(
	struct soap *soap)
{
	struct __tds__GetIPAddressFilter *_p = ::soap_new___tds__GetIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__GetIPAddressFilter(soap, _p);
	}
	return _p;
}

inline struct __tds__GetIPAddressFilter * soap_new_set___tds__GetIPAddressFilter(
	struct soap *soap,
	_tds__GetIPAddressFilter *tds__GetIPAddressFilter)
{
	struct __tds__GetIPAddressFilter *_p = ::soap_new___tds__GetIPAddressFilter(soap);
	if (_p)
	{	::soap_default___tds__GetIPAddressFilter(soap, _p);
		_p->tds__GetIPAddressFilter = tds__GetIPAddressFilter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetIPAddressFilter(struct soap*, const struct __tds__GetIPAddressFilter *, const char*, const char*);

inline int soap_write___tds__GetIPAddressFilter(struct soap *soap, struct __tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetIPAddressFilter(soap, p), 0) || ::soap_put___tds__GetIPAddressFilter(soap, p, "-tds:GetIPAddressFilter", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetIPAddressFilter(soap, p), 0) || ::soap_put___tds__GetIPAddressFilter(soap, p, "-tds:GetIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetIPAddressFilter(soap, p), 0) || ::soap_put___tds__GetIPAddressFilter(soap, p, "-tds:GetIPAddressFilter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__GetIPAddressFilter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetIPAddressFilter(soap, p), 0) || ::soap_put___tds__GetIPAddressFilter(soap, p, "-tds:GetIPAddressFilter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetIPAddressFilter * SOAP_FMAC4 soap_get___tds__GetIPAddressFilter(struct soap*, struct __tds__GetIPAddressFilter *, const char*, const char*);

inline int soap_read___tds__GetIPAddressFilter(struct soap *soap, struct __tds__GetIPAddressFilter *p)
{
	if (p)
	{	::soap_default___tds__GetIPAddressFilter(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetIPAddressFilter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetIPAddressFilter(struct soap *soap, const char *URL, struct __tds__GetIPAddressFilter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetIPAddressFilter(struct soap *soap, struct __tds__GetIPAddressFilter *p)
{
	if (::soap_read___tds__GetIPAddressFilter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetZeroConfiguration_DEFINED
#define SOAP_TYPE___tds__SetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetZeroConfiguration(struct soap*, struct __tds__SetZeroConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetZeroConfiguration(struct soap*, const struct __tds__SetZeroConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetZeroConfiguration(struct soap*, const char*, int, const struct __tds__SetZeroConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetZeroConfiguration * SOAP_FMAC4 soap_in___tds__SetZeroConfiguration(struct soap*, const char*, struct __tds__SetZeroConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetZeroConfiguration * soap_new___tds__SetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetZeroConfiguration * soap_new_req___tds__SetZeroConfiguration(
	struct soap *soap)
{
	struct __tds__SetZeroConfiguration *_p = ::soap_new___tds__SetZeroConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetZeroConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetZeroConfiguration * soap_new_set___tds__SetZeroConfiguration(
	struct soap *soap,
	_tds__SetZeroConfiguration *tds__SetZeroConfiguration)
{
	struct __tds__SetZeroConfiguration *_p = ::soap_new___tds__SetZeroConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetZeroConfiguration(soap, _p);
		_p->tds__SetZeroConfiguration = tds__SetZeroConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetZeroConfiguration(struct soap*, const struct __tds__SetZeroConfiguration *, const char*, const char*);

inline int soap_write___tds__SetZeroConfiguration(struct soap *soap, struct __tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetZeroConfiguration(soap, p), 0) || ::soap_put___tds__SetZeroConfiguration(soap, p, "-tds:SetZeroConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetZeroConfiguration(soap, p), 0) || ::soap_put___tds__SetZeroConfiguration(soap, p, "-tds:SetZeroConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetZeroConfiguration(soap, p), 0) || ::soap_put___tds__SetZeroConfiguration(soap, p, "-tds:SetZeroConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__SetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetZeroConfiguration(soap, p), 0) || ::soap_put___tds__SetZeroConfiguration(soap, p, "-tds:SetZeroConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetZeroConfiguration * SOAP_FMAC4 soap_get___tds__SetZeroConfiguration(struct soap*, struct __tds__SetZeroConfiguration *, const char*, const char*);

inline int soap_read___tds__SetZeroConfiguration(struct soap *soap, struct __tds__SetZeroConfiguration *p)
{
	if (p)
	{	::soap_default___tds__SetZeroConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__SetZeroConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetZeroConfiguration(struct soap *soap, struct __tds__SetZeroConfiguration *p)
{
	if (::soap_read___tds__SetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetZeroConfiguration_DEFINED
#define SOAP_TYPE___tds__GetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetZeroConfiguration(struct soap*, struct __tds__GetZeroConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetZeroConfiguration(struct soap*, const struct __tds__GetZeroConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetZeroConfiguration(struct soap*, const char*, int, const struct __tds__GetZeroConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetZeroConfiguration * SOAP_FMAC4 soap_in___tds__GetZeroConfiguration(struct soap*, const char*, struct __tds__GetZeroConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetZeroConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetZeroConfiguration * soap_new___tds__GetZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetZeroConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetZeroConfiguration * soap_new_req___tds__GetZeroConfiguration(
	struct soap *soap)
{
	struct __tds__GetZeroConfiguration *_p = ::soap_new___tds__GetZeroConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetZeroConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetZeroConfiguration * soap_new_set___tds__GetZeroConfiguration(
	struct soap *soap,
	_tds__GetZeroConfiguration *tds__GetZeroConfiguration)
{
	struct __tds__GetZeroConfiguration *_p = ::soap_new___tds__GetZeroConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetZeroConfiguration(soap, _p);
		_p->tds__GetZeroConfiguration = tds__GetZeroConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetZeroConfiguration(struct soap*, const struct __tds__GetZeroConfiguration *, const char*, const char*);

inline int soap_write___tds__GetZeroConfiguration(struct soap *soap, struct __tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetZeroConfiguration(soap, p), 0) || ::soap_put___tds__GetZeroConfiguration(soap, p, "-tds:GetZeroConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetZeroConfiguration(soap, p), 0) || ::soap_put___tds__GetZeroConfiguration(soap, p, "-tds:GetZeroConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetZeroConfiguration(soap, p), 0) || ::soap_put___tds__GetZeroConfiguration(soap, p, "-tds:GetZeroConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__GetZeroConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetZeroConfiguration(soap, p), 0) || ::soap_put___tds__GetZeroConfiguration(soap, p, "-tds:GetZeroConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetZeroConfiguration * SOAP_FMAC4 soap_get___tds__GetZeroConfiguration(struct soap*, struct __tds__GetZeroConfiguration *, const char*, const char*);

inline int soap_read___tds__GetZeroConfiguration(struct soap *soap, struct __tds__GetZeroConfiguration *p)
{
	if (p)
	{	::soap_default___tds__GetZeroConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetZeroConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetZeroConfiguration(struct soap *soap, const char *URL, struct __tds__GetZeroConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetZeroConfiguration(struct soap *soap, struct __tds__GetZeroConfiguration *p)
{
	if (::soap_read___tds__GetZeroConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE___tds__SetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNetworkDefaultGateway(struct soap*, struct __tds__SetNetworkDefaultGateway *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNetworkDefaultGateway(struct soap*, const struct __tds__SetNetworkDefaultGateway *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNetworkDefaultGateway(struct soap*, const char*, int, const struct __tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 struct __tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_in___tds__SetNetworkDefaultGateway(struct soap*, const char*, struct __tds__SetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 struct __tds__SetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__SetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNetworkDefaultGateway * soap_new___tds__SetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNetworkDefaultGateway * soap_new_req___tds__SetNetworkDefaultGateway(
	struct soap *soap)
{
	struct __tds__SetNetworkDefaultGateway *_p = ::soap_new___tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	::soap_default___tds__SetNetworkDefaultGateway(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNetworkDefaultGateway * soap_new_set___tds__SetNetworkDefaultGateway(
	struct soap *soap,
	_tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway)
{
	struct __tds__SetNetworkDefaultGateway *_p = ::soap_new___tds__SetNetworkDefaultGateway(soap);
	if (_p)
	{	::soap_default___tds__SetNetworkDefaultGateway(soap, _p);
		_p->tds__SetNetworkDefaultGateway = tds__SetNetworkDefaultGateway;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNetworkDefaultGateway(struct soap*, const struct __tds__SetNetworkDefaultGateway *, const char*, const char*);

inline int soap_write___tds__SetNetworkDefaultGateway(struct soap *soap, struct __tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__SetNetworkDefaultGateway(soap, p, "-tds:SetNetworkDefaultGateway", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__SetNetworkDefaultGateway(soap, p, "-tds:SetNetworkDefaultGateway", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__SetNetworkDefaultGateway(soap, p, "-tds:SetNetworkDefaultGateway", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__SetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__SetNetworkDefaultGateway(soap, p, "-tds:SetNetworkDefaultGateway", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNetworkDefaultGateway * SOAP_FMAC4 soap_get___tds__SetNetworkDefaultGateway(struct soap*, struct __tds__SetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read___tds__SetNetworkDefaultGateway(struct soap *soap, struct __tds__SetNetworkDefaultGateway *p)
{
	if (p)
	{	::soap_default___tds__SetNetworkDefaultGateway(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__SetNetworkDefaultGateway *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetNetworkDefaultGateway(struct soap *soap, struct __tds__SetNetworkDefaultGateway *p)
{
	if (::soap_read___tds__SetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE___tds__GetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNetworkDefaultGateway(struct soap*, struct __tds__GetNetworkDefaultGateway *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNetworkDefaultGateway(struct soap*, const struct __tds__GetNetworkDefaultGateway *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNetworkDefaultGateway(struct soap*, const char*, int, const struct __tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC3 struct __tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_in___tds__GetNetworkDefaultGateway(struct soap*, const char*, struct __tds__GetNetworkDefaultGateway *, const char*);
SOAP_FMAC1 struct __tds__GetNetworkDefaultGateway * SOAP_FMAC2 soap_instantiate___tds__GetNetworkDefaultGateway(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNetworkDefaultGateway * soap_new___tds__GetNetworkDefaultGateway(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNetworkDefaultGateway(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNetworkDefaultGateway * soap_new_req___tds__GetNetworkDefaultGateway(
	struct soap *soap)
{
	struct __tds__GetNetworkDefaultGateway *_p = ::soap_new___tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	::soap_default___tds__GetNetworkDefaultGateway(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNetworkDefaultGateway * soap_new_set___tds__GetNetworkDefaultGateway(
	struct soap *soap,
	_tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway)
{
	struct __tds__GetNetworkDefaultGateway *_p = ::soap_new___tds__GetNetworkDefaultGateway(soap);
	if (_p)
	{	::soap_default___tds__GetNetworkDefaultGateway(soap, _p);
		_p->tds__GetNetworkDefaultGateway = tds__GetNetworkDefaultGateway;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNetworkDefaultGateway(struct soap*, const struct __tds__GetNetworkDefaultGateway *, const char*, const char*);

inline int soap_write___tds__GetNetworkDefaultGateway(struct soap *soap, struct __tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__GetNetworkDefaultGateway(soap, p, "-tds:GetNetworkDefaultGateway", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__GetNetworkDefaultGateway(soap, p, "-tds:GetNetworkDefaultGateway", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__GetNetworkDefaultGateway(soap, p, "-tds:GetNetworkDefaultGateway", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__GetNetworkDefaultGateway const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkDefaultGateway(soap, p), 0) || ::soap_put___tds__GetNetworkDefaultGateway(soap, p, "-tds:GetNetworkDefaultGateway", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNetworkDefaultGateway * SOAP_FMAC4 soap_get___tds__GetNetworkDefaultGateway(struct soap*, struct __tds__GetNetworkDefaultGateway *, const char*, const char*);

inline int soap_read___tds__GetNetworkDefaultGateway(struct soap *soap, struct __tds__GetNetworkDefaultGateway *p)
{
	if (p)
	{	::soap_default___tds__GetNetworkDefaultGateway(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetNetworkDefaultGateway(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetNetworkDefaultGateway(struct soap *soap, const char *URL, struct __tds__GetNetworkDefaultGateway *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetNetworkDefaultGateway(struct soap *soap, struct __tds__GetNetworkDefaultGateway *p)
{
	if (::soap_read___tds__GetNetworkDefaultGateway(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetNetworkProtocols_DEFINED
#define SOAP_TYPE___tds__SetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNetworkProtocols(struct soap*, struct __tds__SetNetworkProtocols *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNetworkProtocols(struct soap*, const struct __tds__SetNetworkProtocols *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNetworkProtocols(struct soap*, const char*, int, const struct __tds__SetNetworkProtocols *, const char*);
SOAP_FMAC3 struct __tds__SetNetworkProtocols * SOAP_FMAC4 soap_in___tds__SetNetworkProtocols(struct soap*, const char*, struct __tds__SetNetworkProtocols *, const char*);
SOAP_FMAC1 struct __tds__SetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__SetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNetworkProtocols * soap_new___tds__SetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNetworkProtocols * soap_new_req___tds__SetNetworkProtocols(
	struct soap *soap)
{
	struct __tds__SetNetworkProtocols *_p = ::soap_new___tds__SetNetworkProtocols(soap);
	if (_p)
	{	::soap_default___tds__SetNetworkProtocols(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNetworkProtocols * soap_new_set___tds__SetNetworkProtocols(
	struct soap *soap,
	_tds__SetNetworkProtocols *tds__SetNetworkProtocols)
{
	struct __tds__SetNetworkProtocols *_p = ::soap_new___tds__SetNetworkProtocols(soap);
	if (_p)
	{	::soap_default___tds__SetNetworkProtocols(soap, _p);
		_p->tds__SetNetworkProtocols = tds__SetNetworkProtocols;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNetworkProtocols(struct soap*, const struct __tds__SetNetworkProtocols *, const char*, const char*);

inline int soap_write___tds__SetNetworkProtocols(struct soap *soap, struct __tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetNetworkProtocols(soap, p), 0) || ::soap_put___tds__SetNetworkProtocols(soap, p, "-tds:SetNetworkProtocols", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkProtocols(soap, p), 0) || ::soap_put___tds__SetNetworkProtocols(soap, p, "-tds:SetNetworkProtocols", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkProtocols(soap, p), 0) || ::soap_put___tds__SetNetworkProtocols(soap, p, "-tds:SetNetworkProtocols", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__SetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkProtocols(soap, p), 0) || ::soap_put___tds__SetNetworkProtocols(soap, p, "-tds:SetNetworkProtocols", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNetworkProtocols * SOAP_FMAC4 soap_get___tds__SetNetworkProtocols(struct soap*, struct __tds__SetNetworkProtocols *, const char*, const char*);

inline int soap_read___tds__SetNetworkProtocols(struct soap *soap, struct __tds__SetNetworkProtocols *p)
{
	if (p)
	{	::soap_default___tds__SetNetworkProtocols(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__SetNetworkProtocols *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetNetworkProtocols(struct soap *soap, struct __tds__SetNetworkProtocols *p)
{
	if (::soap_read___tds__SetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetNetworkProtocols_DEFINED
#define SOAP_TYPE___tds__GetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNetworkProtocols(struct soap*, struct __tds__GetNetworkProtocols *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNetworkProtocols(struct soap*, const struct __tds__GetNetworkProtocols *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNetworkProtocols(struct soap*, const char*, int, const struct __tds__GetNetworkProtocols *, const char*);
SOAP_FMAC3 struct __tds__GetNetworkProtocols * SOAP_FMAC4 soap_in___tds__GetNetworkProtocols(struct soap*, const char*, struct __tds__GetNetworkProtocols *, const char*);
SOAP_FMAC1 struct __tds__GetNetworkProtocols * SOAP_FMAC2 soap_instantiate___tds__GetNetworkProtocols(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNetworkProtocols * soap_new___tds__GetNetworkProtocols(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNetworkProtocols(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNetworkProtocols * soap_new_req___tds__GetNetworkProtocols(
	struct soap *soap)
{
	struct __tds__GetNetworkProtocols *_p = ::soap_new___tds__GetNetworkProtocols(soap);
	if (_p)
	{	::soap_default___tds__GetNetworkProtocols(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNetworkProtocols * soap_new_set___tds__GetNetworkProtocols(
	struct soap *soap,
	_tds__GetNetworkProtocols *tds__GetNetworkProtocols)
{
	struct __tds__GetNetworkProtocols *_p = ::soap_new___tds__GetNetworkProtocols(soap);
	if (_p)
	{	::soap_default___tds__GetNetworkProtocols(soap, _p);
		_p->tds__GetNetworkProtocols = tds__GetNetworkProtocols;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNetworkProtocols(struct soap*, const struct __tds__GetNetworkProtocols *, const char*, const char*);

inline int soap_write___tds__GetNetworkProtocols(struct soap *soap, struct __tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetNetworkProtocols(soap, p), 0) || ::soap_put___tds__GetNetworkProtocols(soap, p, "-tds:GetNetworkProtocols", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkProtocols(soap, p), 0) || ::soap_put___tds__GetNetworkProtocols(soap, p, "-tds:GetNetworkProtocols", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkProtocols(soap, p), 0) || ::soap_put___tds__GetNetworkProtocols(soap, p, "-tds:GetNetworkProtocols", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__GetNetworkProtocols const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkProtocols(soap, p), 0) || ::soap_put___tds__GetNetworkProtocols(soap, p, "-tds:GetNetworkProtocols", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNetworkProtocols * SOAP_FMAC4 soap_get___tds__GetNetworkProtocols(struct soap*, struct __tds__GetNetworkProtocols *, const char*, const char*);

inline int soap_read___tds__GetNetworkProtocols(struct soap *soap, struct __tds__GetNetworkProtocols *p)
{
	if (p)
	{	::soap_default___tds__GetNetworkProtocols(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetNetworkProtocols(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetNetworkProtocols(struct soap *soap, const char *URL, struct __tds__GetNetworkProtocols *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetNetworkProtocols(struct soap *soap, struct __tds__GetNetworkProtocols *p)
{
	if (::soap_read___tds__GetNetworkProtocols(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetNetworkInterfaces_DEFINED
#define SOAP_TYPE___tds__SetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNetworkInterfaces(struct soap*, struct __tds__SetNetworkInterfaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNetworkInterfaces(struct soap*, const struct __tds__SetNetworkInterfaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNetworkInterfaces(struct soap*, const char*, int, const struct __tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC3 struct __tds__SetNetworkInterfaces * SOAP_FMAC4 soap_in___tds__SetNetworkInterfaces(struct soap*, const char*, struct __tds__SetNetworkInterfaces *, const char*);
SOAP_FMAC1 struct __tds__SetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__SetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNetworkInterfaces * soap_new___tds__SetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNetworkInterfaces * soap_new_req___tds__SetNetworkInterfaces(
	struct soap *soap)
{
	struct __tds__SetNetworkInterfaces *_p = ::soap_new___tds__SetNetworkInterfaces(soap);
	if (_p)
	{	::soap_default___tds__SetNetworkInterfaces(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNetworkInterfaces * soap_new_set___tds__SetNetworkInterfaces(
	struct soap *soap,
	_tds__SetNetworkInterfaces *tds__SetNetworkInterfaces)
{
	struct __tds__SetNetworkInterfaces *_p = ::soap_new___tds__SetNetworkInterfaces(soap);
	if (_p)
	{	::soap_default___tds__SetNetworkInterfaces(soap, _p);
		_p->tds__SetNetworkInterfaces = tds__SetNetworkInterfaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNetworkInterfaces(struct soap*, const struct __tds__SetNetworkInterfaces *, const char*, const char*);

inline int soap_write___tds__SetNetworkInterfaces(struct soap *soap, struct __tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__SetNetworkInterfaces(soap, p, "-tds:SetNetworkInterfaces", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__SetNetworkInterfaces(soap, p, "-tds:SetNetworkInterfaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__SetNetworkInterfaces(soap, p, "-tds:SetNetworkInterfaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__SetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__SetNetworkInterfaces(soap, p, "-tds:SetNetworkInterfaces", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNetworkInterfaces * SOAP_FMAC4 soap_get___tds__SetNetworkInterfaces(struct soap*, struct __tds__SetNetworkInterfaces *, const char*, const char*);

inline int soap_read___tds__SetNetworkInterfaces(struct soap *soap, struct __tds__SetNetworkInterfaces *p)
{
	if (p)
	{	::soap_default___tds__SetNetworkInterfaces(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__SetNetworkInterfaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetNetworkInterfaces(struct soap *soap, struct __tds__SetNetworkInterfaces *p)
{
	if (::soap_read___tds__SetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetNetworkInterfaces_DEFINED
#define SOAP_TYPE___tds__GetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNetworkInterfaces(struct soap*, struct __tds__GetNetworkInterfaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNetworkInterfaces(struct soap*, const struct __tds__GetNetworkInterfaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNetworkInterfaces(struct soap*, const char*, int, const struct __tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC3 struct __tds__GetNetworkInterfaces * SOAP_FMAC4 soap_in___tds__GetNetworkInterfaces(struct soap*, const char*, struct __tds__GetNetworkInterfaces *, const char*);
SOAP_FMAC1 struct __tds__GetNetworkInterfaces * SOAP_FMAC2 soap_instantiate___tds__GetNetworkInterfaces(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNetworkInterfaces * soap_new___tds__GetNetworkInterfaces(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNetworkInterfaces(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNetworkInterfaces * soap_new_req___tds__GetNetworkInterfaces(
	struct soap *soap)
{
	struct __tds__GetNetworkInterfaces *_p = ::soap_new___tds__GetNetworkInterfaces(soap);
	if (_p)
	{	::soap_default___tds__GetNetworkInterfaces(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNetworkInterfaces * soap_new_set___tds__GetNetworkInterfaces(
	struct soap *soap,
	_tds__GetNetworkInterfaces *tds__GetNetworkInterfaces)
{
	struct __tds__GetNetworkInterfaces *_p = ::soap_new___tds__GetNetworkInterfaces(soap);
	if (_p)
	{	::soap_default___tds__GetNetworkInterfaces(soap, _p);
		_p->tds__GetNetworkInterfaces = tds__GetNetworkInterfaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNetworkInterfaces(struct soap*, const struct __tds__GetNetworkInterfaces *, const char*, const char*);

inline int soap_write___tds__GetNetworkInterfaces(struct soap *soap, struct __tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__GetNetworkInterfaces(soap, p, "-tds:GetNetworkInterfaces", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__GetNetworkInterfaces(soap, p, "-tds:GetNetworkInterfaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__GetNetworkInterfaces(soap, p, "-tds:GetNetworkInterfaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__GetNetworkInterfaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNetworkInterfaces(soap, p), 0) || ::soap_put___tds__GetNetworkInterfaces(soap, p, "-tds:GetNetworkInterfaces", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNetworkInterfaces * SOAP_FMAC4 soap_get___tds__GetNetworkInterfaces(struct soap*, struct __tds__GetNetworkInterfaces *, const char*, const char*);

inline int soap_read___tds__GetNetworkInterfaces(struct soap *soap, struct __tds__GetNetworkInterfaces *p)
{
	if (p)
	{	::soap_default___tds__GetNetworkInterfaces(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetNetworkInterfaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetNetworkInterfaces(struct soap *soap, const char *URL, struct __tds__GetNetworkInterfaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetNetworkInterfaces(struct soap *soap, struct __tds__GetNetworkInterfaces *p)
{
	if (::soap_read___tds__GetNetworkInterfaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetDynamicDNS_DEFINED
#define SOAP_TYPE___tds__SetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDynamicDNS(struct soap*, struct __tds__SetDynamicDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDynamicDNS(struct soap*, const struct __tds__SetDynamicDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDynamicDNS(struct soap*, const char*, int, const struct __tds__SetDynamicDNS *, const char*);
SOAP_FMAC3 struct __tds__SetDynamicDNS * SOAP_FMAC4 soap_in___tds__SetDynamicDNS(struct soap*, const char*, struct __tds__SetDynamicDNS *, const char*);
SOAP_FMAC1 struct __tds__SetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__SetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDynamicDNS * soap_new___tds__SetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDynamicDNS * soap_new_req___tds__SetDynamicDNS(
	struct soap *soap)
{
	struct __tds__SetDynamicDNS *_p = ::soap_new___tds__SetDynamicDNS(soap);
	if (_p)
	{	::soap_default___tds__SetDynamicDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDynamicDNS * soap_new_set___tds__SetDynamicDNS(
	struct soap *soap,
	_tds__SetDynamicDNS *tds__SetDynamicDNS)
{
	struct __tds__SetDynamicDNS *_p = ::soap_new___tds__SetDynamicDNS(soap);
	if (_p)
	{	::soap_default___tds__SetDynamicDNS(soap, _p);
		_p->tds__SetDynamicDNS = tds__SetDynamicDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDynamicDNS(struct soap*, const struct __tds__SetDynamicDNS *, const char*, const char*);

inline int soap_write___tds__SetDynamicDNS(struct soap *soap, struct __tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetDynamicDNS(soap, p), 0) || ::soap_put___tds__SetDynamicDNS(soap, p, "-tds:SetDynamicDNS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetDynamicDNS(struct soap *soap, const char *URL, struct __tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDynamicDNS(soap, p), 0) || ::soap_put___tds__SetDynamicDNS(soap, p, "-tds:SetDynamicDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetDynamicDNS(struct soap *soap, const char *URL, struct __tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDynamicDNS(soap, p), 0) || ::soap_put___tds__SetDynamicDNS(soap, p, "-tds:SetDynamicDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetDynamicDNS(struct soap *soap, const char *URL, struct __tds__SetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDynamicDNS(soap, p), 0) || ::soap_put___tds__SetDynamicDNS(soap, p, "-tds:SetDynamicDNS", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDynamicDNS * SOAP_FMAC4 soap_get___tds__SetDynamicDNS(struct soap*, struct __tds__SetDynamicDNS *, const char*, const char*);

inline int soap_read___tds__SetDynamicDNS(struct soap *soap, struct __tds__SetDynamicDNS *p)
{
	if (p)
	{	::soap_default___tds__SetDynamicDNS(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetDynamicDNS(struct soap *soap, const char *URL, struct __tds__SetDynamicDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetDynamicDNS(struct soap *soap, struct __tds__SetDynamicDNS *p)
{
	if (::soap_read___tds__SetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDynamicDNS_DEFINED
#define SOAP_TYPE___tds__GetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDynamicDNS(struct soap*, struct __tds__GetDynamicDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDynamicDNS(struct soap*, const struct __tds__GetDynamicDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDynamicDNS(struct soap*, const char*, int, const struct __tds__GetDynamicDNS *, const char*);
SOAP_FMAC3 struct __tds__GetDynamicDNS * SOAP_FMAC4 soap_in___tds__GetDynamicDNS(struct soap*, const char*, struct __tds__GetDynamicDNS *, const char*);
SOAP_FMAC1 struct __tds__GetDynamicDNS * SOAP_FMAC2 soap_instantiate___tds__GetDynamicDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDynamicDNS * soap_new___tds__GetDynamicDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDynamicDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDynamicDNS * soap_new_req___tds__GetDynamicDNS(
	struct soap *soap)
{
	struct __tds__GetDynamicDNS *_p = ::soap_new___tds__GetDynamicDNS(soap);
	if (_p)
	{	::soap_default___tds__GetDynamicDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDynamicDNS * soap_new_set___tds__GetDynamicDNS(
	struct soap *soap,
	_tds__GetDynamicDNS *tds__GetDynamicDNS)
{
	struct __tds__GetDynamicDNS *_p = ::soap_new___tds__GetDynamicDNS(soap);
	if (_p)
	{	::soap_default___tds__GetDynamicDNS(soap, _p);
		_p->tds__GetDynamicDNS = tds__GetDynamicDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDynamicDNS(struct soap*, const struct __tds__GetDynamicDNS *, const char*, const char*);

inline int soap_write___tds__GetDynamicDNS(struct soap *soap, struct __tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDynamicDNS(soap, p), 0) || ::soap_put___tds__GetDynamicDNS(soap, p, "-tds:GetDynamicDNS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDynamicDNS(struct soap *soap, const char *URL, struct __tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDynamicDNS(soap, p), 0) || ::soap_put___tds__GetDynamicDNS(soap, p, "-tds:GetDynamicDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDynamicDNS(struct soap *soap, const char *URL, struct __tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDynamicDNS(soap, p), 0) || ::soap_put___tds__GetDynamicDNS(soap, p, "-tds:GetDynamicDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDynamicDNS(struct soap *soap, const char *URL, struct __tds__GetDynamicDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDynamicDNS(soap, p), 0) || ::soap_put___tds__GetDynamicDNS(soap, p, "-tds:GetDynamicDNS", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDynamicDNS * SOAP_FMAC4 soap_get___tds__GetDynamicDNS(struct soap*, struct __tds__GetDynamicDNS *, const char*, const char*);

inline int soap_read___tds__GetDynamicDNS(struct soap *soap, struct __tds__GetDynamicDNS *p)
{
	if (p)
	{	::soap_default___tds__GetDynamicDNS(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDynamicDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDynamicDNS(struct soap *soap, const char *URL, struct __tds__GetDynamicDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDynamicDNS(struct soap *soap, struct __tds__GetDynamicDNS *p)
{
	if (::soap_read___tds__GetDynamicDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetNTP_DEFINED
#define SOAP_TYPE___tds__SetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetNTP(struct soap*, struct __tds__SetNTP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetNTP(struct soap*, const struct __tds__SetNTP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetNTP(struct soap*, const char*, int, const struct __tds__SetNTP *, const char*);
SOAP_FMAC3 struct __tds__SetNTP * SOAP_FMAC4 soap_in___tds__SetNTP(struct soap*, const char*, struct __tds__SetNTP *, const char*);
SOAP_FMAC1 struct __tds__SetNTP * SOAP_FMAC2 soap_instantiate___tds__SetNTP(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetNTP * soap_new___tds__SetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetNTP(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetNTP * soap_new_req___tds__SetNTP(
	struct soap *soap)
{
	struct __tds__SetNTP *_p = ::soap_new___tds__SetNTP(soap);
	if (_p)
	{	::soap_default___tds__SetNTP(soap, _p);
	}
	return _p;
}

inline struct __tds__SetNTP * soap_new_set___tds__SetNTP(
	struct soap *soap,
	_tds__SetNTP *tds__SetNTP)
{
	struct __tds__SetNTP *_p = ::soap_new___tds__SetNTP(soap);
	if (_p)
	{	::soap_default___tds__SetNTP(soap, _p);
		_p->tds__SetNTP = tds__SetNTP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetNTP(struct soap*, const struct __tds__SetNTP *, const char*, const char*);

inline int soap_write___tds__SetNTP(struct soap *soap, struct __tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetNTP(soap, p), 0) || ::soap_put___tds__SetNTP(soap, p, "-tds:SetNTP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetNTP(struct soap *soap, const char *URL, struct __tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNTP(soap, p), 0) || ::soap_put___tds__SetNTP(soap, p, "-tds:SetNTP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetNTP(struct soap *soap, const char *URL, struct __tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNTP(soap, p), 0) || ::soap_put___tds__SetNTP(soap, p, "-tds:SetNTP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetNTP(struct soap *soap, const char *URL, struct __tds__SetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetNTP(soap, p), 0) || ::soap_put___tds__SetNTP(soap, p, "-tds:SetNTP", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetNTP * SOAP_FMAC4 soap_get___tds__SetNTP(struct soap*, struct __tds__SetNTP *, const char*, const char*);

inline int soap_read___tds__SetNTP(struct soap *soap, struct __tds__SetNTP *p)
{
	if (p)
	{	::soap_default___tds__SetNTP(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetNTP(struct soap *soap, const char *URL, struct __tds__SetNTP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetNTP(struct soap *soap, struct __tds__SetNTP *p)
{
	if (::soap_read___tds__SetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetNTP_DEFINED
#define SOAP_TYPE___tds__GetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetNTP(struct soap*, struct __tds__GetNTP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetNTP(struct soap*, const struct __tds__GetNTP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetNTP(struct soap*, const char*, int, const struct __tds__GetNTP *, const char*);
SOAP_FMAC3 struct __tds__GetNTP * SOAP_FMAC4 soap_in___tds__GetNTP(struct soap*, const char*, struct __tds__GetNTP *, const char*);
SOAP_FMAC1 struct __tds__GetNTP * SOAP_FMAC2 soap_instantiate___tds__GetNTP(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetNTP * soap_new___tds__GetNTP(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetNTP(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetNTP * soap_new_req___tds__GetNTP(
	struct soap *soap)
{
	struct __tds__GetNTP *_p = ::soap_new___tds__GetNTP(soap);
	if (_p)
	{	::soap_default___tds__GetNTP(soap, _p);
	}
	return _p;
}

inline struct __tds__GetNTP * soap_new_set___tds__GetNTP(
	struct soap *soap,
	_tds__GetNTP *tds__GetNTP)
{
	struct __tds__GetNTP *_p = ::soap_new___tds__GetNTP(soap);
	if (_p)
	{	::soap_default___tds__GetNTP(soap, _p);
		_p->tds__GetNTP = tds__GetNTP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetNTP(struct soap*, const struct __tds__GetNTP *, const char*, const char*);

inline int soap_write___tds__GetNTP(struct soap *soap, struct __tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetNTP(soap, p), 0) || ::soap_put___tds__GetNTP(soap, p, "-tds:GetNTP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetNTP(struct soap *soap, const char *URL, struct __tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNTP(soap, p), 0) || ::soap_put___tds__GetNTP(soap, p, "-tds:GetNTP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetNTP(struct soap *soap, const char *URL, struct __tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNTP(soap, p), 0) || ::soap_put___tds__GetNTP(soap, p, "-tds:GetNTP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetNTP(struct soap *soap, const char *URL, struct __tds__GetNTP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetNTP(soap, p), 0) || ::soap_put___tds__GetNTP(soap, p, "-tds:GetNTP", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetNTP * SOAP_FMAC4 soap_get___tds__GetNTP(struct soap*, struct __tds__GetNTP *, const char*, const char*);

inline int soap_read___tds__GetNTP(struct soap *soap, struct __tds__GetNTP *p)
{
	if (p)
	{	::soap_default___tds__GetNTP(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetNTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetNTP(struct soap *soap, const char *URL, struct __tds__GetNTP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetNTP(struct soap *soap, struct __tds__GetNTP *p)
{
	if (::soap_read___tds__GetNTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetDNS_DEFINED
#define SOAP_TYPE___tds__SetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDNS(struct soap*, struct __tds__SetDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDNS(struct soap*, const struct __tds__SetDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDNS(struct soap*, const char*, int, const struct __tds__SetDNS *, const char*);
SOAP_FMAC3 struct __tds__SetDNS * SOAP_FMAC4 soap_in___tds__SetDNS(struct soap*, const char*, struct __tds__SetDNS *, const char*);
SOAP_FMAC1 struct __tds__SetDNS * SOAP_FMAC2 soap_instantiate___tds__SetDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDNS * soap_new___tds__SetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDNS * soap_new_req___tds__SetDNS(
	struct soap *soap)
{
	struct __tds__SetDNS *_p = ::soap_new___tds__SetDNS(soap);
	if (_p)
	{	::soap_default___tds__SetDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDNS * soap_new_set___tds__SetDNS(
	struct soap *soap,
	_tds__SetDNS *tds__SetDNS)
{
	struct __tds__SetDNS *_p = ::soap_new___tds__SetDNS(soap);
	if (_p)
	{	::soap_default___tds__SetDNS(soap, _p);
		_p->tds__SetDNS = tds__SetDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDNS(struct soap*, const struct __tds__SetDNS *, const char*, const char*);

inline int soap_write___tds__SetDNS(struct soap *soap, struct __tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetDNS(soap, p), 0) || ::soap_put___tds__SetDNS(soap, p, "-tds:SetDNS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetDNS(struct soap *soap, const char *URL, struct __tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDNS(soap, p), 0) || ::soap_put___tds__SetDNS(soap, p, "-tds:SetDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetDNS(struct soap *soap, const char *URL, struct __tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDNS(soap, p), 0) || ::soap_put___tds__SetDNS(soap, p, "-tds:SetDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetDNS(struct soap *soap, const char *URL, struct __tds__SetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDNS(soap, p), 0) || ::soap_put___tds__SetDNS(soap, p, "-tds:SetDNS", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDNS * SOAP_FMAC4 soap_get___tds__SetDNS(struct soap*, struct __tds__SetDNS *, const char*, const char*);

inline int soap_read___tds__SetDNS(struct soap *soap, struct __tds__SetDNS *p)
{
	if (p)
	{	::soap_default___tds__SetDNS(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetDNS(struct soap *soap, const char *URL, struct __tds__SetDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetDNS(struct soap *soap, struct __tds__SetDNS *p)
{
	if (::soap_read___tds__SetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDNS_DEFINED
#define SOAP_TYPE___tds__GetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDNS(struct soap*, struct __tds__GetDNS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDNS(struct soap*, const struct __tds__GetDNS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDNS(struct soap*, const char*, int, const struct __tds__GetDNS *, const char*);
SOAP_FMAC3 struct __tds__GetDNS * SOAP_FMAC4 soap_in___tds__GetDNS(struct soap*, const char*, struct __tds__GetDNS *, const char*);
SOAP_FMAC1 struct __tds__GetDNS * SOAP_FMAC2 soap_instantiate___tds__GetDNS(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDNS * soap_new___tds__GetDNS(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDNS(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDNS * soap_new_req___tds__GetDNS(
	struct soap *soap)
{
	struct __tds__GetDNS *_p = ::soap_new___tds__GetDNS(soap);
	if (_p)
	{	::soap_default___tds__GetDNS(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDNS * soap_new_set___tds__GetDNS(
	struct soap *soap,
	_tds__GetDNS *tds__GetDNS)
{
	struct __tds__GetDNS *_p = ::soap_new___tds__GetDNS(soap);
	if (_p)
	{	::soap_default___tds__GetDNS(soap, _p);
		_p->tds__GetDNS = tds__GetDNS;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDNS(struct soap*, const struct __tds__GetDNS *, const char*, const char*);

inline int soap_write___tds__GetDNS(struct soap *soap, struct __tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDNS(soap, p), 0) || ::soap_put___tds__GetDNS(soap, p, "-tds:GetDNS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDNS(struct soap *soap, const char *URL, struct __tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDNS(soap, p), 0) || ::soap_put___tds__GetDNS(soap, p, "-tds:GetDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDNS(struct soap *soap, const char *URL, struct __tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDNS(soap, p), 0) || ::soap_put___tds__GetDNS(soap, p, "-tds:GetDNS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDNS(struct soap *soap, const char *URL, struct __tds__GetDNS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDNS(soap, p), 0) || ::soap_put___tds__GetDNS(soap, p, "-tds:GetDNS", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDNS * SOAP_FMAC4 soap_get___tds__GetDNS(struct soap*, struct __tds__GetDNS *, const char*, const char*);

inline int soap_read___tds__GetDNS(struct soap *soap, struct __tds__GetDNS *p)
{
	if (p)
	{	::soap_default___tds__GetDNS(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDNS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDNS(struct soap *soap, const char *URL, struct __tds__GetDNS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDNS(struct soap *soap, struct __tds__GetDNS *p)
{
	if (::soap_read___tds__GetDNS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP_DEFINED
#define SOAP_TYPE___tds__SetHostnameFromDHCP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetHostnameFromDHCP(struct soap*, struct __tds__SetHostnameFromDHCP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetHostnameFromDHCP(struct soap*, const struct __tds__SetHostnameFromDHCP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetHostnameFromDHCP(struct soap*, const char*, int, const struct __tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC3 struct __tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_in___tds__SetHostnameFromDHCP(struct soap*, const char*, struct __tds__SetHostnameFromDHCP *, const char*);
SOAP_FMAC1 struct __tds__SetHostnameFromDHCP * SOAP_FMAC2 soap_instantiate___tds__SetHostnameFromDHCP(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetHostnameFromDHCP * soap_new___tds__SetHostnameFromDHCP(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetHostnameFromDHCP(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetHostnameFromDHCP * soap_new_req___tds__SetHostnameFromDHCP(
	struct soap *soap)
{
	struct __tds__SetHostnameFromDHCP *_p = ::soap_new___tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	::soap_default___tds__SetHostnameFromDHCP(soap, _p);
	}
	return _p;
}

inline struct __tds__SetHostnameFromDHCP * soap_new_set___tds__SetHostnameFromDHCP(
	struct soap *soap,
	_tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP)
{
	struct __tds__SetHostnameFromDHCP *_p = ::soap_new___tds__SetHostnameFromDHCP(soap);
	if (_p)
	{	::soap_default___tds__SetHostnameFromDHCP(soap, _p);
		_p->tds__SetHostnameFromDHCP = tds__SetHostnameFromDHCP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetHostnameFromDHCP(struct soap*, const struct __tds__SetHostnameFromDHCP *, const char*, const char*);

inline int soap_write___tds__SetHostnameFromDHCP(struct soap *soap, struct __tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetHostnameFromDHCP(soap, p), 0) || ::soap_put___tds__SetHostnameFromDHCP(soap, p, "-tds:SetHostnameFromDHCP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, struct __tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHostnameFromDHCP(soap, p), 0) || ::soap_put___tds__SetHostnameFromDHCP(soap, p, "-tds:SetHostnameFromDHCP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, struct __tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHostnameFromDHCP(soap, p), 0) || ::soap_put___tds__SetHostnameFromDHCP(soap, p, "-tds:SetHostnameFromDHCP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, struct __tds__SetHostnameFromDHCP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHostnameFromDHCP(soap, p), 0) || ::soap_put___tds__SetHostnameFromDHCP(soap, p, "-tds:SetHostnameFromDHCP", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetHostnameFromDHCP * SOAP_FMAC4 soap_get___tds__SetHostnameFromDHCP(struct soap*, struct __tds__SetHostnameFromDHCP *, const char*, const char*);

inline int soap_read___tds__SetHostnameFromDHCP(struct soap *soap, struct __tds__SetHostnameFromDHCP *p)
{
	if (p)
	{	::soap_default___tds__SetHostnameFromDHCP(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetHostnameFromDHCP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetHostnameFromDHCP(struct soap *soap, const char *URL, struct __tds__SetHostnameFromDHCP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetHostnameFromDHCP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetHostnameFromDHCP(struct soap *soap, struct __tds__SetHostnameFromDHCP *p)
{
	if (::soap_read___tds__SetHostnameFromDHCP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetHostname_DEFINED
#define SOAP_TYPE___tds__SetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetHostname(struct soap*, struct __tds__SetHostname *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetHostname(struct soap*, const struct __tds__SetHostname *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetHostname(struct soap*, const char*, int, const struct __tds__SetHostname *, const char*);
SOAP_FMAC3 struct __tds__SetHostname * SOAP_FMAC4 soap_in___tds__SetHostname(struct soap*, const char*, struct __tds__SetHostname *, const char*);
SOAP_FMAC1 struct __tds__SetHostname * SOAP_FMAC2 soap_instantiate___tds__SetHostname(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetHostname * soap_new___tds__SetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetHostname(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetHostname * soap_new_req___tds__SetHostname(
	struct soap *soap)
{
	struct __tds__SetHostname *_p = ::soap_new___tds__SetHostname(soap);
	if (_p)
	{	::soap_default___tds__SetHostname(soap, _p);
	}
	return _p;
}

inline struct __tds__SetHostname * soap_new_set___tds__SetHostname(
	struct soap *soap,
	_tds__SetHostname *tds__SetHostname)
{
	struct __tds__SetHostname *_p = ::soap_new___tds__SetHostname(soap);
	if (_p)
	{	::soap_default___tds__SetHostname(soap, _p);
		_p->tds__SetHostname = tds__SetHostname;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetHostname(struct soap*, const struct __tds__SetHostname *, const char*, const char*);

inline int soap_write___tds__SetHostname(struct soap *soap, struct __tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetHostname(soap, p), 0) || ::soap_put___tds__SetHostname(soap, p, "-tds:SetHostname", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetHostname(struct soap *soap, const char *URL, struct __tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHostname(soap, p), 0) || ::soap_put___tds__SetHostname(soap, p, "-tds:SetHostname", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetHostname(struct soap *soap, const char *URL, struct __tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHostname(soap, p), 0) || ::soap_put___tds__SetHostname(soap, p, "-tds:SetHostname", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetHostname(struct soap *soap, const char *URL, struct __tds__SetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetHostname(soap, p), 0) || ::soap_put___tds__SetHostname(soap, p, "-tds:SetHostname", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetHostname * SOAP_FMAC4 soap_get___tds__SetHostname(struct soap*, struct __tds__SetHostname *, const char*, const char*);

inline int soap_read___tds__SetHostname(struct soap *soap, struct __tds__SetHostname *p)
{
	if (p)
	{	::soap_default___tds__SetHostname(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetHostname(struct soap *soap, const char *URL, struct __tds__SetHostname *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetHostname(struct soap *soap, struct __tds__SetHostname *p)
{
	if (::soap_read___tds__SetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetHostname_DEFINED
#define SOAP_TYPE___tds__GetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetHostname(struct soap*, struct __tds__GetHostname *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetHostname(struct soap*, const struct __tds__GetHostname *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetHostname(struct soap*, const char*, int, const struct __tds__GetHostname *, const char*);
SOAP_FMAC3 struct __tds__GetHostname * SOAP_FMAC4 soap_in___tds__GetHostname(struct soap*, const char*, struct __tds__GetHostname *, const char*);
SOAP_FMAC1 struct __tds__GetHostname * SOAP_FMAC2 soap_instantiate___tds__GetHostname(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetHostname * soap_new___tds__GetHostname(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetHostname(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetHostname * soap_new_req___tds__GetHostname(
	struct soap *soap)
{
	struct __tds__GetHostname *_p = ::soap_new___tds__GetHostname(soap);
	if (_p)
	{	::soap_default___tds__GetHostname(soap, _p);
	}
	return _p;
}

inline struct __tds__GetHostname * soap_new_set___tds__GetHostname(
	struct soap *soap,
	_tds__GetHostname *tds__GetHostname)
{
	struct __tds__GetHostname *_p = ::soap_new___tds__GetHostname(soap);
	if (_p)
	{	::soap_default___tds__GetHostname(soap, _p);
		_p->tds__GetHostname = tds__GetHostname;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetHostname(struct soap*, const struct __tds__GetHostname *, const char*, const char*);

inline int soap_write___tds__GetHostname(struct soap *soap, struct __tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetHostname(soap, p), 0) || ::soap_put___tds__GetHostname(soap, p, "-tds:GetHostname", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetHostname(struct soap *soap, const char *URL, struct __tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetHostname(soap, p), 0) || ::soap_put___tds__GetHostname(soap, p, "-tds:GetHostname", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetHostname(struct soap *soap, const char *URL, struct __tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetHostname(soap, p), 0) || ::soap_put___tds__GetHostname(soap, p, "-tds:GetHostname", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetHostname(struct soap *soap, const char *URL, struct __tds__GetHostname const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetHostname(soap, p), 0) || ::soap_put___tds__GetHostname(soap, p, "-tds:GetHostname", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetHostname * SOAP_FMAC4 soap_get___tds__GetHostname(struct soap*, struct __tds__GetHostname *, const char*, const char*);

inline int soap_read___tds__GetHostname(struct soap *soap, struct __tds__GetHostname *p)
{
	if (p)
	{	::soap_default___tds__GetHostname(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetHostname(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetHostname(struct soap *soap, const char *URL, struct __tds__GetHostname *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetHostname(struct soap *soap, struct __tds__GetHostname *p)
{
	if (::soap_read___tds__GetHostname(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetDPAddresses_DEFINED
#define SOAP_TYPE___tds__SetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDPAddresses(struct soap*, struct __tds__SetDPAddresses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDPAddresses(struct soap*, const struct __tds__SetDPAddresses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDPAddresses(struct soap*, const char*, int, const struct __tds__SetDPAddresses *, const char*);
SOAP_FMAC3 struct __tds__SetDPAddresses * SOAP_FMAC4 soap_in___tds__SetDPAddresses(struct soap*, const char*, struct __tds__SetDPAddresses *, const char*);
SOAP_FMAC1 struct __tds__SetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__SetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDPAddresses * soap_new___tds__SetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDPAddresses * soap_new_req___tds__SetDPAddresses(
	struct soap *soap)
{
	struct __tds__SetDPAddresses *_p = ::soap_new___tds__SetDPAddresses(soap);
	if (_p)
	{	::soap_default___tds__SetDPAddresses(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDPAddresses * soap_new_set___tds__SetDPAddresses(
	struct soap *soap,
	_tds__SetDPAddresses *tds__SetDPAddresses)
{
	struct __tds__SetDPAddresses *_p = ::soap_new___tds__SetDPAddresses(soap);
	if (_p)
	{	::soap_default___tds__SetDPAddresses(soap, _p);
		_p->tds__SetDPAddresses = tds__SetDPAddresses;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDPAddresses(struct soap*, const struct __tds__SetDPAddresses *, const char*, const char*);

inline int soap_write___tds__SetDPAddresses(struct soap *soap, struct __tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetDPAddresses(soap, p), 0) || ::soap_put___tds__SetDPAddresses(soap, p, "-tds:SetDPAddresses", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetDPAddresses(struct soap *soap, const char *URL, struct __tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDPAddresses(soap, p), 0) || ::soap_put___tds__SetDPAddresses(soap, p, "-tds:SetDPAddresses", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetDPAddresses(struct soap *soap, const char *URL, struct __tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDPAddresses(soap, p), 0) || ::soap_put___tds__SetDPAddresses(soap, p, "-tds:SetDPAddresses", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetDPAddresses(struct soap *soap, const char *URL, struct __tds__SetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDPAddresses(soap, p), 0) || ::soap_put___tds__SetDPAddresses(soap, p, "-tds:SetDPAddresses", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDPAddresses * SOAP_FMAC4 soap_get___tds__SetDPAddresses(struct soap*, struct __tds__SetDPAddresses *, const char*, const char*);

inline int soap_read___tds__SetDPAddresses(struct soap *soap, struct __tds__SetDPAddresses *p)
{
	if (p)
	{	::soap_default___tds__SetDPAddresses(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetDPAddresses(struct soap *soap, const char *URL, struct __tds__SetDPAddresses *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetDPAddresses(struct soap *soap, struct __tds__SetDPAddresses *p)
{
	if (::soap_read___tds__SetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetCapabilities_DEFINED
#define SOAP_TYPE___tds__GetCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetCapabilities(struct soap*, struct __tds__GetCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetCapabilities(struct soap*, const struct __tds__GetCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetCapabilities(struct soap*, const char*, int, const struct __tds__GetCapabilities *, const char*);
SOAP_FMAC3 struct __tds__GetCapabilities * SOAP_FMAC4 soap_in___tds__GetCapabilities(struct soap*, const char*, struct __tds__GetCapabilities *, const char*);
SOAP_FMAC1 struct __tds__GetCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetCapabilities * soap_new___tds__GetCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetCapabilities * soap_new_req___tds__GetCapabilities(
	struct soap *soap)
{
	struct __tds__GetCapabilities *_p = ::soap_new___tds__GetCapabilities(soap);
	if (_p)
	{	::soap_default___tds__GetCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tds__GetCapabilities * soap_new_set___tds__GetCapabilities(
	struct soap *soap,
	_tds__GetCapabilities *tds__GetCapabilities)
{
	struct __tds__GetCapabilities *_p = ::soap_new___tds__GetCapabilities(soap);
	if (_p)
	{	::soap_default___tds__GetCapabilities(soap, _p);
		_p->tds__GetCapabilities = tds__GetCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetCapabilities(struct soap*, const struct __tds__GetCapabilities *, const char*, const char*);

inline int soap_write___tds__GetCapabilities(struct soap *soap, struct __tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetCapabilities(soap, p), 0) || ::soap_put___tds__GetCapabilities(soap, p, "-tds:GetCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetCapabilities(struct soap *soap, const char *URL, struct __tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCapabilities(soap, p), 0) || ::soap_put___tds__GetCapabilities(soap, p, "-tds:GetCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetCapabilities(struct soap *soap, const char *URL, struct __tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCapabilities(soap, p), 0) || ::soap_put___tds__GetCapabilities(soap, p, "-tds:GetCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetCapabilities(struct soap *soap, const char *URL, struct __tds__GetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetCapabilities(soap, p), 0) || ::soap_put___tds__GetCapabilities(soap, p, "-tds:GetCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetCapabilities * SOAP_FMAC4 soap_get___tds__GetCapabilities(struct soap*, struct __tds__GetCapabilities *, const char*, const char*);

inline int soap_read___tds__GetCapabilities(struct soap *soap, struct __tds__GetCapabilities *p)
{
	if (p)
	{	::soap_default___tds__GetCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetCapabilities(struct soap *soap, const char *URL, struct __tds__GetCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetCapabilities(struct soap *soap, struct __tds__GetCapabilities *p)
{
	if (::soap_read___tds__GetCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetAuthFailureWarningConfiguration_DEFINED
#define SOAP_TYPE___tds__SetAuthFailureWarningConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetAuthFailureWarningConfiguration(struct soap*, struct __tds__SetAuthFailureWarningConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetAuthFailureWarningConfiguration(struct soap*, const struct __tds__SetAuthFailureWarningConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetAuthFailureWarningConfiguration(struct soap*, const char*, int, const struct __tds__SetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_in___tds__SetAuthFailureWarningConfiguration(struct soap*, const char*, struct __tds__SetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetAuthFailureWarningConfiguration * soap_new___tds__SetAuthFailureWarningConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetAuthFailureWarningConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetAuthFailureWarningConfiguration * soap_new_req___tds__SetAuthFailureWarningConfiguration(
	struct soap *soap)
{
	struct __tds__SetAuthFailureWarningConfiguration *_p = ::soap_new___tds__SetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetAuthFailureWarningConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetAuthFailureWarningConfiguration * soap_new_set___tds__SetAuthFailureWarningConfiguration(
	struct soap *soap,
	_tds__SetAuthFailureWarningConfiguration *tds__SetAuthFailureWarningConfiguration)
{
	struct __tds__SetAuthFailureWarningConfiguration *_p = ::soap_new___tds__SetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetAuthFailureWarningConfiguration(soap, _p);
		_p->tds__SetAuthFailureWarningConfiguration = tds__SetAuthFailureWarningConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetAuthFailureWarningConfiguration(struct soap*, const struct __tds__SetAuthFailureWarningConfiguration *, const char*, const char*);

inline int soap_write___tds__SetAuthFailureWarningConfiguration(struct soap *soap, struct __tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__SetAuthFailureWarningConfiguration(soap, p, "-tds:SetAuthFailureWarningConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__SetAuthFailureWarningConfiguration(soap, p, "-tds:SetAuthFailureWarningConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__SetAuthFailureWarningConfiguration(soap, p, "-tds:SetAuthFailureWarningConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__SetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__SetAuthFailureWarningConfiguration(soap, p, "-tds:SetAuthFailureWarningConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_get___tds__SetAuthFailureWarningConfiguration(struct soap*, struct __tds__SetAuthFailureWarningConfiguration *, const char*, const char*);

inline int soap_read___tds__SetAuthFailureWarningConfiguration(struct soap *soap, struct __tds__SetAuthFailureWarningConfiguration *p)
{
	if (p)
	{	::soap_default___tds__SetAuthFailureWarningConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetAuthFailureWarningConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__SetAuthFailureWarningConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetAuthFailureWarningConfiguration(struct soap *soap, struct __tds__SetAuthFailureWarningConfiguration *p)
{
	if (::soap_read___tds__SetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetAuthFailureWarningConfiguration_DEFINED
#define SOAP_TYPE___tds__GetAuthFailureWarningConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetAuthFailureWarningConfiguration(struct soap*, struct __tds__GetAuthFailureWarningConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetAuthFailureWarningConfiguration(struct soap*, const struct __tds__GetAuthFailureWarningConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetAuthFailureWarningConfiguration(struct soap*, const char*, int, const struct __tds__GetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_in___tds__GetAuthFailureWarningConfiguration(struct soap*, const char*, struct __tds__GetAuthFailureWarningConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetAuthFailureWarningConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetAuthFailureWarningConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetAuthFailureWarningConfiguration * soap_new___tds__GetAuthFailureWarningConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetAuthFailureWarningConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetAuthFailureWarningConfiguration * soap_new_req___tds__GetAuthFailureWarningConfiguration(
	struct soap *soap)
{
	struct __tds__GetAuthFailureWarningConfiguration *_p = ::soap_new___tds__GetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetAuthFailureWarningConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetAuthFailureWarningConfiguration * soap_new_set___tds__GetAuthFailureWarningConfiguration(
	struct soap *soap,
	_tds__GetAuthFailureWarningConfiguration *tds__GetAuthFailureWarningConfiguration)
{
	struct __tds__GetAuthFailureWarningConfiguration *_p = ::soap_new___tds__GetAuthFailureWarningConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetAuthFailureWarningConfiguration(soap, _p);
		_p->tds__GetAuthFailureWarningConfiguration = tds__GetAuthFailureWarningConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetAuthFailureWarningConfiguration(struct soap*, const struct __tds__GetAuthFailureWarningConfiguration *, const char*, const char*);

inline int soap_write___tds__GetAuthFailureWarningConfiguration(struct soap *soap, struct __tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningConfiguration(soap, p, "-tds:GetAuthFailureWarningConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningConfiguration(soap, p, "-tds:GetAuthFailureWarningConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningConfiguration(soap, p, "-tds:GetAuthFailureWarningConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAuthFailureWarningConfiguration(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningConfiguration(soap, p, "-tds:GetAuthFailureWarningConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetAuthFailureWarningConfiguration * SOAP_FMAC4 soap_get___tds__GetAuthFailureWarningConfiguration(struct soap*, struct __tds__GetAuthFailureWarningConfiguration *, const char*, const char*);

inline int soap_read___tds__GetAuthFailureWarningConfiguration(struct soap *soap, struct __tds__GetAuthFailureWarningConfiguration *p)
{
	if (p)
	{	::soap_default___tds__GetAuthFailureWarningConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetAuthFailureWarningConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetAuthFailureWarningConfiguration(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetAuthFailureWarningConfiguration(struct soap *soap, struct __tds__GetAuthFailureWarningConfiguration *p)
{
	if (::soap_read___tds__GetAuthFailureWarningConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetAuthFailureWarningOptions_DEFINED
#define SOAP_TYPE___tds__GetAuthFailureWarningOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetAuthFailureWarningOptions(struct soap*, struct __tds__GetAuthFailureWarningOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetAuthFailureWarningOptions(struct soap*, const struct __tds__GetAuthFailureWarningOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetAuthFailureWarningOptions(struct soap*, const char*, int, const struct __tds__GetAuthFailureWarningOptions *, const char*);
SOAP_FMAC3 struct __tds__GetAuthFailureWarningOptions * SOAP_FMAC4 soap_in___tds__GetAuthFailureWarningOptions(struct soap*, const char*, struct __tds__GetAuthFailureWarningOptions *, const char*);
SOAP_FMAC1 struct __tds__GetAuthFailureWarningOptions * SOAP_FMAC2 soap_instantiate___tds__GetAuthFailureWarningOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetAuthFailureWarningOptions * soap_new___tds__GetAuthFailureWarningOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetAuthFailureWarningOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetAuthFailureWarningOptions * soap_new_req___tds__GetAuthFailureWarningOptions(
	struct soap *soap)
{
	struct __tds__GetAuthFailureWarningOptions *_p = ::soap_new___tds__GetAuthFailureWarningOptions(soap);
	if (_p)
	{	::soap_default___tds__GetAuthFailureWarningOptions(soap, _p);
	}
	return _p;
}

inline struct __tds__GetAuthFailureWarningOptions * soap_new_set___tds__GetAuthFailureWarningOptions(
	struct soap *soap,
	_tds__GetAuthFailureWarningOptions *tds__GetAuthFailureWarningOptions)
{
	struct __tds__GetAuthFailureWarningOptions *_p = ::soap_new___tds__GetAuthFailureWarningOptions(soap);
	if (_p)
	{	::soap_default___tds__GetAuthFailureWarningOptions(soap, _p);
		_p->tds__GetAuthFailureWarningOptions = tds__GetAuthFailureWarningOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetAuthFailureWarningOptions(struct soap*, const struct __tds__GetAuthFailureWarningOptions *, const char*, const char*);

inline int soap_write___tds__GetAuthFailureWarningOptions(struct soap *soap, struct __tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetAuthFailureWarningOptions(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningOptions(soap, p, "-tds:GetAuthFailureWarningOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAuthFailureWarningOptions(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningOptions(soap, p, "-tds:GetAuthFailureWarningOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAuthFailureWarningOptions(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningOptions(soap, p, "-tds:GetAuthFailureWarningOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetAuthFailureWarningOptions(soap, p), 0) || ::soap_put___tds__GetAuthFailureWarningOptions(soap, p, "-tds:GetAuthFailureWarningOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetAuthFailureWarningOptions * SOAP_FMAC4 soap_get___tds__GetAuthFailureWarningOptions(struct soap*, struct __tds__GetAuthFailureWarningOptions *, const char*, const char*);

inline int soap_read___tds__GetAuthFailureWarningOptions(struct soap *soap, struct __tds__GetAuthFailureWarningOptions *p)
{
	if (p)
	{	::soap_default___tds__GetAuthFailureWarningOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetAuthFailureWarningOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetAuthFailureWarningOptions(struct soap *soap, const char *URL, struct __tds__GetAuthFailureWarningOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetAuthFailureWarningOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetAuthFailureWarningOptions(struct soap *soap, struct __tds__GetAuthFailureWarningOptions *p)
{
	if (::soap_read___tds__GetAuthFailureWarningOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetPasswordHistoryConfiguration_DEFINED
#define SOAP_TYPE___tds__SetPasswordHistoryConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetPasswordHistoryConfiguration(struct soap*, struct __tds__SetPasswordHistoryConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetPasswordHistoryConfiguration(struct soap*, const struct __tds__SetPasswordHistoryConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetPasswordHistoryConfiguration(struct soap*, const char*, int, const struct __tds__SetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetPasswordHistoryConfiguration * SOAP_FMAC4 soap_in___tds__SetPasswordHistoryConfiguration(struct soap*, const char*, struct __tds__SetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetPasswordHistoryConfiguration * soap_new___tds__SetPasswordHistoryConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetPasswordHistoryConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetPasswordHistoryConfiguration * soap_new_req___tds__SetPasswordHistoryConfiguration(
	struct soap *soap)
{
	struct __tds__SetPasswordHistoryConfiguration *_p = ::soap_new___tds__SetPasswordHistoryConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetPasswordHistoryConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetPasswordHistoryConfiguration * soap_new_set___tds__SetPasswordHistoryConfiguration(
	struct soap *soap,
	_tds__SetPasswordHistoryConfiguration *tds__SetPasswordHistoryConfiguration)
{
	struct __tds__SetPasswordHistoryConfiguration *_p = ::soap_new___tds__SetPasswordHistoryConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetPasswordHistoryConfiguration(soap, _p);
		_p->tds__SetPasswordHistoryConfiguration = tds__SetPasswordHistoryConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetPasswordHistoryConfiguration(struct soap*, const struct __tds__SetPasswordHistoryConfiguration *, const char*, const char*);

inline int soap_write___tds__SetPasswordHistoryConfiguration(struct soap *soap, struct __tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordHistoryConfiguration(soap, p, "-tds:SetPasswordHistoryConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordHistoryConfiguration(soap, p, "-tds:SetPasswordHistoryConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordHistoryConfiguration(soap, p, "-tds:SetPasswordHistoryConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordHistoryConfiguration(soap, p, "-tds:SetPasswordHistoryConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetPasswordHistoryConfiguration * SOAP_FMAC4 soap_get___tds__SetPasswordHistoryConfiguration(struct soap*, struct __tds__SetPasswordHistoryConfiguration *, const char*, const char*);

inline int soap_read___tds__SetPasswordHistoryConfiguration(struct soap *soap, struct __tds__SetPasswordHistoryConfiguration *p)
{
	if (p)
	{	::soap_default___tds__SetPasswordHistoryConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetPasswordHistoryConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordHistoryConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetPasswordHistoryConfiguration(struct soap *soap, struct __tds__SetPasswordHistoryConfiguration *p)
{
	if (::soap_read___tds__SetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetPasswordHistoryConfiguration_DEFINED
#define SOAP_TYPE___tds__GetPasswordHistoryConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetPasswordHistoryConfiguration(struct soap*, struct __tds__GetPasswordHistoryConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetPasswordHistoryConfiguration(struct soap*, const struct __tds__GetPasswordHistoryConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetPasswordHistoryConfiguration(struct soap*, const char*, int, const struct __tds__GetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetPasswordHistoryConfiguration * SOAP_FMAC4 soap_in___tds__GetPasswordHistoryConfiguration(struct soap*, const char*, struct __tds__GetPasswordHistoryConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetPasswordHistoryConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetPasswordHistoryConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetPasswordHistoryConfiguration * soap_new___tds__GetPasswordHistoryConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetPasswordHistoryConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetPasswordHistoryConfiguration * soap_new_req___tds__GetPasswordHistoryConfiguration(
	struct soap *soap)
{
	struct __tds__GetPasswordHistoryConfiguration *_p = ::soap_new___tds__GetPasswordHistoryConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetPasswordHistoryConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetPasswordHistoryConfiguration * soap_new_set___tds__GetPasswordHistoryConfiguration(
	struct soap *soap,
	_tds__GetPasswordHistoryConfiguration *tds__GetPasswordHistoryConfiguration)
{
	struct __tds__GetPasswordHistoryConfiguration *_p = ::soap_new___tds__GetPasswordHistoryConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetPasswordHistoryConfiguration(soap, _p);
		_p->tds__GetPasswordHistoryConfiguration = tds__GetPasswordHistoryConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetPasswordHistoryConfiguration(struct soap*, const struct __tds__GetPasswordHistoryConfiguration *, const char*, const char*);

inline int soap_write___tds__GetPasswordHistoryConfiguration(struct soap *soap, struct __tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordHistoryConfiguration(soap, p, "-tds:GetPasswordHistoryConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordHistoryConfiguration(soap, p, "-tds:GetPasswordHistoryConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordHistoryConfiguration(soap, p, "-tds:GetPasswordHistoryConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordHistoryConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordHistoryConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordHistoryConfiguration(soap, p, "-tds:GetPasswordHistoryConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetPasswordHistoryConfiguration * SOAP_FMAC4 soap_get___tds__GetPasswordHistoryConfiguration(struct soap*, struct __tds__GetPasswordHistoryConfiguration *, const char*, const char*);

inline int soap_read___tds__GetPasswordHistoryConfiguration(struct soap *soap, struct __tds__GetPasswordHistoryConfiguration *p)
{
	if (p)
	{	::soap_default___tds__GetPasswordHistoryConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetPasswordHistoryConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetPasswordHistoryConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordHistoryConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetPasswordHistoryConfiguration(struct soap *soap, struct __tds__GetPasswordHistoryConfiguration *p)
{
	if (::soap_read___tds__GetPasswordHistoryConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetPasswordComplexityConfiguration_DEFINED
#define SOAP_TYPE___tds__SetPasswordComplexityConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetPasswordComplexityConfiguration(struct soap*, struct __tds__SetPasswordComplexityConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetPasswordComplexityConfiguration(struct soap*, const struct __tds__SetPasswordComplexityConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetPasswordComplexityConfiguration(struct soap*, const char*, int, const struct __tds__SetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC3 struct __tds__SetPasswordComplexityConfiguration * SOAP_FMAC4 soap_in___tds__SetPasswordComplexityConfiguration(struct soap*, const char*, struct __tds__SetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC1 struct __tds__SetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate___tds__SetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetPasswordComplexityConfiguration * soap_new___tds__SetPasswordComplexityConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetPasswordComplexityConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetPasswordComplexityConfiguration * soap_new_req___tds__SetPasswordComplexityConfiguration(
	struct soap *soap)
{
	struct __tds__SetPasswordComplexityConfiguration *_p = ::soap_new___tds__SetPasswordComplexityConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetPasswordComplexityConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__SetPasswordComplexityConfiguration * soap_new_set___tds__SetPasswordComplexityConfiguration(
	struct soap *soap,
	_tds__SetPasswordComplexityConfiguration *tds__SetPasswordComplexityConfiguration)
{
	struct __tds__SetPasswordComplexityConfiguration *_p = ::soap_new___tds__SetPasswordComplexityConfiguration(soap);
	if (_p)
	{	::soap_default___tds__SetPasswordComplexityConfiguration(soap, _p);
		_p->tds__SetPasswordComplexityConfiguration = tds__SetPasswordComplexityConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetPasswordComplexityConfiguration(struct soap*, const struct __tds__SetPasswordComplexityConfiguration *, const char*, const char*);

inline int soap_write___tds__SetPasswordComplexityConfiguration(struct soap *soap, struct __tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordComplexityConfiguration(soap, p, "-tds:SetPasswordComplexityConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordComplexityConfiguration(soap, p, "-tds:SetPasswordComplexityConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordComplexityConfiguration(soap, p, "-tds:SetPasswordComplexityConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__SetPasswordComplexityConfiguration(soap, p, "-tds:SetPasswordComplexityConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetPasswordComplexityConfiguration * SOAP_FMAC4 soap_get___tds__SetPasswordComplexityConfiguration(struct soap*, struct __tds__SetPasswordComplexityConfiguration *, const char*, const char*);

inline int soap_read___tds__SetPasswordComplexityConfiguration(struct soap *soap, struct __tds__SetPasswordComplexityConfiguration *p)
{
	if (p)
	{	::soap_default___tds__SetPasswordComplexityConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetPasswordComplexityConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__SetPasswordComplexityConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetPasswordComplexityConfiguration(struct soap *soap, struct __tds__SetPasswordComplexityConfiguration *p)
{
	if (::soap_read___tds__SetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetPasswordComplexityConfiguration_DEFINED
#define SOAP_TYPE___tds__GetPasswordComplexityConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetPasswordComplexityConfiguration(struct soap*, struct __tds__GetPasswordComplexityConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetPasswordComplexityConfiguration(struct soap*, const struct __tds__GetPasswordComplexityConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetPasswordComplexityConfiguration(struct soap*, const char*, int, const struct __tds__GetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC3 struct __tds__GetPasswordComplexityConfiguration * SOAP_FMAC4 soap_in___tds__GetPasswordComplexityConfiguration(struct soap*, const char*, struct __tds__GetPasswordComplexityConfiguration *, const char*);
SOAP_FMAC1 struct __tds__GetPasswordComplexityConfiguration * SOAP_FMAC2 soap_instantiate___tds__GetPasswordComplexityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetPasswordComplexityConfiguration * soap_new___tds__GetPasswordComplexityConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetPasswordComplexityConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetPasswordComplexityConfiguration * soap_new_req___tds__GetPasswordComplexityConfiguration(
	struct soap *soap)
{
	struct __tds__GetPasswordComplexityConfiguration *_p = ::soap_new___tds__GetPasswordComplexityConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetPasswordComplexityConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tds__GetPasswordComplexityConfiguration * soap_new_set___tds__GetPasswordComplexityConfiguration(
	struct soap *soap,
	_tds__GetPasswordComplexityConfiguration *tds__GetPasswordComplexityConfiguration)
{
	struct __tds__GetPasswordComplexityConfiguration *_p = ::soap_new___tds__GetPasswordComplexityConfiguration(soap);
	if (_p)
	{	::soap_default___tds__GetPasswordComplexityConfiguration(soap, _p);
		_p->tds__GetPasswordComplexityConfiguration = tds__GetPasswordComplexityConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetPasswordComplexityConfiguration(struct soap*, const struct __tds__GetPasswordComplexityConfiguration *, const char*, const char*);

inline int soap_write___tds__GetPasswordComplexityConfiguration(struct soap *soap, struct __tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityConfiguration(soap, p, "-tds:GetPasswordComplexityConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityConfiguration(soap, p, "-tds:GetPasswordComplexityConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityConfiguration(soap, p, "-tds:GetPasswordComplexityConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordComplexityConfiguration(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityConfiguration(soap, p, "-tds:GetPasswordComplexityConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetPasswordComplexityConfiguration * SOAP_FMAC4 soap_get___tds__GetPasswordComplexityConfiguration(struct soap*, struct __tds__GetPasswordComplexityConfiguration *, const char*, const char*);

inline int soap_read___tds__GetPasswordComplexityConfiguration(struct soap *soap, struct __tds__GetPasswordComplexityConfiguration *p)
{
	if (p)
	{	::soap_default___tds__GetPasswordComplexityConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetPasswordComplexityConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetPasswordComplexityConfiguration(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetPasswordComplexityConfiguration(struct soap *soap, struct __tds__GetPasswordComplexityConfiguration *p)
{
	if (::soap_read___tds__GetPasswordComplexityConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetPasswordComplexityOptions_DEFINED
#define SOAP_TYPE___tds__GetPasswordComplexityOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetPasswordComplexityOptions(struct soap*, struct __tds__GetPasswordComplexityOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetPasswordComplexityOptions(struct soap*, const struct __tds__GetPasswordComplexityOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetPasswordComplexityOptions(struct soap*, const char*, int, const struct __tds__GetPasswordComplexityOptions *, const char*);
SOAP_FMAC3 struct __tds__GetPasswordComplexityOptions * SOAP_FMAC4 soap_in___tds__GetPasswordComplexityOptions(struct soap*, const char*, struct __tds__GetPasswordComplexityOptions *, const char*);
SOAP_FMAC1 struct __tds__GetPasswordComplexityOptions * SOAP_FMAC2 soap_instantiate___tds__GetPasswordComplexityOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetPasswordComplexityOptions * soap_new___tds__GetPasswordComplexityOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetPasswordComplexityOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetPasswordComplexityOptions * soap_new_req___tds__GetPasswordComplexityOptions(
	struct soap *soap)
{
	struct __tds__GetPasswordComplexityOptions *_p = ::soap_new___tds__GetPasswordComplexityOptions(soap);
	if (_p)
	{	::soap_default___tds__GetPasswordComplexityOptions(soap, _p);
	}
	return _p;
}

inline struct __tds__GetPasswordComplexityOptions * soap_new_set___tds__GetPasswordComplexityOptions(
	struct soap *soap,
	_tds__GetPasswordComplexityOptions *tds__GetPasswordComplexityOptions)
{
	struct __tds__GetPasswordComplexityOptions *_p = ::soap_new___tds__GetPasswordComplexityOptions(soap);
	if (_p)
	{	::soap_default___tds__GetPasswordComplexityOptions(soap, _p);
		_p->tds__GetPasswordComplexityOptions = tds__GetPasswordComplexityOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetPasswordComplexityOptions(struct soap*, const struct __tds__GetPasswordComplexityOptions *, const char*, const char*);

inline int soap_write___tds__GetPasswordComplexityOptions(struct soap *soap, struct __tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetPasswordComplexityOptions(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityOptions(soap, p, "-tds:GetPasswordComplexityOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordComplexityOptions(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityOptions(soap, p, "-tds:GetPasswordComplexityOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordComplexityOptions(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityOptions(soap, p, "-tds:GetPasswordComplexityOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetPasswordComplexityOptions(soap, p), 0) || ::soap_put___tds__GetPasswordComplexityOptions(soap, p, "-tds:GetPasswordComplexityOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetPasswordComplexityOptions * SOAP_FMAC4 soap_get___tds__GetPasswordComplexityOptions(struct soap*, struct __tds__GetPasswordComplexityOptions *, const char*, const char*);

inline int soap_read___tds__GetPasswordComplexityOptions(struct soap *soap, struct __tds__GetPasswordComplexityOptions *p)
{
	if (p)
	{	::soap_default___tds__GetPasswordComplexityOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetPasswordComplexityOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetPasswordComplexityOptions(struct soap *soap, const char *URL, struct __tds__GetPasswordComplexityOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetPasswordComplexityOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetPasswordComplexityOptions(struct soap *soap, struct __tds__GetPasswordComplexityOptions *p)
{
	if (::soap_read___tds__GetPasswordComplexityOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetWsdlUrl_DEFINED
#define SOAP_TYPE___tds__GetWsdlUrl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetWsdlUrl(struct soap*, struct __tds__GetWsdlUrl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetWsdlUrl(struct soap*, const struct __tds__GetWsdlUrl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetWsdlUrl(struct soap*, const char*, int, const struct __tds__GetWsdlUrl *, const char*);
SOAP_FMAC3 struct __tds__GetWsdlUrl * SOAP_FMAC4 soap_in___tds__GetWsdlUrl(struct soap*, const char*, struct __tds__GetWsdlUrl *, const char*);
SOAP_FMAC1 struct __tds__GetWsdlUrl * SOAP_FMAC2 soap_instantiate___tds__GetWsdlUrl(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetWsdlUrl * soap_new___tds__GetWsdlUrl(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetWsdlUrl(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetWsdlUrl * soap_new_req___tds__GetWsdlUrl(
	struct soap *soap)
{
	struct __tds__GetWsdlUrl *_p = ::soap_new___tds__GetWsdlUrl(soap);
	if (_p)
	{	::soap_default___tds__GetWsdlUrl(soap, _p);
	}
	return _p;
}

inline struct __tds__GetWsdlUrl * soap_new_set___tds__GetWsdlUrl(
	struct soap *soap,
	_tds__GetWsdlUrl *tds__GetWsdlUrl)
{
	struct __tds__GetWsdlUrl *_p = ::soap_new___tds__GetWsdlUrl(soap);
	if (_p)
	{	::soap_default___tds__GetWsdlUrl(soap, _p);
		_p->tds__GetWsdlUrl = tds__GetWsdlUrl;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetWsdlUrl(struct soap*, const struct __tds__GetWsdlUrl *, const char*, const char*);

inline int soap_write___tds__GetWsdlUrl(struct soap *soap, struct __tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetWsdlUrl(soap, p), 0) || ::soap_put___tds__GetWsdlUrl(soap, p, "-tds:GetWsdlUrl", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetWsdlUrl(struct soap *soap, const char *URL, struct __tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetWsdlUrl(soap, p), 0) || ::soap_put___tds__GetWsdlUrl(soap, p, "-tds:GetWsdlUrl", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetWsdlUrl(struct soap *soap, const char *URL, struct __tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetWsdlUrl(soap, p), 0) || ::soap_put___tds__GetWsdlUrl(soap, p, "-tds:GetWsdlUrl", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetWsdlUrl(struct soap *soap, const char *URL, struct __tds__GetWsdlUrl const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetWsdlUrl(soap, p), 0) || ::soap_put___tds__GetWsdlUrl(soap, p, "-tds:GetWsdlUrl", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetWsdlUrl * SOAP_FMAC4 soap_get___tds__GetWsdlUrl(struct soap*, struct __tds__GetWsdlUrl *, const char*, const char*);

inline int soap_read___tds__GetWsdlUrl(struct soap *soap, struct __tds__GetWsdlUrl *p)
{
	if (p)
	{	::soap_default___tds__GetWsdlUrl(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetWsdlUrl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetWsdlUrl(struct soap *soap, const char *URL, struct __tds__GetWsdlUrl *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetWsdlUrl(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetWsdlUrl(struct soap *soap, struct __tds__GetWsdlUrl *p)
{
	if (::soap_read___tds__GetWsdlUrl(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetUser_DEFINED
#define SOAP_TYPE___tds__SetUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetUser(struct soap*, struct __tds__SetUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetUser(struct soap*, const struct __tds__SetUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetUser(struct soap*, const char*, int, const struct __tds__SetUser *, const char*);
SOAP_FMAC3 struct __tds__SetUser * SOAP_FMAC4 soap_in___tds__SetUser(struct soap*, const char*, struct __tds__SetUser *, const char*);
SOAP_FMAC1 struct __tds__SetUser * SOAP_FMAC2 soap_instantiate___tds__SetUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetUser * soap_new___tds__SetUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetUser(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetUser * soap_new_req___tds__SetUser(
	struct soap *soap)
{
	struct __tds__SetUser *_p = ::soap_new___tds__SetUser(soap);
	if (_p)
	{	::soap_default___tds__SetUser(soap, _p);
	}
	return _p;
}

inline struct __tds__SetUser * soap_new_set___tds__SetUser(
	struct soap *soap,
	_tds__SetUser *tds__SetUser)
{
	struct __tds__SetUser *_p = ::soap_new___tds__SetUser(soap);
	if (_p)
	{	::soap_default___tds__SetUser(soap, _p);
		_p->tds__SetUser = tds__SetUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetUser(struct soap*, const struct __tds__SetUser *, const char*, const char*);

inline int soap_write___tds__SetUser(struct soap *soap, struct __tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetUser(soap, p), 0) || ::soap_put___tds__SetUser(soap, p, "-tds:SetUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetUser(struct soap *soap, const char *URL, struct __tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetUser(soap, p), 0) || ::soap_put___tds__SetUser(soap, p, "-tds:SetUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetUser(struct soap *soap, const char *URL, struct __tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetUser(soap, p), 0) || ::soap_put___tds__SetUser(soap, p, "-tds:SetUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetUser(struct soap *soap, const char *URL, struct __tds__SetUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetUser(soap, p), 0) || ::soap_put___tds__SetUser(soap, p, "-tds:SetUser", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetUser * SOAP_FMAC4 soap_get___tds__SetUser(struct soap*, struct __tds__SetUser *, const char*, const char*);

inline int soap_read___tds__SetUser(struct soap *soap, struct __tds__SetUser *p)
{
	if (p)
	{	::soap_default___tds__SetUser(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetUser(struct soap *soap, const char *URL, struct __tds__SetUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetUser(struct soap *soap, struct __tds__SetUser *p)
{
	if (::soap_read___tds__SetUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__DeleteUsers_DEFINED
#define SOAP_TYPE___tds__DeleteUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__DeleteUsers(struct soap*, struct __tds__DeleteUsers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__DeleteUsers(struct soap*, const struct __tds__DeleteUsers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__DeleteUsers(struct soap*, const char*, int, const struct __tds__DeleteUsers *, const char*);
SOAP_FMAC3 struct __tds__DeleteUsers * SOAP_FMAC4 soap_in___tds__DeleteUsers(struct soap*, const char*, struct __tds__DeleteUsers *, const char*);
SOAP_FMAC1 struct __tds__DeleteUsers * SOAP_FMAC2 soap_instantiate___tds__DeleteUsers(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__DeleteUsers * soap_new___tds__DeleteUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__DeleteUsers(soap, n, NULL, NULL, NULL);
}

inline struct __tds__DeleteUsers * soap_new_req___tds__DeleteUsers(
	struct soap *soap)
{
	struct __tds__DeleteUsers *_p = ::soap_new___tds__DeleteUsers(soap);
	if (_p)
	{	::soap_default___tds__DeleteUsers(soap, _p);
	}
	return _p;
}

inline struct __tds__DeleteUsers * soap_new_set___tds__DeleteUsers(
	struct soap *soap,
	_tds__DeleteUsers *tds__DeleteUsers)
{
	struct __tds__DeleteUsers *_p = ::soap_new___tds__DeleteUsers(soap);
	if (_p)
	{	::soap_default___tds__DeleteUsers(soap, _p);
		_p->tds__DeleteUsers = tds__DeleteUsers;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__DeleteUsers(struct soap*, const struct __tds__DeleteUsers *, const char*, const char*);

inline int soap_write___tds__DeleteUsers(struct soap *soap, struct __tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__DeleteUsers(soap, p), 0) || ::soap_put___tds__DeleteUsers(soap, p, "-tds:DeleteUsers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__DeleteUsers(struct soap *soap, const char *URL, struct __tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteUsers(soap, p), 0) || ::soap_put___tds__DeleteUsers(soap, p, "-tds:DeleteUsers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__DeleteUsers(struct soap *soap, const char *URL, struct __tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteUsers(soap, p), 0) || ::soap_put___tds__DeleteUsers(soap, p, "-tds:DeleteUsers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__DeleteUsers(struct soap *soap, const char *URL, struct __tds__DeleteUsers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__DeleteUsers(soap, p), 0) || ::soap_put___tds__DeleteUsers(soap, p, "-tds:DeleteUsers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__DeleteUsers * SOAP_FMAC4 soap_get___tds__DeleteUsers(struct soap*, struct __tds__DeleteUsers *, const char*, const char*);

inline int soap_read___tds__DeleteUsers(struct soap *soap, struct __tds__DeleteUsers *p)
{
	if (p)
	{	::soap_default___tds__DeleteUsers(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__DeleteUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__DeleteUsers(struct soap *soap, const char *URL, struct __tds__DeleteUsers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__DeleteUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__DeleteUsers(struct soap *soap, struct __tds__DeleteUsers *p)
{
	if (::soap_read___tds__DeleteUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__CreateUsers_DEFINED
#define SOAP_TYPE___tds__CreateUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__CreateUsers(struct soap*, struct __tds__CreateUsers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__CreateUsers(struct soap*, const struct __tds__CreateUsers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__CreateUsers(struct soap*, const char*, int, const struct __tds__CreateUsers *, const char*);
SOAP_FMAC3 struct __tds__CreateUsers * SOAP_FMAC4 soap_in___tds__CreateUsers(struct soap*, const char*, struct __tds__CreateUsers *, const char*);
SOAP_FMAC1 struct __tds__CreateUsers * SOAP_FMAC2 soap_instantiate___tds__CreateUsers(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__CreateUsers * soap_new___tds__CreateUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__CreateUsers(soap, n, NULL, NULL, NULL);
}

inline struct __tds__CreateUsers * soap_new_req___tds__CreateUsers(
	struct soap *soap)
{
	struct __tds__CreateUsers *_p = ::soap_new___tds__CreateUsers(soap);
	if (_p)
	{	::soap_default___tds__CreateUsers(soap, _p);
	}
	return _p;
}

inline struct __tds__CreateUsers * soap_new_set___tds__CreateUsers(
	struct soap *soap,
	_tds__CreateUsers *tds__CreateUsers)
{
	struct __tds__CreateUsers *_p = ::soap_new___tds__CreateUsers(soap);
	if (_p)
	{	::soap_default___tds__CreateUsers(soap, _p);
		_p->tds__CreateUsers = tds__CreateUsers;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__CreateUsers(struct soap*, const struct __tds__CreateUsers *, const char*, const char*);

inline int soap_write___tds__CreateUsers(struct soap *soap, struct __tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__CreateUsers(soap, p), 0) || ::soap_put___tds__CreateUsers(soap, p, "-tds:CreateUsers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__CreateUsers(struct soap *soap, const char *URL, struct __tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateUsers(soap, p), 0) || ::soap_put___tds__CreateUsers(soap, p, "-tds:CreateUsers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__CreateUsers(struct soap *soap, const char *URL, struct __tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateUsers(soap, p), 0) || ::soap_put___tds__CreateUsers(soap, p, "-tds:CreateUsers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__CreateUsers(struct soap *soap, const char *URL, struct __tds__CreateUsers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__CreateUsers(soap, p), 0) || ::soap_put___tds__CreateUsers(soap, p, "-tds:CreateUsers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__CreateUsers * SOAP_FMAC4 soap_get___tds__CreateUsers(struct soap*, struct __tds__CreateUsers *, const char*, const char*);

inline int soap_read___tds__CreateUsers(struct soap *soap, struct __tds__CreateUsers *p)
{
	if (p)
	{	::soap_default___tds__CreateUsers(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__CreateUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__CreateUsers(struct soap *soap, const char *URL, struct __tds__CreateUsers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__CreateUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__CreateUsers(struct soap *soap, struct __tds__CreateUsers *p)
{
	if (::soap_read___tds__CreateUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetUsers_DEFINED
#define SOAP_TYPE___tds__GetUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetUsers(struct soap*, struct __tds__GetUsers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetUsers(struct soap*, const struct __tds__GetUsers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetUsers(struct soap*, const char*, int, const struct __tds__GetUsers *, const char*);
SOAP_FMAC3 struct __tds__GetUsers * SOAP_FMAC4 soap_in___tds__GetUsers(struct soap*, const char*, struct __tds__GetUsers *, const char*);
SOAP_FMAC1 struct __tds__GetUsers * SOAP_FMAC2 soap_instantiate___tds__GetUsers(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetUsers * soap_new___tds__GetUsers(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetUsers(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetUsers * soap_new_req___tds__GetUsers(
	struct soap *soap)
{
	struct __tds__GetUsers *_p = ::soap_new___tds__GetUsers(soap);
	if (_p)
	{	::soap_default___tds__GetUsers(soap, _p);
	}
	return _p;
}

inline struct __tds__GetUsers * soap_new_set___tds__GetUsers(
	struct soap *soap,
	_tds__GetUsers *tds__GetUsers)
{
	struct __tds__GetUsers *_p = ::soap_new___tds__GetUsers(soap);
	if (_p)
	{	::soap_default___tds__GetUsers(soap, _p);
		_p->tds__GetUsers = tds__GetUsers;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetUsers(struct soap*, const struct __tds__GetUsers *, const char*, const char*);

inline int soap_write___tds__GetUsers(struct soap *soap, struct __tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetUsers(soap, p), 0) || ::soap_put___tds__GetUsers(soap, p, "-tds:GetUsers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetUsers(struct soap *soap, const char *URL, struct __tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetUsers(soap, p), 0) || ::soap_put___tds__GetUsers(soap, p, "-tds:GetUsers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetUsers(struct soap *soap, const char *URL, struct __tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetUsers(soap, p), 0) || ::soap_put___tds__GetUsers(soap, p, "-tds:GetUsers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetUsers(struct soap *soap, const char *URL, struct __tds__GetUsers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetUsers(soap, p), 0) || ::soap_put___tds__GetUsers(soap, p, "-tds:GetUsers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetUsers * SOAP_FMAC4 soap_get___tds__GetUsers(struct soap*, struct __tds__GetUsers *, const char*, const char*);

inline int soap_read___tds__GetUsers(struct soap *soap, struct __tds__GetUsers *p)
{
	if (p)
	{	::soap_default___tds__GetUsers(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetUsers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetUsers(struct soap *soap, const char *URL, struct __tds__GetUsers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetUsers(struct soap *soap, struct __tds__GetUsers *p)
{
	if (::soap_read___tds__GetUsers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetRemoteUser_DEFINED
#define SOAP_TYPE___tds__SetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRemoteUser(struct soap*, struct __tds__SetRemoteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRemoteUser(struct soap*, const struct __tds__SetRemoteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRemoteUser(struct soap*, const char*, int, const struct __tds__SetRemoteUser *, const char*);
SOAP_FMAC3 struct __tds__SetRemoteUser * SOAP_FMAC4 soap_in___tds__SetRemoteUser(struct soap*, const char*, struct __tds__SetRemoteUser *, const char*);
SOAP_FMAC1 struct __tds__SetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__SetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRemoteUser * soap_new___tds__SetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRemoteUser * soap_new_req___tds__SetRemoteUser(
	struct soap *soap)
{
	struct __tds__SetRemoteUser *_p = ::soap_new___tds__SetRemoteUser(soap);
	if (_p)
	{	::soap_default___tds__SetRemoteUser(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRemoteUser * soap_new_set___tds__SetRemoteUser(
	struct soap *soap,
	_tds__SetRemoteUser *tds__SetRemoteUser)
{
	struct __tds__SetRemoteUser *_p = ::soap_new___tds__SetRemoteUser(soap);
	if (_p)
	{	::soap_default___tds__SetRemoteUser(soap, _p);
		_p->tds__SetRemoteUser = tds__SetRemoteUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRemoteUser(struct soap*, const struct __tds__SetRemoteUser *, const char*, const char*);

inline int soap_write___tds__SetRemoteUser(struct soap *soap, struct __tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetRemoteUser(soap, p), 0) || ::soap_put___tds__SetRemoteUser(soap, p, "-tds:SetRemoteUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetRemoteUser(struct soap *soap, const char *URL, struct __tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRemoteUser(soap, p), 0) || ::soap_put___tds__SetRemoteUser(soap, p, "-tds:SetRemoteUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetRemoteUser(struct soap *soap, const char *URL, struct __tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRemoteUser(soap, p), 0) || ::soap_put___tds__SetRemoteUser(soap, p, "-tds:SetRemoteUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetRemoteUser(struct soap *soap, const char *URL, struct __tds__SetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRemoteUser(soap, p), 0) || ::soap_put___tds__SetRemoteUser(soap, p, "-tds:SetRemoteUser", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRemoteUser * SOAP_FMAC4 soap_get___tds__SetRemoteUser(struct soap*, struct __tds__SetRemoteUser *, const char*, const char*);

inline int soap_read___tds__SetRemoteUser(struct soap *soap, struct __tds__SetRemoteUser *p)
{
	if (p)
	{	::soap_default___tds__SetRemoteUser(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetRemoteUser(struct soap *soap, const char *URL, struct __tds__SetRemoteUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetRemoteUser(struct soap *soap, struct __tds__SetRemoteUser *p)
{
	if (::soap_read___tds__SetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetRemoteUser_DEFINED
#define SOAP_TYPE___tds__GetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetRemoteUser(struct soap*, struct __tds__GetRemoteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetRemoteUser(struct soap*, const struct __tds__GetRemoteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetRemoteUser(struct soap*, const char*, int, const struct __tds__GetRemoteUser *, const char*);
SOAP_FMAC3 struct __tds__GetRemoteUser * SOAP_FMAC4 soap_in___tds__GetRemoteUser(struct soap*, const char*, struct __tds__GetRemoteUser *, const char*);
SOAP_FMAC1 struct __tds__GetRemoteUser * SOAP_FMAC2 soap_instantiate___tds__GetRemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetRemoteUser * soap_new___tds__GetRemoteUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetRemoteUser(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetRemoteUser * soap_new_req___tds__GetRemoteUser(
	struct soap *soap)
{
	struct __tds__GetRemoteUser *_p = ::soap_new___tds__GetRemoteUser(soap);
	if (_p)
	{	::soap_default___tds__GetRemoteUser(soap, _p);
	}
	return _p;
}

inline struct __tds__GetRemoteUser * soap_new_set___tds__GetRemoteUser(
	struct soap *soap,
	_tds__GetRemoteUser *tds__GetRemoteUser)
{
	struct __tds__GetRemoteUser *_p = ::soap_new___tds__GetRemoteUser(soap);
	if (_p)
	{	::soap_default___tds__GetRemoteUser(soap, _p);
		_p->tds__GetRemoteUser = tds__GetRemoteUser;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetRemoteUser(struct soap*, const struct __tds__GetRemoteUser *, const char*, const char*);

inline int soap_write___tds__GetRemoteUser(struct soap *soap, struct __tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetRemoteUser(soap, p), 0) || ::soap_put___tds__GetRemoteUser(soap, p, "-tds:GetRemoteUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetRemoteUser(struct soap *soap, const char *URL, struct __tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRemoteUser(soap, p), 0) || ::soap_put___tds__GetRemoteUser(soap, p, "-tds:GetRemoteUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetRemoteUser(struct soap *soap, const char *URL, struct __tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRemoteUser(soap, p), 0) || ::soap_put___tds__GetRemoteUser(soap, p, "-tds:GetRemoteUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetRemoteUser(struct soap *soap, const char *URL, struct __tds__GetRemoteUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRemoteUser(soap, p), 0) || ::soap_put___tds__GetRemoteUser(soap, p, "-tds:GetRemoteUser", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetRemoteUser * SOAP_FMAC4 soap_get___tds__GetRemoteUser(struct soap*, struct __tds__GetRemoteUser *, const char*, const char*);

inline int soap_read___tds__GetRemoteUser(struct soap *soap, struct __tds__GetRemoteUser *p)
{
	if (p)
	{	::soap_default___tds__GetRemoteUser(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetRemoteUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetRemoteUser(struct soap *soap, const char *URL, struct __tds__GetRemoteUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetRemoteUser(struct soap *soap, struct __tds__GetRemoteUser *p)
{
	if (::soap_read___tds__GetRemoteUser(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetEndpointReference_DEFINED
#define SOAP_TYPE___tds__GetEndpointReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetEndpointReference(struct soap*, struct __tds__GetEndpointReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetEndpointReference(struct soap*, const struct __tds__GetEndpointReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetEndpointReference(struct soap*, const char*, int, const struct __tds__GetEndpointReference *, const char*);
SOAP_FMAC3 struct __tds__GetEndpointReference * SOAP_FMAC4 soap_in___tds__GetEndpointReference(struct soap*, const char*, struct __tds__GetEndpointReference *, const char*);
SOAP_FMAC1 struct __tds__GetEndpointReference * SOAP_FMAC2 soap_instantiate___tds__GetEndpointReference(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetEndpointReference * soap_new___tds__GetEndpointReference(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetEndpointReference(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetEndpointReference * soap_new_req___tds__GetEndpointReference(
	struct soap *soap)
{
	struct __tds__GetEndpointReference *_p = ::soap_new___tds__GetEndpointReference(soap);
	if (_p)
	{	::soap_default___tds__GetEndpointReference(soap, _p);
	}
	return _p;
}

inline struct __tds__GetEndpointReference * soap_new_set___tds__GetEndpointReference(
	struct soap *soap,
	_tds__GetEndpointReference *tds__GetEndpointReference)
{
	struct __tds__GetEndpointReference *_p = ::soap_new___tds__GetEndpointReference(soap);
	if (_p)
	{	::soap_default___tds__GetEndpointReference(soap, _p);
		_p->tds__GetEndpointReference = tds__GetEndpointReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetEndpointReference(struct soap*, const struct __tds__GetEndpointReference *, const char*, const char*);

inline int soap_write___tds__GetEndpointReference(struct soap *soap, struct __tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetEndpointReference(soap, p), 0) || ::soap_put___tds__GetEndpointReference(soap, p, "-tds:GetEndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetEndpointReference(struct soap *soap, const char *URL, struct __tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetEndpointReference(soap, p), 0) || ::soap_put___tds__GetEndpointReference(soap, p, "-tds:GetEndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetEndpointReference(struct soap *soap, const char *URL, struct __tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetEndpointReference(soap, p), 0) || ::soap_put___tds__GetEndpointReference(soap, p, "-tds:GetEndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetEndpointReference(struct soap *soap, const char *URL, struct __tds__GetEndpointReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetEndpointReference(soap, p), 0) || ::soap_put___tds__GetEndpointReference(soap, p, "-tds:GetEndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetEndpointReference * SOAP_FMAC4 soap_get___tds__GetEndpointReference(struct soap*, struct __tds__GetEndpointReference *, const char*, const char*);

inline int soap_read___tds__GetEndpointReference(struct soap *soap, struct __tds__GetEndpointReference *p)
{
	if (p)
	{	::soap_default___tds__GetEndpointReference(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetEndpointReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetEndpointReference(struct soap *soap, const char *URL, struct __tds__GetEndpointReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetEndpointReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetEndpointReference(struct soap *soap, struct __tds__GetEndpointReference *p)
{
	if (::soap_read___tds__GetEndpointReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDPAddresses_DEFINED
#define SOAP_TYPE___tds__GetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDPAddresses(struct soap*, struct __tds__GetDPAddresses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDPAddresses(struct soap*, const struct __tds__GetDPAddresses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDPAddresses(struct soap*, const char*, int, const struct __tds__GetDPAddresses *, const char*);
SOAP_FMAC3 struct __tds__GetDPAddresses * SOAP_FMAC4 soap_in___tds__GetDPAddresses(struct soap*, const char*, struct __tds__GetDPAddresses *, const char*);
SOAP_FMAC1 struct __tds__GetDPAddresses * SOAP_FMAC2 soap_instantiate___tds__GetDPAddresses(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDPAddresses * soap_new___tds__GetDPAddresses(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDPAddresses(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDPAddresses * soap_new_req___tds__GetDPAddresses(
	struct soap *soap)
{
	struct __tds__GetDPAddresses *_p = ::soap_new___tds__GetDPAddresses(soap);
	if (_p)
	{	::soap_default___tds__GetDPAddresses(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDPAddresses * soap_new_set___tds__GetDPAddresses(
	struct soap *soap,
	_tds__GetDPAddresses *tds__GetDPAddresses)
{
	struct __tds__GetDPAddresses *_p = ::soap_new___tds__GetDPAddresses(soap);
	if (_p)
	{	::soap_default___tds__GetDPAddresses(soap, _p);
		_p->tds__GetDPAddresses = tds__GetDPAddresses;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDPAddresses(struct soap*, const struct __tds__GetDPAddresses *, const char*, const char*);

inline int soap_write___tds__GetDPAddresses(struct soap *soap, struct __tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDPAddresses(soap, p), 0) || ::soap_put___tds__GetDPAddresses(soap, p, "-tds:GetDPAddresses", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDPAddresses(struct soap *soap, const char *URL, struct __tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDPAddresses(soap, p), 0) || ::soap_put___tds__GetDPAddresses(soap, p, "-tds:GetDPAddresses", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDPAddresses(struct soap *soap, const char *URL, struct __tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDPAddresses(soap, p), 0) || ::soap_put___tds__GetDPAddresses(soap, p, "-tds:GetDPAddresses", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDPAddresses(struct soap *soap, const char *URL, struct __tds__GetDPAddresses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDPAddresses(soap, p), 0) || ::soap_put___tds__GetDPAddresses(soap, p, "-tds:GetDPAddresses", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDPAddresses * SOAP_FMAC4 soap_get___tds__GetDPAddresses(struct soap*, struct __tds__GetDPAddresses *, const char*, const char*);

inline int soap_read___tds__GetDPAddresses(struct soap *soap, struct __tds__GetDPAddresses *p)
{
	if (p)
	{	::soap_default___tds__GetDPAddresses(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDPAddresses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDPAddresses(struct soap *soap, const char *URL, struct __tds__GetDPAddresses *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDPAddresses(struct soap *soap, struct __tds__GetDPAddresses *p)
{
	if (::soap_read___tds__GetDPAddresses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetRemoteDiscoveryMode(struct soap*, struct __tds__SetRemoteDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetRemoteDiscoveryMode(struct soap*, const struct __tds__SetRemoteDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetRemoteDiscoveryMode(struct soap*, const char*, int, const struct __tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_in___tds__SetRemoteDiscoveryMode(struct soap*, const char*, struct __tds__SetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__SetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetRemoteDiscoveryMode * soap_new___tds__SetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetRemoteDiscoveryMode * soap_new_req___tds__SetRemoteDiscoveryMode(
	struct soap *soap)
{
	struct __tds__SetRemoteDiscoveryMode *_p = ::soap_new___tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__SetRemoteDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__SetRemoteDiscoveryMode * soap_new_set___tds__SetRemoteDiscoveryMode(
	struct soap *soap,
	_tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode)
{
	struct __tds__SetRemoteDiscoveryMode *_p = ::soap_new___tds__SetRemoteDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__SetRemoteDiscoveryMode(soap, _p);
		_p->tds__SetRemoteDiscoveryMode = tds__SetRemoteDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetRemoteDiscoveryMode(struct soap*, const struct __tds__SetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__SetRemoteDiscoveryMode(struct soap *soap, struct __tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetRemoteDiscoveryMode(soap, p, "-tds:SetRemoteDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetRemoteDiscoveryMode(soap, p, "-tds:SetRemoteDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetRemoteDiscoveryMode(soap, p, "-tds:SetRemoteDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetRemoteDiscoveryMode(soap, p, "-tds:SetRemoteDiscoveryMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetRemoteDiscoveryMode * SOAP_FMAC4 soap_get___tds__SetRemoteDiscoveryMode(struct soap*, struct __tds__SetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__SetRemoteDiscoveryMode(struct soap *soap, struct __tds__SetRemoteDiscoveryMode *p)
{
	if (p)
	{	::soap_default___tds__SetRemoteDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetRemoteDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetRemoteDiscoveryMode(struct soap *soap, struct __tds__SetRemoteDiscoveryMode *p)
{
	if (::soap_read___tds__SetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetRemoteDiscoveryMode(struct soap*, struct __tds__GetRemoteDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetRemoteDiscoveryMode(struct soap*, const struct __tds__GetRemoteDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetRemoteDiscoveryMode(struct soap*, const char*, int, const struct __tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_in___tds__GetRemoteDiscoveryMode(struct soap*, const char*, struct __tds__GetRemoteDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__GetRemoteDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetRemoteDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetRemoteDiscoveryMode * soap_new___tds__GetRemoteDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetRemoteDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetRemoteDiscoveryMode * soap_new_req___tds__GetRemoteDiscoveryMode(
	struct soap *soap)
{
	struct __tds__GetRemoteDiscoveryMode *_p = ::soap_new___tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__GetRemoteDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__GetRemoteDiscoveryMode * soap_new_set___tds__GetRemoteDiscoveryMode(
	struct soap *soap,
	_tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode)
{
	struct __tds__GetRemoteDiscoveryMode *_p = ::soap_new___tds__GetRemoteDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__GetRemoteDiscoveryMode(soap, _p);
		_p->tds__GetRemoteDiscoveryMode = tds__GetRemoteDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetRemoteDiscoveryMode(struct soap*, const struct __tds__GetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__GetRemoteDiscoveryMode(struct soap *soap, struct __tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetRemoteDiscoveryMode(soap, p, "-tds:GetRemoteDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetRemoteDiscoveryMode(soap, p, "-tds:GetRemoteDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetRemoteDiscoveryMode(soap, p, "-tds:GetRemoteDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetRemoteDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetRemoteDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetRemoteDiscoveryMode(soap, p, "-tds:GetRemoteDiscoveryMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetRemoteDiscoveryMode * SOAP_FMAC4 soap_get___tds__GetRemoteDiscoveryMode(struct soap*, struct __tds__GetRemoteDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__GetRemoteDiscoveryMode(struct soap *soap, struct __tds__GetRemoteDiscoveryMode *p)
{
	if (p)
	{	::soap_default___tds__GetRemoteDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetRemoteDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetRemoteDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetRemoteDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetRemoteDiscoveryMode(struct soap *soap, struct __tds__GetRemoteDiscoveryMode *p)
{
	if (::soap_read___tds__GetRemoteDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__SetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetDiscoveryMode(struct soap*, struct __tds__SetDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetDiscoveryMode(struct soap*, const struct __tds__SetDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetDiscoveryMode(struct soap*, const char*, int, const struct __tds__SetDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__SetDiscoveryMode * SOAP_FMAC4 soap_in___tds__SetDiscoveryMode(struct soap*, const char*, struct __tds__SetDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__SetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__SetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetDiscoveryMode * soap_new___tds__SetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetDiscoveryMode * soap_new_req___tds__SetDiscoveryMode(
	struct soap *soap)
{
	struct __tds__SetDiscoveryMode *_p = ::soap_new___tds__SetDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__SetDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__SetDiscoveryMode * soap_new_set___tds__SetDiscoveryMode(
	struct soap *soap,
	_tds__SetDiscoveryMode *tds__SetDiscoveryMode)
{
	struct __tds__SetDiscoveryMode *_p = ::soap_new___tds__SetDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__SetDiscoveryMode(soap, _p);
		_p->tds__SetDiscoveryMode = tds__SetDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetDiscoveryMode(struct soap*, const struct __tds__SetDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__SetDiscoveryMode(struct soap *soap, struct __tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetDiscoveryMode(soap, p, "-tds:SetDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetDiscoveryMode(soap, p, "-tds:SetDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetDiscoveryMode(soap, p, "-tds:SetDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetDiscoveryMode(soap, p), 0) || ::soap_put___tds__SetDiscoveryMode(soap, p, "-tds:SetDiscoveryMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetDiscoveryMode * SOAP_FMAC4 soap_get___tds__SetDiscoveryMode(struct soap*, struct __tds__SetDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__SetDiscoveryMode(struct soap *soap, struct __tds__SetDiscoveryMode *p)
{
	if (p)
	{	::soap_default___tds__SetDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__SetDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetDiscoveryMode(struct soap *soap, struct __tds__SetDiscoveryMode *p)
{
	if (::soap_read___tds__SetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDiscoveryMode_DEFINED
#define SOAP_TYPE___tds__GetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDiscoveryMode(struct soap*, struct __tds__GetDiscoveryMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDiscoveryMode(struct soap*, const struct __tds__GetDiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDiscoveryMode(struct soap*, const char*, int, const struct __tds__GetDiscoveryMode *, const char*);
SOAP_FMAC3 struct __tds__GetDiscoveryMode * SOAP_FMAC4 soap_in___tds__GetDiscoveryMode(struct soap*, const char*, struct __tds__GetDiscoveryMode *, const char*);
SOAP_FMAC1 struct __tds__GetDiscoveryMode * SOAP_FMAC2 soap_instantiate___tds__GetDiscoveryMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDiscoveryMode * soap_new___tds__GetDiscoveryMode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDiscoveryMode(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDiscoveryMode * soap_new_req___tds__GetDiscoveryMode(
	struct soap *soap)
{
	struct __tds__GetDiscoveryMode *_p = ::soap_new___tds__GetDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__GetDiscoveryMode(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDiscoveryMode * soap_new_set___tds__GetDiscoveryMode(
	struct soap *soap,
	_tds__GetDiscoveryMode *tds__GetDiscoveryMode)
{
	struct __tds__GetDiscoveryMode *_p = ::soap_new___tds__GetDiscoveryMode(soap);
	if (_p)
	{	::soap_default___tds__GetDiscoveryMode(soap, _p);
		_p->tds__GetDiscoveryMode = tds__GetDiscoveryMode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDiscoveryMode(struct soap*, const struct __tds__GetDiscoveryMode *, const char*, const char*);

inline int soap_write___tds__GetDiscoveryMode(struct soap *soap, struct __tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetDiscoveryMode(soap, p, "-tds:GetDiscoveryMode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetDiscoveryMode(soap, p, "-tds:GetDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetDiscoveryMode(soap, p, "-tds:GetDiscoveryMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetDiscoveryMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDiscoveryMode(soap, p), 0) || ::soap_put___tds__GetDiscoveryMode(soap, p, "-tds:GetDiscoveryMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDiscoveryMode * SOAP_FMAC4 soap_get___tds__GetDiscoveryMode(struct soap*, struct __tds__GetDiscoveryMode *, const char*, const char*);

inline int soap_read___tds__GetDiscoveryMode(struct soap *soap, struct __tds__GetDiscoveryMode *p)
{
	if (p)
	{	::soap_default___tds__GetDiscoveryMode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDiscoveryMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDiscoveryMode(struct soap *soap, const char *URL, struct __tds__GetDiscoveryMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDiscoveryMode(struct soap *soap, struct __tds__GetDiscoveryMode *p)
{
	if (::soap_read___tds__GetDiscoveryMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__RemoveScopes_DEFINED
#define SOAP_TYPE___tds__RemoveScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__RemoveScopes(struct soap*, struct __tds__RemoveScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__RemoveScopes(struct soap*, const struct __tds__RemoveScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__RemoveScopes(struct soap*, const char*, int, const struct __tds__RemoveScopes *, const char*);
SOAP_FMAC3 struct __tds__RemoveScopes * SOAP_FMAC4 soap_in___tds__RemoveScopes(struct soap*, const char*, struct __tds__RemoveScopes *, const char*);
SOAP_FMAC1 struct __tds__RemoveScopes * SOAP_FMAC2 soap_instantiate___tds__RemoveScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__RemoveScopes * soap_new___tds__RemoveScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__RemoveScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__RemoveScopes * soap_new_req___tds__RemoveScopes(
	struct soap *soap)
{
	struct __tds__RemoveScopes *_p = ::soap_new___tds__RemoveScopes(soap);
	if (_p)
	{	::soap_default___tds__RemoveScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__RemoveScopes * soap_new_set___tds__RemoveScopes(
	struct soap *soap,
	_tds__RemoveScopes *tds__RemoveScopes)
{
	struct __tds__RemoveScopes *_p = ::soap_new___tds__RemoveScopes(soap);
	if (_p)
	{	::soap_default___tds__RemoveScopes(soap, _p);
		_p->tds__RemoveScopes = tds__RemoveScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__RemoveScopes(struct soap*, const struct __tds__RemoveScopes *, const char*, const char*);

inline int soap_write___tds__RemoveScopes(struct soap *soap, struct __tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__RemoveScopes(soap, p), 0) || ::soap_put___tds__RemoveScopes(soap, p, "-tds:RemoveScopes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__RemoveScopes(struct soap *soap, const char *URL, struct __tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RemoveScopes(soap, p), 0) || ::soap_put___tds__RemoveScopes(soap, p, "-tds:RemoveScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__RemoveScopes(struct soap *soap, const char *URL, struct __tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RemoveScopes(soap, p), 0) || ::soap_put___tds__RemoveScopes(soap, p, "-tds:RemoveScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__RemoveScopes(struct soap *soap, const char *URL, struct __tds__RemoveScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RemoveScopes(soap, p), 0) || ::soap_put___tds__RemoveScopes(soap, p, "-tds:RemoveScopes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__RemoveScopes * SOAP_FMAC4 soap_get___tds__RemoveScopes(struct soap*, struct __tds__RemoveScopes *, const char*, const char*);

inline int soap_read___tds__RemoveScopes(struct soap *soap, struct __tds__RemoveScopes *p)
{
	if (p)
	{	::soap_default___tds__RemoveScopes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__RemoveScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__RemoveScopes(struct soap *soap, const char *URL, struct __tds__RemoveScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__RemoveScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__RemoveScopes(struct soap *soap, struct __tds__RemoveScopes *p)
{
	if (::soap_read___tds__RemoveScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__AddScopes_DEFINED
#define SOAP_TYPE___tds__AddScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__AddScopes(struct soap*, struct __tds__AddScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__AddScopes(struct soap*, const struct __tds__AddScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__AddScopes(struct soap*, const char*, int, const struct __tds__AddScopes *, const char*);
SOAP_FMAC3 struct __tds__AddScopes * SOAP_FMAC4 soap_in___tds__AddScopes(struct soap*, const char*, struct __tds__AddScopes *, const char*);
SOAP_FMAC1 struct __tds__AddScopes * SOAP_FMAC2 soap_instantiate___tds__AddScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__AddScopes * soap_new___tds__AddScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__AddScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__AddScopes * soap_new_req___tds__AddScopes(
	struct soap *soap)
{
	struct __tds__AddScopes *_p = ::soap_new___tds__AddScopes(soap);
	if (_p)
	{	::soap_default___tds__AddScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__AddScopes * soap_new_set___tds__AddScopes(
	struct soap *soap,
	_tds__AddScopes *tds__AddScopes)
{
	struct __tds__AddScopes *_p = ::soap_new___tds__AddScopes(soap);
	if (_p)
	{	::soap_default___tds__AddScopes(soap, _p);
		_p->tds__AddScopes = tds__AddScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__AddScopes(struct soap*, const struct __tds__AddScopes *, const char*, const char*);

inline int soap_write___tds__AddScopes(struct soap *soap, struct __tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__AddScopes(soap, p), 0) || ::soap_put___tds__AddScopes(soap, p, "-tds:AddScopes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__AddScopes(struct soap *soap, const char *URL, struct __tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__AddScopes(soap, p), 0) || ::soap_put___tds__AddScopes(soap, p, "-tds:AddScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__AddScopes(struct soap *soap, const char *URL, struct __tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__AddScopes(soap, p), 0) || ::soap_put___tds__AddScopes(soap, p, "-tds:AddScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__AddScopes(struct soap *soap, const char *URL, struct __tds__AddScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__AddScopes(soap, p), 0) || ::soap_put___tds__AddScopes(soap, p, "-tds:AddScopes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__AddScopes * SOAP_FMAC4 soap_get___tds__AddScopes(struct soap*, struct __tds__AddScopes *, const char*, const char*);

inline int soap_read___tds__AddScopes(struct soap *soap, struct __tds__AddScopes *p)
{
	if (p)
	{	::soap_default___tds__AddScopes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__AddScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__AddScopes(struct soap *soap, const char *URL, struct __tds__AddScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__AddScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__AddScopes(struct soap *soap, struct __tds__AddScopes *p)
{
	if (::soap_read___tds__AddScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetScopes_DEFINED
#define SOAP_TYPE___tds__SetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetScopes(struct soap*, struct __tds__SetScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetScopes(struct soap*, const struct __tds__SetScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetScopes(struct soap*, const char*, int, const struct __tds__SetScopes *, const char*);
SOAP_FMAC3 struct __tds__SetScopes * SOAP_FMAC4 soap_in___tds__SetScopes(struct soap*, const char*, struct __tds__SetScopes *, const char*);
SOAP_FMAC1 struct __tds__SetScopes * SOAP_FMAC2 soap_instantiate___tds__SetScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetScopes * soap_new___tds__SetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetScopes * soap_new_req___tds__SetScopes(
	struct soap *soap)
{
	struct __tds__SetScopes *_p = ::soap_new___tds__SetScopes(soap);
	if (_p)
	{	::soap_default___tds__SetScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__SetScopes * soap_new_set___tds__SetScopes(
	struct soap *soap,
	_tds__SetScopes *tds__SetScopes)
{
	struct __tds__SetScopes *_p = ::soap_new___tds__SetScopes(soap);
	if (_p)
	{	::soap_default___tds__SetScopes(soap, _p);
		_p->tds__SetScopes = tds__SetScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetScopes(struct soap*, const struct __tds__SetScopes *, const char*, const char*);

inline int soap_write___tds__SetScopes(struct soap *soap, struct __tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetScopes(soap, p), 0) || ::soap_put___tds__SetScopes(soap, p, "-tds:SetScopes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetScopes(struct soap *soap, const char *URL, struct __tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetScopes(soap, p), 0) || ::soap_put___tds__SetScopes(soap, p, "-tds:SetScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetScopes(struct soap *soap, const char *URL, struct __tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetScopes(soap, p), 0) || ::soap_put___tds__SetScopes(soap, p, "-tds:SetScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetScopes(struct soap *soap, const char *URL, struct __tds__SetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetScopes(soap, p), 0) || ::soap_put___tds__SetScopes(soap, p, "-tds:SetScopes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetScopes * SOAP_FMAC4 soap_get___tds__SetScopes(struct soap*, struct __tds__SetScopes *, const char*, const char*);

inline int soap_read___tds__SetScopes(struct soap *soap, struct __tds__SetScopes *p)
{
	if (p)
	{	::soap_default___tds__SetScopes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetScopes(struct soap *soap, const char *URL, struct __tds__SetScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetScopes(struct soap *soap, struct __tds__SetScopes *p)
{
	if (::soap_read___tds__SetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetScopes_DEFINED
#define SOAP_TYPE___tds__GetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetScopes(struct soap*, struct __tds__GetScopes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetScopes(struct soap*, const struct __tds__GetScopes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetScopes(struct soap*, const char*, int, const struct __tds__GetScopes *, const char*);
SOAP_FMAC3 struct __tds__GetScopes * SOAP_FMAC4 soap_in___tds__GetScopes(struct soap*, const char*, struct __tds__GetScopes *, const char*);
SOAP_FMAC1 struct __tds__GetScopes * SOAP_FMAC2 soap_instantiate___tds__GetScopes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetScopes * soap_new___tds__GetScopes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetScopes(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetScopes * soap_new_req___tds__GetScopes(
	struct soap *soap)
{
	struct __tds__GetScopes *_p = ::soap_new___tds__GetScopes(soap);
	if (_p)
	{	::soap_default___tds__GetScopes(soap, _p);
	}
	return _p;
}

inline struct __tds__GetScopes * soap_new_set___tds__GetScopes(
	struct soap *soap,
	_tds__GetScopes *tds__GetScopes)
{
	struct __tds__GetScopes *_p = ::soap_new___tds__GetScopes(soap);
	if (_p)
	{	::soap_default___tds__GetScopes(soap, _p);
		_p->tds__GetScopes = tds__GetScopes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetScopes(struct soap*, const struct __tds__GetScopes *, const char*, const char*);

inline int soap_write___tds__GetScopes(struct soap *soap, struct __tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetScopes(soap, p), 0) || ::soap_put___tds__GetScopes(soap, p, "-tds:GetScopes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetScopes(struct soap *soap, const char *URL, struct __tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetScopes(soap, p), 0) || ::soap_put___tds__GetScopes(soap, p, "-tds:GetScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetScopes(struct soap *soap, const char *URL, struct __tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetScopes(soap, p), 0) || ::soap_put___tds__GetScopes(soap, p, "-tds:GetScopes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetScopes(struct soap *soap, const char *URL, struct __tds__GetScopes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetScopes(soap, p), 0) || ::soap_put___tds__GetScopes(soap, p, "-tds:GetScopes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetScopes * SOAP_FMAC4 soap_get___tds__GetScopes(struct soap*, struct __tds__GetScopes *, const char*, const char*);

inline int soap_read___tds__GetScopes(struct soap *soap, struct __tds__GetScopes *p)
{
	if (p)
	{	::soap_default___tds__GetScopes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetScopes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetScopes(struct soap *soap, const char *URL, struct __tds__GetScopes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetScopes(struct soap *soap, struct __tds__GetScopes *p)
{
	if (::soap_read___tds__GetScopes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemSupportInformation_DEFINED
#define SOAP_TYPE___tds__GetSystemSupportInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemSupportInformation(struct soap*, struct __tds__GetSystemSupportInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemSupportInformation(struct soap*, const struct __tds__GetSystemSupportInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemSupportInformation(struct soap*, const char*, int, const struct __tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC3 struct __tds__GetSystemSupportInformation * SOAP_FMAC4 soap_in___tds__GetSystemSupportInformation(struct soap*, const char*, struct __tds__GetSystemSupportInformation *, const char*);
SOAP_FMAC1 struct __tds__GetSystemSupportInformation * SOAP_FMAC2 soap_instantiate___tds__GetSystemSupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemSupportInformation * soap_new___tds__GetSystemSupportInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemSupportInformation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemSupportInformation * soap_new_req___tds__GetSystemSupportInformation(
	struct soap *soap)
{
	struct __tds__GetSystemSupportInformation *_p = ::soap_new___tds__GetSystemSupportInformation(soap);
	if (_p)
	{	::soap_default___tds__GetSystemSupportInformation(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemSupportInformation * soap_new_set___tds__GetSystemSupportInformation(
	struct soap *soap,
	_tds__GetSystemSupportInformation *tds__GetSystemSupportInformation)
{
	struct __tds__GetSystemSupportInformation *_p = ::soap_new___tds__GetSystemSupportInformation(soap);
	if (_p)
	{	::soap_default___tds__GetSystemSupportInformation(soap, _p);
		_p->tds__GetSystemSupportInformation = tds__GetSystemSupportInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemSupportInformation(struct soap*, const struct __tds__GetSystemSupportInformation *, const char*, const char*);

inline int soap_write___tds__GetSystemSupportInformation(struct soap *soap, struct __tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetSystemSupportInformation(soap, p), 0) || ::soap_put___tds__GetSystemSupportInformation(soap, p, "-tds:GetSystemSupportInformation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetSystemSupportInformation(struct soap *soap, const char *URL, struct __tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemSupportInformation(soap, p), 0) || ::soap_put___tds__GetSystemSupportInformation(soap, p, "-tds:GetSystemSupportInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetSystemSupportInformation(struct soap *soap, const char *URL, struct __tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemSupportInformation(soap, p), 0) || ::soap_put___tds__GetSystemSupportInformation(soap, p, "-tds:GetSystemSupportInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetSystemSupportInformation(struct soap *soap, const char *URL, struct __tds__GetSystemSupportInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemSupportInformation(soap, p), 0) || ::soap_put___tds__GetSystemSupportInformation(soap, p, "-tds:GetSystemSupportInformation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemSupportInformation * SOAP_FMAC4 soap_get___tds__GetSystemSupportInformation(struct soap*, struct __tds__GetSystemSupportInformation *, const char*, const char*);

inline int soap_read___tds__GetSystemSupportInformation(struct soap *soap, struct __tds__GetSystemSupportInformation *p)
{
	if (p)
	{	::soap_default___tds__GetSystemSupportInformation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetSystemSupportInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetSystemSupportInformation(struct soap *soap, const char *URL, struct __tds__GetSystemSupportInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetSystemSupportInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetSystemSupportInformation(struct soap *soap, struct __tds__GetSystemSupportInformation *p)
{
	if (::soap_read___tds__GetSystemSupportInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemLog_DEFINED
#define SOAP_TYPE___tds__GetSystemLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemLog(struct soap*, struct __tds__GetSystemLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemLog(struct soap*, const struct __tds__GetSystemLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemLog(struct soap*, const char*, int, const struct __tds__GetSystemLog *, const char*);
SOAP_FMAC3 struct __tds__GetSystemLog * SOAP_FMAC4 soap_in___tds__GetSystemLog(struct soap*, const char*, struct __tds__GetSystemLog *, const char*);
SOAP_FMAC1 struct __tds__GetSystemLog * SOAP_FMAC2 soap_instantiate___tds__GetSystemLog(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemLog * soap_new___tds__GetSystemLog(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemLog(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemLog * soap_new_req___tds__GetSystemLog(
	struct soap *soap)
{
	struct __tds__GetSystemLog *_p = ::soap_new___tds__GetSystemLog(soap);
	if (_p)
	{	::soap_default___tds__GetSystemLog(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemLog * soap_new_set___tds__GetSystemLog(
	struct soap *soap,
	_tds__GetSystemLog *tds__GetSystemLog)
{
	struct __tds__GetSystemLog *_p = ::soap_new___tds__GetSystemLog(soap);
	if (_p)
	{	::soap_default___tds__GetSystemLog(soap, _p);
		_p->tds__GetSystemLog = tds__GetSystemLog;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemLog(struct soap*, const struct __tds__GetSystemLog *, const char*, const char*);

inline int soap_write___tds__GetSystemLog(struct soap *soap, struct __tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetSystemLog(soap, p), 0) || ::soap_put___tds__GetSystemLog(soap, p, "-tds:GetSystemLog", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetSystemLog(struct soap *soap, const char *URL, struct __tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemLog(soap, p), 0) || ::soap_put___tds__GetSystemLog(soap, p, "-tds:GetSystemLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetSystemLog(struct soap *soap, const char *URL, struct __tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemLog(soap, p), 0) || ::soap_put___tds__GetSystemLog(soap, p, "-tds:GetSystemLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetSystemLog(struct soap *soap, const char *URL, struct __tds__GetSystemLog const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemLog(soap, p), 0) || ::soap_put___tds__GetSystemLog(soap, p, "-tds:GetSystemLog", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemLog * SOAP_FMAC4 soap_get___tds__GetSystemLog(struct soap*, struct __tds__GetSystemLog *, const char*, const char*);

inline int soap_read___tds__GetSystemLog(struct soap *soap, struct __tds__GetSystemLog *p)
{
	if (p)
	{	::soap_default___tds__GetSystemLog(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetSystemLog(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetSystemLog(struct soap *soap, const char *URL, struct __tds__GetSystemLog *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetSystemLog(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetSystemLog(struct soap *soap, struct __tds__GetSystemLog *p)
{
	if (::soap_read___tds__GetSystemLog(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemBackup_DEFINED
#define SOAP_TYPE___tds__GetSystemBackup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemBackup(struct soap*, struct __tds__GetSystemBackup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemBackup(struct soap*, const struct __tds__GetSystemBackup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemBackup(struct soap*, const char*, int, const struct __tds__GetSystemBackup *, const char*);
SOAP_FMAC3 struct __tds__GetSystemBackup * SOAP_FMAC4 soap_in___tds__GetSystemBackup(struct soap*, const char*, struct __tds__GetSystemBackup *, const char*);
SOAP_FMAC1 struct __tds__GetSystemBackup * SOAP_FMAC2 soap_instantiate___tds__GetSystemBackup(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemBackup * soap_new___tds__GetSystemBackup(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemBackup(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemBackup * soap_new_req___tds__GetSystemBackup(
	struct soap *soap)
{
	struct __tds__GetSystemBackup *_p = ::soap_new___tds__GetSystemBackup(soap);
	if (_p)
	{	::soap_default___tds__GetSystemBackup(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemBackup * soap_new_set___tds__GetSystemBackup(
	struct soap *soap,
	_tds__GetSystemBackup *tds__GetSystemBackup)
{
	struct __tds__GetSystemBackup *_p = ::soap_new___tds__GetSystemBackup(soap);
	if (_p)
	{	::soap_default___tds__GetSystemBackup(soap, _p);
		_p->tds__GetSystemBackup = tds__GetSystemBackup;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemBackup(struct soap*, const struct __tds__GetSystemBackup *, const char*, const char*);

inline int soap_write___tds__GetSystemBackup(struct soap *soap, struct __tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetSystemBackup(soap, p), 0) || ::soap_put___tds__GetSystemBackup(soap, p, "-tds:GetSystemBackup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetSystemBackup(struct soap *soap, const char *URL, struct __tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemBackup(soap, p), 0) || ::soap_put___tds__GetSystemBackup(soap, p, "-tds:GetSystemBackup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetSystemBackup(struct soap *soap, const char *URL, struct __tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemBackup(soap, p), 0) || ::soap_put___tds__GetSystemBackup(soap, p, "-tds:GetSystemBackup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetSystemBackup(struct soap *soap, const char *URL, struct __tds__GetSystemBackup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemBackup(soap, p), 0) || ::soap_put___tds__GetSystemBackup(soap, p, "-tds:GetSystemBackup", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemBackup * SOAP_FMAC4 soap_get___tds__GetSystemBackup(struct soap*, struct __tds__GetSystemBackup *, const char*, const char*);

inline int soap_read___tds__GetSystemBackup(struct soap *soap, struct __tds__GetSystemBackup *p)
{
	if (p)
	{	::soap_default___tds__GetSystemBackup(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetSystemBackup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetSystemBackup(struct soap *soap, const char *URL, struct __tds__GetSystemBackup *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetSystemBackup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetSystemBackup(struct soap *soap, struct __tds__GetSystemBackup *p)
{
	if (::soap_read___tds__GetSystemBackup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__RestoreSystem_DEFINED
#define SOAP_TYPE___tds__RestoreSystem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__RestoreSystem(struct soap*, struct __tds__RestoreSystem *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__RestoreSystem(struct soap*, const struct __tds__RestoreSystem *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__RestoreSystem(struct soap*, const char*, int, const struct __tds__RestoreSystem *, const char*);
SOAP_FMAC3 struct __tds__RestoreSystem * SOAP_FMAC4 soap_in___tds__RestoreSystem(struct soap*, const char*, struct __tds__RestoreSystem *, const char*);
SOAP_FMAC1 struct __tds__RestoreSystem * SOAP_FMAC2 soap_instantiate___tds__RestoreSystem(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__RestoreSystem * soap_new___tds__RestoreSystem(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__RestoreSystem(soap, n, NULL, NULL, NULL);
}

inline struct __tds__RestoreSystem * soap_new_req___tds__RestoreSystem(
	struct soap *soap)
{
	struct __tds__RestoreSystem *_p = ::soap_new___tds__RestoreSystem(soap);
	if (_p)
	{	::soap_default___tds__RestoreSystem(soap, _p);
	}
	return _p;
}

inline struct __tds__RestoreSystem * soap_new_set___tds__RestoreSystem(
	struct soap *soap,
	_tds__RestoreSystem *tds__RestoreSystem)
{
	struct __tds__RestoreSystem *_p = ::soap_new___tds__RestoreSystem(soap);
	if (_p)
	{	::soap_default___tds__RestoreSystem(soap, _p);
		_p->tds__RestoreSystem = tds__RestoreSystem;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__RestoreSystem(struct soap*, const struct __tds__RestoreSystem *, const char*, const char*);

inline int soap_write___tds__RestoreSystem(struct soap *soap, struct __tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__RestoreSystem(soap, p), 0) || ::soap_put___tds__RestoreSystem(soap, p, "-tds:RestoreSystem", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__RestoreSystem(struct soap *soap, const char *URL, struct __tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RestoreSystem(soap, p), 0) || ::soap_put___tds__RestoreSystem(soap, p, "-tds:RestoreSystem", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__RestoreSystem(struct soap *soap, const char *URL, struct __tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RestoreSystem(soap, p), 0) || ::soap_put___tds__RestoreSystem(soap, p, "-tds:RestoreSystem", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__RestoreSystem(struct soap *soap, const char *URL, struct __tds__RestoreSystem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__RestoreSystem(soap, p), 0) || ::soap_put___tds__RestoreSystem(soap, p, "-tds:RestoreSystem", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__RestoreSystem * SOAP_FMAC4 soap_get___tds__RestoreSystem(struct soap*, struct __tds__RestoreSystem *, const char*, const char*);

inline int soap_read___tds__RestoreSystem(struct soap *soap, struct __tds__RestoreSystem *p)
{
	if (p)
	{	::soap_default___tds__RestoreSystem(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__RestoreSystem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__RestoreSystem(struct soap *soap, const char *URL, struct __tds__RestoreSystem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__RestoreSystem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__RestoreSystem(struct soap *soap, struct __tds__RestoreSystem *p)
{
	if (::soap_read___tds__RestoreSystem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SystemReboot_DEFINED
#define SOAP_TYPE___tds__SystemReboot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SystemReboot(struct soap*, struct __tds__SystemReboot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SystemReboot(struct soap*, const struct __tds__SystemReboot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SystemReboot(struct soap*, const char*, int, const struct __tds__SystemReboot *, const char*);
SOAP_FMAC3 struct __tds__SystemReboot * SOAP_FMAC4 soap_in___tds__SystemReboot(struct soap*, const char*, struct __tds__SystemReboot *, const char*);
SOAP_FMAC1 struct __tds__SystemReboot * SOAP_FMAC2 soap_instantiate___tds__SystemReboot(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SystemReboot * soap_new___tds__SystemReboot(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SystemReboot(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SystemReboot * soap_new_req___tds__SystemReboot(
	struct soap *soap)
{
	struct __tds__SystemReboot *_p = ::soap_new___tds__SystemReboot(soap);
	if (_p)
	{	::soap_default___tds__SystemReboot(soap, _p);
	}
	return _p;
}

inline struct __tds__SystemReboot * soap_new_set___tds__SystemReboot(
	struct soap *soap,
	_tds__SystemReboot *tds__SystemReboot)
{
	struct __tds__SystemReboot *_p = ::soap_new___tds__SystemReboot(soap);
	if (_p)
	{	::soap_default___tds__SystemReboot(soap, _p);
		_p->tds__SystemReboot = tds__SystemReboot;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SystemReboot(struct soap*, const struct __tds__SystemReboot *, const char*, const char*);

inline int soap_write___tds__SystemReboot(struct soap *soap, struct __tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SystemReboot(soap, p), 0) || ::soap_put___tds__SystemReboot(soap, p, "-tds:SystemReboot", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SystemReboot(struct soap *soap, const char *URL, struct __tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SystemReboot(soap, p), 0) || ::soap_put___tds__SystemReboot(soap, p, "-tds:SystemReboot", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SystemReboot(struct soap *soap, const char *URL, struct __tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SystemReboot(soap, p), 0) || ::soap_put___tds__SystemReboot(soap, p, "-tds:SystemReboot", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SystemReboot(struct soap *soap, const char *URL, struct __tds__SystemReboot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SystemReboot(soap, p), 0) || ::soap_put___tds__SystemReboot(soap, p, "-tds:SystemReboot", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SystemReboot * SOAP_FMAC4 soap_get___tds__SystemReboot(struct soap*, struct __tds__SystemReboot *, const char*, const char*);

inline int soap_read___tds__SystemReboot(struct soap *soap, struct __tds__SystemReboot *p)
{
	if (p)
	{	::soap_default___tds__SystemReboot(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SystemReboot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SystemReboot(struct soap *soap, const char *URL, struct __tds__SystemReboot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SystemReboot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SystemReboot(struct soap *soap, struct __tds__SystemReboot *p)
{
	if (::soap_read___tds__SystemReboot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware_DEFINED
#define SOAP_TYPE___tds__UpgradeSystemFirmware_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__UpgradeSystemFirmware(struct soap*, struct __tds__UpgradeSystemFirmware *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__UpgradeSystemFirmware(struct soap*, const struct __tds__UpgradeSystemFirmware *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__UpgradeSystemFirmware(struct soap*, const char*, int, const struct __tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC3 struct __tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_in___tds__UpgradeSystemFirmware(struct soap*, const char*, struct __tds__UpgradeSystemFirmware *, const char*);
SOAP_FMAC1 struct __tds__UpgradeSystemFirmware * SOAP_FMAC2 soap_instantiate___tds__UpgradeSystemFirmware(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__UpgradeSystemFirmware * soap_new___tds__UpgradeSystemFirmware(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__UpgradeSystemFirmware(soap, n, NULL, NULL, NULL);
}

inline struct __tds__UpgradeSystemFirmware * soap_new_req___tds__UpgradeSystemFirmware(
	struct soap *soap)
{
	struct __tds__UpgradeSystemFirmware *_p = ::soap_new___tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	::soap_default___tds__UpgradeSystemFirmware(soap, _p);
	}
	return _p;
}

inline struct __tds__UpgradeSystemFirmware * soap_new_set___tds__UpgradeSystemFirmware(
	struct soap *soap,
	_tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware)
{
	struct __tds__UpgradeSystemFirmware *_p = ::soap_new___tds__UpgradeSystemFirmware(soap);
	if (_p)
	{	::soap_default___tds__UpgradeSystemFirmware(soap, _p);
		_p->tds__UpgradeSystemFirmware = tds__UpgradeSystemFirmware;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__UpgradeSystemFirmware(struct soap*, const struct __tds__UpgradeSystemFirmware *, const char*, const char*);

inline int soap_write___tds__UpgradeSystemFirmware(struct soap *soap, struct __tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__UpgradeSystemFirmware(soap, p), 0) || ::soap_put___tds__UpgradeSystemFirmware(soap, p, "-tds:UpgradeSystemFirmware", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, struct __tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__UpgradeSystemFirmware(soap, p), 0) || ::soap_put___tds__UpgradeSystemFirmware(soap, p, "-tds:UpgradeSystemFirmware", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, struct __tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__UpgradeSystemFirmware(soap, p), 0) || ::soap_put___tds__UpgradeSystemFirmware(soap, p, "-tds:UpgradeSystemFirmware", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, struct __tds__UpgradeSystemFirmware const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__UpgradeSystemFirmware(soap, p), 0) || ::soap_put___tds__UpgradeSystemFirmware(soap, p, "-tds:UpgradeSystemFirmware", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__UpgradeSystemFirmware * SOAP_FMAC4 soap_get___tds__UpgradeSystemFirmware(struct soap*, struct __tds__UpgradeSystemFirmware *, const char*, const char*);

inline int soap_read___tds__UpgradeSystemFirmware(struct soap *soap, struct __tds__UpgradeSystemFirmware *p)
{
	if (p)
	{	::soap_default___tds__UpgradeSystemFirmware(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__UpgradeSystemFirmware(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__UpgradeSystemFirmware(struct soap *soap, const char *URL, struct __tds__UpgradeSystemFirmware *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__UpgradeSystemFirmware(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__UpgradeSystemFirmware(struct soap *soap, struct __tds__UpgradeSystemFirmware *p)
{
	if (::soap_read___tds__UpgradeSystemFirmware(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault_DEFINED
#define SOAP_TYPE___tds__SetSystemFactoryDefault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetSystemFactoryDefault(struct soap*, struct __tds__SetSystemFactoryDefault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetSystemFactoryDefault(struct soap*, const struct __tds__SetSystemFactoryDefault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetSystemFactoryDefault(struct soap*, const char*, int, const struct __tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC3 struct __tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_in___tds__SetSystemFactoryDefault(struct soap*, const char*, struct __tds__SetSystemFactoryDefault *, const char*);
SOAP_FMAC1 struct __tds__SetSystemFactoryDefault * SOAP_FMAC2 soap_instantiate___tds__SetSystemFactoryDefault(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetSystemFactoryDefault * soap_new___tds__SetSystemFactoryDefault(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetSystemFactoryDefault(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetSystemFactoryDefault * soap_new_req___tds__SetSystemFactoryDefault(
	struct soap *soap)
{
	struct __tds__SetSystemFactoryDefault *_p = ::soap_new___tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	::soap_default___tds__SetSystemFactoryDefault(soap, _p);
	}
	return _p;
}

inline struct __tds__SetSystemFactoryDefault * soap_new_set___tds__SetSystemFactoryDefault(
	struct soap *soap,
	_tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault)
{
	struct __tds__SetSystemFactoryDefault *_p = ::soap_new___tds__SetSystemFactoryDefault(soap);
	if (_p)
	{	::soap_default___tds__SetSystemFactoryDefault(soap, _p);
		_p->tds__SetSystemFactoryDefault = tds__SetSystemFactoryDefault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetSystemFactoryDefault(struct soap*, const struct __tds__SetSystemFactoryDefault *, const char*, const char*);

inline int soap_write___tds__SetSystemFactoryDefault(struct soap *soap, struct __tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetSystemFactoryDefault(soap, p), 0) || ::soap_put___tds__SetSystemFactoryDefault(soap, p, "-tds:SetSystemFactoryDefault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, struct __tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetSystemFactoryDefault(soap, p), 0) || ::soap_put___tds__SetSystemFactoryDefault(soap, p, "-tds:SetSystemFactoryDefault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, struct __tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetSystemFactoryDefault(soap, p), 0) || ::soap_put___tds__SetSystemFactoryDefault(soap, p, "-tds:SetSystemFactoryDefault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, struct __tds__SetSystemFactoryDefault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetSystemFactoryDefault(soap, p), 0) || ::soap_put___tds__SetSystemFactoryDefault(soap, p, "-tds:SetSystemFactoryDefault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetSystemFactoryDefault * SOAP_FMAC4 soap_get___tds__SetSystemFactoryDefault(struct soap*, struct __tds__SetSystemFactoryDefault *, const char*, const char*);

inline int soap_read___tds__SetSystemFactoryDefault(struct soap *soap, struct __tds__SetSystemFactoryDefault *p)
{
	if (p)
	{	::soap_default___tds__SetSystemFactoryDefault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetSystemFactoryDefault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetSystemFactoryDefault(struct soap *soap, const char *URL, struct __tds__SetSystemFactoryDefault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetSystemFactoryDefault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetSystemFactoryDefault(struct soap *soap, struct __tds__SetSystemFactoryDefault *p)
{
	if (::soap_read___tds__SetSystemFactoryDefault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetSystemDateAndTime_DEFINED
#define SOAP_TYPE___tds__GetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetSystemDateAndTime(struct soap*, struct __tds__GetSystemDateAndTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetSystemDateAndTime(struct soap*, const struct __tds__GetSystemDateAndTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetSystemDateAndTime(struct soap*, const char*, int, const struct __tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC3 struct __tds__GetSystemDateAndTime * SOAP_FMAC4 soap_in___tds__GetSystemDateAndTime(struct soap*, const char*, struct __tds__GetSystemDateAndTime *, const char*);
SOAP_FMAC1 struct __tds__GetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__GetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetSystemDateAndTime * soap_new___tds__GetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetSystemDateAndTime * soap_new_req___tds__GetSystemDateAndTime(
	struct soap *soap)
{
	struct __tds__GetSystemDateAndTime *_p = ::soap_new___tds__GetSystemDateAndTime(soap);
	if (_p)
	{	::soap_default___tds__GetSystemDateAndTime(soap, _p);
	}
	return _p;
}

inline struct __tds__GetSystemDateAndTime * soap_new_set___tds__GetSystemDateAndTime(
	struct soap *soap,
	_tds__GetSystemDateAndTime *tds__GetSystemDateAndTime)
{
	struct __tds__GetSystemDateAndTime *_p = ::soap_new___tds__GetSystemDateAndTime(soap);
	if (_p)
	{	::soap_default___tds__GetSystemDateAndTime(soap, _p);
		_p->tds__GetSystemDateAndTime = tds__GetSystemDateAndTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetSystemDateAndTime(struct soap*, const struct __tds__GetSystemDateAndTime *, const char*, const char*);

inline int soap_write___tds__GetSystemDateAndTime(struct soap *soap, struct __tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__GetSystemDateAndTime(soap, p, "-tds:GetSystemDateAndTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__GetSystemDateAndTime(soap, p, "-tds:GetSystemDateAndTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__GetSystemDateAndTime(soap, p, "-tds:GetSystemDateAndTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__GetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__GetSystemDateAndTime(soap, p, "-tds:GetSystemDateAndTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetSystemDateAndTime * SOAP_FMAC4 soap_get___tds__GetSystemDateAndTime(struct soap*, struct __tds__GetSystemDateAndTime *, const char*, const char*);

inline int soap_read___tds__GetSystemDateAndTime(struct soap *soap, struct __tds__GetSystemDateAndTime *p)
{
	if (p)
	{	::soap_default___tds__GetSystemDateAndTime(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__GetSystemDateAndTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetSystemDateAndTime(struct soap *soap, struct __tds__GetSystemDateAndTime *p)
{
	if (::soap_read___tds__GetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__SetSystemDateAndTime_DEFINED
#define SOAP_TYPE___tds__SetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__SetSystemDateAndTime(struct soap*, struct __tds__SetSystemDateAndTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__SetSystemDateAndTime(struct soap*, const struct __tds__SetSystemDateAndTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__SetSystemDateAndTime(struct soap*, const char*, int, const struct __tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC3 struct __tds__SetSystemDateAndTime * SOAP_FMAC4 soap_in___tds__SetSystemDateAndTime(struct soap*, const char*, struct __tds__SetSystemDateAndTime *, const char*);
SOAP_FMAC1 struct __tds__SetSystemDateAndTime * SOAP_FMAC2 soap_instantiate___tds__SetSystemDateAndTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__SetSystemDateAndTime * soap_new___tds__SetSystemDateAndTime(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__SetSystemDateAndTime(soap, n, NULL, NULL, NULL);
}

inline struct __tds__SetSystemDateAndTime * soap_new_req___tds__SetSystemDateAndTime(
	struct soap *soap)
{
	struct __tds__SetSystemDateAndTime *_p = ::soap_new___tds__SetSystemDateAndTime(soap);
	if (_p)
	{	::soap_default___tds__SetSystemDateAndTime(soap, _p);
	}
	return _p;
}

inline struct __tds__SetSystemDateAndTime * soap_new_set___tds__SetSystemDateAndTime(
	struct soap *soap,
	_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime)
{
	struct __tds__SetSystemDateAndTime *_p = ::soap_new___tds__SetSystemDateAndTime(soap);
	if (_p)
	{	::soap_default___tds__SetSystemDateAndTime(soap, _p);
		_p->tds__SetSystemDateAndTime = tds__SetSystemDateAndTime;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__SetSystemDateAndTime(struct soap*, const struct __tds__SetSystemDateAndTime *, const char*, const char*);

inline int soap_write___tds__SetSystemDateAndTime(struct soap *soap, struct __tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__SetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__SetSystemDateAndTime(soap, p, "-tds:SetSystemDateAndTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__SetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__SetSystemDateAndTime(soap, p, "-tds:SetSystemDateAndTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__SetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__SetSystemDateAndTime(soap, p, "-tds:SetSystemDateAndTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__SetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__SetSystemDateAndTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__SetSystemDateAndTime(soap, p), 0) || ::soap_put___tds__SetSystemDateAndTime(soap, p, "-tds:SetSystemDateAndTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__SetSystemDateAndTime * SOAP_FMAC4 soap_get___tds__SetSystemDateAndTime(struct soap*, struct __tds__SetSystemDateAndTime *, const char*, const char*);

inline int soap_read___tds__SetSystemDateAndTime(struct soap *soap, struct __tds__SetSystemDateAndTime *p)
{
	if (p)
	{	::soap_default___tds__SetSystemDateAndTime(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__SetSystemDateAndTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__SetSystemDateAndTime(struct soap *soap, const char *URL, struct __tds__SetSystemDateAndTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__SetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__SetSystemDateAndTime(struct soap *soap, struct __tds__SetSystemDateAndTime *p)
{
	if (::soap_read___tds__SetSystemDateAndTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetDeviceInformation_DEFINED
#define SOAP_TYPE___tds__GetDeviceInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetDeviceInformation(struct soap*, struct __tds__GetDeviceInformation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetDeviceInformation(struct soap*, const struct __tds__GetDeviceInformation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetDeviceInformation(struct soap*, const char*, int, const struct __tds__GetDeviceInformation *, const char*);
SOAP_FMAC3 struct __tds__GetDeviceInformation * SOAP_FMAC4 soap_in___tds__GetDeviceInformation(struct soap*, const char*, struct __tds__GetDeviceInformation *, const char*);
SOAP_FMAC1 struct __tds__GetDeviceInformation * SOAP_FMAC2 soap_instantiate___tds__GetDeviceInformation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetDeviceInformation * soap_new___tds__GetDeviceInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetDeviceInformation(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetDeviceInformation * soap_new_req___tds__GetDeviceInformation(
	struct soap *soap)
{
	struct __tds__GetDeviceInformation *_p = ::soap_new___tds__GetDeviceInformation(soap);
	if (_p)
	{	::soap_default___tds__GetDeviceInformation(soap, _p);
	}
	return _p;
}

inline struct __tds__GetDeviceInformation * soap_new_set___tds__GetDeviceInformation(
	struct soap *soap,
	_tds__GetDeviceInformation *tds__GetDeviceInformation)
{
	struct __tds__GetDeviceInformation *_p = ::soap_new___tds__GetDeviceInformation(soap);
	if (_p)
	{	::soap_default___tds__GetDeviceInformation(soap, _p);
		_p->tds__GetDeviceInformation = tds__GetDeviceInformation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetDeviceInformation(struct soap*, const struct __tds__GetDeviceInformation *, const char*, const char*);

inline int soap_write___tds__GetDeviceInformation(struct soap *soap, struct __tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetDeviceInformation(soap, p), 0) || ::soap_put___tds__GetDeviceInformation(soap, p, "-tds:GetDeviceInformation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetDeviceInformation(struct soap *soap, const char *URL, struct __tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDeviceInformation(soap, p), 0) || ::soap_put___tds__GetDeviceInformation(soap, p, "-tds:GetDeviceInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetDeviceInformation(struct soap *soap, const char *URL, struct __tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDeviceInformation(soap, p), 0) || ::soap_put___tds__GetDeviceInformation(soap, p, "-tds:GetDeviceInformation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetDeviceInformation(struct soap *soap, const char *URL, struct __tds__GetDeviceInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetDeviceInformation(soap, p), 0) || ::soap_put___tds__GetDeviceInformation(soap, p, "-tds:GetDeviceInformation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetDeviceInformation * SOAP_FMAC4 soap_get___tds__GetDeviceInformation(struct soap*, struct __tds__GetDeviceInformation *, const char*, const char*);

inline int soap_read___tds__GetDeviceInformation(struct soap *soap, struct __tds__GetDeviceInformation *p)
{
	if (p)
	{	::soap_default___tds__GetDeviceInformation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetDeviceInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetDeviceInformation(struct soap *soap, const char *URL, struct __tds__GetDeviceInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetDeviceInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetDeviceInformation(struct soap *soap, struct __tds__GetDeviceInformation *p)
{
	if (::soap_read___tds__GetDeviceInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___tds__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetServiceCapabilities(struct soap*, struct __tds__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetServiceCapabilities(struct soap*, const struct __tds__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetServiceCapabilities(struct soap*, const char*, int, const struct __tds__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __tds__GetServiceCapabilities * SOAP_FMAC4 soap_in___tds__GetServiceCapabilities(struct soap*, const char*, struct __tds__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __tds__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tds__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetServiceCapabilities * soap_new___tds__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetServiceCapabilities * soap_new_req___tds__GetServiceCapabilities(
	struct soap *soap)
{
	struct __tds__GetServiceCapabilities *_p = ::soap_new___tds__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tds__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tds__GetServiceCapabilities * soap_new_set___tds__GetServiceCapabilities(
	struct soap *soap,
	_tds__GetServiceCapabilities *tds__GetServiceCapabilities)
{
	struct __tds__GetServiceCapabilities *_p = ::soap_new___tds__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tds__GetServiceCapabilities(soap, _p);
		_p->tds__GetServiceCapabilities = tds__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetServiceCapabilities(struct soap*, const struct __tds__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___tds__GetServiceCapabilities(struct soap *soap, struct __tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetServiceCapabilities(soap, p), 0) || ::soap_put___tds__GetServiceCapabilities(soap, p, "-tds:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetServiceCapabilities(soap, p), 0) || ::soap_put___tds__GetServiceCapabilities(soap, p, "-tds:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetServiceCapabilities(soap, p), 0) || ::soap_put___tds__GetServiceCapabilities(soap, p, "-tds:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tds__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetServiceCapabilities(soap, p), 0) || ::soap_put___tds__GetServiceCapabilities(soap, p, "-tds:GetServiceCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetServiceCapabilities * SOAP_FMAC4 soap_get___tds__GetServiceCapabilities(struct soap*, struct __tds__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___tds__GetServiceCapabilities(struct soap *soap, struct __tds__GetServiceCapabilities *p)
{
	if (p)
	{	::soap_default___tds__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tds__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetServiceCapabilities(struct soap *soap, struct __tds__GetServiceCapabilities *p)
{
	if (::soap_read___tds__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tds__GetServices_DEFINED
#define SOAP_TYPE___tds__GetServices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tds__GetServices(struct soap*, struct __tds__GetServices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tds__GetServices(struct soap*, const struct __tds__GetServices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tds__GetServices(struct soap*, const char*, int, const struct __tds__GetServices *, const char*);
SOAP_FMAC3 struct __tds__GetServices * SOAP_FMAC4 soap_in___tds__GetServices(struct soap*, const char*, struct __tds__GetServices *, const char*);
SOAP_FMAC1 struct __tds__GetServices * SOAP_FMAC2 soap_instantiate___tds__GetServices(struct soap*, int, const char*, const char*, size_t*);

inline struct __tds__GetServices * soap_new___tds__GetServices(struct soap *soap, int n = -1)
{
	return soap_instantiate___tds__GetServices(soap, n, NULL, NULL, NULL);
}

inline struct __tds__GetServices * soap_new_req___tds__GetServices(
	struct soap *soap)
{
	struct __tds__GetServices *_p = ::soap_new___tds__GetServices(soap);
	if (_p)
	{	::soap_default___tds__GetServices(soap, _p);
	}
	return _p;
}

inline struct __tds__GetServices * soap_new_set___tds__GetServices(
	struct soap *soap,
	_tds__GetServices *tds__GetServices)
{
	struct __tds__GetServices *_p = ::soap_new___tds__GetServices(soap);
	if (_p)
	{	::soap_default___tds__GetServices(soap, _p);
		_p->tds__GetServices = tds__GetServices;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tds__GetServices(struct soap*, const struct __tds__GetServices *, const char*, const char*);

inline int soap_write___tds__GetServices(struct soap *soap, struct __tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tds__GetServices(soap, p), 0) || ::soap_put___tds__GetServices(soap, p, "-tds:GetServices", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tds__GetServices(struct soap *soap, const char *URL, struct __tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetServices(soap, p), 0) || ::soap_put___tds__GetServices(soap, p, "-tds:GetServices", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tds__GetServices(struct soap *soap, const char *URL, struct __tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetServices(soap, p), 0) || ::soap_put___tds__GetServices(soap, p, "-tds:GetServices", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tds__GetServices(struct soap *soap, const char *URL, struct __tds__GetServices const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tds__GetServices(soap, p), 0) || ::soap_put___tds__GetServices(soap, p, "-tds:GetServices", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tds__GetServices * SOAP_FMAC4 soap_get___tds__GetServices(struct soap*, struct __tds__GetServices *, const char*, const char*);

inline int soap_read___tds__GetServices(struct soap *soap, struct __tds__GetServices *p)
{
	if (p)
	{	::soap_default___tds__GetServices(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tds__GetServices(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tds__GetServices(struct soap *soap, const char *URL, struct __tds__GetServices *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tds__GetServices(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tds__GetServices(struct soap *soap, struct __tds__GetServices *p)
{
	if (::soap_read___tds__GetServices(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
#define SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Envelope(struct soap*, const char*, int, const struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_in_SOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Envelope * soap_new_SOAP_ENV__Envelope(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Envelope(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Envelope * soap_new_req_SOAP_ENV__Envelope(
	struct soap *soap)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Envelope * soap_new_set_SOAP_ENV__Envelope(
	struct soap *soap,
	struct SOAP_ENV__Header *SOAP_ENV__Header,
	char *SOAP_ENV__Body)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
		_p->SOAP_ENV__Header = SOAP_ENV__Header;
		_p->SOAP_ENV__Body = SOAP_ENV__Body;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_write_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_get_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_read_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Envelope(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Envelope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);

#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemAction(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write__wsa5__ProblemAction(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__FaultTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__From(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReplyTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);

#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RelatesTo(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write__wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);

#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Metadata(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write__wsa5__Metadata(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);

#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReferenceParameters(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write__wsa5__ReferenceParameters(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__EndpointReference(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__EndpointReference(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__xop__Include_DEFINED
#define SOAP_TYPE__xop__Include_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap*, struct _xop__Include *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap*, const struct _xop__Include *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap*, const char*, int, const struct _xop__Include *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__xop__Include2s(struct soap*, struct _xop__Include);
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap*, const char*, struct _xop__Include *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_xop__Include(struct soap*, const char*, struct _xop__Include *);
SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);

inline struct _xop__Include * soap_new__xop__Include(struct soap *soap, int n = -1)
{
	return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL);
}

inline struct _xop__Include * soap_new_req__xop__Include(
	struct soap *soap)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
	}
	return _p;
}

inline struct _xop__Include * soap_new_set__xop__Include(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
		_p->id = id;
		_p->type = type;
		_p->options = options;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap*, const struct _xop__Include *, const char*, const char*);

inline int soap_write__xop__Include(struct soap *soap, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap*, struct _xop__Include *, const char*, const char*);

inline int soap_read__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (p)
	{	::soap_default__xop__Include(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__xop__Include(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xop__Include(struct soap *soap, const char *URL, struct _xop__Include *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetHashingAlgorithm_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetHashingAlgorithm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetHashingAlgorithm(struct soap*, _tds__SetHashingAlgorithm *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetHashingAlgorithm(struct soap*, const char *, int, _tds__SetHashingAlgorithm *const*, const char *);
SOAP_FMAC3 _tds__SetHashingAlgorithm ** SOAP_FMAC4 soap_in_PointerTo_tds__SetHashingAlgorithm(struct soap*, const char*, _tds__SetHashingAlgorithm **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetHashingAlgorithm(struct soap*, _tds__SetHashingAlgorithm *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetHashingAlgorithm ** SOAP_FMAC4 soap_get_PointerTo_tds__SetHashingAlgorithm(struct soap*, _tds__SetHashingAlgorithm **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteGeoLocation_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteGeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteGeoLocation(struct soap*, const char *, int, _tds__DeleteGeoLocation *const*, const char *);
SOAP_FMAC3 _tds__DeleteGeoLocation ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteGeoLocation(struct soap*, const char*, _tds__DeleteGeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteGeoLocation ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetGeoLocation_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetGeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetGeoLocation(struct soap*, const char *, int, _tds__SetGeoLocation *const*, const char *);
SOAP_FMAC3 _tds__SetGeoLocation ** SOAP_FMAC4 soap_in_PointerTo_tds__SetGeoLocation(struct soap*, const char*, _tds__SetGeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetGeoLocation ** SOAP_FMAC4 soap_get_PointerTo_tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetGeoLocation_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetGeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetGeoLocation(struct soap*, const char *, int, _tds__GetGeoLocation *const*, const char *);
SOAP_FMAC3 _tds__GetGeoLocation ** SOAP_FMAC4 soap_in_PointerTo_tds__GetGeoLocation(struct soap*, const char*, _tds__GetGeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetGeoLocation ** SOAP_FMAC4 soap_get_PointerTo_tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteStorageConfiguration(struct soap*, const char *, int, _tds__DeleteStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__DeleteStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteStorageConfiguration(struct soap*, const char*, _tds__DeleteStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetStorageConfiguration(struct soap*, const char *, int, _tds__SetStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetStorageConfiguration(struct soap*, const char*, _tds__SetStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetStorageConfiguration(struct soap*, const char *, int, _tds__GetStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetStorageConfiguration(struct soap*, const char*, _tds__GetStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateStorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateStorageConfiguration(struct soap*, const char *, int, _tds__CreateStorageConfiguration *const*, const char *);
SOAP_FMAC3 _tds__CreateStorageConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateStorageConfiguration(struct soap*, const char*, _tds__CreateStorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateStorageConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetStorageConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetStorageConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetStorageConfigurations(struct soap*, const char *, int, _tds__GetStorageConfigurations *const*, const char *);
SOAP_FMAC3 _tds__GetStorageConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tds__GetStorageConfigurations(struct soap*, const char*, _tds__GetStorageConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetStorageConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__StartSystemRestore_DEFINED
#define SOAP_TYPE_PointerTo_tds__StartSystemRestore_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__StartSystemRestore(struct soap*, const char *, int, _tds__StartSystemRestore *const*, const char *);
SOAP_FMAC3 _tds__StartSystemRestore ** SOAP_FMAC4 soap_in_PointerTo_tds__StartSystemRestore(struct soap*, const char*, _tds__StartSystemRestore **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore *const*, const char*, const char*);
SOAP_FMAC3 _tds__StartSystemRestore ** SOAP_FMAC4 soap_get_PointerTo_tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade_DEFINED
#define SOAP_TYPE_PointerTo_tds__StartFirmwareUpgrade_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__StartFirmwareUpgrade(struct soap*, const char *, int, _tds__StartFirmwareUpgrade *const*, const char *);
SOAP_FMAC3 _tds__StartFirmwareUpgrade ** SOAP_FMAC4 soap_in_PointerTo_tds__StartFirmwareUpgrade(struct soap*, const char*, _tds__StartFirmwareUpgrade **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade *const*, const char*, const char*);
SOAP_FMAC3 _tds__StartFirmwareUpgrade ** SOAP_FMAC4 soap_get_PointerTo_tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUris_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemUris_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemUris(struct soap*, _tds__GetSystemUris *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemUris(struct soap*, const char *, int, _tds__GetSystemUris *const*, const char *);
SOAP_FMAC3 _tds__GetSystemUris ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemUris(struct soap*, const char*, _tds__GetSystemUris **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemUris(struct soap*, _tds__GetSystemUris *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemUris ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemUris(struct soap*, _tds__GetSystemUris **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks_DEFINED
#define SOAP_TYPE_PointerTo_tds__ScanAvailableDot11Networks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, const char *, int, _tds__ScanAvailableDot11Networks *const*, const char *);
SOAP_FMAC3 _tds__ScanAvailableDot11Networks ** SOAP_FMAC4 soap_in_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, const char*, _tds__ScanAvailableDot11Networks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks *const*, const char*, const char*);
SOAP_FMAC3 _tds__ScanAvailableDot11Networks ** SOAP_FMAC4 soap_get_PointerTo_tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Status_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot11Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot11Status(struct soap*, _tds__GetDot11Status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot11Status(struct soap*, const char *, int, _tds__GetDot11Status *const*, const char *);
SOAP_FMAC3 _tds__GetDot11Status ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot11Status(struct soap*, const char*, _tds__GetDot11Status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot11Status(struct soap*, _tds__GetDot11Status *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot11Status ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot11Status(struct soap*, _tds__GetDot11Status **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot11Capabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot11Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot11Capabilities(struct soap*, const char *, int, _tds__GetDot11Capabilities *const*, const char *);
SOAP_FMAC3 _tds__GetDot11Capabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot11Capabilities(struct soap*, const char*, _tds__GetDot11Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot11Capabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, const char *, int, _tds__DeleteDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__DeleteDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, const char*, _tds__DeleteDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot1XConfigurations(struct soap*, const char *, int, _tds__GetDot1XConfigurations *const*, const char *);
SOAP_FMAC3 _tds__GetDot1XConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot1XConfigurations(struct soap*, const char*, _tds__GetDot1XConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot1XConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDot1XConfiguration(struct soap*, const char *, int, _tds__GetDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDot1XConfiguration(struct soap*, const char*, _tds__GetDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDot1XConfiguration(struct soap*, const char *, int, _tds__SetDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDot1XConfiguration(struct soap*, const char*, _tds__SetDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateDot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateDot1XConfiguration(struct soap*, const char *, int, _tds__CreateDot1XConfiguration *const*, const char *);
SOAP_FMAC3 _tds__CreateDot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateDot1XConfiguration(struct soap*, const char*, _tds__CreateDot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateDot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__LoadCACertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__LoadCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__LoadCACertificates(struct soap*, const char *, int, _tds__LoadCACertificates *const*, const char *);
SOAP_FMAC3 _tds__LoadCACertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__LoadCACertificates(struct soap*, const char*, _tds__LoadCACertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__LoadCACertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCertificateInformation_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCertificateInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCertificateInformation(struct soap*, const char *, int, _tds__GetCertificateInformation *const*, const char *);
SOAP_FMAC3 _tds__GetCertificateInformation ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCertificateInformation(struct soap*, const char*, _tds__GetCertificateInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCertificateInformation ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_PointerTo_tds__LoadCertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, const char *, int, _tds__LoadCertificateWithPrivateKey *const*, const char *);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey ** SOAP_FMAC4 soap_in_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, const char*, _tds__LoadCertificateWithPrivateKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey *const*, const char*, const char*);
SOAP_FMAC3 _tds__LoadCertificateWithPrivateKey ** SOAP_FMAC4 soap_get_PointerTo_tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCACertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCACertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCACertificates(struct soap*, _tds__GetCACertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCACertificates(struct soap*, const char *, int, _tds__GetCACertificates *const*, const char *);
SOAP_FMAC3 _tds__GetCACertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCACertificates(struct soap*, const char*, _tds__GetCACertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCACertificates(struct soap*, _tds__GetCACertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCACertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCACertificates(struct soap*, _tds__GetCACertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE_PointerTo_tds__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SendAuxiliaryCommand(struct soap*, const char *, int, _tds__SendAuxiliaryCommand *const*, const char *);
SOAP_FMAC3 _tds__SendAuxiliaryCommand ** SOAP_FMAC4 soap_in_PointerTo_tds__SendAuxiliaryCommand(struct soap*, const char*, _tds__SendAuxiliaryCommand **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand *const*, const char*, const char*);
SOAP_FMAC3 _tds__SendAuxiliaryCommand ** SOAP_FMAC4 soap_get_PointerTo_tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputState_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRelayOutputState(struct soap*, const char *, int, _tds__SetRelayOutputState *const*, const char *);
SOAP_FMAC3 _tds__SetRelayOutputState ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRelayOutputState(struct soap*, const char*, _tds__SetRelayOutputState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRelayOutputState ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRelayOutputSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRelayOutputSettings(struct soap*, const char *, int, _tds__SetRelayOutputSettings *const*, const char *);
SOAP_FMAC3 _tds__SetRelayOutputSettings ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRelayOutputSettings(struct soap*, const char*, _tds__SetRelayOutputSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRelayOutputSettings ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetRelayOutputs_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetRelayOutputs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetRelayOutputs(struct soap*, const char *, int, _tds__GetRelayOutputs *const*, const char *);
SOAP_FMAC3 _tds__GetRelayOutputs ** SOAP_FMAC4 soap_in_PointerTo_tds__GetRelayOutputs(struct soap*, const char*, _tds__GetRelayOutputs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetRelayOutputs ** SOAP_FMAC4 soap_get_PointerTo_tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetClientCertificateMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetClientCertificateMode(struct soap*, const char *, int, _tds__SetClientCertificateMode *const*, const char *);
SOAP_FMAC3 _tds__SetClientCertificateMode ** SOAP_FMAC4 soap_in_PointerTo_tds__SetClientCertificateMode(struct soap*, const char*, _tds__SetClientCertificateMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetClientCertificateMode ** SOAP_FMAC4 soap_get_PointerTo_tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetClientCertificateMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetClientCertificateMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetClientCertificateMode(struct soap*, const char *, int, _tds__GetClientCertificateMode *const*, const char *);
SOAP_FMAC3 _tds__GetClientCertificateMode ** SOAP_FMAC4 soap_in_PointerTo_tds__GetClientCertificateMode(struct soap*, const char*, _tds__GetClientCertificateMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetClientCertificateMode ** SOAP_FMAC4 soap_get_PointerTo_tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__LoadCertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__LoadCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__LoadCertificates(struct soap*, _tds__LoadCertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__LoadCertificates(struct soap*, const char *, int, _tds__LoadCertificates *const*, const char *);
SOAP_FMAC3 _tds__LoadCertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__LoadCertificates(struct soap*, const char*, _tds__LoadCertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__LoadCertificates(struct soap*, _tds__LoadCertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__LoadCertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__LoadCertificates(struct soap*, _tds__LoadCertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetPkcs10Request_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetPkcs10Request_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetPkcs10Request(struct soap*, const char *, int, _tds__GetPkcs10Request *const*, const char *);
SOAP_FMAC3 _tds__GetPkcs10Request ** SOAP_FMAC4 soap_in_PointerTo_tds__GetPkcs10Request(struct soap*, const char*, _tds__GetPkcs10Request **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetPkcs10Request ** SOAP_FMAC4 soap_get_PointerTo_tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteCertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteCertificates(struct soap*, const char *, int, _tds__DeleteCertificates *const*, const char *);
SOAP_FMAC3 _tds__DeleteCertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteCertificates(struct soap*, const char*, _tds__DeleteCertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteCertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetCertificatesStatus_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetCertificatesStatus(struct soap*, const char *, int, _tds__SetCertificatesStatus *const*, const char *);
SOAP_FMAC3 _tds__SetCertificatesStatus ** SOAP_FMAC4 soap_in_PointerTo_tds__SetCertificatesStatus(struct soap*, const char*, _tds__SetCertificatesStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetCertificatesStatus ** SOAP_FMAC4 soap_get_PointerTo_tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCertificatesStatus_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCertificatesStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCertificatesStatus(struct soap*, const char *, int, _tds__GetCertificatesStatus *const*, const char *);
SOAP_FMAC3 _tds__GetCertificatesStatus ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCertificatesStatus(struct soap*, const char*, _tds__GetCertificatesStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCertificatesStatus ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCertificates_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCertificates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCertificates(struct soap*, _tds__GetCertificates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCertificates(struct soap*, const char *, int, _tds__GetCertificates *const*, const char *);
SOAP_FMAC3 _tds__GetCertificates ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCertificates(struct soap*, const char*, _tds__GetCertificates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCertificates(struct soap*, _tds__GetCertificates *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCertificates ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCertificates(struct soap*, _tds__GetCertificates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateCertificate_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateCertificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateCertificate(struct soap*, _tds__CreateCertificate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateCertificate(struct soap*, const char *, int, _tds__CreateCertificate *const*, const char *);
SOAP_FMAC3 _tds__CreateCertificate ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateCertificate(struct soap*, const char*, _tds__CreateCertificate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateCertificate(struct soap*, _tds__CreateCertificate *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateCertificate ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateCertificate(struct soap*, _tds__CreateCertificate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetAccessPolicy_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetAccessPolicy(struct soap*, const char *, int, _tds__SetAccessPolicy *const*, const char *);
SOAP_FMAC3 _tds__SetAccessPolicy ** SOAP_FMAC4 soap_in_PointerTo_tds__SetAccessPolicy(struct soap*, const char*, _tds__SetAccessPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetAccessPolicy ** SOAP_FMAC4 soap_get_PointerTo_tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetAccessPolicy_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetAccessPolicy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetAccessPolicy(struct soap*, const char *, int, _tds__GetAccessPolicy *const*, const char *);
SOAP_FMAC3 _tds__GetAccessPolicy ** SOAP_FMAC4 soap_in_PointerTo_tds__GetAccessPolicy(struct soap*, const char*, _tds__GetAccessPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetAccessPolicy ** SOAP_FMAC4 soap_get_PointerTo_tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__RemoveIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__RemoveIPAddressFilter(struct soap*, const char *, int, _tds__RemoveIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__RemoveIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__RemoveIPAddressFilter(struct soap*, const char*, _tds__RemoveIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__RemoveIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__AddIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__AddIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__AddIPAddressFilter(struct soap*, const char *, int, _tds__AddIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__AddIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__AddIPAddressFilter(struct soap*, const char*, _tds__AddIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__AddIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetIPAddressFilter(struct soap*, const char *, int, _tds__SetIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__SetIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__SetIPAddressFilter(struct soap*, const char*, _tds__SetIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetIPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetIPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetIPAddressFilter(struct soap*, const char *, int, _tds__GetIPAddressFilter *const*, const char *);
SOAP_FMAC3 _tds__GetIPAddressFilter ** SOAP_FMAC4 soap_in_PointerTo_tds__GetIPAddressFilter(struct soap*, const char*, _tds__GetIPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetIPAddressFilter ** SOAP_FMAC4 soap_get_PointerTo_tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetZeroConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetZeroConfiguration(struct soap*, const char *, int, _tds__SetZeroConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetZeroConfiguration(struct soap*, const char*, _tds__SetZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetZeroConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetZeroConfiguration(struct soap*, const char *, int, _tds__GetZeroConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetZeroConfiguration(struct soap*, const char*, _tds__GetZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, const char *, int, _tds__SetNetworkDefaultGateway *const*, const char *);
SOAP_FMAC3 _tds__SetNetworkDefaultGateway ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, const char*, _tds__SetNetworkDefaultGateway **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNetworkDefaultGateway ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNetworkDefaultGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, const char *, int, _tds__GetNetworkDefaultGateway *const*, const char *);
SOAP_FMAC3 _tds__GetNetworkDefaultGateway ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, const char*, _tds__GetNetworkDefaultGateway **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNetworkDefaultGateway ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkProtocols_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNetworkProtocols(struct soap*, const char *, int, _tds__SetNetworkProtocols *const*, const char *);
SOAP_FMAC3 _tds__SetNetworkProtocols ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNetworkProtocols(struct soap*, const char*, _tds__SetNetworkProtocols **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNetworkProtocols ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkProtocols_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNetworkProtocols_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNetworkProtocols(struct soap*, const char *, int, _tds__GetNetworkProtocols *const*, const char *);
SOAP_FMAC3 _tds__GetNetworkProtocols ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNetworkProtocols(struct soap*, const char*, _tds__GetNetworkProtocols **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNetworkProtocols ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNetworkInterfaces(struct soap*, const char *, int, _tds__SetNetworkInterfaces *const*, const char *);
SOAP_FMAC3 _tds__SetNetworkInterfaces ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNetworkInterfaces(struct soap*, const char*, _tds__SetNetworkInterfaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNetworkInterfaces ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNetworkInterfaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNetworkInterfaces(struct soap*, const char *, int, _tds__GetNetworkInterfaces *const*, const char *);
SOAP_FMAC3 _tds__GetNetworkInterfaces ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNetworkInterfaces(struct soap*, const char*, _tds__GetNetworkInterfaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNetworkInterfaces ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDynamicDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDynamicDNS(struct soap*, const char *, int, _tds__SetDynamicDNS *const*, const char *);
SOAP_FMAC3 _tds__SetDynamicDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDynamicDNS(struct soap*, const char*, _tds__SetDynamicDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDynamicDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDynamicDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDynamicDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDynamicDNS(struct soap*, const char *, int, _tds__GetDynamicDNS *const*, const char *);
SOAP_FMAC3 _tds__GetDynamicDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDynamicDNS(struct soap*, const char*, _tds__GetDynamicDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDynamicDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetNTP_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetNTP(struct soap*, _tds__SetNTP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetNTP(struct soap*, const char *, int, _tds__SetNTP *const*, const char *);
SOAP_FMAC3 _tds__SetNTP ** SOAP_FMAC4 soap_in_PointerTo_tds__SetNTP(struct soap*, const char*, _tds__SetNTP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetNTP(struct soap*, _tds__SetNTP *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetNTP ** SOAP_FMAC4 soap_get_PointerTo_tds__SetNTP(struct soap*, _tds__SetNTP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetNTP_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetNTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetNTP(struct soap*, _tds__GetNTP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetNTP(struct soap*, const char *, int, _tds__GetNTP *const*, const char *);
SOAP_FMAC3 _tds__GetNTP ** SOAP_FMAC4 soap_in_PointerTo_tds__GetNTP(struct soap*, const char*, _tds__GetNTP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetNTP(struct soap*, _tds__GetNTP *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetNTP ** SOAP_FMAC4 soap_get_PointerTo_tds__GetNTP(struct soap*, _tds__GetNTP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDNS(struct soap*, _tds__SetDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDNS(struct soap*, const char *, int, _tds__SetDNS *const*, const char *);
SOAP_FMAC3 _tds__SetDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDNS(struct soap*, const char*, _tds__SetDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDNS(struct soap*, _tds__SetDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDNS(struct soap*, _tds__SetDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDNS_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDNS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDNS(struct soap*, _tds__GetDNS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDNS(struct soap*, const char *, int, _tds__GetDNS *const*, const char *);
SOAP_FMAC3 _tds__GetDNS ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDNS(struct soap*, const char*, _tds__GetDNS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDNS(struct soap*, _tds__GetDNS *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDNS ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDNS(struct soap*, _tds__GetDNS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetHostnameFromDHCP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetHostnameFromDHCP(struct soap*, const char *, int, _tds__SetHostnameFromDHCP *const*, const char *);
SOAP_FMAC3 _tds__SetHostnameFromDHCP ** SOAP_FMAC4 soap_in_PointerTo_tds__SetHostnameFromDHCP(struct soap*, const char*, _tds__SetHostnameFromDHCP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetHostnameFromDHCP ** SOAP_FMAC4 soap_get_PointerTo_tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetHostname_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetHostname(struct soap*, _tds__SetHostname *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetHostname(struct soap*, const char *, int, _tds__SetHostname *const*, const char *);
SOAP_FMAC3 _tds__SetHostname ** SOAP_FMAC4 soap_in_PointerTo_tds__SetHostname(struct soap*, const char*, _tds__SetHostname **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetHostname(struct soap*, _tds__SetHostname *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetHostname ** SOAP_FMAC4 soap_get_PointerTo_tds__SetHostname(struct soap*, _tds__SetHostname **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetHostname_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetHostname_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetHostname(struct soap*, _tds__GetHostname *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetHostname(struct soap*, const char *, int, _tds__GetHostname *const*, const char *);
SOAP_FMAC3 _tds__GetHostname ** SOAP_FMAC4 soap_in_PointerTo_tds__GetHostname(struct soap*, const char*, _tds__GetHostname **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetHostname(struct soap*, _tds__GetHostname *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetHostname ** SOAP_FMAC4 soap_get_PointerTo_tds__GetHostname(struct soap*, _tds__GetHostname **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDPAddresses_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDPAddresses(struct soap*, const char *, int, _tds__SetDPAddresses *const*, const char *);
SOAP_FMAC3 _tds__SetDPAddresses ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDPAddresses(struct soap*, const char*, _tds__SetDPAddresses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDPAddresses ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetCapabilities(struct soap*, _tds__GetCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetCapabilities(struct soap*, const char *, int, _tds__GetCapabilities *const*, const char *);
SOAP_FMAC3 _tds__GetCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__GetCapabilities(struct soap*, const char*, _tds__GetCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetCapabilities(struct soap*, _tds__GetCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__GetCapabilities(struct soap*, _tds__GetCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetAuthFailureWarningConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetAuthFailureWarningConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetAuthFailureWarningConfiguration(struct soap*, _tds__SetAuthFailureWarningConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetAuthFailureWarningConfiguration(struct soap*, const char *, int, _tds__SetAuthFailureWarningConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetAuthFailureWarningConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetAuthFailureWarningConfiguration(struct soap*, const char*, _tds__SetAuthFailureWarningConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetAuthFailureWarningConfiguration(struct soap*, _tds__SetAuthFailureWarningConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetAuthFailureWarningConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetAuthFailureWarningConfiguration(struct soap*, _tds__SetAuthFailureWarningConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetAuthFailureWarningConfiguration(struct soap*, _tds__GetAuthFailureWarningConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetAuthFailureWarningConfiguration(struct soap*, const char *, int, _tds__GetAuthFailureWarningConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetAuthFailureWarningConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetAuthFailureWarningConfiguration(struct soap*, const char*, _tds__GetAuthFailureWarningConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetAuthFailureWarningConfiguration(struct soap*, _tds__GetAuthFailureWarningConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetAuthFailureWarningConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetAuthFailureWarningConfiguration(struct soap*, _tds__GetAuthFailureWarningConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningOptions_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetAuthFailureWarningOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetAuthFailureWarningOptions(struct soap*, _tds__GetAuthFailureWarningOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetAuthFailureWarningOptions(struct soap*, const char *, int, _tds__GetAuthFailureWarningOptions *const*, const char *);
SOAP_FMAC3 _tds__GetAuthFailureWarningOptions ** SOAP_FMAC4 soap_in_PointerTo_tds__GetAuthFailureWarningOptions(struct soap*, const char*, _tds__GetAuthFailureWarningOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetAuthFailureWarningOptions(struct soap*, _tds__GetAuthFailureWarningOptions *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetAuthFailureWarningOptions ** SOAP_FMAC4 soap_get_PointerTo_tds__GetAuthFailureWarningOptions(struct soap*, _tds__GetAuthFailureWarningOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetPasswordHistoryConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetPasswordHistoryConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetPasswordHistoryConfiguration(struct soap*, _tds__SetPasswordHistoryConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetPasswordHistoryConfiguration(struct soap*, const char *, int, _tds__SetPasswordHistoryConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetPasswordHistoryConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetPasswordHistoryConfiguration(struct soap*, const char*, _tds__SetPasswordHistoryConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetPasswordHistoryConfiguration(struct soap*, _tds__SetPasswordHistoryConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetPasswordHistoryConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetPasswordHistoryConfiguration(struct soap*, _tds__SetPasswordHistoryConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordHistoryConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetPasswordHistoryConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetPasswordHistoryConfiguration(struct soap*, _tds__GetPasswordHistoryConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetPasswordHistoryConfiguration(struct soap*, const char *, int, _tds__GetPasswordHistoryConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetPasswordHistoryConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetPasswordHistoryConfiguration(struct soap*, const char*, _tds__GetPasswordHistoryConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetPasswordHistoryConfiguration(struct soap*, _tds__GetPasswordHistoryConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetPasswordHistoryConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetPasswordHistoryConfiguration(struct soap*, _tds__GetPasswordHistoryConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetPasswordComplexityConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetPasswordComplexityConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetPasswordComplexityConfiguration(struct soap*, _tds__SetPasswordComplexityConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetPasswordComplexityConfiguration(struct soap*, const char *, int, _tds__SetPasswordComplexityConfiguration *const*, const char *);
SOAP_FMAC3 _tds__SetPasswordComplexityConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__SetPasswordComplexityConfiguration(struct soap*, const char*, _tds__SetPasswordComplexityConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetPasswordComplexityConfiguration(struct soap*, _tds__SetPasswordComplexityConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetPasswordComplexityConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__SetPasswordComplexityConfiguration(struct soap*, _tds__SetPasswordComplexityConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordComplexityConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetPasswordComplexityConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetPasswordComplexityConfiguration(struct soap*, _tds__GetPasswordComplexityConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetPasswordComplexityConfiguration(struct soap*, const char *, int, _tds__GetPasswordComplexityConfiguration *const*, const char *);
SOAP_FMAC3 _tds__GetPasswordComplexityConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tds__GetPasswordComplexityConfiguration(struct soap*, const char*, _tds__GetPasswordComplexityConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetPasswordComplexityConfiguration(struct soap*, _tds__GetPasswordComplexityConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetPasswordComplexityConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tds__GetPasswordComplexityConfiguration(struct soap*, _tds__GetPasswordComplexityConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetPasswordComplexityOptions_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetPasswordComplexityOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetPasswordComplexityOptions(struct soap*, _tds__GetPasswordComplexityOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetPasswordComplexityOptions(struct soap*, const char *, int, _tds__GetPasswordComplexityOptions *const*, const char *);
SOAP_FMAC3 _tds__GetPasswordComplexityOptions ** SOAP_FMAC4 soap_in_PointerTo_tds__GetPasswordComplexityOptions(struct soap*, const char*, _tds__GetPasswordComplexityOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetPasswordComplexityOptions(struct soap*, _tds__GetPasswordComplexityOptions *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetPasswordComplexityOptions ** SOAP_FMAC4 soap_get_PointerTo_tds__GetPasswordComplexityOptions(struct soap*, _tds__GetPasswordComplexityOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetWsdlUrl_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetWsdlUrl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetWsdlUrl(struct soap*, const char *, int, _tds__GetWsdlUrl *const*, const char *);
SOAP_FMAC3 _tds__GetWsdlUrl ** SOAP_FMAC4 soap_in_PointerTo_tds__GetWsdlUrl(struct soap*, const char*, _tds__GetWsdlUrl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetWsdlUrl ** SOAP_FMAC4 soap_get_PointerTo_tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetUser_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetUser(struct soap*, _tds__SetUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetUser(struct soap*, const char *, int, _tds__SetUser *const*, const char *);
SOAP_FMAC3 _tds__SetUser ** SOAP_FMAC4 soap_in_PointerTo_tds__SetUser(struct soap*, const char*, _tds__SetUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetUser(struct soap*, _tds__SetUser *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetUser ** SOAP_FMAC4 soap_get_PointerTo_tds__SetUser(struct soap*, _tds__SetUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__DeleteUsers_DEFINED
#define SOAP_TYPE_PointerTo_tds__DeleteUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__DeleteUsers(struct soap*, _tds__DeleteUsers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__DeleteUsers(struct soap*, const char *, int, _tds__DeleteUsers *const*, const char *);
SOAP_FMAC3 _tds__DeleteUsers ** SOAP_FMAC4 soap_in_PointerTo_tds__DeleteUsers(struct soap*, const char*, _tds__DeleteUsers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__DeleteUsers(struct soap*, _tds__DeleteUsers *const*, const char*, const char*);
SOAP_FMAC3 _tds__DeleteUsers ** SOAP_FMAC4 soap_get_PointerTo_tds__DeleteUsers(struct soap*, _tds__DeleteUsers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__CreateUsers_DEFINED
#define SOAP_TYPE_PointerTo_tds__CreateUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__CreateUsers(struct soap*, _tds__CreateUsers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__CreateUsers(struct soap*, const char *, int, _tds__CreateUsers *const*, const char *);
SOAP_FMAC3 _tds__CreateUsers ** SOAP_FMAC4 soap_in_PointerTo_tds__CreateUsers(struct soap*, const char*, _tds__CreateUsers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__CreateUsers(struct soap*, _tds__CreateUsers *const*, const char*, const char*);
SOAP_FMAC3 _tds__CreateUsers ** SOAP_FMAC4 soap_get_PointerTo_tds__CreateUsers(struct soap*, _tds__CreateUsers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetUsers_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetUsers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetUsers(struct soap*, _tds__GetUsers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetUsers(struct soap*, const char *, int, _tds__GetUsers *const*, const char *);
SOAP_FMAC3 _tds__GetUsers ** SOAP_FMAC4 soap_in_PointerTo_tds__GetUsers(struct soap*, const char*, _tds__GetUsers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetUsers(struct soap*, _tds__GetUsers *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetUsers ** SOAP_FMAC4 soap_get_PointerTo_tds__GetUsers(struct soap*, _tds__GetUsers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteUser_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRemoteUser(struct soap*, const char *, int, _tds__SetRemoteUser *const*, const char *);
SOAP_FMAC3 _tds__SetRemoteUser ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRemoteUser(struct soap*, const char*, _tds__SetRemoteUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRemoteUser ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteUser_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetRemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetRemoteUser(struct soap*, const char *, int, _tds__GetRemoteUser *const*, const char *);
SOAP_FMAC3 _tds__GetRemoteUser ** SOAP_FMAC4 soap_in_PointerTo_tds__GetRemoteUser(struct soap*, const char*, _tds__GetRemoteUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetRemoteUser ** SOAP_FMAC4 soap_get_PointerTo_tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetEndpointReference_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetEndpointReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetEndpointReference(struct soap*, const char *, int, _tds__GetEndpointReference *const*, const char *);
SOAP_FMAC3 _tds__GetEndpointReference ** SOAP_FMAC4 soap_in_PointerTo_tds__GetEndpointReference(struct soap*, const char*, _tds__GetEndpointReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetEndpointReference ** SOAP_FMAC4 soap_get_PointerTo_tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDPAddresses_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDPAddresses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDPAddresses(struct soap*, const char *, int, _tds__GetDPAddresses *const*, const char *);
SOAP_FMAC3 _tds__GetDPAddresses ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDPAddresses(struct soap*, const char*, _tds__GetDPAddresses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDPAddresses ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, const char *, int, _tds__SetRemoteDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, const char*, _tds__SetRemoteDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetRemoteDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetRemoteDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, const char *, int, _tds__GetRemoteDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, const char*, _tds__GetRemoteDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetRemoteDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetDiscoveryMode(struct soap*, const char *, int, _tds__SetDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__SetDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__SetDiscoveryMode(struct soap*, const char*, _tds__SetDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDiscoveryMode_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDiscoveryMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDiscoveryMode(struct soap*, const char *, int, _tds__GetDiscoveryMode *const*, const char *);
SOAP_FMAC3 _tds__GetDiscoveryMode ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDiscoveryMode(struct soap*, const char*, _tds__GetDiscoveryMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDiscoveryMode ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__RemoveScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__RemoveScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__RemoveScopes(struct soap*, _tds__RemoveScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__RemoveScopes(struct soap*, const char *, int, _tds__RemoveScopes *const*, const char *);
SOAP_FMAC3 _tds__RemoveScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__RemoveScopes(struct soap*, const char*, _tds__RemoveScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__RemoveScopes(struct soap*, _tds__RemoveScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__RemoveScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__RemoveScopes(struct soap*, _tds__RemoveScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__AddScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__AddScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__AddScopes(struct soap*, _tds__AddScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__AddScopes(struct soap*, const char *, int, _tds__AddScopes *const*, const char *);
SOAP_FMAC3 _tds__AddScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__AddScopes(struct soap*, const char*, _tds__AddScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__AddScopes(struct soap*, _tds__AddScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__AddScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__AddScopes(struct soap*, _tds__AddScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetScopes(struct soap*, _tds__SetScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetScopes(struct soap*, const char *, int, _tds__SetScopes *const*, const char *);
SOAP_FMAC3 _tds__SetScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__SetScopes(struct soap*, const char*, _tds__SetScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetScopes(struct soap*, _tds__SetScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__SetScopes(struct soap*, _tds__SetScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetScopes_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetScopes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetScopes(struct soap*, _tds__GetScopes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetScopes(struct soap*, const char *, int, _tds__GetScopes *const*, const char *);
SOAP_FMAC3 _tds__GetScopes ** SOAP_FMAC4 soap_in_PointerTo_tds__GetScopes(struct soap*, const char*, _tds__GetScopes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetScopes(struct soap*, _tds__GetScopes *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetScopes ** SOAP_FMAC4 soap_get_PointerTo_tds__GetScopes(struct soap*, _tds__GetScopes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemSupportInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemSupportInformation(struct soap*, const char *, int, _tds__GetSystemSupportInformation *const*, const char *);
SOAP_FMAC3 _tds__GetSystemSupportInformation ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemSupportInformation(struct soap*, const char*, _tds__GetSystemSupportInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemSupportInformation ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemLog_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemLog(struct soap*, _tds__GetSystemLog *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemLog(struct soap*, const char *, int, _tds__GetSystemLog *const*, const char *);
SOAP_FMAC3 _tds__GetSystemLog ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemLog(struct soap*, const char*, _tds__GetSystemLog **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemLog(struct soap*, _tds__GetSystemLog *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemLog ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemLog(struct soap*, _tds__GetSystemLog **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemBackup_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemBackup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemBackup(struct soap*, const char *, int, _tds__GetSystemBackup *const*, const char *);
SOAP_FMAC3 _tds__GetSystemBackup ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemBackup(struct soap*, const char*, _tds__GetSystemBackup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemBackup ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__RestoreSystem_DEFINED
#define SOAP_TYPE_PointerTo_tds__RestoreSystem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__RestoreSystem(struct soap*, _tds__RestoreSystem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__RestoreSystem(struct soap*, const char *, int, _tds__RestoreSystem *const*, const char *);
SOAP_FMAC3 _tds__RestoreSystem ** SOAP_FMAC4 soap_in_PointerTo_tds__RestoreSystem(struct soap*, const char*, _tds__RestoreSystem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__RestoreSystem(struct soap*, _tds__RestoreSystem *const*, const char*, const char*);
SOAP_FMAC3 _tds__RestoreSystem ** SOAP_FMAC4 soap_get_PointerTo_tds__RestoreSystem(struct soap*, _tds__RestoreSystem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SystemReboot_DEFINED
#define SOAP_TYPE_PointerTo_tds__SystemReboot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SystemReboot(struct soap*, _tds__SystemReboot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SystemReboot(struct soap*, const char *, int, _tds__SystemReboot *const*, const char *);
SOAP_FMAC3 _tds__SystemReboot ** SOAP_FMAC4 soap_in_PointerTo_tds__SystemReboot(struct soap*, const char*, _tds__SystemReboot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SystemReboot(struct soap*, _tds__SystemReboot *const*, const char*, const char*);
SOAP_FMAC3 _tds__SystemReboot ** SOAP_FMAC4 soap_get_PointerTo_tds__SystemReboot(struct soap*, _tds__SystemReboot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware_DEFINED
#define SOAP_TYPE_PointerTo_tds__UpgradeSystemFirmware_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__UpgradeSystemFirmware(struct soap*, const char *, int, _tds__UpgradeSystemFirmware *const*, const char *);
SOAP_FMAC3 _tds__UpgradeSystemFirmware ** SOAP_FMAC4 soap_in_PointerTo_tds__UpgradeSystemFirmware(struct soap*, const char*, _tds__UpgradeSystemFirmware **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware *const*, const char*, const char*);
SOAP_FMAC3 _tds__UpgradeSystemFirmware ** SOAP_FMAC4 soap_get_PointerTo_tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetSystemFactoryDefault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetSystemFactoryDefault(struct soap*, const char *, int, _tds__SetSystemFactoryDefault *const*, const char *);
SOAP_FMAC3 _tds__SetSystemFactoryDefault ** SOAP_FMAC4 soap_in_PointerTo_tds__SetSystemFactoryDefault(struct soap*, const char*, _tds__SetSystemFactoryDefault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetSystemFactoryDefault ** SOAP_FMAC4 soap_get_PointerTo_tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemDateAndTime(struct soap*, const char *, int, _tds__GetSystemDateAndTime *const*, const char *);
SOAP_FMAC3 _tds__GetSystemDateAndTime ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemDateAndTime(struct soap*, const char*, _tds__GetSystemDateAndTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemDateAndTime ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime_DEFINED
#define SOAP_TYPE_PointerTo_tds__SetSystemDateAndTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__SetSystemDateAndTime(struct soap*, const char *, int, _tds__SetSystemDateAndTime *const*, const char *);
SOAP_FMAC3 _tds__SetSystemDateAndTime ** SOAP_FMAC4 soap_in_PointerTo_tds__SetSystemDateAndTime(struct soap*, const char*, _tds__SetSystemDateAndTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime *const*, const char*, const char*);
SOAP_FMAC3 _tds__SetSystemDateAndTime ** SOAP_FMAC4 soap_get_PointerTo_tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetDeviceInformation_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetDeviceInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetDeviceInformation(struct soap*, const char *, int, _tds__GetDeviceInformation *const*, const char *);
SOAP_FMAC3 _tds__GetDeviceInformation ** SOAP_FMAC4 soap_in_PointerTo_tds__GetDeviceInformation(struct soap*, const char*, _tds__GetDeviceInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetDeviceInformation ** SOAP_FMAC4 soap_get_PointerTo_tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetServiceCapabilities(struct soap*, const char *, int, _tds__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _tds__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__GetServiceCapabilities(struct soap*, const char*, _tds__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetServices_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetServices_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetServices(struct soap*, _tds__GetServices *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetServices(struct soap*, const char *, int, _tds__GetServices *const*, const char *);
SOAP_FMAC3 _tds__GetServices ** SOAP_FMAC4 soap_in_PointerTo_tds__GetServices(struct soap*, const char*, _tds__GetServices **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetServices(struct soap*, _tds__GetServices *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetServices ** SOAP_FMAC4 soap_get_PointerTo_tds__GetServices(struct soap*, _tds__GetServices **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceExtension(struct soap*, const char *, int, tt__NetworkInterfaceExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceExtension(struct soap*, const char*, tt__NetworkInterfaceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterface_DEFINED
#define SOAP_TYPE_PointerTott__IPv6NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6NetworkInterface(struct soap*, const char *, int, tt__IPv6NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__IPv6NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__IPv6NetworkInterface(struct soap*, const char*, tt__IPv6NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterface_DEFINED
#define SOAP_TYPE_PointerTott__IPv4NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4NetworkInterface(struct soap*, const char *, int, tt__IPv4NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__IPv4NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__IPv4NetworkInterface(struct soap*, const char*, tt__IPv4NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceLink_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceLink_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceLink(struct soap*, const char *, int, tt__NetworkInterfaceLink *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceLink ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceLink(struct soap*, const char*, tt__NetworkInterfaceLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceLink ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceInfo_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceInfo(struct soap*, const char *, int, tt__NetworkInterfaceInfo *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceInfo ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceInfo(struct soap*, const char*, tt__NetworkInterfaceInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceInfo ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LocalOrientation_DEFINED
#define SOAP_TYPE_PointerTott__LocalOrientation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LocalOrientation(struct soap*, tt__LocalOrientation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LocalOrientation(struct soap*, const char *, int, tt__LocalOrientation *const*, const char *);
SOAP_FMAC3 tt__LocalOrientation ** SOAP_FMAC4 soap_in_PointerTott__LocalOrientation(struct soap*, const char*, tt__LocalOrientation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LocalOrientation(struct soap*, tt__LocalOrientation *const*, const char*, const char*);
SOAP_FMAC3 tt__LocalOrientation ** SOAP_FMAC4 soap_get_PointerTott__LocalOrientation(struct soap*, tt__LocalOrientation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LocalLocation_DEFINED
#define SOAP_TYPE_PointerTott__LocalLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LocalLocation(struct soap*, tt__LocalLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LocalLocation(struct soap*, const char *, int, tt__LocalLocation *const*, const char *);
SOAP_FMAC3 tt__LocalLocation ** SOAP_FMAC4 soap_in_PointerTott__LocalLocation(struct soap*, const char*, tt__LocalLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LocalLocation(struct soap*, tt__LocalLocation *const*, const char*, const char*);
SOAP_FMAC3 tt__LocalLocation ** SOAP_FMAC4 soap_get_PointerTott__LocalLocation(struct soap*, tt__LocalLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__GeoOrientation_DEFINED
#define SOAP_TYPE_PointerTott__GeoOrientation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GeoOrientation(struct soap*, tt__GeoOrientation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GeoOrientation(struct soap*, const char *, int, tt__GeoOrientation *const*, const char *);
SOAP_FMAC3 tt__GeoOrientation ** SOAP_FMAC4 soap_in_PointerTott__GeoOrientation(struct soap*, const char*, tt__GeoOrientation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GeoOrientation(struct soap*, tt__GeoOrientation *const*, const char*, const char*);
SOAP_FMAC3 tt__GeoOrientation ** SOAP_FMAC4 soap_get_PointerTott__GeoOrientation(struct soap*, tt__GeoOrientation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__GeoLocation_DEFINED
#define SOAP_TYPE_PointerTott__GeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GeoLocation(struct soap*, const char *, int, tt__GeoLocation *const*, const char *);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_in_PointerTott__GeoLocation(struct soap*, const char*, tt__GeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*, const char*, const char*);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_get_PointerTott__GeoLocation(struct soap*, tt__GeoLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EapMethodExtension_DEFINED
#define SOAP_TYPE_PointerTott__EapMethodExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EapMethodExtension(struct soap*, const char *, int, tt__EapMethodExtension *const*, const char *);
SOAP_FMAC3 tt__EapMethodExtension ** SOAP_FMAC4 soap_in_PointerTott__EapMethodExtension(struct soap*, const char*, tt__EapMethodExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__EapMethodExtension ** SOAP_FMAC4 soap_get_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TLSConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__TLSConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TLSConfiguration(struct soap*, const char *, int, tt__TLSConfiguration *const*, const char *);
SOAP_FMAC3 tt__TLSConfiguration ** SOAP_FMAC4 soap_in_PointerTott__TLSConfiguration(struct soap*, const char*, tt__TLSConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__TLSConfiguration ** SOAP_FMAC4 soap_get_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot1XConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot1XConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot1XConfigurationExtension(struct soap*, const char *, int, tt__Dot1XConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot1XConfigurationExtension(struct soap*, const char*, tt__Dot1XConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EAPMethodConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__EAPMethodConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EAPMethodConfiguration(struct soap*, const char *, int, tt__EAPMethodConfiguration *const*, const char *);
SOAP_FMAC3 tt__EAPMethodConfiguration ** SOAP_FMAC4 soap_in_PointerTott__EAPMethodConfiguration(struct soap*, const char*, tt__EAPMethodConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__EAPMethodConfiguration ** SOAP_FMAC4 soap_get_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__CertificateInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateInformationExtension(struct soap*, const char *, int, tt__CertificateInformationExtension *const*, const char *);
SOAP_FMAC3 tt__CertificateInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__CertificateInformationExtension(struct soap*, const char*, tt__CertificateInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DateTimeRange_DEFINED
#define SOAP_TYPE_PointerTott__DateTimeRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DateTimeRange(struct soap*, const char *, int, tt__DateTimeRange *const*, const char *);
SOAP_FMAC3 tt__DateTimeRange ** SOAP_FMAC4 soap_in_PointerTott__DateTimeRange(struct soap*, const char*, tt__DateTimeRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange *const*, const char*, const char*);
SOAP_FMAC3 tt__DateTimeRange ** SOAP_FMAC4 soap_get_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateUsage_DEFINED
#define SOAP_TYPE_PointerTott__CertificateUsage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateUsage(struct soap*, const char *, int, tt__CertificateUsage *const*, const char *);
SOAP_FMAC3 tt__CertificateUsage ** SOAP_FMAC4 soap_in_PointerTott__CertificateUsage(struct soap*, const char*, tt__CertificateUsage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateUsage ** SOAP_FMAC4 soap_get_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__UserExtension_DEFINED
#define SOAP_TYPE_PointerTott__UserExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__UserExtension(struct soap*, tt__UserExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__UserExtension(struct soap*, const char *, int, tt__UserExtension *const*, const char *);
SOAP_FMAC3 tt__UserExtension ** SOAP_FMAC4 soap_in_PointerTott__UserExtension(struct soap*, const char*, tt__UserExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__UserExtension(struct soap*, tt__UserExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__UserExtension ** SOAP_FMAC4 soap_get_PointerTott__UserExtension(struct soap*, tt__UserExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Date_DEFINED
#define SOAP_TYPE_PointerTott__Date_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Date(struct soap*, tt__Date *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Date(struct soap*, const char *, int, tt__Date *const*, const char *);
SOAP_FMAC3 tt__Date ** SOAP_FMAC4 soap_in_PointerTott__Date(struct soap*, const char*, tt__Date **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Date(struct soap*, tt__Date *const*, const char*, const char*);
SOAP_FMAC3 tt__Date ** SOAP_FMAC4 soap_get_PointerTott__Date(struct soap*, tt__Date **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Time_DEFINED
#define SOAP_TYPE_PointerTott__Time_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Time(struct soap*, tt__Time *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Time(struct soap*, const char *, int, tt__Time *const*, const char *);
SOAP_FMAC3 tt__Time ** SOAP_FMAC4 soap_in_PointerTott__Time(struct soap*, const char*, tt__Time **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Time(struct soap*, tt__Time *const*, const char*, const char*);
SOAP_FMAC3 tt__Time ** SOAP_FMAC4 soap_get_PointerTott__Time(struct soap*, tt__Time **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemDateTimeExtension_DEFINED
#define SOAP_TYPE_PointerTott__SystemDateTimeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemDateTimeExtension(struct soap*, const char *, int, tt__SystemDateTimeExtension *const*, const char *);
SOAP_FMAC3 tt__SystemDateTimeExtension ** SOAP_FMAC4 soap_in_PointerTott__SystemDateTimeExtension(struct soap*, const char*, tt__SystemDateTimeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemDateTimeExtension ** SOAP_FMAC4 soap_get_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemLogUri_DEFINED
#define SOAP_TYPE_PointerTott__SystemLogUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemLogUri(struct soap*, const char *, int, tt__SystemLogUri *const*, const char *);
SOAP_FMAC3 tt__SystemLogUri ** SOAP_FMAC4 soap_in_PointerTott__SystemLogUri(struct soap*, const char*, tt__SystemLogUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemLogUri ** SOAP_FMAC4 soap_get_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceExtension_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsDeviceExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceExtension(struct soap*, const char *, int, tt__AnalyticsDeviceExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceExtension(struct soap*, const char*, tt__AnalyticsDeviceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilitiesExtension2(struct soap*, const char *, int, tt__SystemCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilitiesExtension2(struct soap*, const char*, tt__SystemCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilitiesExtension(struct soap*, const char *, int, tt__SystemCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilitiesExtension(struct soap*, const char*, tt__SystemCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilitiesExtension2(struct soap*, const char *, int, tt__SecurityCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilitiesExtension2(struct soap*, const char*, tt__SecurityCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilitiesExtension(struct soap*, const char *, int, tt__SecurityCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilitiesExtension(struct soap*, const char*, tt__SecurityCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilitiesExtension2(struct soap*, const char *, int, tt__NetworkCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilitiesExtension2(struct soap*, const char*, tt__NetworkCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilitiesExtension(struct soap*, const char *, int, tt__NetworkCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilitiesExtension(struct soap*, const char*, tt__NetworkCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, const char *, int, tt__RealTimeStreamingCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, tt__RealTimeStreamingCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ProfileCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ProfileCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileCapabilities(struct soap*, const char *, int, tt__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 tt__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ProfileCapabilities(struct soap*, const char*, tt__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MediaCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__MediaCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaCapabilitiesExtension(struct soap*, const char *, int, tt__MediaCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__MediaCapabilitiesExtension(struct soap*, const char*, tt__MediaCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RealTimeStreamingCapabilities(struct soap*, const char *, int, tt__RealTimeStreamingCapabilities *const*, const char *);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__RealTimeStreamingCapabilities(struct soap*, const char*, tt__RealTimeStreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilitiesExtension2(struct soap*, const char *, int, tt__IOCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilitiesExtension2(struct soap*, const char*, tt__IOCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilitiesExtension(struct soap*, const char *, int, tt__IOCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__IOCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilitiesExtension(struct soap*, const char*, tt__IOCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceCapabilitiesExtension(struct soap*, const char *, int, tt__DeviceCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__DeviceCapabilitiesExtension(struct soap*, const char*, tt__DeviceCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SecurityCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__SecurityCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilities(struct soap*, const char *, int, tt__SecurityCapabilities *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilities(struct soap*, const char*, tt__SecurityCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__SecurityCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IOCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__IOCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilities(struct soap*, const char *, int, tt__IOCapabilities *const*, const char *);
SOAP_FMAC3 tt__IOCapabilities ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilities(struct soap*, const char*, tt__IOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__IOCapabilities ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__SystemCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilities(struct soap*, const char *, int, tt__SystemCapabilities *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilities(struct soap*, const char*, tt__SystemCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__NetworkCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilities(struct soap*, const char *, int, tt__NetworkCapabilities *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilities ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilities(struct soap*, const char*, tt__NetworkCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkCapabilities ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension2_DEFINED
#define SOAP_TYPE_PointerTott__CapabilitiesExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CapabilitiesExtension2(struct soap*, const char *, int, tt__CapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__CapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__CapabilitiesExtension2(struct soap*, const char*, tt__CapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceCapabilities(struct soap*, const char *, int, tt__AnalyticsDeviceCapabilities *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceCapabilities(struct soap*, const char*, tt__AnalyticsDeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReceiverCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ReceiverCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReceiverCapabilities(struct soap*, const char *, int, tt__ReceiverCapabilities *const*, const char *);
SOAP_FMAC3 tt__ReceiverCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ReceiverCapabilities(struct soap*, const char*, tt__ReceiverCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ReceiverCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReplayCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ReplayCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReplayCapabilities(struct soap*, const char *, int, tt__ReplayCapabilities *const*, const char *);
SOAP_FMAC3 tt__ReplayCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ReplayCapabilities(struct soap*, const char*, tt__ReplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ReplayCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SearchCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__SearchCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SearchCapabilities(struct soap*, const char *, int, tt__SearchCapabilities *const*, const char *);
SOAP_FMAC3 tt__SearchCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SearchCapabilities(struct soap*, const char*, tt__SearchCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__SearchCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RecordingCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__RecordingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingCapabilities(struct soap*, const char *, int, tt__RecordingCapabilities *const*, const char *);
SOAP_FMAC3 tt__RecordingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__RecordingCapabilities(struct soap*, const char*, tt__RecordingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__RecordingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DisplayCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__DisplayCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DisplayCapabilities(struct soap*, const char *, int, tt__DisplayCapabilities *const*, const char *);
SOAP_FMAC3 tt__DisplayCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DisplayCapabilities(struct soap*, const char*, tt__DisplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__DisplayCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DeviceIOCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__DeviceIOCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceIOCapabilities(struct soap*, const char *, int, tt__DeviceIOCapabilities *const*, const char *);
SOAP_FMAC3 tt__DeviceIOCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DeviceIOCapabilities(struct soap*, const char*, tt__DeviceIOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__DeviceIOCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension_DEFINED
#define SOAP_TYPE_PointerTott__CapabilitiesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CapabilitiesExtension(struct soap*, const char *, int, tt__CapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__CapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__CapabilitiesExtension(struct soap*, const char*, tt__CapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__PTZCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZCapabilities(struct soap*, const char *, int, tt__PTZCapabilities *const*, const char *);
SOAP_FMAC3 tt__PTZCapabilities ** SOAP_FMAC4 soap_in_PointerTott__PTZCapabilities(struct soap*, const char*, tt__PTZCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZCapabilities ** SOAP_FMAC4 soap_get_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MediaCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__MediaCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaCapabilities(struct soap*, const char *, int, tt__MediaCapabilities *const*, const char *);
SOAP_FMAC3 tt__MediaCapabilities ** SOAP_FMAC4 soap_in_PointerTott__MediaCapabilities(struct soap*, const char*, tt__MediaCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__MediaCapabilities ** SOAP_FMAC4 soap_get_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ImagingCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__ImagingCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingCapabilities(struct soap*, const char *, int, tt__ImagingCapabilities *const*, const char *);
SOAP_FMAC3 tt__ImagingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ImagingCapabilities(struct soap*, const char*, tt__ImagingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__ImagingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EventCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__EventCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventCapabilities(struct soap*, const char *, int, tt__EventCapabilities *const*, const char *);
SOAP_FMAC3 tt__EventCapabilities ** SOAP_FMAC4 soap_in_PointerTott__EventCapabilities(struct soap*, const char*, tt__EventCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__EventCapabilities ** SOAP_FMAC4 soap_get_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DeviceCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__DeviceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceCapabilities(struct soap*, const char *, int, tt__DeviceCapabilities *const*, const char *);
SOAP_FMAC3 tt__DeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DeviceCapabilities(struct soap*, const char*, tt__DeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__DeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AnalyticsCapabilities_DEFINED
#define SOAP_TYPE_PointerTott__AnalyticsCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsCapabilities(struct soap*, const char *, int, tt__AnalyticsCapabilities *const*, const char *);
SOAP_FMAC3 tt__AnalyticsCapabilities ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsCapabilities(struct soap*, const char*, tt__AnalyticsCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__AnalyticsCapabilities ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11AvailableNetworksExtension(struct soap*, const char *, int, tt__Dot11AvailableNetworksExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11AvailableNetworksExtension(struct soap*, const char*, tt__Dot11AvailableNetworksExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11SignalStrength_DEFINED
#define SOAP_TYPE_PointerTott__Dot11SignalStrength_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SignalStrength(struct soap*, const char *, int, enum tt__Dot11SignalStrength *const*, const char *);
SOAP_FMAC3 enum tt__Dot11SignalStrength ** SOAP_FMAC4 soap_in_PointerTott__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *const*, const char*, const char*);
SOAP_FMAC3 enum tt__Dot11SignalStrength ** SOAP_FMAC4 soap_get_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSKSetExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSKSetExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKSetExtension(struct soap*, const char *, int, tt__Dot11PSKSetExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11PSKSetExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKSetExtension(struct soap*, const char*, tt__Dot11PSKSetExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11PSKSetExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSKPassphrase_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSKPassphrase_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKPassphrase(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKPassphrase(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKPassphrase(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKPassphrase(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKPassphrase(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSK_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSK_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSK(struct soap*, const char *, int, xsd__hexBinary *const*, const char *);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSK(struct soap*, const char*, xsd__hexBinary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary *const*, const char*, const char*);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, const char *, int, tt__Dot11SecurityConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, const char*, tt__Dot11SecurityConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
#define SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReferenceToken(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReferenceToken(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__ReferenceToken(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReferenceToken(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__ReferenceToken(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11PSKSet_DEFINED
#define SOAP_TYPE_PointerTott__Dot11PSKSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKSet(struct soap*, const char *, int, tt__Dot11PSKSet *const*, const char *);
SOAP_FMAC3 tt__Dot11PSKSet ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKSet(struct soap*, const char*, tt__Dot11PSKSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11PSKSet ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Cipher_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Cipher_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Cipher(struct soap*, const char *, int, enum tt__Dot11Cipher *const*, const char *);
SOAP_FMAC3 enum tt__Dot11Cipher ** SOAP_FMAC4 soap_in_PointerTott__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *const*, const char*, const char*);
SOAP_FMAC3 enum tt__Dot11Cipher ** SOAP_FMAC4 soap_get_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__Dot11SecurityConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SecurityConfiguration(struct soap*, const char *, int, tt__Dot11SecurityConfiguration *const*, const char *);
SOAP_FMAC3 tt__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_in_PointerTott__Dot11SecurityConfiguration(struct soap*, const char*, tt__Dot11SecurityConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_get_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPAddressFilterExtension_DEFINED
#define SOAP_TYPE_PointerTott__IPAddressFilterExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddressFilterExtension(struct soap*, const char *, int, tt__IPAddressFilterExtension *const*, const char *);
SOAP_FMAC3 tt__IPAddressFilterExtension ** SOAP_FMAC4 soap_in_PointerTott__IPAddressFilterExtension(struct soap*, const char*, tt__IPAddressFilterExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IPAddressFilterExtension ** SOAP_FMAC4 soap_get_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, const char *, int, tt__NetworkZeroConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, const char*, tt__NetworkZeroConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfigurationExtension(struct soap*, const char *, int, tt__NetworkZeroConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfigurationExtension(struct soap*, const char*, tt__NetworkZeroConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6DHCPConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__IPv6DHCPConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6DHCPConfiguration(struct soap*, const char *, int, enum tt__IPv6DHCPConfiguration *const*, const char *);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *const*, const char*, const char*);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char *, int, tt__NetworkInterfaceSetConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, const char *, int, tt__NetworkInterfaceSetConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__IPv6NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv6NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__IPv4NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv4NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__DynamicDNSInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DynamicDNSInformationExtension(struct soap*, const char *, int, tt__DynamicDNSInformationExtension *const*, const char *);
SOAP_FMAC3 tt__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__DynamicDNSInformationExtension(struct soap*, const char*, tt__DynamicDNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NTPInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__NTPInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NTPInformationExtension(struct soap*, const char *, int, tt__NTPInformationExtension *const*, const char *);
SOAP_FMAC3 tt__NTPInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__NTPInformationExtension(struct soap*, const char*, tt__NTPInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NTPInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DNSInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__DNSInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSInformationExtension(struct soap*, const char *, int, tt__DNSInformationExtension *const*, const char *);
SOAP_FMAC3 tt__DNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__DNSInformationExtension(struct soap*, const char*, tt__DNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__DNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__HostnameInformationExtension_DEFINED
#define SOAP_TYPE_PointerTott__HostnameInformationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__HostnameInformationExtension(struct soap*, const char *, int, tt__HostnameInformationExtension *const*, const char *);
SOAP_FMAC3 tt__HostnameInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__HostnameInformationExtension(struct soap*, const char*, tt__HostnameInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__HostnameInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkHostExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkHostExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkHostExtension(struct soap*, const char *, int, tt__NetworkHostExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkHostExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkHostExtension(struct soap*, const char*, tt__NetworkHostExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkHostExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6Address_DEFINED
#define SOAP_TYPE_PointerTott__IPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv6Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6Address(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv6Address(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4Address_DEFINED
#define SOAP_TYPE_PointerTott__IPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv4Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4Address(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv4Address(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkProtocolExtension_DEFINED
#define SOAP_TYPE_PointerTott__NetworkProtocolExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkProtocolExtension(struct soap*, const char *, int, tt__NetworkProtocolExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkProtocolExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkProtocolExtension(struct soap*, const char*, tt__NetworkProtocolExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkProtocolExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6ConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__IPv6ConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6ConfigurationExtension(struct soap*, const char *, int, tt__IPv6ConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__IPv6ConfigurationExtension(struct soap*, const char*, tt__IPv6ConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PrefixedIPv6Address_DEFINED
#define SOAP_TYPE_PointerTott__PrefixedIPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PrefixedIPv6Address(struct soap*, const char *, int, tt__PrefixedIPv6Address *const*, const char *);
SOAP_FMAC3 tt__PrefixedIPv6Address ** SOAP_FMAC4 soap_in_PointerTott__PrefixedIPv6Address(struct soap*, const char*, tt__PrefixedIPv6Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *const*, const char*, const char*);
SOAP_FMAC3 tt__PrefixedIPv6Address ** SOAP_FMAC4 soap_get_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PrefixedIPv4Address_DEFINED
#define SOAP_TYPE_PointerTott__PrefixedIPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PrefixedIPv4Address(struct soap*, const char *, int, tt__PrefixedIPv4Address *const*, const char *);
SOAP_FMAC3 tt__PrefixedIPv4Address ** SOAP_FMAC4 soap_in_PointerTott__PrefixedIPv4Address(struct soap*, const char*, tt__PrefixedIPv4Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *const*, const char*, const char*);
SOAP_FMAC3 tt__PrefixedIPv4Address ** SOAP_FMAC4 soap_get_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv4Configuration_DEFINED
#define SOAP_TYPE_PointerTott__IPv4Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4Configuration(struct soap*, const char *, int, tt__IPv4Configuration *const*, const char *);
SOAP_FMAC3 tt__IPv4Configuration ** SOAP_FMAC4 soap_in_PointerTott__IPv4Configuration(struct soap*, const char*, tt__IPv4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv4Configuration ** SOAP_FMAC4 soap_get_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPv6Configuration_DEFINED
#define SOAP_TYPE_PointerTott__IPv6Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6Configuration(struct soap*, const char *, int, tt__IPv6Configuration *const*, const char *);
SOAP_FMAC3 tt__IPv6Configuration ** SOAP_FMAC4 soap_in_PointerTott__IPv6Configuration(struct soap*, const char*, tt__IPv6Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__IPv6Configuration ** SOAP_FMAC4 soap_get_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, const char *, int, tt__NetworkInterfaceConnectionSetting *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, const char*, tt__NetworkInterfaceConnectionSetting **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension2_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceExtension2(struct soap*, const char *, int, tt__NetworkInterfaceExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceExtension2(struct soap*, const char*, tt__NetworkInterfaceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Configuration_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Configuration(struct soap*, const char *, int, tt__Dot11Configuration *const*, const char *);
SOAP_FMAC3 tt__Dot11Configuration ** SOAP_FMAC4 soap_in_PointerTott__Dot11Configuration(struct soap*, const char*, tt__Dot11Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11Configuration ** SOAP_FMAC4 soap_get_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot3Configuration_DEFINED
#define SOAP_TYPE_PointerTott__Dot3Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot3Configuration(struct soap*, const char *, int, tt__Dot3Configuration *const*, const char *);
SOAP_FMAC3 tt__Dot3Configuration ** SOAP_FMAC4 soap_in_PointerTott__Dot3Configuration(struct soap*, const char*, tt__Dot3Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot3Configuration ** SOAP_FMAC4 soap_get_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__LocationEntity_DEFINED
#define SOAP_TYPE_PointerTott__LocationEntity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LocationEntity(struct soap*, tt__LocationEntity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LocationEntity(struct soap*, const char *, int, tt__LocationEntity *const*, const char *);
SOAP_FMAC3 tt__LocationEntity ** SOAP_FMAC4 soap_in_PointerTott__LocationEntity(struct soap*, const char*, tt__LocationEntity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LocationEntity(struct soap*, tt__LocationEntity *const*, const char*, const char*);
SOAP_FMAC3 tt__LocationEntity ** SOAP_FMAC4 soap_get_PointerTott__LocationEntity(struct soap*, tt__LocationEntity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__StorageConfigurationData_DEFINED
#define SOAP_TYPE_PointerTotds__StorageConfigurationData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__StorageConfigurationData(struct soap*, const char *, int, tds__StorageConfigurationData *const*, const char *);
SOAP_FMAC3 tds__StorageConfigurationData ** SOAP_FMAC4 soap_in_PointerTotds__StorageConfigurationData(struct soap*, const char*, tds__StorageConfigurationData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData *const*, const char*, const char*);
SOAP_FMAC3 tds__StorageConfigurationData ** SOAP_FMAC4 soap_get_PointerTotds__StorageConfigurationData(struct soap*, tds__StorageConfigurationData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__StorageConfiguration_DEFINED
#define SOAP_TYPE_PointerTotds__StorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__StorageConfiguration(struct soap*, tds__StorageConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__StorageConfiguration(struct soap*, const char *, int, tds__StorageConfiguration *const*, const char *);
SOAP_FMAC3 tds__StorageConfiguration ** SOAP_FMAC4 soap_in_PointerTotds__StorageConfiguration(struct soap*, const char*, tds__StorageConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__StorageConfiguration(struct soap*, tds__StorageConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tds__StorageConfiguration ** SOAP_FMAC4 soap_get_PointerTotds__StorageConfiguration(struct soap*, tds__StorageConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension_DEFINED
#define SOAP_TYPE_PointerTo_tds__GetSystemUrisResponse_Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, const char *, int, _tds__GetSystemUrisResponse_Extension *const*, const char *);
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension ** SOAP_FMAC4 soap_in_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, const char*, _tds__GetSystemUrisResponse_Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension *const*, const char*, const char*);
SOAP_FMAC3 _tds__GetSystemUrisResponse_Extension ** SOAP_FMAC4 soap_get_PointerTo_tds__GetSystemUrisResponse_Extension(struct soap*, _tds__GetSystemUrisResponse_Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemLogUriList_DEFINED
#define SOAP_TYPE_PointerTott__SystemLogUriList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemLogUriList(struct soap*, tt__SystemLogUriList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemLogUriList(struct soap*, const char *, int, tt__SystemLogUriList *const*, const char *);
SOAP_FMAC3 tt__SystemLogUriList ** SOAP_FMAC4 soap_in_PointerTott__SystemLogUriList(struct soap*, const char*, tt__SystemLogUriList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemLogUriList(struct soap*, tt__SystemLogUriList *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemLogUriList ** SOAP_FMAC4 soap_get_PointerTott__SystemLogUriList(struct soap*, tt__SystemLogUriList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworks_DEFINED
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11AvailableNetworks(struct soap*, const char *, int, tt__Dot11AvailableNetworks *const*, const char *);
SOAP_FMAC3 tt__Dot11AvailableNetworks ** SOAP_FMAC4 soap_in_PointerTott__Dot11AvailableNetworks(struct soap*, const char*, tt__Dot11AvailableNetworks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworks ** SOAP_FMAC4 soap_get_PointerTott__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Status_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Status_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Status(struct soap*, tt__Dot11Status *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Status(struct soap*, const char *, int, tt__Dot11Status *const*, const char *);
SOAP_FMAC3 tt__Dot11Status ** SOAP_FMAC4 soap_in_PointerTott__Dot11Status(struct soap*, const char*, tt__Dot11Status **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Status(struct soap*, tt__Dot11Status *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11Status ** SOAP_FMAC4 soap_get_PointerTott__Dot11Status(struct soap*, tt__Dot11Status **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot11Capabilities_DEFINED
#define SOAP_TYPE_PointerTott__Dot11Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Capabilities(struct soap*, tt__Dot11Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Capabilities(struct soap*, const char *, int, tt__Dot11Capabilities *const*, const char *);
SOAP_FMAC3 tt__Dot11Capabilities ** SOAP_FMAC4 soap_in_PointerTott__Dot11Capabilities(struct soap*, const char*, tt__Dot11Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Capabilities(struct soap*, tt__Dot11Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot11Capabilities ** SOAP_FMAC4 soap_get_PointerTott__Dot11Capabilities(struct soap*, tt__Dot11Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AuxiliaryData_DEFINED
#define SOAP_TYPE_PointerTott__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AuxiliaryData(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AuxiliaryData(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__AuxiliaryData(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AuxiliaryData(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__AuxiliaryData(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RelayOutputSettings_DEFINED
#define SOAP_TYPE_PointerTott__RelayOutputSettings_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelayOutputSettings(struct soap*, const char *, int, tt__RelayOutputSettings *const*, const char *);
SOAP_FMAC3 tt__RelayOutputSettings ** SOAP_FMAC4 soap_in_PointerTott__RelayOutputSettings(struct soap*, const char*, tt__RelayOutputSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *const*, const char*, const char*);
SOAP_FMAC3 tt__RelayOutputSettings ** SOAP_FMAC4 soap_get_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RelayOutput_DEFINED
#define SOAP_TYPE_PointerTott__RelayOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelayOutput(struct soap*, tt__RelayOutput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelayOutput(struct soap*, const char *, int, tt__RelayOutput *const*, const char *);
SOAP_FMAC3 tt__RelayOutput ** SOAP_FMAC4 soap_in_PointerTott__RelayOutput(struct soap*, const char*, tt__RelayOutput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelayOutput(struct soap*, tt__RelayOutput *const*, const char*, const char*);
SOAP_FMAC3 tt__RelayOutput ** SOAP_FMAC4 soap_get_PointerTott__RelayOutput(struct soap*, tt__RelayOutput **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Dot1XConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__Dot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot1XConfiguration(struct soap*, const char *, int, tt__Dot1XConfiguration *const*, const char *);
SOAP_FMAC3 tt__Dot1XConfiguration ** SOAP_FMAC4 soap_in_PointerTott__Dot1XConfiguration(struct soap*, const char*, tt__Dot1XConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__Dot1XConfiguration ** SOAP_FMAC4 soap_get_PointerTott__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateInformation_DEFINED
#define SOAP_TYPE_PointerTott__CertificateInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateInformation(struct soap*, tt__CertificateInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateInformation(struct soap*, const char *, int, tt__CertificateInformation *const*, const char *);
SOAP_FMAC3 tt__CertificateInformation ** SOAP_FMAC4 soap_in_PointerTott__CertificateInformation(struct soap*, const char*, tt__CertificateInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateInformation(struct soap*, tt__CertificateInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateInformation ** SOAP_FMAC4 soap_get_PointerTott__CertificateInformation(struct soap*, tt__CertificateInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_PointerTott__CertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateWithPrivateKey(struct soap*, const char *, int, tt__CertificateWithPrivateKey *const*, const char *);
SOAP_FMAC3 tt__CertificateWithPrivateKey ** SOAP_FMAC4 soap_in_PointerTott__CertificateWithPrivateKey(struct soap*, const char*, tt__CertificateWithPrivateKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateWithPrivateKey ** SOAP_FMAC4 soap_get_PointerTott__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__CertificateStatus_DEFINED
#define SOAP_TYPE_PointerTott__CertificateStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateStatus(struct soap*, tt__CertificateStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateStatus(struct soap*, const char *, int, tt__CertificateStatus *const*, const char *);
SOAP_FMAC3 tt__CertificateStatus ** SOAP_FMAC4 soap_in_PointerTott__CertificateStatus(struct soap*, const char*, tt__CertificateStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateStatus(struct soap*, tt__CertificateStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__CertificateStatus ** SOAP_FMAC4 soap_get_PointerTott__CertificateStatus(struct soap*, tt__CertificateStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Certificate_DEFINED
#define SOAP_TYPE_PointerTott__Certificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Certificate(struct soap*, tt__Certificate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Certificate(struct soap*, const char *, int, tt__Certificate *const*, const char *);
SOAP_FMAC3 tt__Certificate ** SOAP_FMAC4 soap_in_PointerTott__Certificate(struct soap*, const char*, tt__Certificate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Certificate(struct soap*, tt__Certificate *const*, const char*, const char*);
SOAP_FMAC3 tt__Certificate ** SOAP_FMAC4 soap_get_PointerTott__Certificate(struct soap*, tt__Certificate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__token_DEFINED
#define SOAP_TYPE_PointerToxsd__token_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__token(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__token(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__token(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__token(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__token(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BinaryData_DEFINED
#define SOAP_TYPE_PointerTott__BinaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BinaryData(struct soap*, tt__BinaryData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BinaryData(struct soap*, const char *, int, tt__BinaryData *const*, const char *);
SOAP_FMAC3 tt__BinaryData ** SOAP_FMAC4 soap_in_PointerTott__BinaryData(struct soap*, const char*, tt__BinaryData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BinaryData(struct soap*, tt__BinaryData *const*, const char*, const char*);
SOAP_FMAC3 tt__BinaryData ** SOAP_FMAC4 soap_get_PointerTott__BinaryData(struct soap*, tt__BinaryData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPAddressFilter_DEFINED
#define SOAP_TYPE_PointerTott__IPAddressFilter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddressFilter(struct soap*, tt__IPAddressFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddressFilter(struct soap*, const char *, int, tt__IPAddressFilter *const*, const char *);
SOAP_FMAC3 tt__IPAddressFilter ** SOAP_FMAC4 soap_in_PointerTott__IPAddressFilter(struct soap*, const char*, tt__IPAddressFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddressFilter(struct soap*, tt__IPAddressFilter *const*, const char*, const char*);
SOAP_FMAC3 tt__IPAddressFilter ** SOAP_FMAC4 soap_get_PointerTott__IPAddressFilter(struct soap*, tt__IPAddressFilter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__NetworkZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfiguration(struct soap*, const char *, int, tt__NetworkZeroConfiguration *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfiguration(struct soap*, const char*, tt__NetworkZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkGateway_DEFINED
#define SOAP_TYPE_PointerTott__NetworkGateway_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkGateway(struct soap*, tt__NetworkGateway *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkGateway(struct soap*, const char *, int, tt__NetworkGateway *const*, const char *);
SOAP_FMAC3 tt__NetworkGateway ** SOAP_FMAC4 soap_in_PointerTott__NetworkGateway(struct soap*, const char*, tt__NetworkGateway **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkGateway(struct soap*, tt__NetworkGateway *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkGateway ** SOAP_FMAC4 soap_get_PointerTott__NetworkGateway(struct soap*, tt__NetworkGateway **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkProtocol_DEFINED
#define SOAP_TYPE_PointerTott__NetworkProtocol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkProtocol(struct soap*, tt__NetworkProtocol *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkProtocol(struct soap*, const char *, int, tt__NetworkProtocol *const*, const char *);
SOAP_FMAC3 tt__NetworkProtocol ** SOAP_FMAC4 soap_in_PointerTott__NetworkProtocol(struct soap*, const char*, tt__NetworkProtocol **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkProtocol(struct soap*, tt__NetworkProtocol *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkProtocol ** SOAP_FMAC4 soap_get_PointerTott__NetworkProtocol(struct soap*, tt__NetworkProtocol **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkInterface_DEFINED
#define SOAP_TYPE_PointerTott__NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterface(struct soap*, tt__NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterface(struct soap*, const char *, int, tt__NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterface(struct soap*, const char*, tt__NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterface(struct soap*, tt__NetworkInterface *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterface(struct soap*, tt__NetworkInterface **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DNSName_DEFINED
#define SOAP_TYPE_PointerTott__DNSName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__DNSName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSName(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__DNSName(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformation_DEFINED
#define SOAP_TYPE_PointerTott__DynamicDNSInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DynamicDNSInformation(struct soap*, const char *, int, tt__DynamicDNSInformation *const*, const char *);
SOAP_FMAC3 tt__DynamicDNSInformation ** SOAP_FMAC4 soap_in_PointerTott__DynamicDNSInformation(struct soap*, const char*, tt__DynamicDNSInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__DynamicDNSInformation ** SOAP_FMAC4 soap_get_PointerTott__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NTPInformation_DEFINED
#define SOAP_TYPE_PointerTott__NTPInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NTPInformation(struct soap*, tt__NTPInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NTPInformation(struct soap*, const char *, int, tt__NTPInformation *const*, const char *);
SOAP_FMAC3 tt__NTPInformation ** SOAP_FMAC4 soap_in_PointerTott__NTPInformation(struct soap*, const char*, tt__NTPInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NTPInformation(struct soap*, tt__NTPInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__NTPInformation ** SOAP_FMAC4 soap_get_PointerTott__NTPInformation(struct soap*, tt__NTPInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IPAddress_DEFINED
#define SOAP_TYPE_PointerTott__IPAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddress(struct soap*, const char *, int, tt__IPAddress *const*, const char *);
SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_in_PointerTott__IPAddress(struct soap*, const char*, tt__IPAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*, const char*, const char*);
SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_get_PointerTott__IPAddress(struct soap*, tt__IPAddress **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DNSInformation_DEFINED
#define SOAP_TYPE_PointerTott__DNSInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSInformation(struct soap*, tt__DNSInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSInformation(struct soap*, const char *, int, tt__DNSInformation *const*, const char *);
SOAP_FMAC3 tt__DNSInformation ** SOAP_FMAC4 soap_in_PointerTott__DNSInformation(struct soap*, const char*, tt__DNSInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSInformation(struct soap*, tt__DNSInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__DNSInformation ** SOAP_FMAC4 soap_get_PointerTott__DNSInformation(struct soap*, tt__DNSInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__HostnameInformation_DEFINED
#define SOAP_TYPE_PointerTott__HostnameInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__HostnameInformation(struct soap*, tt__HostnameInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__HostnameInformation(struct soap*, const char *, int, tt__HostnameInformation *const*, const char *);
SOAP_FMAC3 tt__HostnameInformation ** SOAP_FMAC4 soap_in_PointerTott__HostnameInformation(struct soap*, const char*, tt__HostnameInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__HostnameInformation(struct soap*, tt__HostnameInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__HostnameInformation ** SOAP_FMAC4 soap_get_PointerTott__HostnameInformation(struct soap*, tt__HostnameInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Capabilities_DEFINED
#define SOAP_TYPE_PointerTott__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Capabilities(struct soap*, tt__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Capabilities(struct soap*, const char *, int, tt__Capabilities *const*, const char *);
SOAP_FMAC3 tt__Capabilities ** SOAP_FMAC4 soap_in_PointerTott__Capabilities(struct soap*, const char*, tt__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Capabilities(struct soap*, tt__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tt__Capabilities ** SOAP_FMAC4 soap_get_PointerTott__Capabilities(struct soap*, tt__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRange_DEFINED
#define SOAP_TYPE_PointerTott__IntRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRange(struct soap*, tt__IntRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRange(struct soap*, const char *, int, tt__IntRange *const*, const char *);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_in_PointerTott__IntRange(struct soap*, const char*, tt__IntRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRange(struct soap*, tt__IntRange *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_get_PointerTott__IntRange(struct soap*, tt__IntRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__User_DEFINED
#define SOAP_TYPE_PointerTott__User_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__User(struct soap*, tt__User *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__User(struct soap*, const char *, int, tt__User *const*, const char *);
SOAP_FMAC3 tt__User ** SOAP_FMAC4 soap_in_PointerTott__User(struct soap*, const char*, tt__User **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__User(struct soap*, tt__User *const*, const char*, const char*);
SOAP_FMAC3 tt__User ** SOAP_FMAC4 soap_get_PointerTott__User(struct soap*, tt__User **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__RemoteUser_DEFINED
#define SOAP_TYPE_PointerTott__RemoteUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RemoteUser(struct soap*, tt__RemoteUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RemoteUser(struct soap*, const char *, int, tt__RemoteUser *const*, const char *);
SOAP_FMAC3 tt__RemoteUser ** SOAP_FMAC4 soap_in_PointerTott__RemoteUser(struct soap*, const char*, tt__RemoteUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RemoteUser(struct soap*, tt__RemoteUser *const*, const char*, const char*);
SOAP_FMAC3 tt__RemoteUser ** SOAP_FMAC4 soap_get_PointerTott__RemoteUser(struct soap*, tt__RemoteUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__NetworkHost_DEFINED
#define SOAP_TYPE_PointerTott__NetworkHost_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkHost(struct soap*, tt__NetworkHost *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkHost(struct soap*, const char *, int, tt__NetworkHost *const*, const char *);
SOAP_FMAC3 tt__NetworkHost ** SOAP_FMAC4 soap_in_PointerTott__NetworkHost(struct soap*, const char*, tt__NetworkHost **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkHost(struct soap*, tt__NetworkHost *const*, const char*, const char*);
SOAP_FMAC3 tt__NetworkHost ** SOAP_FMAC4 soap_get_PointerTott__NetworkHost(struct soap*, tt__NetworkHost **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Scope_DEFINED
#define SOAP_TYPE_PointerTott__Scope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Scope(struct soap*, tt__Scope *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Scope(struct soap*, const char *, int, tt__Scope *const*, const char *);
SOAP_FMAC3 tt__Scope ** SOAP_FMAC4 soap_in_PointerTott__Scope(struct soap*, const char*, tt__Scope **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Scope(struct soap*, tt__Scope *const*, const char*, const char*);
SOAP_FMAC3 tt__Scope ** SOAP_FMAC4 soap_get_PointerTott__Scope(struct soap*, tt__Scope **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemLog_DEFINED
#define SOAP_TYPE_PointerTott__SystemLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemLog(struct soap*, tt__SystemLog *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemLog(struct soap*, const char *, int, tt__SystemLog *const*, const char *);
SOAP_FMAC3 tt__SystemLog ** SOAP_FMAC4 soap_in_PointerTott__SystemLog(struct soap*, const char*, tt__SystemLog **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemLog(struct soap*, tt__SystemLog *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemLog ** SOAP_FMAC4 soap_get_PointerTott__SystemLog(struct soap*, tt__SystemLog **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SupportInformation_DEFINED
#define SOAP_TYPE_PointerTott__SupportInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SupportInformation(struct soap*, tt__SupportInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SupportInformation(struct soap*, const char *, int, tt__SupportInformation *const*, const char *);
SOAP_FMAC3 tt__SupportInformation ** SOAP_FMAC4 soap_in_PointerTott__SupportInformation(struct soap*, const char*, tt__SupportInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SupportInformation(struct soap*, tt__SupportInformation *const*, const char*, const char*);
SOAP_FMAC3 tt__SupportInformation ** SOAP_FMAC4 soap_get_PointerTott__SupportInformation(struct soap*, tt__SupportInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__BackupFile_DEFINED
#define SOAP_TYPE_PointerTott__BackupFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BackupFile(struct soap*, tt__BackupFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BackupFile(struct soap*, const char *, int, tt__BackupFile *const*, const char *);
SOAP_FMAC3 tt__BackupFile ** SOAP_FMAC4 soap_in_PointerTott__BackupFile(struct soap*, const char*, tt__BackupFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BackupFile(struct soap*, tt__BackupFile *const*, const char*, const char*);
SOAP_FMAC3 tt__BackupFile ** SOAP_FMAC4 soap_get_PointerTott__BackupFile(struct soap*, tt__BackupFile **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__AttachmentData_DEFINED
#define SOAP_TYPE_PointerTott__AttachmentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AttachmentData(struct soap*, tt__AttachmentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AttachmentData(struct soap*, const char *, int, tt__AttachmentData *const*, const char *);
SOAP_FMAC3 tt__AttachmentData ** SOAP_FMAC4 soap_in_PointerTott__AttachmentData(struct soap*, const char*, tt__AttachmentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AttachmentData(struct soap*, tt__AttachmentData *const*, const char*, const char*);
SOAP_FMAC3 tt__AttachmentData ** SOAP_FMAC4 soap_get_PointerTott__AttachmentData(struct soap*, tt__AttachmentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__SystemDateTime_DEFINED
#define SOAP_TYPE_PointerTott__SystemDateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemDateTime(struct soap*, tt__SystemDateTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemDateTime(struct soap*, const char *, int, tt__SystemDateTime *const*, const char *);
SOAP_FMAC3 tt__SystemDateTime ** SOAP_FMAC4 soap_in_PointerTott__SystemDateTime(struct soap*, const char*, tt__SystemDateTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemDateTime(struct soap*, tt__SystemDateTime *const*, const char*, const char*);
SOAP_FMAC3 tt__SystemDateTime ** SOAP_FMAC4 soap_get_PointerTott__SystemDateTime(struct soap*, tt__SystemDateTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DateTime_DEFINED
#define SOAP_TYPE_PointerTott__DateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DateTime(struct soap*, tt__DateTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DateTime(struct soap*, const char *, int, tt__DateTime *const*, const char *);
SOAP_FMAC3 tt__DateTime ** SOAP_FMAC4 soap_in_PointerTott__DateTime(struct soap*, const char*, tt__DateTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DateTime(struct soap*, tt__DateTime *const*, const char*, const char*);
SOAP_FMAC3 tt__DateTime ** SOAP_FMAC4 soap_get_PointerTott__DateTime(struct soap*, tt__DateTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__TimeZone_DEFINED
#define SOAP_TYPE_PointerTott__TimeZone_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TimeZone(struct soap*, tt__TimeZone *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TimeZone(struct soap*, const char *, int, tt__TimeZone *const*, const char *);
SOAP_FMAC3 tt__TimeZone ** SOAP_FMAC4 soap_in_PointerTott__TimeZone(struct soap*, const char*, tt__TimeZone **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TimeZone(struct soap*, tt__TimeZone *const*, const char*, const char*);
SOAP_FMAC3 tt__TimeZone ** SOAP_FMAC4 soap_get_PointerTott__TimeZone(struct soap*, tt__TimeZone **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__DeviceServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__DeviceServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__DeviceServiceCapabilities(struct soap*, const char *, int, tds__DeviceServiceCapabilities *const*, const char *);
SOAP_FMAC3 tds__DeviceServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__DeviceServiceCapabilities(struct soap*, const char*, tds__DeviceServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__DeviceServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__DeviceServiceCapabilities(struct soap*, tds__DeviceServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__Service_DEFINED
#define SOAP_TYPE_PointerTotds__Service_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__Service(struct soap*, tds__Service *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__Service(struct soap*, const char *, int, tds__Service *const*, const char *);
SOAP_FMAC3 tds__Service ** SOAP_FMAC4 soap_in_PointerTotds__Service(struct soap*, const char*, tds__Service **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__Service(struct soap*, tds__Service *const*, const char*, const char*);
SOAP_FMAC3 tds__Service ** SOAP_FMAC4 soap_get_PointerTotds__Service(struct soap*, tds__Service **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension_DEFINED
#define SOAP_TYPE_PointerTo_tds__StorageConfigurationData_Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, const char *, int, _tds__StorageConfigurationData_Extension *const*, const char *);
SOAP_FMAC3 _tds__StorageConfigurationData_Extension ** SOAP_FMAC4 soap_in_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, const char*, _tds__StorageConfigurationData_Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension *const*, const char*, const char*);
SOAP_FMAC3 _tds__StorageConfigurationData_Extension ** SOAP_FMAC4 soap_get_PointerTo_tds__StorageConfigurationData_Extension(struct soap*, _tds__StorageConfigurationData_Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__UserCredential_DEFINED
#define SOAP_TYPE_PointerTotds__UserCredential_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__UserCredential(struct soap*, tds__UserCredential *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__UserCredential(struct soap*, const char *, int, tds__UserCredential *const*, const char *);
SOAP_FMAC3 tds__UserCredential ** SOAP_FMAC4 soap_in_PointerTotds__UserCredential(struct soap*, const char*, tds__UserCredential **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__UserCredential(struct soap*, tds__UserCredential *const*, const char*, const char*);
SOAP_FMAC3 tds__UserCredential ** SOAP_FMAC4 soap_get_PointerTotds__UserCredential(struct soap*, tds__UserCredential **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__UserCredential_Extension_DEFINED
#define SOAP_TYPE_PointerTo_tds__UserCredential_Extension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__UserCredential_Extension(struct soap*, const char *, int, _tds__UserCredential_Extension *const*, const char *);
SOAP_FMAC3 _tds__UserCredential_Extension ** SOAP_FMAC4 soap_in_PointerTo_tds__UserCredential_Extension(struct soap*, const char*, _tds__UserCredential_Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension *const*, const char*, const char*);
SOAP_FMAC3 _tds__UserCredential_Extension ** SOAP_FMAC4 soap_get_PointerTo_tds__UserCredential_Extension(struct soap*, _tds__UserCredential_Extension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StringAttrList_DEFINED
#define SOAP_TYPE_PointerTott__StringAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StringAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StringAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__StringAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StringAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__StringAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__StringList_DEFINED
#define SOAP_TYPE_PointerTott__StringList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StringList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StringList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__StringList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StringList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__StringList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntList_DEFINED
#define SOAP_TYPE_PointerTott__IntList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IntList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IntList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__MiscCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__MiscCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__MiscCapabilities(struct soap*, tds__MiscCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__MiscCapabilities(struct soap*, const char *, int, tds__MiscCapabilities *const*, const char *);
SOAP_FMAC3 tds__MiscCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__MiscCapabilities(struct soap*, const char*, tds__MiscCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__MiscCapabilities(struct soap*, tds__MiscCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__MiscCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__MiscCapabilities(struct soap*, tds__MiscCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__SystemCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__SystemCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__SystemCapabilities(struct soap*, tds__SystemCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__SystemCapabilities(struct soap*, const char *, int, tds__SystemCapabilities *const*, const char *);
SOAP_FMAC3 tds__SystemCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__SystemCapabilities(struct soap*, const char*, tds__SystemCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__SystemCapabilities(struct soap*, tds__SystemCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__SystemCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__SystemCapabilities(struct soap*, tds__SystemCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__SecurityCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__SecurityCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__SecurityCapabilities(struct soap*, const char *, int, tds__SecurityCapabilities *const*, const char *);
SOAP_FMAC3 tds__SecurityCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__SecurityCapabilities(struct soap*, const char*, tds__SecurityCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__SecurityCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__SecurityCapabilities(struct soap*, tds__SecurityCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotds__NetworkCapabilities_DEFINED
#define SOAP_TYPE_PointerTotds__NetworkCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotds__NetworkCapabilities(struct soap*, const char *, int, tds__NetworkCapabilities *const*, const char *);
SOAP_FMAC3 tds__NetworkCapabilities ** SOAP_FMAC4 soap_in_PointerTotds__NetworkCapabilities(struct soap*, const char*, tds__NetworkCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities *const*, const char*, const char*);
SOAP_FMAC3 tds__NetworkCapabilities ** SOAP_FMAC4 soap_get_PointerTotds__NetworkCapabilities(struct soap*, tds__NetworkCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__OnvifVersion_DEFINED
#define SOAP_TYPE_PointerTott__OnvifVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OnvifVersion(struct soap*, const char *, int, tt__OnvifVersion *const*, const char *);
SOAP_FMAC3 tt__OnvifVersion ** SOAP_FMAC4 soap_in_PointerTott__OnvifVersion(struct soap*, const char*, tt__OnvifVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion *const*, const char*, const char*);
SOAP_FMAC3 tt__OnvifVersion ** SOAP_FMAC4 soap_get_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tds__Service_Capabilities_DEFINED
#define SOAP_TYPE_PointerTo_tds__Service_Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tds__Service_Capabilities(struct soap*, const char *, int, _tds__Service_Capabilities *const*, const char *);
SOAP_FMAC3 _tds__Service_Capabilities ** SOAP_FMAC4 soap_in_PointerTo_tds__Service_Capabilities(struct soap*, const char*, _tds__Service_Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities *const*, const char*, const char*);
SOAP_FMAC3 _tds__Service_Capabilities ** SOAP_FMAC4 soap_get_PointerTo_tds__Service_Capabilities(struct soap*, _tds__Service_Capabilities **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Header(struct soap*, const char *, int, struct SOAP_ENV__Header *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemIRI(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__ProblemIRI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_PATCH__wsa5__ProblemHeaderQName soap_PATCH__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Action(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__Action(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__To(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__To(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__MessageID(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__MessageID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, std::vector<tt__SystemLogUri *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const std::vector<tt__SystemLogUri *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const char*, int, const std::vector<tt__SystemLogUri *> *, const char*);
SOAP_FMAC3 std::vector<tt__SystemLogUri *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const char*, std::vector<tt__SystemLogUri *> *, const char*);
SOAP_FMAC1 std::vector<tt__SystemLogUri *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__SystemLogUri *>  * soap_new_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__SystemLogUri(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, std::vector<tt__OnvifVersion *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const std::vector<tt__OnvifVersion *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const char*, int, const std::vector<tt__OnvifVersion *> *, const char*);
SOAP_FMAC3 std::vector<tt__OnvifVersion *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const char*, std::vector<tt__OnvifVersion *> *, const char*);
SOAP_FMAC1 std::vector<tt__OnvifVersion *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__OnvifVersion *>  * soap_new_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__OnvifVersion(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AuxiliaryData(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__AuxiliaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Dot11Cipher(struct soap*, std::vector<enum tt__Dot11Cipher> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const std::vector<enum tt__Dot11Cipher> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const char*, int, const std::vector<enum tt__Dot11Cipher> *, const char*);
SOAP_FMAC3 std::vector<enum tt__Dot11Cipher> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const char*, std::vector<enum tt__Dot11Cipher> *, const char*);
SOAP_FMAC1 std::vector<enum tt__Dot11Cipher>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Dot11Cipher(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Dot11Cipher>  * soap_new_std__vectorTemplateOftt__Dot11Cipher(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__Dot11Cipher(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, std::vector<enum tt__Dot11AuthAndMangementSuite> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const std::vector<enum tt__Dot11AuthAndMangementSuite> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const std::vector<enum tt__Dot11AuthAndMangementSuite> *, const char*);
SOAP_FMAC3 std::vector<enum tt__Dot11AuthAndMangementSuite> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const char*, std::vector<enum tt__Dot11AuthAndMangementSuite> *, const char*);
SOAP_FMAC1 std::vector<enum tt__Dot11AuthAndMangementSuite>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Dot11AuthAndMangementSuite>  * soap_new_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, std::vector<tt__NetworkZeroConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const std::vector<tt__NetworkZeroConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const char*, int, const std::vector<tt__NetworkZeroConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkZeroConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const char*, std::vector<tt__NetworkZeroConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkZeroConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkZeroConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfint_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int> *, const char*);
SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int> *, const char*);
SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int>  * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, std::vector<tt__PrefixedIPv6Address *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const std::vector<tt__PrefixedIPv6Address *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const char*, int, const std::vector<tt__PrefixedIPv6Address *> *, const char*);
SOAP_FMAC3 std::vector<tt__PrefixedIPv6Address *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const char*, std::vector<tt__PrefixedIPv6Address *> *, const char*);
SOAP_FMAC1 std::vector<tt__PrefixedIPv6Address *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PrefixedIPv6Address *>  * soap_new_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, std::vector<tt__PrefixedIPv4Address *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const std::vector<tt__PrefixedIPv4Address *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const char*, int, const std::vector<tt__PrefixedIPv4Address *> *, const char*);
SOAP_FMAC3 std::vector<tt__PrefixedIPv4Address *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const char*, std::vector<tt__PrefixedIPv4Address *> *, const char*);
SOAP_FMAC1 std::vector<tt__PrefixedIPv4Address *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PrefixedIPv4Address *>  * soap_new_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, std::vector<tt__Dot11Configuration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const std::vector<tt__Dot11Configuration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const char*, int, const std::vector<tt__Dot11Configuration *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot11Configuration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const char*, std::vector<tt__Dot11Configuration *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot11Configuration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot11Configuration *>  * soap_new_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot11Configuration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, std::vector<tt__Dot3Configuration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const std::vector<tt__Dot3Configuration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const char*, int, const std::vector<tt__Dot3Configuration *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot3Configuration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const char*, std::vector<tt__Dot3Configuration *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot3Configuration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot3Configuration *>  * soap_new_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot3Configuration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LocationEntity_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LocationEntity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__LocationEntity(struct soap*, std::vector<tt__LocationEntity *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__LocationEntity(struct soap*, const std::vector<tt__LocationEntity *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__LocationEntity(struct soap*, const char*, int, const std::vector<tt__LocationEntity *> *, const char*);
SOAP_FMAC3 std::vector<tt__LocationEntity *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__LocationEntity(struct soap*, const char*, std::vector<tt__LocationEntity *> *, const char*);
SOAP_FMAC1 std::vector<tt__LocationEntity *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__LocationEntity(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__LocationEntity *>  * soap_new_std__vectorTemplateOfPointerTott__LocationEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__LocationEntity(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTotds__StorageConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, std::vector<tds__StorageConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, const std::vector<tds__StorageConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, const char*, int, const std::vector<tds__StorageConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tds__StorageConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, const char*, std::vector<tds__StorageConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tds__StorageConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tds__StorageConfiguration *>  * soap_new_std__vectorTemplateOfPointerTotds__StorageConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTotds__StorageConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, std::vector<tt__Dot11AvailableNetworks *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, const std::vector<tt__Dot11AvailableNetworks *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, const char*, int, const std::vector<tt__Dot11AvailableNetworks *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot11AvailableNetworks *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, const char*, std::vector<tt__Dot11AvailableNetworks *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot11AvailableNetworks *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot11AvailableNetworks *>  * soap_new_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot11AvailableNetworks(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RelayOutput_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, std::vector<tt__RelayOutput *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, const std::vector<tt__RelayOutput *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, const char*, int, const std::vector<tt__RelayOutput *> *, const char*);
SOAP_FMAC3 std::vector<tt__RelayOutput *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, const char*, std::vector<tt__RelayOutput *> *, const char*);
SOAP_FMAC1 std::vector<tt__RelayOutput *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RelayOutput(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RelayOutput *>  * soap_new_std__vectorTemplateOfPointerTott__RelayOutput(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__RelayOutput(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReferenceToken(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReferenceToken(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReferenceToken(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__ReferenceToken(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReferenceToken(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot1XConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, std::vector<tt__Dot1XConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, const std::vector<tt__Dot1XConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, const char*, int, const std::vector<tt__Dot1XConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__Dot1XConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, const char*, std::vector<tt__Dot1XConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__Dot1XConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot1XConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__Dot1XConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Dot1XConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, std::vector<tt__CertificateWithPrivateKey *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, const std::vector<tt__CertificateWithPrivateKey *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, const char*, int, const std::vector<tt__CertificateWithPrivateKey *> *, const char*);
SOAP_FMAC3 std::vector<tt__CertificateWithPrivateKey *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, const char*, std::vector<tt__CertificateWithPrivateKey *> *, const char*);
SOAP_FMAC1 std::vector<tt__CertificateWithPrivateKey *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__CertificateWithPrivateKey *>  * soap_new_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__CertificateWithPrivateKey(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__CertificateStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, std::vector<tt__CertificateStatus *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, const std::vector<tt__CertificateStatus *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, const char*, int, const std::vector<tt__CertificateStatus *> *, const char*);
SOAP_FMAC3 std::vector<tt__CertificateStatus *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, const char*, std::vector<tt__CertificateStatus *> *, const char*);
SOAP_FMAC1 std::vector<tt__CertificateStatus *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__CertificateStatus *>  * soap_new_std__vectorTemplateOfPointerTott__CertificateStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__CertificateStatus(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Certificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Certificate(struct soap*, std::vector<tt__Certificate *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Certificate(struct soap*, const std::vector<tt__Certificate *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Certificate(struct soap*, const char*, int, const std::vector<tt__Certificate *> *, const char*);
SOAP_FMAC3 std::vector<tt__Certificate *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Certificate(struct soap*, const char*, std::vector<tt__Certificate *> *, const char*);
SOAP_FMAC1 std::vector<tt__Certificate *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Certificate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Certificate *>  * soap_new_std__vectorTemplateOfPointerTott__Certificate(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Certificate(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv6Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__IPv6Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IPv6Address(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IPv6Address(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IPv6Address(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IPv6Address(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__IPv6Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__IPv6Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv4Address_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__IPv4Address_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IPv4Address(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IPv4Address(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IPv4Address(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IPv4Address(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__IPv4Address(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__IPv4Address(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkProtocol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, std::vector<tt__NetworkProtocol *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, const std::vector<tt__NetworkProtocol *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, const char*, int, const std::vector<tt__NetworkProtocol *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkProtocol *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, const char*, std::vector<tt__NetworkProtocol *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkProtocol *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkProtocol *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkProtocol(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkProtocol(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkInterface_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, std::vector<tt__NetworkInterface *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, const std::vector<tt__NetworkInterface *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, const char*, int, const std::vector<tt__NetworkInterface *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkInterface *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, const char*, std::vector<tt__NetworkInterface *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkInterface *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkInterface *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkInterface(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkInterface(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, std::vector<tt__IPAddress *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const std::vector<tt__IPAddress *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const char*, int, const std::vector<tt__IPAddress *> *, const char*);
SOAP_FMAC3 std::vector<tt__IPAddress *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const char*, std::vector<tt__IPAddress *> *, const char*);
SOAP_FMAC1 std::vector<tt__IPAddress *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__IPAddress *>  * soap_new_std__vectorTemplateOfPointerTott__IPAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__IPAddress(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__token_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__token_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__token(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__token(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__token(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__token(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__token(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__token(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__token(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__CapabilityCategory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__CapabilityCategory(struct soap*, std::vector<enum tt__CapabilityCategory> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__CapabilityCategory(struct soap*, const std::vector<enum tt__CapabilityCategory> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__CapabilityCategory(struct soap*, const char*, int, const std::vector<enum tt__CapabilityCategory> *, const char*);
SOAP_FMAC3 std::vector<enum tt__CapabilityCategory> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__CapabilityCategory(struct soap*, const char*, std::vector<enum tt__CapabilityCategory> *, const char*);
SOAP_FMAC1 std::vector<enum tt__CapabilityCategory>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__CapabilityCategory(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__CapabilityCategory>  * soap_new_std__vectorTemplateOftt__CapabilityCategory(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__CapabilityCategory(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__User_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__User_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__User(struct soap*, std::vector<tt__User *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__User(struct soap*, const std::vector<tt__User *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__User(struct soap*, const char*, int, const std::vector<tt__User *> *, const char*);
SOAP_FMAC3 std::vector<tt__User *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__User(struct soap*, const char*, std::vector<tt__User *> *, const char*);
SOAP_FMAC1 std::vector<tt__User *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__User(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__User *>  * soap_new_std__vectorTemplateOfPointerTott__User(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__User(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, std::vector<tt__NetworkHost *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const std::vector<tt__NetworkHost *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const char*, int, const std::vector<tt__NetworkHost *> *, const char*);
SOAP_FMAC3 std::vector<tt__NetworkHost *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const char*, std::vector<tt__NetworkHost *> *, const char*);
SOAP_FMAC1 std::vector<tt__NetworkHost *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkHost *>  * soap_new_std__vectorTemplateOfPointerTott__NetworkHost(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkHost(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Scope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Scope(struct soap*, std::vector<tt__Scope *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Scope(struct soap*, const std::vector<tt__Scope *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Scope(struct soap*, const char*, int, const std::vector<tt__Scope *> *, const char*);
SOAP_FMAC3 std::vector<tt__Scope *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Scope(struct soap*, const char*, std::vector<tt__Scope *> *, const char*);
SOAP_FMAC1 std::vector<tt__Scope *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Scope(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Scope *>  * soap_new_std__vectorTemplateOfPointerTott__Scope(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Scope(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__BackupFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, std::vector<tt__BackupFile *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, const std::vector<tt__BackupFile *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, const char*, int, const std::vector<tt__BackupFile *> *, const char*);
SOAP_FMAC3 std::vector<tt__BackupFile *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, const char*, std::vector<tt__BackupFile *> *, const char*);
SOAP_FMAC1 std::vector<tt__BackupFile *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__BackupFile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__BackupFile *>  * soap_new_std__vectorTemplateOfPointerTott__BackupFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__BackupFile(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTotds__Service_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTotds__Service(struct soap*, std::vector<tds__Service *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTotds__Service(struct soap*, const std::vector<tds__Service *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTotds__Service(struct soap*, const char*, int, const std::vector<tds__Service *> *, const char*);
SOAP_FMAC3 std::vector<tds__Service *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTotds__Service(struct soap*, const char*, std::vector<tds__Service *> *, const char*);
SOAP_FMAC1 std::vector<tds__Service *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTotds__Service(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tds__Service *>  * soap_new_std__vectorTemplateOfPointerTotds__Service(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTotds__Service(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
